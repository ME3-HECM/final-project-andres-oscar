

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 13:38:27 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=3
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=3
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=3
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=3
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=3
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=2
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    80                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    81                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    82   000000                     
    83                           ; Generated 21/07/2023 GMT
    84                           ; 
    85                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution. Publication is not required when
    99                           ;        this file is used in an embedded application.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC18F67K40 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117   000000                     
   118                           	psect	idataBANK0
   119   003F22                     __pidataBANK0:
   120                           	callstack 0
   121                           
   122                           ;initializer for _dataFlag
   123   003F22  01                 	db	1
   124   000000                     _TX4REG	set	3812
   125   000000                     _RC4STAbits	set	3815
   126   000000                     _SP4BRGH	set	3814
   127   000000                     _LATFbits	set	3966
   128   000000                     _LATHbits	set	3968
   129   000000                     _TRISFbits	set	3974
   130   000000                     _TRISAbits	set	3969
   131   000000                     _TRISEbits	set	3973
   132   000000                     _TRISGbits	set	3975
   133   000000                     _TRISDbits	set	3972
   134   000000                     _PORTFbits	set	3982
   135   000000                     _SSP2CON2bits	set	3802
   136   000000                     _RX4PPS	set	3605
   137   000000                     _SSP2CLKPPS	set	3612
   138   000000                     _SSP2DATPPS	set	3613
   139   000000                     _ANSELDbits	set	3751
   140   000000                     _SSP2ADD	set	3798
   141   000000                     _SSP2CON1bits	set	3801
   142   000000                     _LATAbits	set	3961
   143   000000                     _LATEbits	set	3965
   144   000000                     _LATGbits	set	3967
   145   000000                     _LATCbits	set	3963
   146   000000                     _LATDbits	set	3964
   147   000000                     _CCPR2H	set	4006
   148   000000                     _CCPR1H	set	4010
   149   000000                     _RC4REG	set	3811
   150   000000                     _SP4BRGL	set	3813
   151   000000                     _TX4STAbits	set	3816
   152   000000                     _BAUD4CONbits	set	3817
   153   000000                     _SSP2CON2	set	3802
   154   000000                     _CCPR4H	set	3873
   155   000000                     _CCPR3H	set	3877
   156   000000                     _SSP2STAT	set	3800
   157   000000                     _ANSELFbits	set	3764
   158   000000                     _SSP2BUF	set	3797
   159   000000                     _PIE4bits	set	3629
   160   000000                     _PIR4bits	set	3639
   161   000000                     _RC0PPS	set	3682
   162   000000                     _RC7PPS	set	3689
   163   000000                     _RD5PPS	set	3695
   164   000000                     _RE2PPS	set	3700
   165   000000                     _RD6PPS	set	3696
   166   000000                     _CCP1CONbits	set	4011
   167   000000                     _CCPTMRS0bits	set	4013
   168   000000                     _T2PR	set	4028
   169   000000                     _T2CONbits	set	4029
   170   000000                     _CCP2CONbits	set	4007
   171   000000                     _CCP3CONbits	set	3878
   172   000000                     _ADREFbits	set	3928
   173   000000                     _CCP4CONbits	set	3874
   174   000000                     _TRISHbits	set	3976
   175   000000                     _TRISCbits	set	3971
   176   000000                     _ADPCH	set	3935
   177   000000                     _ADRESH	set	3940
   178   000000                     _ADCON0bits	set	3936
   179   000000                     _RE4PPS	set	3702
   180   000000                     _RG6PPS	set	3720
   181   000000                     _T2CLKCONbits	set	4031
   182   000000                     _T2HLTbits	set	4030
   183                           
   184                           	psect	smallconst
   185   000E00                     __psmallconst:
   186                           	callstack 0
   187   000E00  00                 	db	0
   188   000E01                     STR_7:
   189                           
   190                           ; BSR set to: 15
   191   000E01  43                 	db	67	;'C'
   192   000E02  61                 	db	97	;'a'
   193   000E03  6C                 	db	108	;'l'
   194   000E04  69                 	db	105	;'i'
   195   000E05  62                 	db	98	;'b'
   196   000E06  72                 	db	114	;'r'
   197   000E07  61                 	db	97	;'a'
   198   000E08  74                 	db	116	;'t'
   199   000E09  69                 	db	105	;'i'
   200   000E0A  6F                 	db	111	;'o'
   201   000E0B  6E                 	db	110	;'n'
   202   000E0C  20                 	db	32
   203   000E0D  73                 	db	115	;'s'
   204   000E0E  74                 	db	116	;'t'
   205   000E0F  61                 	db	97	;'a'
   206   000E10  74                 	db	116	;'t'
   207   000E11  65                 	db	101	;'e'
   208   000E12  20                 	db	32
   209   000E13  3D                 	db	61	;'='
   210   000E14  20                 	db	32
   211   000E15  20                 	db	32
   212   000E16  77                 	db	119	;'w'
   213   000E17  68                 	db	104	;'h'
   214   000E18  69                 	db	105	;'i'
   215   000E19  74                 	db	116	;'t'
   216   000E1A  65                 	db	101	;'e'
   217   000E1B  20                 	db	32
   218   000E1C  6C                 	db	108	;'l'
   219   000E1D  69                 	db	105	;'i'
   220   000E1E  67                 	db	103	;'g'
   221   000E1F  68                 	db	104	;'h'
   222   000E20  74                 	db	116	;'t'
   223   000E21  00                 	db	0
   224   000E22                     STR_3:
   225                           
   226                           ; BSR set to: 15
   227   000E22  43                 	db	67	;'C'
   228   000E23  61                 	db	97	;'a'
   229   000E24  6C                 	db	108	;'l'
   230   000E25  69                 	db	105	;'i'
   231   000E26  62                 	db	98	;'b'
   232   000E27  72                 	db	114	;'r'
   233   000E28  61                 	db	97	;'a'
   234   000E29  74                 	db	116	;'t'
   235   000E2A  69                 	db	105	;'i'
   236   000E2B  6F                 	db	111	;'o'
   237   000E2C  6E                 	db	110	;'n'
   238   000E2D  20                 	db	32
   239   000E2E  73                 	db	115	;'s'
   240   000E2F  74                 	db	116	;'t'
   241   000E30  61                 	db	97	;'a'
   242   000E31  74                 	db	116	;'t'
   243   000E32  65                 	db	101	;'e'
   244   000E33  20                 	db	32
   245   000E34  3D                 	db	61	;'='
   246   000E35  20                 	db	32
   247   000E36  67                 	db	103	;'g'
   248   000E37  72                 	db	114	;'r'
   249   000E38  65                 	db	101	;'e'
   250   000E39  65                 	db	101	;'e'
   251   000E3A  6E                 	db	110	;'n'
   252   000E3B  20                 	db	32
   253   000E3C  0A                 	db	10
   254   000E3D  0D                 	db	13
   255   000E3E  00                 	db	0
   256   000E3F                     STR_5:
   257                           
   258                           ; BSR set to: 15
   259   000E3F  43                 	db	67	;'C'
   260   000E40  61                 	db	97	;'a'
   261   000E41  6C                 	db	108	;'l'
   262   000E42  69                 	db	105	;'i'
   263   000E43  62                 	db	98	;'b'
   264   000E44  72                 	db	114	;'r'
   265   000E45  61                 	db	97	;'a'
   266   000E46  74                 	db	116	;'t'
   267   000E47  69                 	db	105	;'i'
   268   000E48  6F                 	db	111	;'o'
   269   000E49  6E                 	db	110	;'n'
   270   000E4A  20                 	db	32
   271   000E4B  73                 	db	115	;'s'
   272   000E4C  74                 	db	116	;'t'
   273   000E4D  61                 	db	97	;'a'
   274   000E4E  74                 	db	116	;'t'
   275   000E4F  65                 	db	101	;'e'
   276   000E50  3D                 	db	61	;'='
   277   000E51  20                 	db	32
   278   000E52  62                 	db	98	;'b'
   279   000E53  6C                 	db	108	;'l'
   280   000E54  75                 	db	117	;'u'
   281   000E55  65                 	db	101	;'e'
   282   000E56  20                 	db	32
   283   000E57  0A                 	db	10
   284   000E58  0D                 	db	13
   285   000E59  00                 	db	0
   286   000E5A                     STR_9:
   287                           
   288                           ; BSR set to: 15
   289   000E5A  43                 	db	67	;'C'
   290   000E5B  41                 	db	65	;'A'
   291   000E5C  4C                 	db	76	;'L'
   292   000E5D  49                 	db	73	;'I'
   293   000E5E  42                 	db	66	;'B'
   294   000E5F  52                 	db	82	;'R'
   295   000E60  41                 	db	65	;'A'
   296   000E61  54                 	db	84	;'T'
   297   000E62  49                 	db	73	;'I'
   298   000E63  4F                 	db	79	;'O'
   299   000E64  4E                 	db	78	;'N'
   300   000E65  20                 	db	32
   301   000E66  43                 	db	67	;'C'
   302   000E67  4F                 	db	79	;'O'
   303   000E68  4D                 	db	77	;'M'
   304   000E69  50                 	db	80	;'P'
   305   000E6A  4C                 	db	76	;'L'
   306   000E6B  45                 	db	69	;'E'
   307   000E6C  54                 	db	84	;'T'
   308   000E6D  45                 	db	69	;'E'
   309   000E6E  44                 	db	68	;'D'
   310   000E6F  20                 	db	32
   311   000E70  0A                 	db	10
   312   000E71  0D                 	db	13
   313   000E72  00                 	db	0
   314   000E73                     STR_1:
   315                           
   316                           ; BSR set to: 15
   317   000E73  43                 	db	67	;'C'
   318   000E74  61                 	db	97	;'a'
   319   000E75  6C                 	db	108	;'l'
   320   000E76  69                 	db	105	;'i'
   321   000E77  62                 	db	98	;'b'
   322   000E78  72                 	db	114	;'r'
   323   000E79  61                 	db	97	;'a'
   324   000E7A  74                 	db	116	;'t'
   325   000E7B  69                 	db	105	;'i'
   326   000E7C  6F                 	db	111	;'o'
   327   000E7D  6E                 	db	110	;'n'
   328   000E7E  20                 	db	32
   329   000E7F  73                 	db	115	;'s'
   330   000E80  74                 	db	116	;'t'
   331   000E81  61                 	db	97	;'a'
   332   000E82  74                 	db	116	;'t'
   333   000E83  65                 	db	101	;'e'
   334   000E84  20                 	db	32
   335   000E85  3D                 	db	61	;'='
   336   000E86  20                 	db	32
   337   000E87  72                 	db	114	;'r'
   338   000E88  65                 	db	101	;'e'
   339   000E89  64                 	db	100	;'d'
   340   000E8A  00                 	db	0
   341   000E8B                     
   342                           ; BSR set to: 15
   343   000E8B  56                 	db	86	;'V'
   344   000E8C  6F                 	db	111	;'o'
   345   000E8D  6C                 	db	108	;'l'
   346   000E8E  74                 	db	116	;'t'
   347   000E8F  61                 	db	97	;'a'
   348   000E90  67                 	db	103	;'g'
   349   000E91  65                 	db	101	;'e'
   350   000E92  20                 	db	32
   351   000E93  3D                 	db	61	;'='
   352   000E94  20                 	db	32
   353   000E95  25                 	db	37
   354   000E96  64                 	db	100	;'d'
   355   000E97  2E                 	db	46
   356   000E98  25                 	db	37
   357   000E99  30                 	db	48	;'0'
   358   000E9A  32                 	db	50	;'2'
   359   000E9B  64                 	db	100	;'d'
   360   000E9C  2C                 	db	44
   361   000E9D  20                 	db	32
   362   000E9E  20                 	db	32
   363   000E9F  00                 	db	0
   364   000EA0                     
   365                           ; BSR set to: 15
   366   000EA0  68                 	db	104	;'h'
   367   000EA1  75                 	db	117	;'u'
   368   000EA2  65                 	db	101	;'e'
   369   000EA3  3D                 	db	61	;'='
   370   000EA4  25                 	db	37
   371   000EA5  30                 	db	48	;'0'
   372   000EA6  33                 	db	51	;'3'
   373   000EA7  64                 	db	100	;'d'
   374   000EA8  2C                 	db	44
   375   000EA9  20                 	db	32
   376   000EAA  20                 	db	32
   377   000EAB  00                 	db	0
   378   000EAC                     STR_2:
   379                           
   380                           ; BSR set to: 15
   381   000EAC  2E                 	db	46
   382   000EAD  00                 	db	0
   383   000EAE  00                 	db	0	; dummy byte at the end
   384   000000                     
   385                           ; #config settings
   386                           
   387                           	psect	cinit
   388   003A4C                     __pcinit:
   389                           	callstack 0
   390   003A4C                     start_initialization:
   391                           	callstack 0
   392   003A4C                     __initialization:
   393                           	callstack 0
   394                           
   395                           ; Initialize objects allocated to BANK0 (1 bytes)
   396                           ; load TBLPTR registers with __pidataBANK0
   397   003A4C  0E22               	movlw	low __pidataBANK0
   398   003A4E  6EF6               	movwf	tblptrl,c
   399   003A50  0E3F               	movlw	high __pidataBANK0
   400   003A52  6EF7               	movwf	tblptrh,c
   401   003A54  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   402   003A56  6EF8               	movwf	tblptru,c
   403   003A58  0009               	tblrd		*+	;fetch initializer
   404   003A5A  CFF5 F0F7          	movff	tablat,__pdataBANK0
   405                           
   406                           ; Clear objects allocated to BANK1 (112 bytes)
   407   003A5E  EE01  F000         	lfsr	0,__pbssBANK1
   408   003A62  0E70               	movlw	112
   409   003A64                     clear_0:
   410   003A64  6AEE               	clrf	postinc0,c
   411   003A66  06E8               	decf	wreg,f,c
   412   003A68  E1FD               	bnz	clear_0
   413                           
   414                           ; Clear objects allocated to BANK0 (67 bytes)
   415   003A6A  EE00  F0B4         	lfsr	0,__pbssBANK0
   416   003A6E  0E43               	movlw	67
   417   003A70                     clear_1:
   418   003A70  6AEE               	clrf	postinc0,c
   419   003A72  06E8               	decf	wreg,f,c
   420   003A74  E1FD               	bnz	clear_1
   421                           
   422                           ; Clear objects allocated to COMRAM (5 bytes)
   423   003A76  6A5F               	clrf	(__pbssCOMRAM+4)& (0+255),c
   424   003A78  6A5E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   425   003A7A  6A5D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   426   003A7C  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   427   003A7E  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   428   003A80                     end_of_initialization:
   429                           	callstack 0
   430   003A80                     __end_of__initialization:
   431                           	callstack 0
   432   003A80  0100               	movlb	0
   433   003A82  EF04  F013         	goto	_main	;jump to C main() function
   434                           
   435                           	psect	bssCOMRAM
   436   00005B                     __pbssCOMRAM:
   437                           	callstack 0
   438   00005B                     _flags:
   439                           	callstack 0
   440   00005B                     	ds	1
   441   00005C                     _TxBufReadCnt:
   442                           	callstack 0
   443   00005C                     	ds	1
   444   00005D                     _TxBufWriteCnt:
   445                           	callstack 0
   446   00005D                     	ds	1
   447   00005E                     _RxBufReadCnt:
   448                           	callstack 0
   449   00005E                     	ds	1
   450   00005F                     _RxBufWriteCnt:
   451                           	callstack 0
   452   00005F                     	ds	1
   453                           
   454                           	psect	bssBANK0
   455   0000B4                     __pbssBANK0:
   456                           	callstack 0
   457   0000B4                     _EUSART4RXbuf:
   458                           	callstack 0
   459   0000B4                     	ds	20
   460   0000C8                     _hue:
   461                           	callstack 0
   462   0000C8                     	ds	8
   463   0000D0                     _width:
   464                           	callstack 0
   465   0000D0                     	ds	2
   466   0000D2                     _prec:
   467                           	callstack 0
   468   0000D2                     	ds	2
   469   0000D4                     _readingIndex:
   470                           	callstack 0
   471   0000D4                     	ds	1
   472   0000D5                     _motorR:
   473                           	callstack 0
   474   0000D5                     	ds	9
   475   0000DE                     _motorL:
   476                           	callstack 0
   477   0000DE                     	ds	9
   478   0000E7                     _colorCurrent:
   479                           	callstack 0
   480   0000E7                     	ds	8
   481   0000EF                     _colorCalibration:
   482                           	callstack 0
   483   0000EF                     	ds	8
   484                           
   485                           	psect	dataBANK0
   486   0000F7                     __pdataBANK0:
   487                           	callstack 0
   488   0000F7                     _dataFlag:
   489                           	callstack 0
   490   0000F7                     	ds	1
   491                           
   492                           	psect	bssBANK1
   493   000100                     __pbssBANK1:
   494                           	callstack 0
   495   000100                     _EUSART4TXbuf:
   496                           	callstack 0
   497   000100                     	ds	60
   498   00013C                     _ldrReadings:
   499                           	callstack 0
   500   00013C                     	ds	20
   501   000150                     _dbuf:
   502                           	callstack 0
   503   000150                     	ds	32
   504                           
   505                           	psect	cstackBANK0
   506   000060                     __pcstackBANK0:
   507                           	callstack 0
   508   000060                     convert_rgb2hue@redcurrent:
   509                           	callstack 0
   510                           
   511                           ; 4 bytes @ 0x0
   512   000060                     	ds	4
   513   000064                     convert_rgb2hue@redmax:
   514                           	callstack 0
   515                           
   516                           ; 4 bytes @ 0x4
   517   000064                     	ds	4
   518   000068                     convert_rgb2hue@greencurrent:
   519                           	callstack 0
   520                           
   521                           ; 4 bytes @ 0x8
   522   000068                     	ds	4
   523   00006C                     convert_rgb2hue@greenmax:
   524                           	callstack 0
   525                           
   526                           ; 4 bytes @ 0xC
   527   00006C                     	ds	4
   528   000070                     convert_rgb2hue@bluecurrent:
   529                           	callstack 0
   530                           
   531                           ; 4 bytes @ 0x10
   532   000070                     	ds	4
   533   000074                     convert_rgb2hue@bluemax:
   534                           	callstack 0
   535                           
   536                           ; 4 bytes @ 0x14
   537   000074                     	ds	4
   538   000078                     _convert_rgb2hue$411:
   539                           	callstack 0
   540                           
   541                           ; 4 bytes @ 0x18
   542   000078                     	ds	4
   543   00007C                     _convert_rgb2hue$412:
   544                           	callstack 0
   545                           
   546                           ; 4 bytes @ 0x1C
   547   00007C                     	ds	4
   548   000080                     _convert_rgb2hue$413:
   549                           	callstack 0
   550                           
   551                           ; 4 bytes @ 0x20
   552   000080                     	ds	4
   553   000084                     _convert_rgb2hue$414:
   554                           	callstack 0
   555                           
   556                           ; 4 bytes @ 0x24
   557   000084                     	ds	4
   558   000088                     convert_rgb2hue@min:
   559                           	callstack 0
   560                           
   561                           ; 4 bytes @ 0x28
   562   000088                     	ds	4
   563   00008C                     convert_rgb2hue@diff:
   564                           	callstack 0
   565                           
   566                           ; 4 bytes @ 0x2C
   567   00008C                     	ds	4
   568   000090                     convert_rgb2hue@max:
   569                           	callstack 0
   570                           
   571                           ; 4 bytes @ 0x30
   572   000090                     	ds	4
   573   000094                     convert_rgb2hue@hue:
   574                           	callstack 0
   575                           
   576                           ; 4 bytes @ 0x34
   577   000094                     	ds	4
   578   000098                     convert_rgb2hue@r:
   579                           	callstack 0
   580                           
   581                           ; 4 bytes @ 0x38
   582   000098                     	ds	4
   583   00009C                     convert_rgb2hue@g:
   584                           	callstack 0
   585                           
   586                           ; 4 bytes @ 0x3C
   587   00009C                     	ds	4
   588   0000A0                     convert_rgb2hue@b:
   589                           	callstack 0
   590                           
   591                           ; 4 bytes @ 0x40
   592   0000A0                     	ds	4
   593   0000A4                     ??_main:
   594                           
   595                           ; 1 bytes @ 0x44
   596   0000A4                     	ds	2
   597   0000A6                     main@current:
   598                           	callstack 0
   599                           
   600                           ; 4 bytes @ 0x46
   601   0000A6                     	ds	4
   602   0000AA                     main@maximum:
   603                           	callstack 0
   604                           
   605                           ; 4 bytes @ 0x4A
   606   0000AA                     	ds	4
   607   0000AE                     main@clear_norm:
   608                           	callstack 0
   609                           
   610                           ; 4 bytes @ 0x4E
   611   0000AE                     	ds	4
   612   0000B2                     main@hue:
   613                           	callstack 0
   614                           
   615                           ; 2 bytes @ 0x52
   616   0000B2                     	ds	2
   617                           
   618                           	psect	cstackCOMRAM
   619   000001                     __pcstackCOMRAM:
   620                           	callstack 0
   621   000001                     ??_I2C_2_Master_Idle:
   622   000001                     ?___wmul:
   623                           	callstack 0
   624   000001                     ?___awdiv:
   625                           	callstack 0
   626   000001                     ?___awmod:
   627                           	callstack 0
   628   000001                     ?___fladd:
   629                           	callstack 0
   630   000001                     ?___flmul:
   631                           	callstack 0
   632   000001                     ?___fltol:
   633                           	callstack 0
   634   000001                     ?___xxtofl:
   635                           	callstack 0
   636   000001                     sendCharSerial4@charToSend:
   637                           	callstack 0
   638   000001                     initDCmotorsPWM@PWMperiod:
   639                           	callstack 0
   640   000001                     ___wmul@multiplier:
   641                           	callstack 0
   642   000001                     ___awdiv@dividend:
   643                           	callstack 0
   644   000001                     ___awmod@dividend:
   645                           	callstack 0
   646   000001                     fputc@c:
   647                           	callstack 0
   648   000001                     ___fleq@ff1:
   649                           	callstack 0
   650   000001                     ___flge@ff1:
   651                           	callstack 0
   652   000001                     ___fltol@f1:
   653                           	callstack 0
   654   000001                     ___fladd@b:
   655                           	callstack 0
   656   000001                     ___flmul@b:
   657                           	callstack 0
   658   000001                     ___xxtofl@val:
   659                           	callstack 0
   660                           
   661                           ; 4 bytes @ 0x0
   662   000001                     	ds	1
   663   000002                     ??_I2C_2_Master_Read:
   664   000002                     I2C_2_Master_Write@data_byte:
   665                           	callstack 0
   666   000002                     sendStringSerial4@string:
   667                           	callstack 0
   668                           
   669                           ; 1 bytes @ 0x1
   670   000002                     	ds	1
   671   000003                     color_writetoaddr@value:
   672                           	callstack 0
   673   000003                     I2C_2_Master_Read@ack:
   674                           	callstack 0
   675   000003                     fputc@fp:
   676                           	callstack 0
   677   000003                     ___wmul@multiplicand:
   678                           	callstack 0
   679   000003                     ___awdiv@divisor:
   680                           	callstack 0
   681   000003                     ___awmod@divisor:
   682                           	callstack 0
   683                           
   684                           ; 2 bytes @ 0x2
   685   000003                     	ds	1
   686   000004                     ??_fputc:
   687   000004                     color_writetoaddr@address:
   688                           	callstack 0
   689   000004                     I2C_2_Master_Read@tmp:
   690                           	callstack 0
   691                           
   692                           ; 1 bytes @ 0x3
   693   000004                     	ds	1
   694   000005                     ??_color_click_init:
   695   000005                     ??___fltol:
   696   000005                     ??___xxtofl:
   697   000005                     ?_color_read_Red:
   698                           	callstack 0
   699   000005                     ?_color_read_Green:
   700                           	callstack 0
   701   000005                     ?_color_read_Blue:
   702                           	callstack 0
   703   000005                     ?_color_read_Clear:
   704                           	callstack 0
   705   000005                     ___awdiv@counter:
   706                           	callstack 0
   707   000005                     ___awmod@counter:
   708                           	callstack 0
   709   000005                     ___wmul@product:
   710                           	callstack 0
   711   000005                     ___fleq@ff2:
   712                           	callstack 0
   713   000005                     ___flge@ff2:
   714                           	callstack 0
   715   000005                     ___fladd@a:
   716                           	callstack 0
   717   000005                     ___flmul@a:
   718                           	callstack 0
   719                           
   720                           ; 4 bytes @ 0x4
   721   000005                     	ds	1
   722   000006                     ___awdiv@sign:
   723                           	callstack 0
   724   000006                     ___awmod@sign:
   725                           	callstack 0
   726                           
   727                           ; 1 bytes @ 0x5
   728   000006                     	ds	1
   729   000007                     ??_color_read_Red:
   730   000007                     ??_color_read_Green:
   731   000007                     ??_color_read_Blue:
   732   000007                     ??_color_read_Clear:
   733   000007                     ?_abs:
   734                           	callstack 0
   735   000007                     ?___lwdiv:
   736                           	callstack 0
   737   000007                     ?_read_prec_or_width:
   738                           	callstack 0
   739   000007                     read_prec_or_width@fmt:
   740                           	callstack 0
   741   000007                     ___awdiv@quotient:
   742                           	callstack 0
   743   000007                     ___lwdiv@dividend:
   744                           	callstack 0
   745   000007                     abs@a:
   746                           	callstack 0
   747                           
   748                           ; 2 bytes @ 0x6
   749   000007                     	ds	1
   750   000008                     read_prec_or_width@ap:
   751                           	callstack 0
   752                           
   753                           ; 1 bytes @ 0x7
   754   000008                     	ds	1
   755   000009                     ??___fladd:
   756   000009                     ??___flmul:
   757   000009                     ??_abs:
   758   000009                     ??___fleq:
   759   000009                     ??___flge:
   760   000009                     ___fltol@sign1:
   761                           	callstack 0
   762   000009                     ___xxtofl@sign:
   763                           	callstack 0
   764   000009                     read_prec_or_width@c:
   765                           	callstack 0
   766   000009                     ___lwdiv@divisor:
   767                           	callstack 0
   768   000009                     fputs@s:
   769                           	callstack 0
   770                           
   771                           ; 2 bytes @ 0x8
   772   000009                     	ds	1
   773   00000A                     ___fltol@exp1:
   774                           	callstack 0
   775   00000A                     ___xxtofl@exp:
   776                           	callstack 0
   777   00000A                     color_read_Red@tmp:
   778                           	callstack 0
   779   00000A                     color_read_Green@tmp:
   780                           	callstack 0
   781   00000A                     color_read_Blue@tmp:
   782                           	callstack 0
   783   00000A                     color_read_Clear@tmp:
   784                           	callstack 0
   785   00000A                     read_prec_or_width@n:
   786                           	callstack 0
   787                           
   788                           ; 2 bytes @ 0x9
   789   00000A                     	ds	1
   790   00000B                     fputs@fp:
   791                           	callstack 0
   792   00000B                     ___lwdiv@quotient:
   793                           	callstack 0
   794   00000B                     ___xxtofl@arg:
   795                           	callstack 0
   796                           
   797                           ; 4 bytes @ 0xA
   798   00000B                     	ds	1
   799   00000C                     fputs@c:
   800                           	callstack 0
   801                           
   802                           ; 1 bytes @ 0xB
   803   00000C                     	ds	1
   804   00000D                     ___lwdiv@counter:
   805                           	callstack 0
   806   00000D                     ___fladd@signs:
   807                           	callstack 0
   808   00000D                     ___flmul@sign:
   809                           	callstack 0
   810   00000D                     fputs@i:
   811                           	callstack 0
   812                           
   813                           ; 2 bytes @ 0xC
   814   00000D                     	ds	1
   815   00000E                     setMotorPWM@m:
   816                           	callstack 0
   817   00000E                     ___fladd@aexp:
   818                           	callstack 0
   819   00000E                     ___flmul@grs:
   820                           	callstack 0
   821                           
   822                           ; 4 bytes @ 0xD
   823   00000E                     	ds	1
   824   00000F                     ??_setMotorPWM:
   825   00000F                     ___fladd@bexp:
   826                           	callstack 0
   827   00000F                     pad@fp:
   828                           	callstack 0
   829                           
   830                           ; 1 bytes @ 0xE
   831   00000F                     	ds	1
   832   000010                     ___fladd@grs:
   833                           	callstack 0
   834   000010                     pad@buf:
   835                           	callstack 0
   836                           
   837                           ; 2 bytes @ 0xF
   838   000010                     	ds	1
   839   000011                     ?___flsub:
   840                           	callstack 0
   841   000011                     setMotorPWM@posDuty:
   842                           	callstack 0
   843   000011                     ___flsub@b:
   844                           	callstack 0
   845                           
   846                           ; 4 bytes @ 0x10
   847   000011                     	ds	1
   848   000012                     setMotorPWM@negDuty:
   849                           	callstack 0
   850   000012                     ___flmul@aexp:
   851                           	callstack 0
   852   000012                     pad@p:
   853                           	callstack 0
   854                           
   855                           ; 2 bytes @ 0x11
   856   000012                     	ds	1
   857   000013                     stop@mL:
   858                           	callstack 0
   859   000013                     turnLeft@mL:
   860                           	callstack 0
   861   000013                     turnRight@mL:
   862                           	callstack 0
   863   000013                     fullSpeedAhead@mL:
   864                           	callstack 0
   865   000013                     fullSpeedBack@mL:
   866                           	callstack 0
   867   000013                     ___flmul@bexp:
   868                           	callstack 0
   869                           
   870                           ; 1 bytes @ 0x12
   871   000013                     	ds	1
   872   000014                     ??_pad:
   873   000014                     stop@mR:
   874                           	callstack 0
   875   000014                     turnLeft@mR:
   876                           	callstack 0
   877   000014                     turnRight@mR:
   878                           	callstack 0
   879   000014                     fullSpeedAhead@mR:
   880                           	callstack 0
   881   000014                     fullSpeedBack@mR:
   882                           	callstack 0
   883   000014                     ___flmul@prod:
   884                           	callstack 0
   885                           
   886                           ; 4 bytes @ 0x13
   887   000014                     	ds	1
   888   000015                     ??_fullSpeedAhead:
   889   000015                     ??_stop:
   890   000015                     ??_turnLeft:
   891   000015                     ??_turnRight:
   892   000015                     ??_fullSpeedBack:
   893   000015                     pad@i:
   894                           	callstack 0
   895   000015                     ___flsub@a:
   896                           	callstack 0
   897                           
   898                           ; 4 bytes @ 0x14
   899   000015                     	ds	1
   900   000016                     turnLeft@i:
   901                           	callstack 0
   902   000016                     turnRight@i:
   903                           	callstack 0
   904   000016                     fullSpeedAhead@power:
   905                           	callstack 0
   906   000016                     fullSpeedBack@power:
   907                           	callstack 0
   908                           
   909                           ; 2 bytes @ 0x15
   910   000016                     	ds	1
   911   000017                     dtoa@fp:
   912                           	callstack 0
   913                           
   914                           ; 1 bytes @ 0x16
   915   000017                     	ds	1
   916   000018                     right90@mL:
   917                           	callstack 0
   918   000018                     left90@mL:
   919                           	callstack 0
   920   000018                     turn180@mL:
   921                           	callstack 0
   922   000018                     right135@mL:
   923                           	callstack 0
   924   000018                     left135@mL:
   925                           	callstack 0
   926   000018                     backHalf@mL:
   927                           	callstack 0
   928   000018                     backOneAndHalf@mL:
   929                           	callstack 0
   930   000018                     ___flmul@temp:
   931                           	callstack 0
   932   000018                     dtoa@d:
   933                           	callstack 0
   934                           
   935                           ; 2 bytes @ 0x17
   936   000018                     	ds	1
   937   000019                     ?___fldiv:
   938                           	callstack 0
   939   000019                     right90@mR:
   940                           	callstack 0
   941   000019                     left90@mR:
   942                           	callstack 0
   943   000019                     turn180@mR:
   944                           	callstack 0
   945   000019                     right135@mR:
   946                           	callstack 0
   947   000019                     left135@mR:
   948                           	callstack 0
   949   000019                     backHalf@mR:
   950                           	callstack 0
   951   000019                     backOneAndHalf@mR:
   952                           	callstack 0
   953   000019                     ___fldiv@b:
   954                           	callstack 0
   955                           
   956                           ; 4 bytes @ 0x18
   957   000019                     	ds	1
   958   00001A                     ??_right90:
   959   00001A                     ??_left90:
   960   00001A                     ??_turn180:
   961   00001A                     ??_right135:
   962   00001A                     ??_left135:
   963   00001A                     ??_backHalf:
   964   00001A                     ??_backOneAndHalf:
   965   00001A                     _dtoa$2657:
   966                           	callstack 0
   967                           
   968                           ; 2 bytes @ 0x19
   969   00001A                     	ds	2
   970   00001C                     moveRed@mL:
   971                           	callstack 0
   972   00001C                     moveGreen@mL:
   973                           	callstack 0
   974   00001C                     moveBlue@mL:
   975                           	callstack 0
   976   00001C                     moveYellow@mL:
   977                           	callstack 0
   978   00001C                     movePink@mL:
   979                           	callstack 0
   980   00001C                     moveOrange@mL:
   981                           	callstack 0
   982   00001C                     moveLightBlue@mL:
   983                           	callstack 0
   984   00001C                     dtoa@p:
   985                           	callstack 0
   986                           
   987                           ; 1 bytes @ 0x1B
   988   00001C                     	ds	1
   989   00001D                     moveRed@mR:
   990                           	callstack 0
   991   00001D                     moveGreen@mR:
   992                           	callstack 0
   993   00001D                     moveBlue@mR:
   994                           	callstack 0
   995   00001D                     moveYellow@mR:
   996                           	callstack 0
   997   00001D                     movePink@mR:
   998                           	callstack 0
   999   00001D                     moveOrange@mR:
  1000                           	callstack 0
  1001   00001D                     moveLightBlue@mR:
  1002                           	callstack 0
  1003   00001D                     dtoa@w:
  1004                           	callstack 0
  1005   00001D                     ___fldiv@a:
  1006                           	callstack 0
  1007                           
  1008                           ; 4 bytes @ 0x1C
  1009   00001D                     	ds	1
  1010   00001E                     ??_moveRed:
  1011   00001E                     ??_moveGreen:
  1012   00001E                     ??_moveBlue:
  1013   00001E                     ??_moveLightBlue:
  1014   00001E                     ??_moveYellow:
  1015   00001E                     ??_moveOrange:
  1016   00001E                     ??_movePink:
  1017                           
  1018                           ; 1 bytes @ 0x1D
  1019   00001E                     	ds	1
  1020   00001F                     dtoa@s:
  1021                           	callstack 0
  1022                           
  1023                           ; 1 bytes @ 0x1E
  1024   00001F                     	ds	1
  1025   000020                     decision@hue:
  1026                           	callstack 0
  1027   000020                     dtoa@i:
  1028                           	callstack 0
  1029                           
  1030                           ; 2 bytes @ 0x1F
  1031   000020                     	ds	1
  1032   000021                     ??___fldiv:
  1033                           
  1034                           ; 1 bytes @ 0x20
  1035   000021                     	ds	1
  1036   000022                     vfpfcnvrt@fp:
  1037                           	callstack 0
  1038                           
  1039                           ; 1 bytes @ 0x21
  1040   000022                     	ds	1
  1041   000023                     vfpfcnvrt@fmt:
  1042                           	callstack 0
  1043                           
  1044                           ; 1 bytes @ 0x22
  1045   000023                     	ds	1
  1046   000024                     vfpfcnvrt@ap:
  1047                           	callstack 0
  1048                           
  1049                           ; 1 bytes @ 0x23
  1050   000024                     	ds	1
  1051   000025                     ??_vfpfcnvrt:
  1052   000025                     ___fldiv@rem:
  1053                           	callstack 0
  1054                           
  1055                           ; 4 bytes @ 0x24
  1056   000025                     	ds	2
  1057   000027                     vfpfcnvrt@convarg:
  1058                           	callstack 0
  1059                           
  1060                           ; 4 bytes @ 0x26
  1061   000027                     	ds	2
  1062   000029                     ___fldiv@sign:
  1063                           	callstack 0
  1064                           
  1065                           ; 1 bytes @ 0x28
  1066   000029                     	ds	1
  1067   00002A                     ___fldiv@new_exp:
  1068                           	callstack 0
  1069                           
  1070                           ; 2 bytes @ 0x29
  1071   00002A                     	ds	1
  1072   00002B                     vfpfcnvrt@done:
  1073                           	callstack 0
  1074                           
  1075                           ; 1 bytes @ 0x2A
  1076   00002B                     	ds	1
  1077   00002C                     vfpfcnvrt@cp:
  1078                           	callstack 0
  1079   00002C                     ___fldiv@grs:
  1080                           	callstack 0
  1081                           
  1082                           ; 4 bytes @ 0x2B
  1083   00002C                     	ds	1
  1084   00002D                     ?_vfprintf:
  1085                           	callstack 0
  1086   00002D                     vfprintf@fp:
  1087                           	callstack 0
  1088                           
  1089                           ; 1 bytes @ 0x2C
  1090   00002D                     	ds	1
  1091   00002E                     vfprintf@fmt:
  1092                           	callstack 0
  1093                           
  1094                           ; 1 bytes @ 0x2D
  1095   00002E                     	ds	1
  1096   00002F                     vfprintf@ap:
  1097                           	callstack 0
  1098                           
  1099                           ; 1 bytes @ 0x2E
  1100   00002F                     	ds	1
  1101   000030                     ___fldiv@bexp:
  1102                           	callstack 0
  1103   000030                     vfprintf@cfmt:
  1104                           	callstack 0
  1105                           
  1106                           ; 1 bytes @ 0x2F
  1107   000030                     	ds	1
  1108   000031                     ?_sprintf:
  1109                           	callstack 0
  1110   000031                     ___fldiv@aexp:
  1111                           	callstack 0
  1112   000031                     sprintf@s:
  1113                           	callstack 0
  1114                           
  1115                           ; 1 bytes @ 0x30
  1116   000031                     	ds	1
  1117   000032                     ?_convert_rgb2hue:
  1118                           	callstack 0
  1119   000032                     convert_rgb2hue@cMax:
  1120                           	callstack 0
  1121   000032                     sprintf@fmt:
  1122                           	callstack 0
  1123                           
  1124                           ; 1 bytes @ 0x31
  1125   000032                     	ds	1
  1126   000033                     convert_rgb2hue@cCurr:
  1127                           	callstack 0
  1128                           
  1129                           ; 1 bytes @ 0x32
  1130   000033                     	ds	1
  1131   000034                     ??_convert_rgb2hue:
  1132                           
  1133                           ; 1 bytes @ 0x33
  1134   000034                     	ds	2
  1135   000036                     ?_reading_hue:
  1136                           	callstack 0
  1137   000036                     reading_hue@cCurr:
  1138                           	callstack 0
  1139                           
  1140                           ; 1 bytes @ 0x35
  1141   000036                     	ds	1
  1142   000037                     sprintf@ap:
  1143                           	callstack 0
  1144                           
  1145                           ; 1 bytes @ 0x36
  1146   000037                     	ds	1
  1147   000038                     ??_reading_hue:
  1148   000038                     sprintf@f:
  1149                           	callstack 0
  1150                           
  1151                           ; 12 bytes @ 0x37
  1152   000038                     	ds	2
  1153   00003A                     reading_hue@hue:
  1154                           	callstack 0
  1155                           
  1156                           ; 2 bytes @ 0x39
  1157   00003A                     	ds	10
  1158   000044                     calibration_routine@cCal:
  1159                           	callstack 0
  1160                           
  1161                           ; 1 bytes @ 0x43
  1162   000044                     	ds	1
  1163   000045                     ??_calibration_routine:
  1164                           
  1165                           ; 1 bytes @ 0x44
  1166   000045                     	ds	2
  1167   000047                     calibration_routine@cal_state:
  1168                           	callstack 0
  1169                           
  1170                           ; 20 bytes @ 0x46
  1171   000047                     	ds	20
  1172                           
  1173 ;;
  1174 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1175 ;;
  1176 ;; *************** function _main *****************
  1177 ;; Defined at:
  1178 ;;		line 28 in file "main.c"
  1179 ;; Parameters:    Size  Location     Type
  1180 ;;		None
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;  clear_norm      4   78[BANK0 ] float 
  1183 ;;  maximum         4   74[BANK0 ] float 
  1184 ;;  current         4   70[BANK0 ] float 
  1185 ;;  hue_char       20    0        unsigned char [20]
  1186 ;;  clear_max       4    0        float 
  1187 ;;  clear           4    0        float 
  1188 ;;  PWMcycle        2    0        unsigned int 
  1189 ;;  hue             2   82[BANK0 ] unsigned int 
  1190 ;;  green           2    0        unsigned int 
  1191 ;;  blue            2    0        unsigned int 
  1192 ;;  red             2    0        unsigned int 
  1193 ;;  battery_leve    2    0        unsigned int 
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  1    wreg      void 
  1196 ;; Registers used:
  1197 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1204 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1205 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1206 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1207 ;;Total ram usage:       16 bytes
  1208 ;; Hardware stack levels required when called: 9
  1209 ;; This function calls:
  1210 ;;		_ADC_init
  1211 ;;		___fldiv
  1212 ;;		___flge
  1213 ;;		___xxtofl
  1214 ;;		_calibration_routine
  1215 ;;		_color_click_init
  1216 ;;		_color_read_Clear
  1217 ;;		_decision
  1218 ;;		_fullSpeedAhead
  1219 ;;		_initDCmotorsPWM
  1220 ;;		_initUSART4
  1221 ;;		_reading_hue
  1222 ;;		_stop
  1223 ;; This function is called by:
  1224 ;;		Startup code after reset
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           	psect	text0
  1229   002608                     __ptext0:
  1230                           	callstack 0
  1231   002608                     _main:
  1232                           	callstack 22
  1233   002608                     
  1234                           ;main.c: 30:     ADC_init();
  1235   002608  EC62  F01F         	call	_ADC_init	;wreg free
  1236   00260C                     
  1237                           ;main.c: 31:     color_click_init();
  1238   00260C  EC43  F01D         	call	_color_click_init	;wreg free
  1239   002610                     
  1240                           ;main.c: 32:     initUSART4();
  1241   002610  EC53  F01F         	call	_initUSART4	;wreg free
  1242   002614                     
  1243                           ;main.c: 36:     initDCmotorsPWM(PWMcycle);
  1244   002614  0E00               	movlw	0
  1245   002616  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1246   002618  0E63               	movlw	99
  1247   00261A  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1248   00261C  EC42  F01A         	call	_initDCmotorsPWM	;wreg free
  1249   002620                     
  1250                           ;main.c: 39:     motorL.power = 0;
  1251   002620  0E00               	movlw	0
  1252   002622  0100               	movlb	0	; () banked
  1253   002624  6FDE               	movwf	_motorL& (0+255),b
  1254   002626                     
  1255                           ; BSR set to: 0
  1256                           ;main.c: 40:     motorL.direction = 1;
  1257   002626  0E01               	movlw	1
  1258   002628  6FDF               	movwf	(_motorL+1)& (0+255),b
  1259   00262A                     
  1260                           ; BSR set to: 0
  1261                           ;main.c: 41:     motorL.brakemode = 1;
  1262   00262A  0E01               	movlw	1
  1263   00262C  6FE0               	movwf	(_motorL+2)& (0+255),b
  1264   00262E                     
  1265                           ; BSR set to: 0
  1266                           ;main.c: 42:     motorL.PWMperiod = PWMcycle;
  1267   00262E  0E00               	movlw	0
  1268   002630  6FE2               	movwf	(_motorL+4)& (0+255),b
  1269   002632  0E63               	movlw	99
  1270   002634  6FE1               	movwf	(_motorL+3)& (0+255),b
  1271   002636                     
  1272                           ; BSR set to: 0
  1273                           ;main.c: 43:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1274   002636  0EAA               	movlw	170
  1275   002638  6FE3               	movwf	(_motorL+5)& (0+255),b
  1276   00263A  0E0F               	movlw	15
  1277   00263C  6FE4               	movwf	(_motorL+6)& (0+255),b
  1278   00263E                     
  1279                           ; BSR set to: 0
  1280                           ;main.c: 44:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1281   00263E  0EA6               	movlw	166
  1282   002640  6FE5               	movwf	(_motorL+7)& (0+255),b
  1283   002642  0E0F               	movlw	15
  1284   002644  6FE6               	movwf	(_motorL+8)& (0+255),b
  1285   002646                     
  1286                           ; BSR set to: 0
  1287                           ;main.c: 46:     motorR.power = 0;
  1288   002646  0E00               	movlw	0
  1289   002648  6FD5               	movwf	_motorR& (0+255),b
  1290   00264A                     
  1291                           ; BSR set to: 0
  1292                           ;main.c: 47:     motorR.direction = 1;
  1293   00264A  0E01               	movlw	1
  1294   00264C  6FD6               	movwf	(_motorR+1)& (0+255),b
  1295   00264E                     
  1296                           ; BSR set to: 0
  1297                           ;main.c: 48:     motorR.brakemode = 1;
  1298   00264E  0E01               	movlw	1
  1299   002650  6FD7               	movwf	(_motorR+2)& (0+255),b
  1300   002652                     
  1301                           ; BSR set to: 0
  1302                           ;main.c: 49:     motorR.PWMperiod = PWMcycle;
  1303   002652  0E00               	movlw	0
  1304   002654  6FD9               	movwf	(_motorR+4)& (0+255),b
  1305   002656  0E63               	movlw	99
  1306   002658  6FD8               	movwf	(_motorR+3)& (0+255),b
  1307                           
  1308                           ;main.c: 50:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1309   00265A  0E25               	movlw	37
  1310   00265C  6FDA               	movwf	(_motorR+5)& (0+255),b
  1311   00265E  0E0F               	movlw	15
  1312   002660  6FDB               	movwf	(_motorR+6)& (0+255),b
  1313                           
  1314                           ;main.c: 51:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1315   002662  0E21               	movlw	33
  1316   002664  6FDC               	movwf	(_motorR+7)& (0+255),b
  1317   002666  0E0F               	movlw	15
  1318   002668  6FDD               	movwf	(_motorR+8)& (0+255),b
  1319   00266A                     
  1320                           ; BSR set to: 0
  1321                           ;main.c: 54:     LATDbits.LATD7=0;
  1322   00266A  9E7C               	bcf	124,7,c	;volatile
  1323   00266C                     
  1324                           ; BSR set to: 0
  1325                           ;main.c: 55:     TRISDbits.TRISD7=0;
  1326   00266C  9E84               	bcf	132,7,c	;volatile
  1327   00266E                     
  1328                           ; BSR set to: 0
  1329                           ;main.c: 62:     TRISGbits.TRISG0 = 0;
  1330   00266E  9087               	bcf	135,0,c	;volatile
  1331   002670                     
  1332                           ; BSR set to: 0
  1333                           ;main.c: 63:     LATGbits.LATG0 = 0;
  1334   002670  907F               	bcf	127,0,c	;volatile
  1335   002672                     
  1336                           ; BSR set to: 0
  1337                           ;main.c: 64:     TRISEbits.TRISE7 = 0;
  1338   002672  9E85               	bcf	133,7,c	;volatile
  1339   002674                     
  1340                           ; BSR set to: 0
  1341                           ;main.c: 65:     LATEbits.LATE7 = 0;
  1342   002674  9E7D               	bcf	125,7,c	;volatile
  1343   002676                     
  1344                           ; BSR set to: 0
  1345                           ;main.c: 66:     TRISAbits.TRISA3 = 0;
  1346   002676  9681               	bcf	129,3,c	;volatile
  1347   002678                     
  1348                           ; BSR set to: 0
  1349                           ;main.c: 67:     LATAbits.LATA3 = 0;
  1350   002678  9679               	bcf	121,3,c	;volatile
  1351   00267A                     
  1352                           ; BSR set to: 0
  1353                           ;main.c: 72:     TRISFbits.TRISF3=1;
  1354   00267A  8686               	bsf	134,3,c	;volatile
  1355   00267C                     
  1356                           ; BSR set to: 0
  1357                           ;main.c: 73:     ANSELFbits.ANSELF3=0;
  1358   00267C  010E               	movlb	14	; () banked
  1359   00267E  97B4               	bcf	180,3,b	;volatile
  1360   002680                     
  1361                           ; BSR set to: 14
  1362                           ;main.c: 75:     unsigned int battery_level;;main.c: 76:     unsigned int red;;main.c: 7
      +                          7:     unsigned int blue;;main.c: 78:     unsigned int green;;main.c: 79:     float clea
      +                          r;;main.c: 80:     float clear_max;;main.c: 81:     unsigned int hue;;main.c: 82:     ch
      +                          ar hue_char[20];;main.c: 83:     TRISHbits.TRISH3 = 0;
  1363   002680  9688               	bcf	136,3,c	;volatile
  1364   002682                     
  1365                           ; BSR set to: 14
  1366                           ;main.c: 84:     LATHbits.LATH3 = 1;
  1367   002682  8680               	bsf	128,3,c	;volatile
  1368   002684                     
  1369                           ; BSR set to: 14
  1370                           ;main.c: 85:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1371   002684  0E19               	movlw	25
  1372   002686  0100               	movlb	0	; () banked
  1373   002688  6FA5               	movwf	(??_main+1)& (0+255),b
  1374   00268A  0E5A               	movlw	90
  1375   00268C  6FA4               	movwf	??_main& (0+255),b
  1376   00268E  0EB1               	movlw	177
  1377   002690                     u4397:
  1378   002690  2EE8               	decfsz	wreg,f,c
  1379   002692  D7FE               	bra	u4397
  1380   002694  2FA4               	decfsz	??_main& (0+255),f,b
  1381   002696  D7FC               	bra	u4397
  1382   002698  2FA5               	decfsz	(??_main+1)& (0+255),f,b
  1383   00269A  D7FA               	bra	u4397
  1384   00269C  D000               	nop2	
  1385   00269E                     
  1386                           ;main.c: 86:     LATHbits.LATH3 = 0;
  1387   00269E  9680               	bcf	128,3,c	;volatile
  1388   0026A0                     
  1389                           ;main.c: 87:     LATFbits.LATF2 = 0;
  1390   0026A0  947E               	bcf	126,2,c	;volatile
  1391   0026A2                     
  1392                           ;main.c: 88:     TRISFbits.TRISF2 = 1;
  1393   0026A2  8486               	bsf	134,2,c	;volatile
  1394   0026A4                     
  1395                           ;main.c: 89:     ANSELFbits.ANSELF2 = 0;
  1396   0026A4  010E               	movlb	14	; () banked
  1397   0026A6  95B4               	bcf	180,2,b	;volatile
  1398   0026A8                     
  1399                           ; BSR set to: 14
  1400                           ;main.c: 92:     calibration_routine(&colorCalibration);
  1401   0026A8  0EEF               	movlw	low _colorCalibration
  1402   0026AA  6E44               	movwf	calibration_routine@cCal^0,c
  1403   0026AC  EC41  F011         	call	_calibration_routine	;wreg free
  1404   0026B0                     l4893:
  1405                           
  1406                           ;main.c: 108:         LATGbits.LATG0 = 1;
  1407   0026B0  807F               	bsf	127,0,c	;volatile
  1408   0026B2                     
  1409                           ;main.c: 109:         LATEbits.LATE7 = 1;
  1410   0026B2  8E7D               	bsf	125,7,c	;volatile
  1411   0026B4                     
  1412                           ;main.c: 110:         LATAbits.LATA3 = 1;
  1413   0026B4  8679               	bsf	121,3,c	;volatile
  1414   0026B6                     
  1415                           ;main.c: 111:         fullSpeedAhead(&motorL,&motorR);
  1416   0026B6  0EDE               	movlw	low _motorL
  1417   0026B8  6E13               	movwf	fullSpeedAhead@mL^0,c
  1418   0026BA  0ED5               	movlw	low _motorR
  1419   0026BC  6E14               	movwf	fullSpeedAhead@mR^0,c
  1420   0026BE  EC4F  F01B         	call	_fullSpeedAhead	;wreg free
  1421   0026C2                     
  1422                           ;main.c: 112:         (colorCurrent.clear) = color_read_Clear();
  1423   0026C2  EC51  F01C         	call	_color_read_Clear	;wreg free
  1424   0026C6  C005  F0ED         	movff	?_color_read_Clear,_colorCurrent+6
  1425   0026CA  C006  F0EE         	movff	?_color_read_Clear+1,_colorCurrent+7
  1426   0026CE                     
  1427                           ;main.c: 113:         float current = colorCurrent.clear;
  1428   0026CE  C0ED  F001         	movff	_colorCurrent+6,___xxtofl@val
  1429   0026D2  C0EE  F002         	movff	_colorCurrent+7,___xxtofl@val+1
  1430   0026D6  6A03               	clrf	(___xxtofl@val+2)^0,c
  1431   0026D8  6A04               	clrf	(___xxtofl@val+3)^0,c
  1432   0026DA  0E00               	movlw	0
  1433   0026DC  EC2A  F012         	call	___xxtofl
  1434   0026E0  C001  F0A6         	movff	?___xxtofl,main@current
  1435   0026E4  C002  F0A7         	movff	?___xxtofl+1,main@current+1
  1436   0026E8  C003  F0A8         	movff	?___xxtofl+2,main@current+2
  1437   0026EC  C004  F0A9         	movff	?___xxtofl+3,main@current+3
  1438   0026F0                     
  1439                           ;main.c: 114:         float maximum = colorCalibration.clear;
  1440   0026F0  C0F5  F001         	movff	_colorCalibration+6,___xxtofl@val
  1441   0026F4  C0F6  F002         	movff	_colorCalibration+7,___xxtofl@val+1
  1442   0026F8  6A03               	clrf	(___xxtofl@val+2)^0,c
  1443   0026FA  6A04               	clrf	(___xxtofl@val+3)^0,c
  1444   0026FC  0E00               	movlw	0
  1445   0026FE  EC2A  F012         	call	___xxtofl
  1446   002702  C001  F0AA         	movff	?___xxtofl,main@maximum
  1447   002706  C002  F0AB         	movff	?___xxtofl+1,main@maximum+1
  1448   00270A  C003  F0AC         	movff	?___xxtofl+2,main@maximum+2
  1449   00270E  C004  F0AD         	movff	?___xxtofl+3,main@maximum+3
  1450   002712                     
  1451                           ;main.c: 115:         float clear_norm = current/maximum;
  1452   002712  C0A6  F019         	movff	main@current,___fldiv@b
  1453   002716  C0A7  F01A         	movff	main@current+1,___fldiv@b+1
  1454   00271A  C0A8  F01B         	movff	main@current+2,___fldiv@b+2
  1455   00271E  C0A9  F01C         	movff	main@current+3,___fldiv@b+3
  1456   002722  C0AA  F01D         	movff	main@maximum,___fldiv@a
  1457   002726  C0AB  F01E         	movff	main@maximum+1,___fldiv@a+1
  1458   00272A  C0AC  F01F         	movff	main@maximum+2,___fldiv@a+2
  1459   00272E  C0AD  F020         	movff	main@maximum+3,___fldiv@a+3
  1460   002732  EC74  F00F         	call	___fldiv	;wreg free
  1461   002736  C019  F0AE         	movff	?___fldiv,main@clear_norm
  1462   00273A  C01A  F0AF         	movff	?___fldiv+1,main@clear_norm+1
  1463   00273E  C01B  F0B0         	movff	?___fldiv+2,main@clear_norm+2
  1464   002742  C01C  F0B1         	movff	?___fldiv+3,main@clear_norm+3
  1465   002746                     
  1466                           ;main.c: 118:         if (clear_norm > 0.15){
  1467   002746  0E9A               	movlw	154
  1468   002748  6E01               	movwf	___flge@ff1^0,c
  1469   00274A  0E99               	movlw	153
  1470   00274C  6E02               	movwf	(___flge@ff1+1)^0,c
  1471   00274E  0E19               	movlw	25
  1472   002750  6E03               	movwf	(___flge@ff1+2)^0,c
  1473   002752  0E3E               	movlw	62
  1474   002754  6E04               	movwf	(___flge@ff1+3)^0,c
  1475   002756  C0AE  F005         	movff	main@clear_norm,___flge@ff2
  1476   00275A  C0AF  F006         	movff	main@clear_norm+1,___flge@ff2+1
  1477   00275E  C0B0  F007         	movff	main@clear_norm+2,___flge@ff2+2
  1478   002762  C0B1  F008         	movff	main@clear_norm+3,___flge@ff2+3
  1479   002766  EC47  F017         	call	___flge	;wreg free
  1480   00276A  B0D8               	btfsc	status,0,c
  1481   00276C  EFBA  F013         	goto	u4371
  1482   002770  EFBC  F013         	goto	u4370
  1483   002774                     u4371:
  1484   002774  EF58  F013         	goto	l4893
  1485   002778                     u4370:
  1486   002778                     
  1487                           ;main.c: 119:             stop(&motorL,&motorR);
  1488   002778  0EDE               	movlw	low _motorL
  1489   00277A  6E13               	movwf	stop@mL^0,c
  1490   00277C  0ED5               	movlw	low _motorR
  1491   00277E  6E14               	movwf	stop@mR^0,c
  1492   002780  EC8A  F01A         	call	_stop	;wreg free
  1493                           
  1494                           ;main.c: 120:             hue = reading_hue(&colorCurrent);
  1495   002784  0EE7               	movlw	low _colorCurrent
  1496   002786  6E36               	movwf	reading_hue@cCurr^0,c
  1497   002788  ECC9  F017         	call	_reading_hue	;wreg free
  1498   00278C  C036  F0B2         	movff	?_reading_hue,main@hue
  1499   002790  C037  F0B3         	movff	?_reading_hue+1,main@hue+1
  1500                           
  1501                           ;main.c: 121:             decision(hue);
  1502   002794  C0B2  F020         	movff	main@hue,decision@hue
  1503   002798  C0B3  F021         	movff	main@hue+1,decision@hue+1
  1504   00279C  ECD4  F013         	call	_decision	;wreg free
  1505   0027A0  EF58  F013         	goto	l4893
  1506   0027A4  EF00  F000         	goto	start
  1507   0027A8                     __end_of_main:
  1508                           	callstack 0
  1509                           
  1510 ;; *************** function _reading_hue *****************
  1511 ;; Defined at:
  1512 ;;		line 136 in file "color.c"
  1513 ;; Parameters:    Size  Location     Type
  1514 ;;  cCurr           1   53[COMRAM] PTR struct colors
  1515 ;;		 -> colorCurrent(8), 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;  led_state      50    0        unsigned char [50]
  1518 ;;  hue             2   57[COMRAM] unsigned int 
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  2   53[COMRAM] unsigned int 
  1521 ;; Registers used:
  1522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1528 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1529 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1530 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1531 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1532 ;;Total ram usage:        6 bytes
  1533 ;; Hardware stack levels used: 1
  1534 ;; Hardware stack levels required when called: 3
  1535 ;; This function calls:
  1536 ;;		_color_read_Blue
  1537 ;;		_color_read_Clear
  1538 ;;		_color_read_Green
  1539 ;;		_color_read_Red
  1540 ;;		_convert_rgb2hue
  1541 ;; This function is called by:
  1542 ;;		_main
  1543 ;; This function uses a non-reentrant model
  1544 ;;
  1545                           
  1546                           	psect	text1
  1547   002F92                     __ptext1:
  1548                           	callstack 0
  1549   002F92                     _reading_hue:
  1550                           	callstack 27
  1551   002F92                     
  1552                           ;color.c: 136:     unsigned int reading_hue(colors *cCurr);color.c: 137: {;color.c: 138:
      +                               unsigned int hue;;color.c: 140:     char led_state[50];;color.c: 145:     LATGbits.
      +                          LATG0 = 1;
  1553   002F92  807F               	bsf	127,0,c	;volatile
  1554                           
  1555                           ;color.c: 146:     LATEbits.LATE7 = 0;
  1556   002F94  9E7D               	bcf	125,7,c	;volatile
  1557                           
  1558                           ;color.c: 147:     LATAbits.LATA3 = 0;
  1559   002F96  9679               	bcf	121,3,c	;volatile
  1560   002F98                     
  1561                           ;color.c: 148:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1562   002F98  0E29               	movlw	41
  1563   002F9A  6E39               	movwf	(??_reading_hue+1)^0,c
  1564   002F9C  0E96               	movlw	150
  1565   002F9E  6E38               	movwf	??_reading_hue^0,c
  1566   002FA0  0E7F               	movlw	127
  1567   002FA2                     u4407:
  1568   002FA2  2EE8               	decfsz	wreg,f,c
  1569   002FA4  D7FE               	bra	u4407
  1570   002FA6  2E38               	decfsz	??_reading_hue^0,f,c
  1571   002FA8  D7FC               	bra	u4407
  1572   002FAA  2E39               	decfsz	(??_reading_hue+1)^0,f,c
  1573   002FAC  D7FA               	bra	u4407
  1574   002FAE  0000               	nop	
  1575   002FB0                     
  1576                           ;color.c: 149:     (cCurr->red)= color_read_Red();
  1577   002FB0  EC01  F01C         	call	_color_read_Red	;wreg free
  1578   002FB4  5036               	movf	reading_hue@cCurr^0,w,c
  1579   002FB6  6ED9               	movwf	fsr2l,c
  1580   002FB8  6ADA               	clrf	fsr2h,c
  1581   002FBA  C005  FFDE         	movff	?_color_read_Red,postinc2
  1582   002FBE  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  1583   002FC2                     
  1584                           ;color.c: 154:     LATGbits.LATG0 = 0;
  1585   002FC2  907F               	bcf	127,0,c	;volatile
  1586   002FC4                     
  1587                           ;color.c: 155:     LATEbits.LATE7 = 1;
  1588   002FC4  8E7D               	bsf	125,7,c	;volatile
  1589   002FC6                     
  1590                           ;color.c: 156:     LATAbits.LATA3 = 0;
  1591   002FC6  9679               	bcf	121,3,c	;volatile
  1592   002FC8                     
  1593                           ;color.c: 157:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1594   002FC8  0E29               	movlw	41
  1595   002FCA  6E39               	movwf	(??_reading_hue+1)^0,c
  1596   002FCC  0E96               	movlw	150
  1597   002FCE  6E38               	movwf	??_reading_hue^0,c
  1598   002FD0  0E7F               	movlw	127
  1599   002FD2                     u4417:
  1600   002FD2  2EE8               	decfsz	wreg,f,c
  1601   002FD4  D7FE               	bra	u4417
  1602   002FD6  2E38               	decfsz	??_reading_hue^0,f,c
  1603   002FD8  D7FC               	bra	u4417
  1604   002FDA  2E39               	decfsz	(??_reading_hue+1)^0,f,c
  1605   002FDC  D7FA               	bra	u4417
  1606   002FDE  0000               	nop	
  1607                           
  1608                           ;color.c: 158:     (cCurr->green) = color_read_Green();
  1609   002FE0  EC29  F01C         	call	_color_read_Green	;wreg free
  1610   002FE4  5036               	movf	reading_hue@cCurr^0,w,c
  1611   002FE6  6ED9               	movwf	fsr2l,c
  1612   002FE8  6ADA               	clrf	fsr2h,c
  1613   002FEA  0E02               	movlw	2
  1614   002FEC  26D9               	addwf	fsr2l,f,c
  1615   002FEE  C005  FFDE         	movff	?_color_read_Green,postinc2
  1616   002FF2  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  1617   002FF6                     
  1618                           ;color.c: 164:     LATGbits.LATG0 = 0;
  1619   002FF6  907F               	bcf	127,0,c	;volatile
  1620   002FF8                     
  1621                           ;color.c: 165:     LATEbits.LATE7 = 0;
  1622   002FF8  9E7D               	bcf	125,7,c	;volatile
  1623   002FFA                     
  1624                           ;color.c: 166:     LATAbits.LATA3 = 1;
  1625   002FFA  8679               	bsf	121,3,c	;volatile
  1626   002FFC                     
  1627                           ;color.c: 167:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1628   002FFC  0E29               	movlw	41
  1629   002FFE  6E39               	movwf	(??_reading_hue+1)^0,c
  1630   003000  0E96               	movlw	150
  1631   003002  6E38               	movwf	??_reading_hue^0,c
  1632   003004  0E7F               	movlw	127
  1633   003006                     u4427:
  1634   003006  2EE8               	decfsz	wreg,f,c
  1635   003008  D7FE               	bra	u4427
  1636   00300A  2E38               	decfsz	??_reading_hue^0,f,c
  1637   00300C  D7FC               	bra	u4427
  1638   00300E  2E39               	decfsz	(??_reading_hue+1)^0,f,c
  1639   003010  D7FA               	bra	u4427
  1640   003012  0000               	nop	
  1641   003014                     
  1642                           ;color.c: 168:     (cCurr->blue) = color_read_Blue();
  1643   003014  EC79  F01C         	call	_color_read_Blue	;wreg free
  1644   003018  5036               	movf	reading_hue@cCurr^0,w,c
  1645   00301A  6ED9               	movwf	fsr2l,c
  1646   00301C  6ADA               	clrf	fsr2h,c
  1647   00301E  0E04               	movlw	4
  1648   003020  26D9               	addwf	fsr2l,f,c
  1649   003022  C005  FFDE         	movff	?_color_read_Blue,postinc2
  1650   003026  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  1651   00302A                     
  1652                           ;color.c: 173:     LATGbits.LATG0 = 1;
  1653   00302A  807F               	bsf	127,0,c	;volatile
  1654   00302C                     
  1655                           ;color.c: 174:     LATEbits.LATE7 = 1;
  1656   00302C  8E7D               	bsf	125,7,c	;volatile
  1657   00302E                     
  1658                           ;color.c: 175:     LATAbits.LATA3 = 1;
  1659   00302E  8679               	bsf	121,3,c	;volatile
  1660                           
  1661                           ;color.c: 176:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1662   003030  0E29               	movlw	41
  1663   003032  6E39               	movwf	(??_reading_hue+1)^0,c
  1664   003034  0E96               	movlw	150
  1665   003036  6E38               	movwf	??_reading_hue^0,c
  1666   003038  0E7F               	movlw	127
  1667   00303A                     u4437:
  1668   00303A  2EE8               	decfsz	wreg,f,c
  1669   00303C  D7FE               	bra	u4437
  1670   00303E  2E38               	decfsz	??_reading_hue^0,f,c
  1671   003040  D7FC               	bra	u4437
  1672   003042  2E39               	decfsz	(??_reading_hue+1)^0,f,c
  1673   003044  D7FA               	bra	u4437
  1674   003046  0000               	nop	
  1675   003048                     
  1676                           ;color.c: 177:     (cCurr->clear) = color_read_Clear();
  1677   003048  EC51  F01C         	call	_color_read_Clear	;wreg free
  1678   00304C  5036               	movf	reading_hue@cCurr^0,w,c
  1679   00304E  6ED9               	movwf	fsr2l,c
  1680   003050  6ADA               	clrf	fsr2h,c
  1681   003052  0E06               	movlw	6
  1682   003054  26D9               	addwf	fsr2l,f,c
  1683   003056  C005  FFDE         	movff	?_color_read_Clear,postinc2
  1684   00305A  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  1685   00305E                     
  1686                           ;color.c: 183:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  1687   00305E  0EEF               	movlw	low _colorCalibration
  1688   003060  6E32               	movwf	convert_rgb2hue@cMax^0,c
  1689   003062  0EE7               	movlw	low _colorCurrent
  1690   003064  6E33               	movwf	convert_rgb2hue@cCurr^0,c
  1691   003066  EC58  F007         	call	_convert_rgb2hue	;wreg free
  1692   00306A  C032  F03A         	movff	?_convert_rgb2hue,reading_hue@hue
  1693   00306E  C033  F03B         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  1694   003072                     
  1695                           ;color.c: 190:     return hue;
  1696   003072  C03A  F036         	movff	reading_hue@hue,?_reading_hue
  1697   003076  C03B  F037         	movff	reading_hue@hue+1,?_reading_hue+1
  1698   00307A  0012               	return		;funcret
  1699   00307C                     __end_of_reading_hue:
  1700                           	callstack 0
  1701                           
  1702 ;; *************** function _convert_rgb2hue *****************
  1703 ;; Defined at:
  1704 ;;		line 273 in file "color.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;  cMax            1   49[COMRAM] PTR struct colors
  1707 ;;		 -> colorCalibration(8), 
  1708 ;;  cCurr           1   50[COMRAM] PTR struct colors
  1709 ;;		 -> colorCurrent(8), 
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;  b               4   64[BANK0 ] float 
  1712 ;;  g               4   60[BANK0 ] float 
  1713 ;;  r               4   56[BANK0 ] float 
  1714 ;;  hue             4   52[BANK0 ] float 
  1715 ;;  max             4   48[BANK0 ] float 
  1716 ;;  diff            4   44[BANK0 ] float 
  1717 ;;  min             4   40[BANK0 ] float 
  1718 ;;  bluemax         4   20[BANK0 ] float 
  1719 ;;  bluecurrent     4   16[BANK0 ] float 
  1720 ;;  greenmax        4   12[BANK0 ] float 
  1721 ;;  greencurrent    4    8[BANK0 ] float 
  1722 ;;  redmax          4    4[BANK0 ] float 
  1723 ;;  redcurrent      4    0[BANK0 ] float 
  1724 ;;  clearmax        4    0        float 
  1725 ;;  clearcurrent    4    0        float 
  1726 ;;  c               4    0        float 
  1727 ;; Return value:  Size  Location     Type
  1728 ;;                  2   49[COMRAM] unsigned int 
  1729 ;; Registers used:
  1730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1731 ;; Tracked objects:
  1732 ;;		On entry : 0/0
  1733 ;;		On exit  : 0/0
  1734 ;;		Unchanged: 0/0
  1735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1736 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1737 ;;      Locals:         0      68       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1738 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1739 ;;      Totals:         4      68       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1740 ;;Total ram usage:       72 bytes
  1741 ;; Hardware stack levels used: 1
  1742 ;; Hardware stack levels required when called: 2
  1743 ;; This function calls:
  1744 ;;		___fladd
  1745 ;;		___fldiv
  1746 ;;		___fleq
  1747 ;;		___flge
  1748 ;;		___flmul
  1749 ;;		___flsub
  1750 ;;		___fltol
  1751 ;;		___xxtofl
  1752 ;; This function is called by:
  1753 ;;		_reading_hue
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           	psect	text2
  1758   000EB0                     __ptext2:
  1759                           	callstack 0
  1760   000EB0                     _convert_rgb2hue:
  1761                           	callstack 27
  1762   000EB0                     
  1763                           ;color.c: 273: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 274: {;color.c: 275:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 276:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  1764   000EB0  0E00               	movlw	0
  1765   000EB2  0100               	movlb	0	; () banked
  1766   000EB4  6F94               	movwf	convert_rgb2hue@hue& (0+255),b
  1767   000EB6  0E00               	movlw	0
  1768   000EB8  6F95               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  1769   000EBA  0E00               	movlw	0
  1770   000EBC  6F96               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  1771   000EBE  0E00               	movlw	0
  1772   000EC0  6F97               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  1773   000EC2                     
  1774                           ; BSR set to: 0
  1775                           ;color.c: 278:     redcurrent = cCurr->red;
  1776   000EC2  5033               	movf	convert_rgb2hue@cCurr^0,w,c
  1777   000EC4  6ED9               	movwf	fsr2l,c
  1778   000EC6  6ADA               	clrf	fsr2h,c
  1779   000EC8  CFDE F034          	movff	postinc2,??_convert_rgb2hue
  1780   000ECC  CFDD F035          	movff	postdec2,??_convert_rgb2hue+1
  1781   000ED0  C034  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  1782   000ED4  C035  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  1783   000ED8  6A03               	clrf	(___xxtofl@val+2)^0,c
  1784   000EDA  6A04               	clrf	(___xxtofl@val+3)^0,c
  1785   000EDC  0E00               	movlw	0
  1786   000EDE  EC2A  F012         	call	___xxtofl
  1787   000EE2  C001  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  1788   000EE6  C002  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  1789   000EEA  C003  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  1790   000EEE  C004  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  1791   000EF2                     
  1792                           ;color.c: 279:     redmax = cMax->red;
  1793   000EF2  5032               	movf	convert_rgb2hue@cMax^0,w,c
  1794   000EF4  6ED9               	movwf	fsr2l,c
  1795   000EF6  6ADA               	clrf	fsr2h,c
  1796   000EF8  CFDE F034          	movff	postinc2,??_convert_rgb2hue
  1797   000EFC  CFDD F035          	movff	postdec2,??_convert_rgb2hue+1
  1798   000F00  C034  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  1799   000F04  C035  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  1800   000F08  6A03               	clrf	(___xxtofl@val+2)^0,c
  1801   000F0A  6A04               	clrf	(___xxtofl@val+3)^0,c
  1802   000F0C  0E00               	movlw	0
  1803   000F0E  EC2A  F012         	call	___xxtofl
  1804   000F12  C001  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  1805   000F16  C002  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  1806   000F1A  C003  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  1807   000F1E  C004  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  1808   000F22                     
  1809                           ;color.c: 280:     greencurrent = cCurr->green;
  1810   000F22  5033               	movf	convert_rgb2hue@cCurr^0,w,c
  1811   000F24  6ED9               	movwf	fsr2l,c
  1812   000F26  6ADA               	clrf	fsr2h,c
  1813   000F28  0E02               	movlw	2
  1814   000F2A  26D9               	addwf	fsr2l,f,c
  1815   000F2C  CFDE F034          	movff	postinc2,??_convert_rgb2hue
  1816   000F30  CFDD F035          	movff	postdec2,??_convert_rgb2hue+1
  1817   000F34  C034  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  1818   000F38  C035  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  1819   000F3C  6A03               	clrf	(___xxtofl@val+2)^0,c
  1820   000F3E  6A04               	clrf	(___xxtofl@val+3)^0,c
  1821   000F40  0E00               	movlw	0
  1822   000F42  EC2A  F012         	call	___xxtofl
  1823   000F46  C001  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  1824   000F4A  C002  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  1825   000F4E  C003  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  1826   000F52  C004  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  1827   000F56                     
  1828                           ;color.c: 281:     greenmax = cMax->green;
  1829   000F56  5032               	movf	convert_rgb2hue@cMax^0,w,c
  1830   000F58  6ED9               	movwf	fsr2l,c
  1831   000F5A  6ADA               	clrf	fsr2h,c
  1832   000F5C  0E02               	movlw	2
  1833   000F5E  26D9               	addwf	fsr2l,f,c
  1834   000F60  CFDE F034          	movff	postinc2,??_convert_rgb2hue
  1835   000F64  CFDD F035          	movff	postdec2,??_convert_rgb2hue+1
  1836   000F68  C034  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  1837   000F6C  C035  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  1838   000F70  6A03               	clrf	(___xxtofl@val+2)^0,c
  1839   000F72  6A04               	clrf	(___xxtofl@val+3)^0,c
  1840   000F74  0E00               	movlw	0
  1841   000F76  EC2A  F012         	call	___xxtofl
  1842   000F7A  C001  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  1843   000F7E  C002  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  1844   000F82  C003  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  1845   000F86  C004  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  1846   000F8A                     
  1847                           ;color.c: 282:     bluecurrent = cCurr->blue;
  1848   000F8A  5033               	movf	convert_rgb2hue@cCurr^0,w,c
  1849   000F8C  6ED9               	movwf	fsr2l,c
  1850   000F8E  6ADA               	clrf	fsr2h,c
  1851   000F90  0E04               	movlw	4
  1852   000F92  26D9               	addwf	fsr2l,f,c
  1853   000F94  CFDE F034          	movff	postinc2,??_convert_rgb2hue
  1854   000F98  CFDD F035          	movff	postdec2,??_convert_rgb2hue+1
  1855   000F9C  C034  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  1856   000FA0  C035  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  1857   000FA4  6A03               	clrf	(___xxtofl@val+2)^0,c
  1858   000FA6  6A04               	clrf	(___xxtofl@val+3)^0,c
  1859   000FA8  0E00               	movlw	0
  1860   000FAA  EC2A  F012         	call	___xxtofl
  1861   000FAE  C001  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  1862   000FB2  C002  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  1863   000FB6  C003  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  1864   000FBA  C004  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  1865   000FBE                     
  1866                           ;color.c: 283:     bluemax = cMax->blue;
  1867   000FBE  5032               	movf	convert_rgb2hue@cMax^0,w,c
  1868   000FC0  6ED9               	movwf	fsr2l,c
  1869   000FC2  6ADA               	clrf	fsr2h,c
  1870   000FC4  0E04               	movlw	4
  1871   000FC6  26D9               	addwf	fsr2l,f,c
  1872   000FC8  CFDE F034          	movff	postinc2,??_convert_rgb2hue
  1873   000FCC  CFDD F035          	movff	postdec2,??_convert_rgb2hue+1
  1874   000FD0  C034  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  1875   000FD4  C035  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  1876   000FD8  6A03               	clrf	(___xxtofl@val+2)^0,c
  1877   000FDA  6A04               	clrf	(___xxtofl@val+3)^0,c
  1878   000FDC  0E00               	movlw	0
  1879   000FDE  EC2A  F012         	call	___xxtofl
  1880   000FE2  C001  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  1881   000FE6  C002  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  1882   000FEA  C003  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  1883   000FEE  C004  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  1884   000FF2  5033               	movf	convert_rgb2hue@cCurr^0,w,c
  1885   000FF4  6ED9               	movwf	fsr2l,c
  1886   000FF6  6ADA               	clrf	fsr2h,c
  1887   000FF8  0E06               	movlw	6
  1888   000FFA  26D9               	addwf	fsr2l,f,c
  1889   000FFC  CFDE F034          	movff	postinc2,??_convert_rgb2hue
  1890   001000  CFDD F035          	movff	postdec2,??_convert_rgb2hue+1
  1891   001004  C034  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  1892   001008  C035  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  1893   00100C  6A03               	clrf	(___xxtofl@val+2)^0,c
  1894   00100E  6A04               	clrf	(___xxtofl@val+3)^0,c
  1895   001010  0E00               	movlw	0
  1896   001012  EC2A  F012         	call	___xxtofl
  1897   001016  5032               	movf	convert_rgb2hue@cMax^0,w,c
  1898   001018  6ED9               	movwf	fsr2l,c
  1899   00101A  6ADA               	clrf	fsr2h,c
  1900   00101C  0E06               	movlw	6
  1901   00101E  26D9               	addwf	fsr2l,f,c
  1902   001020  CFDE F034          	movff	postinc2,??_convert_rgb2hue
  1903   001024  CFDD F035          	movff	postdec2,??_convert_rgb2hue+1
  1904   001028  C034  F001         	movff	??_convert_rgb2hue,___xxtofl@val
  1905   00102C  C035  F002         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  1906   001030  6A03               	clrf	(___xxtofl@val+2)^0,c
  1907   001032  6A04               	clrf	(___xxtofl@val+3)^0,c
  1908   001034  0E00               	movlw	0
  1909   001036  EC2A  F012         	call	___xxtofl
  1910   00103A                     
  1911                           ;color.c: 291:     r = redcurrent/redmax;
  1912   00103A  C060  F019         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  1913   00103E  C061  F01A         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  1914   001042  C062  F01B         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  1915   001046  C063  F01C         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  1916   00104A  C064  F01D         	movff	convert_rgb2hue@redmax,___fldiv@a
  1917   00104E  C065  F01E         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  1918   001052  C066  F01F         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  1919   001056  C067  F020         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  1920   00105A  EC74  F00F         	call	___fldiv	;wreg free
  1921   00105E  C019  F098         	movff	?___fldiv,convert_rgb2hue@r
  1922   001062  C01A  F099         	movff	?___fldiv+1,convert_rgb2hue@r+1
  1923   001066  C01B  F09A         	movff	?___fldiv+2,convert_rgb2hue@r+2
  1924   00106A  C01C  F09B         	movff	?___fldiv+3,convert_rgb2hue@r+3
  1925   00106E                     
  1926                           ;color.c: 292:     g = greencurrent/greenmax;
  1927   00106E  C068  F019         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  1928   001072  C069  F01A         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  1929   001076  C06A  F01B         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  1930   00107A  C06B  F01C         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  1931   00107E  C06C  F01D         	movff	convert_rgb2hue@greenmax,___fldiv@a
  1932   001082  C06D  F01E         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  1933   001086  C06E  F01F         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  1934   00108A  C06F  F020         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  1935   00108E  EC74  F00F         	call	___fldiv	;wreg free
  1936   001092  C019  F09C         	movff	?___fldiv,convert_rgb2hue@g
  1937   001096  C01A  F09D         	movff	?___fldiv+1,convert_rgb2hue@g+1
  1938   00109A  C01B  F09E         	movff	?___fldiv+2,convert_rgb2hue@g+2
  1939   00109E  C01C  F09F         	movff	?___fldiv+3,convert_rgb2hue@g+3
  1940   0010A2                     
  1941                           ;color.c: 293:     b = bluecurrent/bluemax;
  1942   0010A2  C070  F019         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  1943   0010A6  C071  F01A         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  1944   0010AA  C072  F01B         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  1945   0010AE  C073  F01C         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  1946   0010B2  C074  F01D         	movff	convert_rgb2hue@bluemax,___fldiv@a
  1947   0010B6  C075  F01E         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  1948   0010BA  C076  F01F         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  1949   0010BE  C077  F020         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  1950   0010C2  EC74  F00F         	call	___fldiv	;wreg free
  1951   0010C6  C019  F0A0         	movff	?___fldiv,convert_rgb2hue@b
  1952   0010CA  C01A  F0A1         	movff	?___fldiv+1,convert_rgb2hue@b+1
  1953   0010CE  C01B  F0A2         	movff	?___fldiv+2,convert_rgb2hue@b+2
  1954   0010D2  C01C  F0A3         	movff	?___fldiv+3,convert_rgb2hue@b+3
  1955   0010D6                     
  1956                           ;color.c: 295:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  1957   0010D6  C098  F001         	movff	convert_rgb2hue@r,___flge@ff1
  1958   0010DA  C099  F002         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  1959   0010DE  C09A  F003         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  1960   0010E2  C09B  F004         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  1961   0010E6  C09C  F005         	movff	convert_rgb2hue@g,___flge@ff2
  1962   0010EA  C09D  F006         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  1963   0010EE  C09E  F007         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  1964   0010F2  C09F  F008         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  1965   0010F6  EC47  F017         	call	___flge	;wreg free
  1966   0010FA  A0D8               	btfss	status,0,c
  1967   0010FC  EF82  F008         	goto	u3701
  1968   001100  EF84  F008         	goto	u3700
  1969   001104                     u3701:
  1970   001104  EFB9  F008         	goto	l4127
  1971   001108                     u3700:
  1972   001108  C09C  F001         	movff	convert_rgb2hue@g,___flge@ff1
  1973   00110C  C09D  F002         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  1974   001110  C09E  F003         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  1975   001114  C09F  F004         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  1976   001118  C0A0  F005         	movff	convert_rgb2hue@b,___flge@ff2
  1977   00111C  C0A1  F006         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  1978   001120  C0A2  F007         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  1979   001124  C0A3  F008         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  1980   001128  EC47  F017         	call	___flge	;wreg free
  1981   00112C  A0D8               	btfss	status,0,c
  1982   00112E  EF9B  F008         	goto	u3711
  1983   001132  EF9D  F008         	goto	u3710
  1984   001136                     u3711:
  1985   001136  EFA7  F008         	goto	l115
  1986   00113A                     u3710:
  1987   00113A  C0A0  F078         	movff	convert_rgb2hue@b,_convert_rgb2hue$411
  1988   00113E  C0A1  F079         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$411+1
  1989   001142  C0A2  F07A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$411+2
  1990   001146  C0A3  F07B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$411+3
  1991   00114A  EFAF  F008         	goto	l117
  1992   00114E                     l115:
  1993   00114E  C09C  F078         	movff	convert_rgb2hue@g,_convert_rgb2hue$411
  1994   001152  C09D  F079         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$411+1
  1995   001156  C09E  F07A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$411+2
  1996   00115A  C09F  F07B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$411+3
  1997   00115E                     l117:
  1998   00115E  C078  F088         	movff	_convert_rgb2hue$411,convert_rgb2hue@min
  1999   001162  C079  F089         	movff	_convert_rgb2hue$411+1,convert_rgb2hue@min+1
  2000   001166  C07A  F08A         	movff	_convert_rgb2hue$411+2,convert_rgb2hue@min+2
  2001   00116A  C07B  F08B         	movff	_convert_rgb2hue$411+3,convert_rgb2hue@min+3
  2002   00116E  EFEC  F008         	goto	l4131
  2003   001172                     l4127:
  2004   001172  C098  F001         	movff	convert_rgb2hue@r,___flge@ff1
  2005   001176  C099  F002         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  2006   00117A  C09A  F003         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  2007   00117E  C09B  F004         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  2008   001182  C0A0  F005         	movff	convert_rgb2hue@b,___flge@ff2
  2009   001186  C0A1  F006         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  2010   00118A  C0A2  F007         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  2011   00118E  C0A3  F008         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  2012   001192  EC47  F017         	call	___flge	;wreg free
  2013   001196  A0D8               	btfss	status,0,c
  2014   001198  EFD0  F008         	goto	u3721
  2015   00119C  EFD2  F008         	goto	u3720
  2016   0011A0                     u3721:
  2017   0011A0  EFDC  F008         	goto	l119
  2018   0011A4                     u3720:
  2019   0011A4  C0A0  F07C         	movff	convert_rgb2hue@b,_convert_rgb2hue$412
  2020   0011A8  C0A1  F07D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$412+1
  2021   0011AC  C0A2  F07E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$412+2
  2022   0011B0  C0A3  F07F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$412+3
  2023   0011B4  EFE4  F008         	goto	l121
  2024   0011B8                     l119:
  2025   0011B8  C098  F07C         	movff	convert_rgb2hue@r,_convert_rgb2hue$412
  2026   0011BC  C099  F07D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$412+1
  2027   0011C0  C09A  F07E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$412+2
  2028   0011C4  C09B  F07F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$412+3
  2029   0011C8                     l121:
  2030   0011C8  C07C  F088         	movff	_convert_rgb2hue$412,convert_rgb2hue@min
  2031   0011CC  C07D  F089         	movff	_convert_rgb2hue$412+1,convert_rgb2hue@min+1
  2032   0011D0  C07E  F08A         	movff	_convert_rgb2hue$412+2,convert_rgb2hue@min+2
  2033   0011D4  C07F  F08B         	movff	_convert_rgb2hue$412+3,convert_rgb2hue@min+3
  2034   0011D8                     l4131:
  2035                           
  2036                           ;color.c: 296:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  2037   0011D8  C09C  F001         	movff	convert_rgb2hue@g,___flge@ff1
  2038   0011DC  C09D  F002         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  2039   0011E0  C09E  F003         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  2040   0011E4  C09F  F004         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  2041   0011E8  C098  F005         	movff	convert_rgb2hue@r,___flge@ff2
  2042   0011EC  C099  F006         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  2043   0011F0  C09A  F007         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  2044   0011F4  C09B  F008         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  2045   0011F8  EC47  F017         	call	___flge	;wreg free
  2046   0011FC  A0D8               	btfss	status,0,c
  2047   0011FE  EF03  F009         	goto	u3731
  2048   001202  EF05  F009         	goto	u3730
  2049   001206                     u3731:
  2050   001206  EF3A  F009         	goto	l4137
  2051   00120A                     u3730:
  2052   00120A  C0A0  F001         	movff	convert_rgb2hue@b,___flge@ff1
  2053   00120E  C0A1  F002         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  2054   001212  C0A2  F003         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  2055   001216  C0A3  F004         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  2056   00121A  C09C  F005         	movff	convert_rgb2hue@g,___flge@ff2
  2057   00121E  C09D  F006         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  2058   001222  C09E  F007         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  2059   001226  C09F  F008         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  2060   00122A  EC47  F017         	call	___flge	;wreg free
  2061   00122E  A0D8               	btfss	status,0,c
  2062   001230  EF1C  F009         	goto	u3741
  2063   001234  EF1E  F009         	goto	u3740
  2064   001238                     u3741:
  2065   001238  EF28  F009         	goto	l127
  2066   00123C                     u3740:
  2067   00123C  C0A0  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$413
  2068   001240  C0A1  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$413+1
  2069   001244  C0A2  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$413+2
  2070   001248  C0A3  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$413+3
  2071   00124C  EF30  F009         	goto	l129
  2072   001250                     l127:
  2073   001250  C09C  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$413
  2074   001254  C09D  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$413+1
  2075   001258  C09E  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$413+2
  2076   00125C  C09F  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$413+3
  2077   001260                     l129:
  2078   001260  C080  F090         	movff	_convert_rgb2hue$413,convert_rgb2hue@max
  2079   001264  C081  F091         	movff	_convert_rgb2hue$413+1,convert_rgb2hue@max+1
  2080   001268  C082  F092         	movff	_convert_rgb2hue$413+2,convert_rgb2hue@max+2
  2081   00126C  C083  F093         	movff	_convert_rgb2hue$413+3,convert_rgb2hue@max+3
  2082   001270  EF6D  F009         	goto	l4141
  2083   001274                     l4137:
  2084   001274  C0A0  F001         	movff	convert_rgb2hue@b,___flge@ff1
  2085   001278  C0A1  F002         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  2086   00127C  C0A2  F003         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  2087   001280  C0A3  F004         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  2088   001284  C098  F005         	movff	convert_rgb2hue@r,___flge@ff2
  2089   001288  C099  F006         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  2090   00128C  C09A  F007         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  2091   001290  C09B  F008         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  2092   001294  EC47  F017         	call	___flge	;wreg free
  2093   001298  A0D8               	btfss	status,0,c
  2094   00129A  EF51  F009         	goto	u3751
  2095   00129E  EF53  F009         	goto	u3750
  2096   0012A2                     u3751:
  2097   0012A2  EF5D  F009         	goto	l131
  2098   0012A6                     u3750:
  2099   0012A6  C0A0  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$414
  2100   0012AA  C0A1  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$414+1
  2101   0012AE  C0A2  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$414+2
  2102   0012B2  C0A3  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$414+3
  2103   0012B6  EF65  F009         	goto	l133
  2104   0012BA                     l131:
  2105   0012BA  C098  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$414
  2106   0012BE  C099  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$414+1
  2107   0012C2  C09A  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$414+2
  2108   0012C6  C09B  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$414+3
  2109   0012CA                     l133:
  2110   0012CA  C084  F090         	movff	_convert_rgb2hue$414,convert_rgb2hue@max
  2111   0012CE  C085  F091         	movff	_convert_rgb2hue$414+1,convert_rgb2hue@max+1
  2112   0012D2  C086  F092         	movff	_convert_rgb2hue$414+2,convert_rgb2hue@max+2
  2113   0012D6  C087  F093         	movff	_convert_rgb2hue$414+3,convert_rgb2hue@max+3
  2114   0012DA                     l4141:
  2115                           
  2116                           ;color.c: 297:     diff = max - min;
  2117   0012DA  C090  F011         	movff	convert_rgb2hue@max,___flsub@b
  2118   0012DE  C091  F012         	movff	convert_rgb2hue@max+1,___flsub@b+1
  2119   0012E2  C092  F013         	movff	convert_rgb2hue@max+2,___flsub@b+2
  2120   0012E6  C093  F014         	movff	convert_rgb2hue@max+3,___flsub@b+3
  2121   0012EA  C088  F015         	movff	convert_rgb2hue@min,___flsub@a
  2122   0012EE  C089  F016         	movff	convert_rgb2hue@min+1,___flsub@a+1
  2123   0012F2  C08A  F017         	movff	convert_rgb2hue@min+2,___flsub@a+2
  2124   0012F6  C08B  F018         	movff	convert_rgb2hue@min+3,___flsub@a+3
  2125   0012FA  ECA1  F01C         	call	___flsub	;wreg free
  2126   0012FE  C011  F08C         	movff	?___flsub,convert_rgb2hue@diff
  2127   001302  C012  F08D         	movff	?___flsub+1,convert_rgb2hue@diff+1
  2128   001306  C013  F08E         	movff	?___flsub+2,convert_rgb2hue@diff+2
  2129   00130A  C014  F08F         	movff	?___flsub+3,convert_rgb2hue@diff+3
  2130                           
  2131                           ;color.c: 298:     if (max == min) {
  2132   00130E  C090  F001         	movff	convert_rgb2hue@max,___fleq@ff1
  2133   001312  C091  F002         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  2134   001316  C092  F003         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  2135   00131A  C093  F004         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  2136   00131E  C088  F005         	movff	convert_rgb2hue@min,___fleq@ff2
  2137   001322  C089  F006         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  2138   001326  C08A  F007         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  2139   00132A  C08B  F008         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  2140   00132E  EC4F  F019         	call	___fleq	;wreg free
  2141   001332  A0D8               	btfss	status,0,c
  2142   001334  EF9E  F009         	goto	u3761
  2143   001338  EFA0  F009         	goto	u3760
  2144   00133C                     u3761:
  2145   00133C  EFAB  F009         	goto	l4145
  2146   001340                     u3760:
  2147   001340                     
  2148                           ;color.c: 299:         hue = 0;
  2149   001340  0E00               	movlw	0
  2150   001342  0100               	movlb	0	; () banked
  2151   001344  6F94               	movwf	convert_rgb2hue@hue& (0+255),b
  2152   001346  0E00               	movlw	0
  2153   001348  6F95               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  2154   00134A  0E00               	movlw	0
  2155   00134C  6F96               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  2156   00134E  0E00               	movlw	0
  2157   001350  6F97               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  2158                           
  2159                           ;color.c: 300:     } else if (max == r){
  2160   001352  EFB4  F00A         	goto	l4157
  2161   001356                     l4145:
  2162   001356  C090  F001         	movff	convert_rgb2hue@max,___fleq@ff1
  2163   00135A  C091  F002         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  2164   00135E  C092  F003         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  2165   001362  C093  F004         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  2166   001366  C098  F005         	movff	convert_rgb2hue@r,___fleq@ff2
  2167   00136A  C099  F006         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  2168   00136E  C09A  F007         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  2169   001372  C09B  F008         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  2170   001376  EC4F  F019         	call	___fleq	;wreg free
  2171   00137A  A0D8               	btfss	status,0,c
  2172   00137C  EFC2  F009         	goto	u3771
  2173   001380  EFC4  F009         	goto	u3770
  2174   001384                     u3771:
  2175   001384  EFF2  F009         	goto	l4149
  2176   001388                     u3770:
  2177   001388                     
  2178                           ;color.c: 301:         hue = (b - g) / diff;
  2179   001388  C09C  F015         	movff	convert_rgb2hue@g,___flsub@a
  2180   00138C  C09D  F016         	movff	convert_rgb2hue@g+1,___flsub@a+1
  2181   001390  C09E  F017         	movff	convert_rgb2hue@g+2,___flsub@a+2
  2182   001394  C09F  F018         	movff	convert_rgb2hue@g+3,___flsub@a+3
  2183   001398  C0A0  F011         	movff	convert_rgb2hue@b,___flsub@b
  2184   00139C  C0A1  F012         	movff	convert_rgb2hue@b+1,___flsub@b+1
  2185   0013A0  C0A2  F013         	movff	convert_rgb2hue@b+2,___flsub@b+2
  2186   0013A4  C0A3  F014         	movff	convert_rgb2hue@b+3,___flsub@b+3
  2187   0013A8  ECA1  F01C         	call	___flsub	;wreg free
  2188   0013AC  C011  F019         	movff	?___flsub,___fldiv@b
  2189   0013B0  C012  F01A         	movff	?___flsub+1,___fldiv@b+1
  2190   0013B4  C013  F01B         	movff	?___flsub+2,___fldiv@b+2
  2191   0013B8  C014  F01C         	movff	?___flsub+3,___fldiv@b+3
  2192   0013BC  C08C  F01D         	movff	convert_rgb2hue@diff,___fldiv@a
  2193   0013C0  C08D  F01E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  2194   0013C4  C08E  F01F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  2195   0013C8  C08F  F020         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  2196   0013CC  EC74  F00F         	call	___fldiv	;wreg free
  2197   0013D0  C019  F094         	movff	?___fldiv,convert_rgb2hue@hue
  2198   0013D4  C01A  F095         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  2199   0013D8  C01B  F096         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  2200   0013DC  C01C  F097         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  2201                           
  2202                           ;color.c: 302:     } else if (max == g){
  2203   0013E0  EFB4  F00A         	goto	l4157
  2204   0013E4                     l4149:
  2205   0013E4  C090  F001         	movff	convert_rgb2hue@max,___fleq@ff1
  2206   0013E8  C091  F002         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  2207   0013EC  C092  F003         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  2208   0013F0  C093  F004         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  2209   0013F4  C09C  F005         	movff	convert_rgb2hue@g,___fleq@ff2
  2210   0013F8  C09D  F006         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  2211   0013FC  C09E  F007         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  2212   001400  C09F  F008         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  2213   001404  EC4F  F019         	call	___fleq	;wreg free
  2214   001408  A0D8               	btfss	status,0,c
  2215   00140A  EF09  F00A         	goto	u3781
  2216   00140E  EF0B  F00A         	goto	u3780
  2217   001412                     u3781:
  2218   001412  EF53  F00A         	goto	l4153
  2219   001416                     u3780:
  2220   001416                     
  2221                           ;color.c: 303:         hue = (b - r) / diff;
  2222   001416  C098  F015         	movff	convert_rgb2hue@r,___flsub@a
  2223   00141A  C099  F016         	movff	convert_rgb2hue@r+1,___flsub@a+1
  2224   00141E  C09A  F017         	movff	convert_rgb2hue@r+2,___flsub@a+2
  2225   001422  C09B  F018         	movff	convert_rgb2hue@r+3,___flsub@a+3
  2226   001426  C0A0  F011         	movff	convert_rgb2hue@b,___flsub@b
  2227   00142A  C0A1  F012         	movff	convert_rgb2hue@b+1,___flsub@b+1
  2228   00142E  C0A2  F013         	movff	convert_rgb2hue@b+2,___flsub@b+2
  2229   001432  C0A3  F014         	movff	convert_rgb2hue@b+3,___flsub@b+3
  2230   001436  ECA1  F01C         	call	___flsub	;wreg free
  2231   00143A  C011  F019         	movff	?___flsub,___fldiv@b
  2232   00143E  C012  F01A         	movff	?___flsub+1,___fldiv@b+1
  2233   001442  C013  F01B         	movff	?___flsub+2,___fldiv@b+2
  2234   001446  C014  F01C         	movff	?___flsub+3,___fldiv@b+3
  2235   00144A  C08C  F01D         	movff	convert_rgb2hue@diff,___fldiv@a
  2236   00144E  C08D  F01E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  2237   001452  C08E  F01F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  2238   001456  C08F  F020         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  2239   00145A  EC74  F00F         	call	___fldiv	;wreg free
  2240   00145E  C019  F094         	movff	?___fldiv,convert_rgb2hue@hue
  2241   001462  C01A  F095         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  2242   001466  C01B  F096         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  2243   00146A  C01C  F097         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  2244                           
  2245                           ;color.c: 304:         hue = hue + 2;
  2246   00146E  C094  F001         	movff	convert_rgb2hue@hue,___fladd@b
  2247   001472  C095  F002         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  2248   001476  C096  F003         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  2249   00147A  C097  F004         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  2250   00147E  0E00               	movlw	0
  2251   001480  6E05               	movwf	___fladd@a^0,c
  2252   001482  0E00               	movlw	0
  2253   001484  6E06               	movwf	(___fladd@a+1)^0,c
  2254   001486  0E00               	movlw	0
  2255   001488  6E07               	movwf	(___fladd@a+2)^0,c
  2256   00148A  0E40               	movlw	64
  2257   00148C  6E08               	movwf	(___fladd@a+3)^0,c
  2258   00148E  ECFF  F00A         	call	___fladd	;wreg free
  2259   001492  C001  F094         	movff	?___fladd,convert_rgb2hue@hue
  2260   001496  C002  F095         	movff	?___fladd+1,convert_rgb2hue@hue+1
  2261   00149A  C003  F096         	movff	?___fladd+2,convert_rgb2hue@hue+2
  2262   00149E  C004  F097         	movff	?___fladd+3,convert_rgb2hue@hue+3
  2263                           
  2264                           ;color.c: 305:     } else if (max == b){
  2265   0014A2  EFB4  F00A         	goto	l4157
  2266   0014A6                     l4153:
  2267   0014A6  C090  F001         	movff	convert_rgb2hue@max,___fleq@ff1
  2268   0014AA  C091  F002         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  2269   0014AE  C092  F003         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  2270   0014B2  C093  F004         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  2271   0014B6  C0A0  F005         	movff	convert_rgb2hue@b,___fleq@ff2
  2272   0014BA  C0A1  F006         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  2273   0014BE  C0A2  F007         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  2274   0014C2  C0A3  F008         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  2275   0014C6  EC4F  F019         	call	___fleq	;wreg free
  2276   0014CA  A0D8               	btfss	status,0,c
  2277   0014CC  EF6A  F00A         	goto	u3791
  2278   0014D0  EF6C  F00A         	goto	u3790
  2279   0014D4                     u3791:
  2280   0014D4  EFB4  F00A         	goto	l137
  2281   0014D8                     u3790:
  2282   0014D8                     
  2283                           ;color.c: 306:         hue = (r - g) / diff;
  2284   0014D8  C09C  F015         	movff	convert_rgb2hue@g,___flsub@a
  2285   0014DC  C09D  F016         	movff	convert_rgb2hue@g+1,___flsub@a+1
  2286   0014E0  C09E  F017         	movff	convert_rgb2hue@g+2,___flsub@a+2
  2287   0014E4  C09F  F018         	movff	convert_rgb2hue@g+3,___flsub@a+3
  2288   0014E8  C098  F011         	movff	convert_rgb2hue@r,___flsub@b
  2289   0014EC  C099  F012         	movff	convert_rgb2hue@r+1,___flsub@b+1
  2290   0014F0  C09A  F013         	movff	convert_rgb2hue@r+2,___flsub@b+2
  2291   0014F4  C09B  F014         	movff	convert_rgb2hue@r+3,___flsub@b+3
  2292   0014F8  ECA1  F01C         	call	___flsub	;wreg free
  2293   0014FC  C011  F019         	movff	?___flsub,___fldiv@b
  2294   001500  C012  F01A         	movff	?___flsub+1,___fldiv@b+1
  2295   001504  C013  F01B         	movff	?___flsub+2,___fldiv@b+2
  2296   001508  C014  F01C         	movff	?___flsub+3,___fldiv@b+3
  2297   00150C  C08C  F01D         	movff	convert_rgb2hue@diff,___fldiv@a
  2298   001510  C08D  F01E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  2299   001514  C08E  F01F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  2300   001518  C08F  F020         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  2301   00151C  EC74  F00F         	call	___fldiv	;wreg free
  2302   001520  C019  F094         	movff	?___fldiv,convert_rgb2hue@hue
  2303   001524  C01A  F095         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  2304   001528  C01B  F096         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  2305   00152C  C01C  F097         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  2306                           
  2307                           ;color.c: 307:         hue = hue + 4;
  2308   001530  C094  F001         	movff	convert_rgb2hue@hue,___fladd@b
  2309   001534  C095  F002         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  2310   001538  C096  F003         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  2311   00153C  C097  F004         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  2312   001540  0E00               	movlw	0
  2313   001542  6E05               	movwf	___fladd@a^0,c
  2314   001544  0E00               	movlw	0
  2315   001546  6E06               	movwf	(___fladd@a+1)^0,c
  2316   001548  0E80               	movlw	128
  2317   00154A  6E07               	movwf	(___fladd@a+2)^0,c
  2318   00154C  0E40               	movlw	64
  2319   00154E  6E08               	movwf	(___fladd@a+3)^0,c
  2320   001550  ECFF  F00A         	call	___fladd	;wreg free
  2321   001554  C001  F094         	movff	?___fladd,convert_rgb2hue@hue
  2322   001558  C002  F095         	movff	?___fladd+1,convert_rgb2hue@hue+1
  2323   00155C  C003  F096         	movff	?___fladd+2,convert_rgb2hue@hue+2
  2324   001560  C004  F097         	movff	?___fladd+3,convert_rgb2hue@hue+3
  2325   001564  EFB4  F00A         	goto	l4157
  2326   001568                     l137:
  2327   001568                     l4157:
  2328                           
  2329                           ;color.c: 310:     hue = hue * 60;
  2330   001568  C094  F001         	movff	convert_rgb2hue@hue,___flmul@b
  2331   00156C  C095  F002         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  2332   001570  C096  F003         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  2333   001574  C097  F004         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  2334   001578  0E00               	movlw	0
  2335   00157A  6E05               	movwf	___flmul@a^0,c
  2336   00157C  0E00               	movlw	0
  2337   00157E  6E06               	movwf	(___flmul@a+1)^0,c
  2338   001580  0E70               	movlw	112
  2339   001582  6E07               	movwf	(___flmul@a+2)^0,c
  2340   001584  0E42               	movlw	66
  2341   001586  6E08               	movwf	(___flmul@a+3)^0,c
  2342   001588  EC5F  F00D         	call	___flmul	;wreg free
  2343   00158C  C001  F094         	movff	?___flmul,convert_rgb2hue@hue
  2344   001590  C002  F095         	movff	?___flmul+1,convert_rgb2hue@hue+1
  2345   001594  C003  F096         	movff	?___flmul+2,convert_rgb2hue@hue+2
  2346   001598  C004  F097         	movff	?___flmul+3,convert_rgb2hue@hue+3
  2347   00159C                     
  2348                           ;color.c: 311:     if (hue < 0) {
  2349   00159C  0100               	movlb	0	; () banked
  2350   00159E  BF97               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  2351   0015A0  EFD6  F00A         	goto	u3800
  2352   0015A4  EFD4  F00A         	goto	u3801
  2353   0015A8                     u3801:
  2354   0015A8  EFF0  F00A         	goto	l141
  2355   0015AC                     u3800:
  2356   0015AC                     
  2357                           ; BSR set to: 0
  2358                           ;color.c: 312:         hue = hue + 360;
  2359   0015AC  C094  F001         	movff	convert_rgb2hue@hue,___fladd@b
  2360   0015B0  C095  F002         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  2361   0015B4  C096  F003         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  2362   0015B8  C097  F004         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  2363   0015BC  0E00               	movlw	0
  2364   0015BE  6E05               	movwf	___fladd@a^0,c
  2365   0015C0  0E00               	movlw	0
  2366   0015C2  6E06               	movwf	(___fladd@a+1)^0,c
  2367   0015C4  0EB4               	movlw	180
  2368   0015C6  6E07               	movwf	(___fladd@a+2)^0,c
  2369   0015C8  0E43               	movlw	67
  2370   0015CA  6E08               	movwf	(___fladd@a+3)^0,c
  2371   0015CC  ECFF  F00A         	call	___fladd	;wreg free
  2372   0015D0  C001  F094         	movff	?___fladd,convert_rgb2hue@hue
  2373   0015D4  C002  F095         	movff	?___fladd+1,convert_rgb2hue@hue+1
  2374   0015D8  C003  F096         	movff	?___fladd+2,convert_rgb2hue@hue+2
  2375   0015DC  C004  F097         	movff	?___fladd+3,convert_rgb2hue@hue+3
  2376   0015E0                     l141:
  2377                           
  2378                           ;color.c: 315:     return (unsigned int)hue;
  2379   0015E0  C094  F001         	movff	convert_rgb2hue@hue,___fltol@f1
  2380   0015E4  C095  F002         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  2381   0015E8  C096  F003         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  2382   0015EC  C097  F004         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  2383   0015F0  ECC4  F016         	call	___fltol	;wreg free
  2384   0015F4  C001  F032         	movff	?___fltol,?_convert_rgb2hue
  2385   0015F8  C002  F033         	movff	?___fltol+1,?_convert_rgb2hue+1
  2386   0015FC  0012               	return		;funcret
  2387   0015FE                     __end_of_convert_rgb2hue:
  2388                           	callstack 0
  2389                           
  2390 ;; *************** function ___xxtofl *****************
  2391 ;; Defined at:
  2392 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;  sign            1    wreg     unsigned char 
  2395 ;;  val             4    0[COMRAM] long 
  2396 ;; Auto vars:     Size  Location     Type
  2397 ;;  sign            1    8[COMRAM] unsigned char 
  2398 ;;  arg             4   10[COMRAM] unsigned long 
  2399 ;;  exp             1    9[COMRAM] unsigned char 
  2400 ;; Return value:  Size  Location     Type
  2401 ;;                  4    0[COMRAM] unsigned char 
  2402 ;; Registers used:
  2403 ;;		wreg, status,2, status,0
  2404 ;; Tracked objects:
  2405 ;;		On entry : 0/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2409 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2410 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2411 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2412 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2413 ;;Total ram usage:       14 bytes
  2414 ;; Hardware stack levels used: 1
  2415 ;; This function calls:
  2416 ;;		Nothing
  2417 ;; This function is called by:
  2418 ;;		_convert_rgb2hue
  2419 ;;		_main
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           	psect	text3
  2424   002454                     __ptext3:
  2425                           	callstack 0
  2426   002454                     ___xxtofl:
  2427                           	callstack 28
  2428                           
  2429                           ;incstack = 0
  2430                           ;___xxtofl@sign stored from wreg
  2431   002454  6E09               	movwf	___xxtofl@sign^0,c
  2432   002456  5009               	movf	___xxtofl@sign^0,w,c
  2433   002458  B4D8               	btfsc	status,2,c
  2434   00245A  EF31  F012         	goto	u3591
  2435   00245E  EF33  F012         	goto	u3590
  2436   002462                     u3591:
  2437   002462  EF55  F012         	goto	l1220
  2438   002466                     u3590:
  2439   002466  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  2440   002468  EF3A  F012         	goto	u3600
  2441   00246C  EF38  F012         	goto	u3601
  2442   002470                     u3601:
  2443   002470  EF55  F012         	goto	l1220
  2444   002474                     u3600:
  2445   002474  C001  F005         	movff	___xxtofl@val,??___xxtofl
  2446   002478  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  2447   00247C  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  2448   002480  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  2449   002484  1E05               	comf	??___xxtofl^0,f,c
  2450   002486  1E06               	comf	(??___xxtofl+1)^0,f,c
  2451   002488  1E07               	comf	(??___xxtofl+2)^0,f,c
  2452   00248A  1E08               	comf	(??___xxtofl+3)^0,f,c
  2453   00248C  2A05               	incf	??___xxtofl^0,f,c
  2454   00248E  0E00               	movlw	0
  2455   002490  2206               	addwfc	(??___xxtofl+1)^0,f,c
  2456   002492  2207               	addwfc	(??___xxtofl+2)^0,f,c
  2457   002494  2208               	addwfc	(??___xxtofl+3)^0,f,c
  2458   002496  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  2459   00249A  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  2460   00249E  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  2461   0024A2  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  2462   0024A6  EF5D  F012         	goto	l4009
  2463   0024AA                     l1220:
  2464   0024AA  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  2465   0024AE  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  2466   0024B2  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  2467   0024B6  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  2468   0024BA                     l4009:
  2469   0024BA  5001               	movf	___xxtofl@val^0,w,c
  2470   0024BC  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  2471   0024BE  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  2472   0024C0  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  2473   0024C2  A4D8               	btfss	status,2,c
  2474   0024C4  EF66  F012         	goto	u3611
  2475   0024C8  EF68  F012         	goto	u3610
  2476   0024CC                     u3611:
  2477   0024CC  EF72  F012         	goto	l4015
  2478   0024D0                     u3610:
  2479   0024D0  0E00               	movlw	0
  2480   0024D2  6E01               	movwf	?___xxtofl^0,c
  2481   0024D4  0E00               	movlw	0
  2482   0024D6  6E02               	movwf	(?___xxtofl+1)^0,c
  2483   0024D8  0E00               	movlw	0
  2484   0024DA  6E03               	movwf	(?___xxtofl+2)^0,c
  2485   0024DC  0E00               	movlw	0
  2486   0024DE  6E04               	movwf	(?___xxtofl+3)^0,c
  2487   0024E0  EF03  F013         	goto	l1223
  2488   0024E4                     l4015:
  2489   0024E4  0E96               	movlw	150
  2490   0024E6  6E0A               	movwf	___xxtofl@exp^0,c
  2491   0024E8  EF7C  F012         	goto	l4019
  2492   0024EC                     l4017:
  2493   0024EC  2A0A               	incf	___xxtofl@exp^0,f,c
  2494   0024EE  90D8               	bcf	status,0,c
  2495   0024F0  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  2496   0024F2  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  2497   0024F4  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  2498   0024F6  320B               	rrcf	___xxtofl@arg^0,f,c
  2499   0024F8                     l4019:
  2500   0024F8  0E00               	movlw	0
  2501   0024FA  140B               	andwf	___xxtofl@arg^0,w,c
  2502   0024FC  6E05               	movwf	??___xxtofl^0,c
  2503   0024FE  0E00               	movlw	0
  2504   002500  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  2505   002502  6E06               	movwf	(??___xxtofl+1)^0,c
  2506   002504  0E00               	movlw	0
  2507   002506  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  2508   002508  6E07               	movwf	(??___xxtofl+2)^0,c
  2509   00250A  0EFE               	movlw	254
  2510   00250C  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  2511   00250E  6E08               	movwf	(??___xxtofl+3)^0,c
  2512   002510  5005               	movf	??___xxtofl^0,w,c
  2513   002512  1006               	iorwf	(??___xxtofl+1)^0,w,c
  2514   002514  1007               	iorwf	(??___xxtofl+2)^0,w,c
  2515   002516  1008               	iorwf	(??___xxtofl+3)^0,w,c
  2516   002518  A4D8               	btfss	status,2,c
  2517   00251A  EF91  F012         	goto	u3621
  2518   00251E  EF93  F012         	goto	u3620
  2519   002522                     u3621:
  2520   002522  EF76  F012         	goto	l4017
  2521   002526                     u3620:
  2522   002526  EFA1  F012         	goto	l1227
  2523   00252A                     l4021:
  2524   00252A  2A0A               	incf	___xxtofl@exp^0,f,c
  2525   00252C  0E01               	movlw	1
  2526   00252E  260B               	addwf	___xxtofl@arg^0,f,c
  2527   002530  0E00               	movlw	0
  2528   002532  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  2529   002534  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  2530   002536  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  2531   002538  90D8               	bcf	status,0,c
  2532   00253A  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  2533   00253C  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  2534   00253E  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  2535   002540  320B               	rrcf	___xxtofl@arg^0,f,c
  2536   002542                     l1227:
  2537   002542  0E00               	movlw	0
  2538   002544  140B               	andwf	___xxtofl@arg^0,w,c
  2539   002546  6E05               	movwf	??___xxtofl^0,c
  2540   002548  0E00               	movlw	0
  2541   00254A  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  2542   00254C  6E06               	movwf	(??___xxtofl+1)^0,c
  2543   00254E  0E00               	movlw	0
  2544   002550  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  2545   002552  6E07               	movwf	(??___xxtofl+2)^0,c
  2546   002554  0EFF               	movlw	255
  2547   002556  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  2548   002558  6E08               	movwf	(??___xxtofl+3)^0,c
  2549   00255A  5005               	movf	??___xxtofl^0,w,c
  2550   00255C  1006               	iorwf	(??___xxtofl+1)^0,w,c
  2551   00255E  1007               	iorwf	(??___xxtofl+2)^0,w,c
  2552   002560  1008               	iorwf	(??___xxtofl+3)^0,w,c
  2553   002562  A4D8               	btfss	status,2,c
  2554   002564  EFB6  F012         	goto	u3631
  2555   002568  EFB8  F012         	goto	u3630
  2556   00256C                     u3631:
  2557   00256C  EF95  F012         	goto	l4021
  2558   002570                     u3630:
  2559   002570  EFC0  F012         	goto	l4029
  2560   002574                     l4027:
  2561   002574  060A               	decf	___xxtofl@exp^0,f,c
  2562   002576  90D8               	bcf	status,0,c
  2563   002578  360B               	rlcf	___xxtofl@arg^0,f,c
  2564   00257A  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  2565   00257C  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  2566   00257E  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  2567   002580                     l4029:
  2568   002580  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  2569   002582  EFC5  F012         	goto	u3641
  2570   002586  EFC7  F012         	goto	u3640
  2571   00258A                     u3641:
  2572   00258A  EFCF  F012         	goto	l1234
  2573   00258E                     u3640:
  2574   00258E  0E02               	movlw	2
  2575   002590  600A               	cpfslt	___xxtofl@exp^0,c
  2576   002592  EFCD  F012         	goto	u3651
  2577   002596  EFCF  F012         	goto	u3650
  2578   00259A                     u3651:
  2579   00259A  EFBA  F012         	goto	l4027
  2580   00259E                     u3650:
  2581   00259E                     l1234:
  2582   00259E  B00A               	btfsc	___xxtofl@exp^0,0,c
  2583   0025A0  EFD4  F012         	goto	u3661
  2584   0025A4  EFD6  F012         	goto	u3660
  2585   0025A8                     u3661:
  2586   0025A8  EFD7  F012         	goto	l4035
  2587   0025AC                     u3660:
  2588   0025AC  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  2589   0025AE                     l4035:
  2590   0025AE  90D8               	bcf	status,0,c
  2591   0025B0  320A               	rrcf	___xxtofl@exp^0,f,c
  2592   0025B2  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  2593   0025B6  6A06               	clrf	(??___xxtofl+1)^0,c
  2594   0025B8  6A07               	clrf	(??___xxtofl+2)^0,c
  2595   0025BA  6A08               	clrf	(??___xxtofl+3)^0,c
  2596   0025BC  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  2597   0025C0  6A07               	clrf	(??___xxtofl+2)^0,c
  2598   0025C2  6A06               	clrf	(??___xxtofl+1)^0,c
  2599   0025C4  6A05               	clrf	??___xxtofl^0,c
  2600   0025C6  5005               	movf	??___xxtofl^0,w,c
  2601   0025C8  120B               	iorwf	___xxtofl@arg^0,f,c
  2602   0025CA  5006               	movf	(??___xxtofl+1)^0,w,c
  2603   0025CC  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  2604   0025CE  5007               	movf	(??___xxtofl+2)^0,w,c
  2605   0025D0  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  2606   0025D2  5008               	movf	(??___xxtofl+3)^0,w,c
  2607   0025D4  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  2608   0025D6  5009               	movf	___xxtofl@sign^0,w,c
  2609   0025D8  B4D8               	btfsc	status,2,c
  2610   0025DA  EFF1  F012         	goto	u3671
  2611   0025DE  EFF3  F012         	goto	u3670
  2612   0025E2                     u3671:
  2613   0025E2  EFFB  F012         	goto	l4045
  2614   0025E6                     u3670:
  2615   0025E6  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  2616   0025E8  EFFA  F012         	goto	u3680
  2617   0025EC  EFF8  F012         	goto	u3681
  2618   0025F0                     u3681:
  2619   0025F0  EFFB  F012         	goto	l4045
  2620   0025F4                     u3680:
  2621   0025F4  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  2622   0025F6                     l4045:
  2623   0025F6  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  2624   0025FA  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  2625   0025FE  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  2626   002602  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  2627   002606                     l1223:
  2628   002606  0012               	return		;funcret
  2629   002608                     __end_of___xxtofl:
  2630                           	callstack 0
  2631                           
  2632 ;; *************** function ___fltol *****************
  2633 ;; Defined at:
  2634 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  2635 ;; Parameters:    Size  Location     Type
  2636 ;;  f1              4    0[COMRAM] unsigned char 
  2637 ;; Auto vars:     Size  Location     Type
  2638 ;;  exp1            1    9[COMRAM] unsigned char 
  2639 ;;  sign1           1    8[COMRAM] unsigned char 
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  4    0[COMRAM] long 
  2642 ;; Registers used:
  2643 ;;		wreg, status,2, status,0
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2649 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2650 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2651 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2652 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2653 ;;Total ram usage:       10 bytes
  2654 ;; Hardware stack levels used: 1
  2655 ;; This function calls:
  2656 ;;		Nothing
  2657 ;; This function is called by:
  2658 ;;		_convert_rgb2hue
  2659 ;; This function uses a non-reentrant model
  2660 ;;
  2661                           
  2662                           	psect	text4
  2663   002D88                     __ptext4:
  2664                           	callstack 0
  2665   002D88                     ___fltol:
  2666                           	callstack 28
  2667   002D88  3403               	rlcf	(___fltol@f1+2)^0,w,c
  2668   002D8A  3404               	rlcf	(___fltol@f1+3)^0,w,c
  2669   002D8C  6E0A               	movwf	___fltol@exp1^0,c
  2670   002D8E  500A               	movf	___fltol@exp1^0,w,c
  2671   002D90  A4D8               	btfss	status,2,c
  2672   002D92  EFCD  F016         	goto	u3521
  2673   002D96  EFCF  F016         	goto	u3520
  2674   002D9A                     u3521:
  2675   002D9A  EFD9  F016         	goto	l3965
  2676   002D9E                     u3520:
  2677   002D9E                     l3961:
  2678   002D9E  0E00               	movlw	0
  2679   002DA0  6E01               	movwf	?___fltol^0,c
  2680   002DA2  0E00               	movlw	0
  2681   002DA4  6E02               	movwf	(?___fltol+1)^0,c
  2682   002DA6  0E00               	movlw	0
  2683   002DA8  6E03               	movwf	(?___fltol+2)^0,c
  2684   002DAA  0E00               	movlw	0
  2685   002DAC  6E04               	movwf	(?___fltol+3)^0,c
  2686   002DAE  EF46  F017         	goto	l862
  2687   002DB2                     l3965:
  2688   002DB2  C001  F005         	movff	___fltol@f1,??___fltol
  2689   002DB6  C002  F006         	movff	___fltol@f1+1,??___fltol+1
  2690   002DBA  C003  F007         	movff	___fltol@f1+2,??___fltol+2
  2691   002DBE  C004  F008         	movff	___fltol@f1+3,??___fltol+3
  2692   002DC2  0E20               	movlw	32
  2693   002DC4  EFE9  F016         	goto	u3530
  2694   002DC8                     u3535:
  2695   002DC8  90D8               	bcf	status,0,c
  2696   002DCA  3208               	rrcf	(??___fltol+3)^0,f,c
  2697   002DCC  3207               	rrcf	(??___fltol+2)^0,f,c
  2698   002DCE  3206               	rrcf	(??___fltol+1)^0,f,c
  2699   002DD0  3205               	rrcf	??___fltol^0,f,c
  2700   002DD2                     u3530:
  2701   002DD2  2EE8               	decfsz	wreg,f,c
  2702   002DD4  EFE4  F016         	goto	u3535
  2703   002DD8  5005               	movf	??___fltol^0,w,c
  2704   002DDA  6E09               	movwf	___fltol@sign1^0,c
  2705   002DDC  8E03               	bsf	(___fltol@f1+2)^0,7,c
  2706   002DDE  0EFF               	movlw	255
  2707   002DE0  1601               	andwf	___fltol@f1^0,f,c
  2708   002DE2  0EFF               	movlw	255
  2709   002DE4  1602               	andwf	(___fltol@f1+1)^0,f,c
  2710   002DE6  0EFF               	movlw	255
  2711   002DE8  1603               	andwf	(___fltol@f1+2)^0,f,c
  2712   002DEA  0E00               	movlw	0
  2713   002DEC  1604               	andwf	(___fltol@f1+3)^0,f,c
  2714   002DEE  0E96               	movlw	150
  2715   002DF0  5E0A               	subwf	___fltol@exp1^0,f,c
  2716   002DF2  BE0A               	btfsc	___fltol@exp1^0,7,c
  2717   002DF4  EF00  F017         	goto	u3540
  2718   002DF8  EFFE  F016         	goto	u3541
  2719   002DFC                     u3541:
  2720   002DFC  EF16  F017         	goto	l3985
  2721   002E00                     u3540:
  2722   002E00  500A               	movf	___fltol@exp1^0,w,c
  2723   002E02  0A80               	xorlw	128
  2724   002E04  0F97               	addlw	151
  2725   002E06  B0D8               	btfsc	status,0,c
  2726   002E08  EF08  F017         	goto	u3551
  2727   002E0C  EF0A  F017         	goto	u3550
  2728   002E10                     u3551:
  2729   002E10  EF0C  F017         	goto	l3981
  2730   002E14                     u3550:
  2731   002E14  EFCF  F016         	goto	l3961
  2732   002E18                     l3981:
  2733   002E18  90D8               	bcf	status,0,c
  2734   002E1A  3204               	rrcf	(___fltol@f1+3)^0,f,c
  2735   002E1C  3203               	rrcf	(___fltol@f1+2)^0,f,c
  2736   002E1E  3202               	rrcf	(___fltol@f1+1)^0,f,c
  2737   002E20  3201               	rrcf	___fltol@f1^0,f,c
  2738   002E22  3E0A               	incfsz	___fltol@exp1^0,f,c
  2739   002E24  EF0C  F017         	goto	l3981
  2740   002E28  EF2E  F017         	goto	l3995
  2741   002E2C                     l3985:
  2742   002E2C  0E1F               	movlw	31
  2743   002E2E  640A               	cpfsgt	___fltol@exp1^0,c
  2744   002E30  EF1C  F017         	goto	u3561
  2745   002E34  EF1E  F017         	goto	u3560
  2746   002E38                     u3561:
  2747   002E38  EF26  F017         	goto	l3993
  2748   002E3C                     u3560:
  2749   002E3C  EFCF  F016         	goto	l3961
  2750   002E40                     l3991:
  2751   002E40  90D8               	bcf	status,0,c
  2752   002E42  3601               	rlcf	___fltol@f1^0,f,c
  2753   002E44  3602               	rlcf	(___fltol@f1+1)^0,f,c
  2754   002E46  3603               	rlcf	(___fltol@f1+2)^0,f,c
  2755   002E48  3604               	rlcf	(___fltol@f1+3)^0,f,c
  2756   002E4A  060A               	decf	___fltol@exp1^0,f,c
  2757   002E4C                     l3993:
  2758   002E4C  500A               	movf	___fltol@exp1^0,w,c
  2759   002E4E  A4D8               	btfss	status,2,c
  2760   002E50  EF2C  F017         	goto	u3571
  2761   002E54  EF2E  F017         	goto	u3570
  2762   002E58                     u3571:
  2763   002E58  EF20  F017         	goto	l3991
  2764   002E5C                     u3570:
  2765   002E5C                     l3995:
  2766   002E5C  5009               	movf	___fltol@sign1^0,w,c
  2767   002E5E  B4D8               	btfsc	status,2,c
  2768   002E60  EF34  F017         	goto	u3581
  2769   002E64  EF36  F017         	goto	u3580
  2770   002E68                     u3581:
  2771   002E68  EF3E  F017         	goto	l3999
  2772   002E6C                     u3580:
  2773   002E6C  1E04               	comf	(___fltol@f1+3)^0,f,c
  2774   002E6E  1E03               	comf	(___fltol@f1+2)^0,f,c
  2775   002E70  1E02               	comf	(___fltol@f1+1)^0,f,c
  2776   002E72  6C01               	negf	___fltol@f1^0,c
  2777   002E74  0E00               	movlw	0
  2778   002E76  2202               	addwfc	(___fltol@f1+1)^0,f,c
  2779   002E78  2203               	addwfc	(___fltol@f1+2)^0,f,c
  2780   002E7A  2204               	addwfc	(___fltol@f1+3)^0,f,c
  2781   002E7C                     l3999:
  2782   002E7C  C001  F001         	movff	___fltol@f1,?___fltol
  2783   002E80  C002  F002         	movff	___fltol@f1+1,?___fltol+1
  2784   002E84  C003  F003         	movff	___fltol@f1+2,?___fltol+2
  2785   002E88  C004  F004         	movff	___fltol@f1+3,?___fltol+3
  2786   002E8C                     l862:
  2787   002E8C  0012               	return		;funcret
  2788   002E8E                     __end_of___fltol:
  2789                           	callstack 0
  2790                           
  2791 ;; *************** function ___flsub *****************
  2792 ;; Defined at:
  2793 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;  b               4   16[COMRAM] long 
  2796 ;;  a               4   20[COMRAM] long 
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;		None
  2799 ;; Return value:  Size  Location     Type
  2800 ;;                  4   16[COMRAM] long 
  2801 ;; Registers used:
  2802 ;;		wreg, status,2, status,0, cstack
  2803 ;; Tracked objects:
  2804 ;;		On entry : 0/0
  2805 ;;		On exit  : 0/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2808 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2811 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2812 ;;Total ram usage:        8 bytes
  2813 ;; Hardware stack levels used: 1
  2814 ;; Hardware stack levels required when called: 1
  2815 ;; This function calls:
  2816 ;;		___fladd
  2817 ;; This function is called by:
  2818 ;;		_convert_rgb2hue
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           	psect	text5
  2823   003942                     __ptext5:
  2824                           	callstack 0
  2825   003942                     ___flsub:
  2826                           	callstack 27
  2827   003942  0E00               	movlw	0
  2828   003944  1A15               	xorwf	___flsub@a^0,f,c
  2829   003946  0E00               	movlw	0
  2830   003948  1A16               	xorwf	(___flsub@a+1)^0,f,c
  2831   00394A  0E00               	movlw	0
  2832   00394C  1A17               	xorwf	(___flsub@a+2)^0,f,c
  2833   00394E  0E80               	movlw	128
  2834   003950  1A18               	xorwf	(___flsub@a+3)^0,f,c
  2835   003952  C011  F001         	movff	___flsub@b,___fladd@b
  2836   003956  C012  F002         	movff	___flsub@b+1,___fladd@b+1
  2837   00395A  C013  F003         	movff	___flsub@b+2,___fladd@b+2
  2838   00395E  C014  F004         	movff	___flsub@b+3,___fladd@b+3
  2839   003962  C015  F005         	movff	___flsub@a,___fladd@a
  2840   003966  C016  F006         	movff	___flsub@a+1,___fladd@a+1
  2841   00396A  C017  F007         	movff	___flsub@a+2,___fladd@a+2
  2842   00396E  C018  F008         	movff	___flsub@a+3,___fladd@a+3
  2843   003972  ECFF  F00A         	call	___fladd	;wreg free
  2844   003976  C001  F011         	movff	?___fladd,?___flsub
  2845   00397A  C002  F012         	movff	?___fladd+1,?___flsub+1
  2846   00397E  C003  F013         	movff	?___fladd+2,?___flsub+2
  2847   003982  C004  F014         	movff	?___fladd+3,?___flsub+3
  2848   003986  0012               	return		;funcret
  2849   003988                     __end_of___flsub:
  2850                           	callstack 0
  2851                           
  2852 ;; *************** function ___fladd *****************
  2853 ;; Defined at:
  2854 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;  b               4    0[COMRAM] long 
  2857 ;;  a               4    4[COMRAM] long 
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;  grs             1   15[COMRAM] unsigned char 
  2860 ;;  bexp            1   14[COMRAM] unsigned char 
  2861 ;;  aexp            1   13[COMRAM] unsigned char 
  2862 ;;  signs           1   12[COMRAM] unsigned char 
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  4    0[COMRAM] unsigned char 
  2865 ;; Registers used:
  2866 ;;		wreg, status,2, status,0
  2867 ;; Tracked objects:
  2868 ;;		On entry : 0/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2872 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2873 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2874 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2875 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2876 ;;Total ram usage:       16 bytes
  2877 ;; Hardware stack levels used: 1
  2878 ;; This function calls:
  2879 ;;		Nothing
  2880 ;; This function is called by:
  2881 ;;		_convert_rgb2hue
  2882 ;;		___flsub
  2883 ;; This function uses a non-reentrant model
  2884 ;;
  2885                           
  2886                           	psect	text6
  2887   0015FE                     __ptext6:
  2888                           	callstack 0
  2889   0015FE                     ___fladd:
  2890                           	callstack 27
  2891   0015FE  5004               	movf	(___fladd@b+3)^0,w,c
  2892   001600  0B80               	andlw	128
  2893   001602  6E0D               	movwf	___fladd@signs^0,c
  2894   001604  5004               	movf	(___fladd@b+3)^0,w,c
  2895   001606  2404               	addwf	(___fladd@b+3)^0,w,c
  2896   001608  6E0F               	movwf	___fladd@bexp^0,c
  2897   00160A  AE03               	btfss	(___fladd@b+2)^0,7,c
  2898   00160C  EF0A  F00B         	goto	u2551
  2899   001610  EF0C  F00B         	goto	u2550
  2900   001614                     u2551:
  2901   001614  EF0D  F00B         	goto	l3319
  2902   001618                     u2550:
  2903   001618  800F               	bsf	___fladd@bexp^0,0,c
  2904   00161A                     l3319:
  2905   00161A  500F               	movf	___fladd@bexp^0,w,c
  2906   00161C  B4D8               	btfsc	status,2,c
  2907   00161E  EF13  F00B         	goto	u2561
  2908   001622  EF15  F00B         	goto	u2560
  2909   001626                     u2561:
  2910   001626  EF2A  F00B         	goto	l3329
  2911   00162A                     u2560:
  2912   00162A  280F               	incf	___fladd@bexp^0,w,c
  2913   00162C  A4D8               	btfss	status,2,c
  2914   00162E  EF1B  F00B         	goto	u2571
  2915   001632  EF1D  F00B         	goto	u2570
  2916   001636                     u2571:
  2917   001636  EF25  F00B         	goto	l3325
  2918   00163A                     u2570:
  2919   00163A  0E00               	movlw	0
  2920   00163C  6E01               	movwf	___fladd@b^0,c
  2921   00163E  0E00               	movlw	0
  2922   001640  6E02               	movwf	(___fladd@b+1)^0,c
  2923   001642  0E00               	movlw	0
  2924   001644  6E03               	movwf	(___fladd@b+2)^0,c
  2925   001646  0E00               	movlw	0
  2926   001648  6E04               	movwf	(___fladd@b+3)^0,c
  2927   00164A                     l3325:
  2928   00164A  8E03               	bsf	(___fladd@b+2)^0,7,c
  2929   00164C  0E00               	movlw	0
  2930   00164E  6E04               	movwf	(___fladd@b+3)^0,c
  2931   001650  EF32  F00B         	goto	l3331
  2932   001654                     l3329:
  2933   001654  0E00               	movlw	0
  2934   001656  6E01               	movwf	___fladd@b^0,c
  2935   001658  0E00               	movlw	0
  2936   00165A  6E02               	movwf	(___fladd@b+1)^0,c
  2937   00165C  0E00               	movlw	0
  2938   00165E  6E03               	movwf	(___fladd@b+2)^0,c
  2939   001660  0E00               	movlw	0
  2940   001662  6E04               	movwf	(___fladd@b+3)^0,c
  2941   001664                     l3331:
  2942   001664  5008               	movf	(___fladd@a+3)^0,w,c
  2943   001666  0B80               	andlw	128
  2944   001668  6E0E               	movwf	___fladd@aexp^0,c
  2945   00166A  500D               	movf	___fladd@signs^0,w,c
  2946   00166C  180E               	xorwf	___fladd@aexp^0,w,c
  2947   00166E  B4D8               	btfsc	status,2,c
  2948   001670  EF3C  F00B         	goto	u2581
  2949   001674  EF3E  F00B         	goto	u2580
  2950   001678                     u2581:
  2951   001678  EF3F  F00B         	goto	l3337
  2952   00167C                     u2580:
  2953   00167C  8C0D               	bsf	___fladd@signs^0,6,c
  2954   00167E                     l3337:
  2955   00167E  5008               	movf	(___fladd@a+3)^0,w,c
  2956   001680  2408               	addwf	(___fladd@a+3)^0,w,c
  2957   001682  6E0E               	movwf	___fladd@aexp^0,c
  2958   001684  AE07               	btfss	(___fladd@a+2)^0,7,c
  2959   001686  EF47  F00B         	goto	u2591
  2960   00168A  EF49  F00B         	goto	u2590
  2961   00168E                     u2591:
  2962   00168E  EF4A  F00B         	goto	l3343
  2963   001692                     u2590:
  2964   001692  800E               	bsf	___fladd@aexp^0,0,c
  2965   001694                     l3343:
  2966   001694  500E               	movf	___fladd@aexp^0,w,c
  2967   001696  B4D8               	btfsc	status,2,c
  2968   001698  EF50  F00B         	goto	u2601
  2969   00169C  EF52  F00B         	goto	u2600
  2970   0016A0                     u2601:
  2971   0016A0  EF67  F00B         	goto	l3353
  2972   0016A4                     u2600:
  2973   0016A4  280E               	incf	___fladd@aexp^0,w,c
  2974   0016A6  A4D8               	btfss	status,2,c
  2975   0016A8  EF58  F00B         	goto	u2611
  2976   0016AC  EF5A  F00B         	goto	u2610
  2977   0016B0                     u2611:
  2978   0016B0  EF62  F00B         	goto	l3349
  2979   0016B4                     u2610:
  2980   0016B4  0E00               	movlw	0
  2981   0016B6  6E05               	movwf	___fladd@a^0,c
  2982   0016B8  0E00               	movlw	0
  2983   0016BA  6E06               	movwf	(___fladd@a+1)^0,c
  2984   0016BC  0E00               	movlw	0
  2985   0016BE  6E07               	movwf	(___fladd@a+2)^0,c
  2986   0016C0  0E00               	movlw	0
  2987   0016C2  6E08               	movwf	(___fladd@a+3)^0,c
  2988   0016C4                     l3349:
  2989   0016C4  8E07               	bsf	(___fladd@a+2)^0,7,c
  2990   0016C6  0E00               	movlw	0
  2991   0016C8  6E08               	movwf	(___fladd@a+3)^0,c
  2992   0016CA  EF6F  F00B         	goto	l3355
  2993   0016CE                     l3353:
  2994   0016CE  0E00               	movlw	0
  2995   0016D0  6E05               	movwf	___fladd@a^0,c
  2996   0016D2  0E00               	movlw	0
  2997   0016D4  6E06               	movwf	(___fladd@a+1)^0,c
  2998   0016D6  0E00               	movlw	0
  2999   0016D8  6E07               	movwf	(___fladd@a+2)^0,c
  3000   0016DA  0E00               	movlw	0
  3001   0016DC  6E08               	movwf	(___fladd@a+3)^0,c
  3002   0016DE                     l3355:
  3003   0016DE  500F               	movf	___fladd@bexp^0,w,c
  3004   0016E0  5C0E               	subwf	___fladd@aexp^0,w,c
  3005   0016E2  B0D8               	btfsc	status,0,c
  3006   0016E4  EF76  F00B         	goto	u2621
  3007   0016E8  EF78  F00B         	goto	u2620
  3008   0016EC                     u2621:
  3009   0016EC  EF9F  F00B         	goto	l3391
  3010   0016F0                     u2620:
  3011   0016F0  AC0D               	btfss	___fladd@signs^0,6,c
  3012   0016F2  EF7D  F00B         	goto	u2631
  3013   0016F6  EF7F  F00B         	goto	u2630
  3014   0016FA                     u2631:
  3015   0016FA  EF81  F00B         	goto	l3361
  3016   0016FE                     u2630:
  3017   0016FE  0E80               	movlw	128
  3018   001700  1A0D               	xorwf	___fladd@signs^0,f,c
  3019   001702                     l3361:
  3020   001702  C00F  F010         	movff	___fladd@bexp,___fladd@grs
  3021   001706  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  3022   00170A  C010  F00E         	movff	___fladd@grs,___fladd@aexp
  3023   00170E  C001  F010         	movff	___fladd@b,___fladd@grs
  3024   001712  C005  F001         	movff	___fladd@a,___fladd@b
  3025   001716  C010  F005         	movff	___fladd@grs,___fladd@a
  3026   00171A  C002  F010         	movff	___fladd@b+1,___fladd@grs
  3027   00171E  C006  F002         	movff	___fladd@a+1,___fladd@b+1
  3028   001722  C010  F006         	movff	___fladd@grs,___fladd@a+1
  3029   001726  C003  F010         	movff	___fladd@b+2,___fladd@grs
  3030   00172A  C007  F003         	movff	___fladd@a+2,___fladd@b+2
  3031   00172E  C010  F007         	movff	___fladd@grs,___fladd@a+2
  3032   001732  C004  F010         	movff	___fladd@b+3,___fladd@grs
  3033   001736  C008  F004         	movff	___fladd@a+3,___fladd@b+3
  3034   00173A  C010  F008         	movff	___fladd@grs,___fladd@a+3
  3035   00173E                     l3391:
  3036   00173E  0E00               	movlw	0
  3037   001740  6E10               	movwf	___fladd@grs^0,c
  3038   001742  500F               	movf	___fladd@bexp^0,w,c
  3039   001744  C00E  F009         	movff	___fladd@aexp,??___fladd
  3040   001748  6A0A               	clrf	(??___fladd+1)^0,c
  3041   00174A  5E09               	subwf	??___fladd^0,f,c
  3042   00174C  0E00               	movlw	0
  3043   00174E  5A0A               	subwfb	(??___fladd+1)^0,f,c
  3044   001750  BE0A               	btfsc	(??___fladd+1)^0,7,c
  3045   001752  EFB4  F00B         	goto	u2641
  3046   001756  500A               	movf	(??___fladd+1)^0,w,c
  3047   001758  E109               	bnz	u2640
  3048   00175A  0E1A               	movlw	26
  3049   00175C  5C09               	subwf	??___fladd^0,w,c
  3050   00175E  A0D8               	btfss	status,0,c
  3051   001760  EFB4  F00B         	goto	u2641
  3052   001764  EFB6  F00B         	goto	u2640
  3053   001768                     u2641:
  3054   001768  EFED  F00B         	goto	l1094
  3055   00176C                     u2640:
  3056   00176C  5001               	movf	___fladd@b^0,w,c
  3057   00176E  1002               	iorwf	(___fladd@b+1)^0,w,c
  3058   001770  1003               	iorwf	(___fladd@b+2)^0,w,c
  3059   001772  1004               	iorwf	(___fladd@b+3)^0,w,c
  3060   001774  A4D8               	btfss	status,2,c
  3061   001776  EFBF  F00B         	goto	u2651
  3062   00177A  EFC2  F00B         	goto	u2650
  3063   00177E                     u2651:
  3064   00177E  0E01               	movlw	1
  3065   001780  EFC3  F00B         	goto	u2660
  3066   001784                     u2650:
  3067   001784  0E00               	movlw	0
  3068   001786                     u2660:
  3069   001786  6E10               	movwf	___fladd@grs^0,c
  3070   001788  0E00               	movlw	0
  3071   00178A  6E01               	movwf	___fladd@b^0,c
  3072   00178C  0E00               	movlw	0
  3073   00178E  6E02               	movwf	(___fladd@b+1)^0,c
  3074   001790  0E00               	movlw	0
  3075   001792  6E03               	movwf	(___fladd@b+2)^0,c
  3076   001794  0E00               	movlw	0
  3077   001796  6E04               	movwf	(___fladd@b+3)^0,c
  3078   001798  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  3079   00179C  EFF6  F00B         	goto	l1093
  3080   0017A0                     l1095:
  3081   0017A0  A010               	btfss	___fladd@grs^0,0,c
  3082   0017A2  EFD5  F00B         	goto	u2671
  3083   0017A6  EFD7  F00B         	goto	u2670
  3084   0017AA                     u2671:
  3085   0017AA  EFDD  F00B         	goto	l3403
  3086   0017AE                     u2670:
  3087   0017AE  90D8               	bcf	status,0,c
  3088   0017B0  3010               	rrcf	___fladd@grs^0,w,c
  3089   0017B2  0901               	iorlw	1
  3090   0017B4  6E10               	movwf	___fladd@grs^0,c
  3091   0017B6  EFDF  F00B         	goto	l3405
  3092   0017BA                     l3403:
  3093   0017BA  90D8               	bcf	status,0,c
  3094   0017BC  3210               	rrcf	___fladd@grs^0,f,c
  3095   0017BE                     l3405:
  3096   0017BE  A001               	btfss	___fladd@b^0,0,c
  3097   0017C0  EFE4  F00B         	goto	u2681
  3098   0017C4  EFE6  F00B         	goto	u2680
  3099   0017C8                     u2681:
  3100   0017C8  EFE7  F00B         	goto	l3409
  3101   0017CC                     u2680:
  3102   0017CC  8E10               	bsf	___fladd@grs^0,7,c
  3103   0017CE                     l3409:
  3104   0017CE  3404               	rlcf	(___fladd@b+3)^0,w,c
  3105   0017D0  3204               	rrcf	(___fladd@b+3)^0,f,c
  3106   0017D2  3203               	rrcf	(___fladd@b+2)^0,f,c
  3107   0017D4  3202               	rrcf	(___fladd@b+1)^0,f,c
  3108   0017D6  3201               	rrcf	___fladd@b^0,f,c
  3109   0017D8  2A0F               	incf	___fladd@bexp^0,f,c
  3110   0017DA                     l1094:
  3111   0017DA  500E               	movf	___fladd@aexp^0,w,c
  3112   0017DC  5C0F               	subwf	___fladd@bexp^0,w,c
  3113   0017DE  A0D8               	btfss	status,0,c
  3114   0017E0  EFF4  F00B         	goto	u2691
  3115   0017E4  EFF6  F00B         	goto	u2690
  3116   0017E8                     u2691:
  3117   0017E8  EFD0  F00B         	goto	l1095
  3118   0017EC                     u2690:
  3119   0017EC                     l1093:
  3120   0017EC  BC0D               	btfsc	___fladd@signs^0,6,c
  3121   0017EE  EFFB  F00B         	goto	u2701
  3122   0017F2  EFFD  F00B         	goto	u2700
  3123   0017F6                     u2701:
  3124   0017F6  EF3D  F00C         	goto	l3437
  3125   0017FA                     u2700:
  3126   0017FA  500F               	movf	___fladd@bexp^0,w,c
  3127   0017FC  A4D8               	btfss	status,2,c
  3128   0017FE  EF03  F00C         	goto	u2711
  3129   001802  EF05  F00C         	goto	u2710
  3130   001806                     u2711:
  3131   001806  EF0F  F00C         	goto	l3419
  3132   00180A                     u2710:
  3133   00180A  0E00               	movlw	0
  3134   00180C  6E01               	movwf	?___fladd^0,c
  3135   00180E  0E00               	movlw	0
  3136   001810  6E02               	movwf	(?___fladd+1)^0,c
  3137   001812  0E00               	movlw	0
  3138   001814  6E03               	movwf	(?___fladd+2)^0,c
  3139   001816  0E00               	movlw	0
  3140   001818  6E04               	movwf	(?___fladd+3)^0,c
  3141   00181A  EF5E  F00D         	goto	l1102
  3142   00181E                     l3419:
  3143   00181E  5005               	movf	___fladd@a^0,w,c
  3144   001820  2601               	addwf	___fladd@b^0,f,c
  3145   001822  5006               	movf	(___fladd@a+1)^0,w,c
  3146   001824  2202               	addwfc	(___fladd@b+1)^0,f,c
  3147   001826  5007               	movf	(___fladd@a+2)^0,w,c
  3148   001828  2203               	addwfc	(___fladd@b+2)^0,f,c
  3149   00182A  5008               	movf	(___fladd@a+3)^0,w,c
  3150   00182C  2204               	addwfc	(___fladd@b+3)^0,f,c
  3151   00182E  A004               	btfss	(___fladd@b+3)^0,0,c
  3152   001830  EF1C  F00C         	goto	u2721
  3153   001834  EF1E  F00C         	goto	u2720
  3154   001838                     u2721:
  3155   001838  EFCA  F00C         	goto	l3473
  3156   00183C                     u2720:
  3157   00183C  A010               	btfss	___fladd@grs^0,0,c
  3158   00183E  EF23  F00C         	goto	u2731
  3159   001842  EF25  F00C         	goto	u2730
  3160   001846                     u2731:
  3161   001846  EF2B  F00C         	goto	l3427
  3162   00184A                     u2730:
  3163   00184A  90D8               	bcf	status,0,c
  3164   00184C  3010               	rrcf	___fladd@grs^0,w,c
  3165   00184E  0901               	iorlw	1
  3166   001850  6E10               	movwf	___fladd@grs^0,c
  3167   001852  EF2D  F00C         	goto	l3429
  3168   001856                     l3427:
  3169   001856  90D8               	bcf	status,0,c
  3170   001858  3210               	rrcf	___fladd@grs^0,f,c
  3171   00185A                     l3429:
  3172   00185A  A001               	btfss	___fladd@b^0,0,c
  3173   00185C  EF32  F00C         	goto	u2741
  3174   001860  EF34  F00C         	goto	u2740
  3175   001864                     u2741:
  3176   001864  EF35  F00C         	goto	l3433
  3177   001868                     u2740:
  3178   001868  8E10               	bsf	___fladd@grs^0,7,c
  3179   00186A                     l3433:
  3180   00186A  3404               	rlcf	(___fladd@b+3)^0,w,c
  3181   00186C  3204               	rrcf	(___fladd@b+3)^0,f,c
  3182   00186E  3203               	rrcf	(___fladd@b+2)^0,f,c
  3183   001870  3202               	rrcf	(___fladd@b+1)^0,f,c
  3184   001872  3201               	rrcf	___fladd@b^0,f,c
  3185   001874  2A0F               	incf	___fladd@bexp^0,f,c
  3186   001876  EFCA  F00C         	goto	l3473
  3187   00187A                     l3437:
  3188   00187A  5005               	movf	___fladd@a^0,w,c
  3189   00187C  5C01               	subwf	___fladd@b^0,w,c
  3190   00187E  5006               	movf	(___fladd@a+1)^0,w,c
  3191   001880  5802               	subwfb	(___fladd@b+1)^0,w,c
  3192   001882  5007               	movf	(___fladd@a+2)^0,w,c
  3193   001884  5803               	subwfb	(___fladd@b+2)^0,w,c
  3194   001886  5004               	movf	(___fladd@b+3)^0,w,c
  3195   001888  0A80               	xorlw	128
  3196   00188A  6E09               	movwf	??___fladd^0,c
  3197   00188C  5008               	movf	(___fladd@a+3)^0,w,c
  3198   00188E  0A80               	xorlw	128
  3199   001890  5809               	subwfb	??___fladd^0,w,c
  3200   001892  B0D8               	btfsc	status,0,c
  3201   001894  EF4E  F00C         	goto	u2751
  3202   001898  EF50  F00C         	goto	u2750
  3203   00189C                     u2751:
  3204   00189C  EF7B  F00C         	goto	l3447
  3205   0018A0                     u2750:
  3206   0018A0  5001               	movf	___fladd@b^0,w,c
  3207   0018A2  5C05               	subwf	___fladd@a^0,w,c
  3208   0018A4  6E09               	movwf	??___fladd^0,c
  3209   0018A6  5002               	movf	(___fladd@b+1)^0,w,c
  3210   0018A8  5806               	subwfb	(___fladd@a+1)^0,w,c
  3211   0018AA  6E0A               	movwf	(??___fladd+1)^0,c
  3212   0018AC  5003               	movf	(___fladd@b+2)^0,w,c
  3213   0018AE  5807               	subwfb	(___fladd@a+2)^0,w,c
  3214   0018B0  6E0B               	movwf	(??___fladd+2)^0,c
  3215   0018B2  5004               	movf	(___fladd@b+3)^0,w,c
  3216   0018B4  5808               	subwfb	(___fladd@a+3)^0,w,c
  3217   0018B6  6E0C               	movwf	(??___fladd+3)^0,c
  3218   0018B8  0EFF               	movlw	255
  3219   0018BA  2409               	addwf	??___fladd^0,w,c
  3220   0018BC  6E01               	movwf	___fladd@b^0,c
  3221   0018BE  0EFF               	movlw	255
  3222   0018C0  200A               	addwfc	(??___fladd+1)^0,w,c
  3223   0018C2  6E02               	movwf	(___fladd@b+1)^0,c
  3224   0018C4  0EFF               	movlw	255
  3225   0018C6  200B               	addwfc	(??___fladd+2)^0,w,c
  3226   0018C8  6E03               	movwf	(___fladd@b+2)^0,c
  3227   0018CA  0EFF               	movlw	255
  3228   0018CC  200C               	addwfc	(??___fladd+3)^0,w,c
  3229   0018CE  6E04               	movwf	(___fladd@b+3)^0,c
  3230   0018D0  0E80               	movlw	128
  3231   0018D2  1A0D               	xorwf	___fladd@signs^0,f,c
  3232   0018D4  6C10               	negf	___fladd@grs^0,c
  3233   0018D6  5010               	movf	___fladd@grs^0,w,c
  3234   0018D8  A4D8               	btfss	status,2,c
  3235   0018DA  EF71  F00C         	goto	u2761
  3236   0018DE  EF73  F00C         	goto	u2760
  3237   0018E2                     u2761:
  3238   0018E2  EF83  F00C         	goto	l1110
  3239   0018E6                     u2760:
  3240   0018E6  0E01               	movlw	1
  3241   0018E8  2601               	addwf	___fladd@b^0,f,c
  3242   0018EA  0E00               	movlw	0
  3243   0018EC  2202               	addwfc	(___fladd@b+1)^0,f,c
  3244   0018EE  2203               	addwfc	(___fladd@b+2)^0,f,c
  3245   0018F0  2204               	addwfc	(___fladd@b+3)^0,f,c
  3246   0018F2  EF83  F00C         	goto	l1110
  3247   0018F6                     l3447:
  3248   0018F6  5005               	movf	___fladd@a^0,w,c
  3249   0018F8  5E01               	subwf	___fladd@b^0,f,c
  3250   0018FA  5006               	movf	(___fladd@a+1)^0,w,c
  3251   0018FC  5A02               	subwfb	(___fladd@b+1)^0,f,c
  3252   0018FE  5007               	movf	(___fladd@a+2)^0,w,c
  3253   001900  5A03               	subwfb	(___fladd@b+2)^0,f,c
  3254   001902  5008               	movf	(___fladd@a+3)^0,w,c
  3255   001904  5A04               	subwfb	(___fladd@b+3)^0,f,c
  3256   001906                     l1110:
  3257   001906  5001               	movf	___fladd@b^0,w,c
  3258   001908  1002               	iorwf	(___fladd@b+1)^0,w,c
  3259   00190A  1003               	iorwf	(___fladd@b+2)^0,w,c
  3260   00190C  1004               	iorwf	(___fladd@b+3)^0,w,c
  3261   00190E  A4D8               	btfss	status,2,c
  3262   001910  EF8C  F00C         	goto	u2771
  3263   001914  EF8E  F00C         	goto	u2770
  3264   001918                     u2771:
  3265   001918  EFC3  F00C         	goto	l3471
  3266   00191C                     u2770:
  3267   00191C  5010               	movf	___fladd@grs^0,w,c
  3268   00191E  A4D8               	btfss	status,2,c
  3269   001920  EF94  F00C         	goto	u2781
  3270   001924  EF96  F00C         	goto	u2780
  3271   001928                     u2781:
  3272   001928  EFC3  F00C         	goto	l3471
  3273   00192C                     u2780:
  3274   00192C  0E00               	movlw	0
  3275   00192E  6E01               	movwf	?___fladd^0,c
  3276   001930  0E00               	movlw	0
  3277   001932  6E02               	movwf	(?___fladd+1)^0,c
  3278   001934  0E00               	movlw	0
  3279   001936  6E03               	movwf	(?___fladd+2)^0,c
  3280   001938  0E00               	movlw	0
  3281   00193A  6E04               	movwf	(?___fladd+3)^0,c
  3282   00193C  EF5E  F00D         	goto	l1102
  3283   001940                     l3455:
  3284   001940  90D8               	bcf	status,0,c
  3285   001942  3601               	rlcf	___fladd@b^0,f,c
  3286   001944  3602               	rlcf	(___fladd@b+1)^0,f,c
  3287   001946  3603               	rlcf	(___fladd@b+2)^0,f,c
  3288   001948  3604               	rlcf	(___fladd@b+3)^0,f,c
  3289   00194A  AE10               	btfss	___fladd@grs^0,7,c
  3290   00194C  EFAA  F00C         	goto	u2791
  3291   001950  EFAC  F00C         	goto	u2790
  3292   001954                     u2791:
  3293   001954  EFAD  F00C         	goto	l3461
  3294   001958                     u2790:
  3295   001958  8001               	bsf	___fladd@b^0,0,c
  3296   00195A                     l3461:
  3297   00195A  A010               	btfss	___fladd@grs^0,0,c
  3298   00195C  EFB2  F00C         	goto	u2801
  3299   001960  EFB4  F00C         	goto	u2800
  3300   001964                     u2801:
  3301   001964  EFB8  F00C         	goto	l3465
  3302   001968                     u2800:
  3303   001968  80D8               	bsf	status,0,c
  3304   00196A  3610               	rlcf	___fladd@grs^0,f,c
  3305   00196C  EFBA  F00C         	goto	l3467
  3306   001970                     l3465:
  3307   001970  90D8               	bcf	status,0,c
  3308   001972  3610               	rlcf	___fladd@grs^0,f,c
  3309   001974                     l3467:
  3310   001974  500F               	movf	___fladd@bexp^0,w,c
  3311   001976  B4D8               	btfsc	status,2,c
  3312   001978  EFC0  F00C         	goto	u2811
  3313   00197C  EFC2  F00C         	goto	u2810
  3314   001980                     u2811:
  3315   001980  EFC3  F00C         	goto	l3471
  3316   001984                     u2810:
  3317   001984  060F               	decf	___fladd@bexp^0,f,c
  3318   001986                     l3471:
  3319   001986  AE03               	btfss	(___fladd@b+2)^0,7,c
  3320   001988  EFC8  F00C         	goto	u2821
  3321   00198C  EFCA  F00C         	goto	u2820
  3322   001990                     u2821:
  3323   001990  EFA0  F00C         	goto	l3455
  3324   001994                     u2820:
  3325   001994                     l3473:
  3326   001994  0E00               	movlw	0
  3327   001996  6E0E               	movwf	___fladd@aexp^0,c
  3328   001998  AE10               	btfss	___fladd@grs^0,7,c
  3329   00199A  EFD1  F00C         	goto	u2831
  3330   00199E  EFD3  F00C         	goto	u2830
  3331   0019A2                     u2831:
  3332   0019A2  EFEB  F00C         	goto	l1119
  3333   0019A6                     u2830:
  3334   0019A6  C010  F009         	movff	___fladd@grs,??___fladd
  3335   0019AA  0E7F               	movlw	127
  3336   0019AC  1609               	andwf	??___fladd^0,f,c
  3337   0019AE  B4D8               	btfsc	status,2,c
  3338   0019B0  EFDC  F00C         	goto	u2841
  3339   0019B4  EFDE  F00C         	goto	u2840
  3340   0019B8                     u2841:
  3341   0019B8  EFE2  F00C         	goto	l1120
  3342   0019BC                     u2840:
  3343   0019BC                     l3479:
  3344   0019BC  0E01               	movlw	1
  3345   0019BE  6E0E               	movwf	___fladd@aexp^0,c
  3346   0019C0  EFEB  F00C         	goto	l1119
  3347   0019C4                     l1120:
  3348   0019C4  A001               	btfss	___fladd@b^0,0,c
  3349   0019C6  EFE7  F00C         	goto	u2851
  3350   0019CA  EFE9  F00C         	goto	u2850
  3351   0019CE                     u2851:
  3352   0019CE  EFEB  F00C         	goto	l1119
  3353   0019D2                     u2850:
  3354   0019D2  EFDE  F00C         	goto	l3479
  3355   0019D6                     l1119:
  3356   0019D6  500E               	movf	___fladd@aexp^0,w,c
  3357   0019D8  B4D8               	btfsc	status,2,c
  3358   0019DA  EFF1  F00C         	goto	u2861
  3359   0019DE  EFF3  F00C         	goto	u2860
  3360   0019E2                     u2861:
  3361   0019E2  EF1E  F00D         	goto	l3491
  3362   0019E6                     u2860:
  3363   0019E6  0E01               	movlw	1
  3364   0019E8  2601               	addwf	___fladd@b^0,f,c
  3365   0019EA  0E00               	movlw	0
  3366   0019EC  2202               	addwfc	(___fladd@b+1)^0,f,c
  3367   0019EE  2203               	addwfc	(___fladd@b+2)^0,f,c
  3368   0019F0  2204               	addwfc	(___fladd@b+3)^0,f,c
  3369   0019F2  A004               	btfss	(___fladd@b+3)^0,0,c
  3370   0019F4  EFFE  F00C         	goto	u2871
  3371   0019F8  EF00  F00D         	goto	u2870
  3372   0019FC                     u2871:
  3373   0019FC  EF1E  F00D         	goto	l3491
  3374   001A00                     u2870:
  3375   001A00  C001  F009         	movff	___fladd@b,??___fladd
  3376   001A04  C002  F00A         	movff	___fladd@b+1,??___fladd+1
  3377   001A08  C003  F00B         	movff	___fladd@b+2,??___fladd+2
  3378   001A0C  C004  F00C         	movff	___fladd@b+3,??___fladd+3
  3379   001A10  340C               	rlcf	(??___fladd+3)^0,w,c
  3380   001A12  320C               	rrcf	(??___fladd+3)^0,f,c
  3381   001A14  320B               	rrcf	(??___fladd+2)^0,f,c
  3382   001A16  320A               	rrcf	(??___fladd+1)^0,f,c
  3383   001A18  3209               	rrcf	??___fladd^0,f,c
  3384   001A1A  C009  F001         	movff	??___fladd,___fladd@b
  3385   001A1E  C00A  F002         	movff	??___fladd+1,___fladd@b+1
  3386   001A22  C00B  F003         	movff	??___fladd+2,___fladd@b+2
  3387   001A26  C00C  F004         	movff	??___fladd+3,___fladd@b+3
  3388   001A2A  280F               	incf	___fladd@bexp^0,w,c
  3389   001A2C  B4D8               	btfsc	status,2,c
  3390   001A2E  EF1B  F00D         	goto	u2881
  3391   001A32  EF1D  F00D         	goto	u2880
  3392   001A36                     u2881:
  3393   001A36  EF1E  F00D         	goto	l3491
  3394   001A3A                     u2880:
  3395   001A3A  2A0F               	incf	___fladd@bexp^0,f,c
  3396   001A3C                     l3491:
  3397   001A3C  280F               	incf	___fladd@bexp^0,w,c
  3398   001A3E  B4D8               	btfsc	status,2,c
  3399   001A40  EF24  F00D         	goto	u2891
  3400   001A44  EF26  F00D         	goto	u2890
  3401   001A48                     u2891:
  3402   001A48  EF2E  F00D         	goto	l3495
  3403   001A4C                     u2890:
  3404   001A4C  500F               	movf	___fladd@bexp^0,w,c
  3405   001A4E  A4D8               	btfss	status,2,c
  3406   001A50  EF2C  F00D         	goto	u2901
  3407   001A54  EF2E  F00D         	goto	u2900
  3408   001A58                     u2901:
  3409   001A58  EF40  F00D         	goto	l3499
  3410   001A5C                     u2900:
  3411   001A5C                     l3495:
  3412   001A5C  0E00               	movlw	0
  3413   001A5E  6E01               	movwf	___fladd@b^0,c
  3414   001A60  0E00               	movlw	0
  3415   001A62  6E02               	movwf	(___fladd@b+1)^0,c
  3416   001A64  0E00               	movlw	0
  3417   001A66  6E03               	movwf	(___fladd@b+2)^0,c
  3418   001A68  0E00               	movlw	0
  3419   001A6A  6E04               	movwf	(___fladd@b+3)^0,c
  3420   001A6C  500F               	movf	___fladd@bexp^0,w,c
  3421   001A6E  A4D8               	btfss	status,2,c
  3422   001A70  EF3C  F00D         	goto	u2911
  3423   001A74  EF3E  F00D         	goto	u2910
  3424   001A78                     u2911:
  3425   001A78  EF40  F00D         	goto	l3499
  3426   001A7C                     u2910:
  3427   001A7C  0E00               	movlw	0
  3428   001A7E  6E0D               	movwf	___fladd@signs^0,c
  3429   001A80                     l3499:
  3430   001A80  A00F               	btfss	___fladd@bexp^0,0,c
  3431   001A82  EF45  F00D         	goto	u2921
  3432   001A86  EF47  F00D         	goto	u2920
  3433   001A8A                     u2921:
  3434   001A8A  EF4A  F00D         	goto	l3503
  3435   001A8E                     u2920:
  3436   001A8E  8E03               	bsf	(___fladd@b+2)^0,7,c
  3437   001A90  EF4B  F00D         	goto	l3505
  3438   001A94                     l3503:
  3439   001A94  9E03               	bcf	(___fladd@b+2)^0,7,c
  3440   001A96                     l3505:
  3441   001A96  90D8               	bcf	status,0,c
  3442   001A98  300F               	rrcf	___fladd@bexp^0,w,c
  3443   001A9A  6E04               	movwf	(___fladd@b+3)^0,c
  3444   001A9C  AE0D               	btfss	___fladd@signs^0,7,c
  3445   001A9E  EF53  F00D         	goto	u2931
  3446   001AA2  EF55  F00D         	goto	u2930
  3447   001AA6                     u2931:
  3448   001AA6  EF56  F00D         	goto	l3511
  3449   001AAA                     u2930:
  3450   001AAA  8E04               	bsf	(___fladd@b+3)^0,7,c
  3451   001AAC                     l3511:
  3452   001AAC  C001  F001         	movff	___fladd@b,?___fladd
  3453   001AB0  C002  F002         	movff	___fladd@b+1,?___fladd+1
  3454   001AB4  C003  F003         	movff	___fladd@b+2,?___fladd+2
  3455   001AB8  C004  F004         	movff	___fladd@b+3,?___fladd+3
  3456   001ABC                     l1102:
  3457   001ABC  0012               	return		;funcret
  3458   001ABE                     __end_of___fladd:
  3459                           	callstack 0
  3460                           
  3461 ;; *************** function ___flmul *****************
  3462 ;; Defined at:
  3463 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  3464 ;; Parameters:    Size  Location     Type
  3465 ;;  b               4    0[COMRAM] unsigned char 
  3466 ;;  a               4    4[COMRAM] unsigned char 
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;  prod            4   19[COMRAM] struct .
  3469 ;;  grs             4   13[COMRAM] unsigned long 
  3470 ;;  temp            2   23[COMRAM] struct .
  3471 ;;  bexp            1   18[COMRAM] unsigned char 
  3472 ;;  aexp            1   17[COMRAM] unsigned char 
  3473 ;;  sign            1   12[COMRAM] unsigned char 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  4    0[COMRAM] unsigned char 
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0, prodl, prodh
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3483 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3484 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3485 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3486 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3487 ;;Total ram usage:       25 bytes
  3488 ;; Hardware stack levels used: 1
  3489 ;; This function calls:
  3490 ;;		Nothing
  3491 ;; This function is called by:
  3492 ;;		_convert_rgb2hue
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           	psect	text7
  3497   001ABE                     __ptext7:
  3498                           	callstack 0
  3499   001ABE                     ___flmul:
  3500                           	callstack 28
  3501   001ABE  5004               	movf	(___flmul@b+3)^0,w,c
  3502   001AC0  0B80               	andlw	128
  3503   001AC2  6E0D               	movwf	___flmul@sign^0,c
  3504   001AC4  5004               	movf	(___flmul@b+3)^0,w,c
  3505   001AC6  2404               	addwf	(___flmul@b+3)^0,w,c
  3506   001AC8  6E13               	movwf	___flmul@bexp^0,c
  3507   001ACA  AE03               	btfss	(___flmul@b+2)^0,7,c
  3508   001ACC  EF6A  F00D         	goto	u3251
  3509   001AD0  EF6C  F00D         	goto	u3250
  3510   001AD4                     u3251:
  3511   001AD4  EF6D  F00D         	goto	l3791
  3512   001AD8                     u3250:
  3513   001AD8  8013               	bsf	___flmul@bexp^0,0,c
  3514   001ADA                     l3791:
  3515   001ADA  5013               	movf	___flmul@bexp^0,w,c
  3516   001ADC  B4D8               	btfsc	status,2,c
  3517   001ADE  EF73  F00D         	goto	u3261
  3518   001AE2  EF75  F00D         	goto	u3260
  3519   001AE6                     u3261:
  3520   001AE6  EF88  F00D         	goto	l3799
  3521   001AEA                     u3260:
  3522   001AEA  2813               	incf	___flmul@bexp^0,w,c
  3523   001AEC  A4D8               	btfss	status,2,c
  3524   001AEE  EF7B  F00D         	goto	u3271
  3525   001AF2  EF7D  F00D         	goto	u3270
  3526   001AF6                     u3271:
  3527   001AF6  EF85  F00D         	goto	l3797
  3528   001AFA                     u3270:
  3529   001AFA  0E00               	movlw	0
  3530   001AFC  6E01               	movwf	___flmul@b^0,c
  3531   001AFE  0E00               	movlw	0
  3532   001B00  6E02               	movwf	(___flmul@b+1)^0,c
  3533   001B02  0E00               	movlw	0
  3534   001B04  6E03               	movwf	(___flmul@b+2)^0,c
  3535   001B06  0E00               	movlw	0
  3536   001B08  6E04               	movwf	(___flmul@b+3)^0,c
  3537   001B0A                     l3797:
  3538   001B0A  8E03               	bsf	(___flmul@b+2)^0,7,c
  3539   001B0C  EF90  F00D         	goto	l3801
  3540   001B10                     l3799:
  3541   001B10  0E00               	movlw	0
  3542   001B12  6E01               	movwf	___flmul@b^0,c
  3543   001B14  0E00               	movlw	0
  3544   001B16  6E02               	movwf	(___flmul@b+1)^0,c
  3545   001B18  0E00               	movlw	0
  3546   001B1A  6E03               	movwf	(___flmul@b+2)^0,c
  3547   001B1C  0E00               	movlw	0
  3548   001B1E  6E04               	movwf	(___flmul@b+3)^0,c
  3549   001B20                     l3801:
  3550   001B20  5008               	movf	(___flmul@a+3)^0,w,c
  3551   001B22  0B80               	andlw	128
  3552   001B24  1A0D               	xorwf	___flmul@sign^0,f,c
  3553   001B26  5008               	movf	(___flmul@a+3)^0,w,c
  3554   001B28  2408               	addwf	(___flmul@a+3)^0,w,c
  3555   001B2A  6E12               	movwf	___flmul@aexp^0,c
  3556   001B2C  AE07               	btfss	(___flmul@a+2)^0,7,c
  3557   001B2E  EF9B  F00D         	goto	u3281
  3558   001B32  EF9D  F00D         	goto	u3280
  3559   001B36                     u3281:
  3560   001B36  EF9E  F00D         	goto	l3809
  3561   001B3A                     u3280:
  3562   001B3A  8012               	bsf	___flmul@aexp^0,0,c
  3563   001B3C                     l3809:
  3564   001B3C  5012               	movf	___flmul@aexp^0,w,c
  3565   001B3E  B4D8               	btfsc	status,2,c
  3566   001B40  EFA4  F00D         	goto	u3291
  3567   001B44  EFA6  F00D         	goto	u3290
  3568   001B48                     u3291:
  3569   001B48  EFB9  F00D         	goto	l3817
  3570   001B4C                     u3290:
  3571   001B4C  2812               	incf	___flmul@aexp^0,w,c
  3572   001B4E  A4D8               	btfss	status,2,c
  3573   001B50  EFAC  F00D         	goto	u3301
  3574   001B54  EFAE  F00D         	goto	u3300
  3575   001B58                     u3301:
  3576   001B58  EFB6  F00D         	goto	l3815
  3577   001B5C                     u3300:
  3578   001B5C  0E00               	movlw	0
  3579   001B5E  6E05               	movwf	___flmul@a^0,c
  3580   001B60  0E00               	movlw	0
  3581   001B62  6E06               	movwf	(___flmul@a+1)^0,c
  3582   001B64  0E00               	movlw	0
  3583   001B66  6E07               	movwf	(___flmul@a+2)^0,c
  3584   001B68  0E00               	movlw	0
  3585   001B6A  6E08               	movwf	(___flmul@a+3)^0,c
  3586   001B6C                     l3815:
  3587   001B6C  8E07               	bsf	(___flmul@a+2)^0,7,c
  3588   001B6E  EFC1  F00D         	goto	l1179
  3589   001B72                     l3817:
  3590   001B72  0E00               	movlw	0
  3591   001B74  6E05               	movwf	___flmul@a^0,c
  3592   001B76  0E00               	movlw	0
  3593   001B78  6E06               	movwf	(___flmul@a+1)^0,c
  3594   001B7A  0E00               	movlw	0
  3595   001B7C  6E07               	movwf	(___flmul@a+2)^0,c
  3596   001B7E  0E00               	movlw	0
  3597   001B80  6E08               	movwf	(___flmul@a+3)^0,c
  3598   001B82                     l1179:
  3599   001B82  5012               	movf	___flmul@aexp^0,w,c
  3600   001B84  B4D8               	btfsc	status,2,c
  3601   001B86  EFC7  F00D         	goto	u3311
  3602   001B8A  EFC9  F00D         	goto	u3310
  3603   001B8E                     u3311:
  3604   001B8E  EFD1  F00D         	goto	l3821
  3605   001B92                     u3310:
  3606   001B92  5013               	movf	___flmul@bexp^0,w,c
  3607   001B94  A4D8               	btfss	status,2,c
  3608   001B96  EFCF  F00D         	goto	u3321
  3609   001B9A  EFD1  F00D         	goto	u3320
  3610   001B9E                     u3321:
  3611   001B9E  EFDB  F00D         	goto	l3825
  3612   001BA2                     u3320:
  3613   001BA2                     l3821:
  3614   001BA2  0E00               	movlw	0
  3615   001BA4  6E01               	movwf	?___flmul^0,c
  3616   001BA6  0E00               	movlw	0
  3617   001BA8  6E02               	movwf	(?___flmul+1)^0,c
  3618   001BAA  0E00               	movlw	0
  3619   001BAC  6E03               	movwf	(?___flmul+2)^0,c
  3620   001BAE  0E00               	movlw	0
  3621   001BB0  6E04               	movwf	(?___flmul+3)^0,c
  3622   001BB2  EF73  F00F         	goto	l1183
  3623   001BB6                     l3825:
  3624   001BB6  5007               	movf	(___flmul@a+2)^0,w,c
  3625   001BB8  0201               	mulwf	___flmul@b^0,c
  3626   001BBA  CFF3 F018          	movff	prodl,___flmul@temp
  3627   001BBE  CFF4 F019          	movff	prodh,___flmul@temp+1
  3628   001BC2  5018               	movf	___flmul@temp^0,w,c
  3629   001BC4  6E0E               	movwf	___flmul@grs^0,c
  3630   001BC6  6A0F               	clrf	(___flmul@grs+1)^0,c
  3631   001BC8  6A10               	clrf	(___flmul@grs+2)^0,c
  3632   001BCA  6A11               	clrf	(___flmul@grs+3)^0,c
  3633   001BCC  5019               	movf	(___flmul@temp+1)^0,w,c
  3634   001BCE  6E14               	movwf	___flmul@prod^0,c
  3635   001BD0  6A15               	clrf	(___flmul@prod+1)^0,c
  3636   001BD2  6A16               	clrf	(___flmul@prod+2)^0,c
  3637   001BD4  6A17               	clrf	(___flmul@prod+3)^0,c
  3638   001BD6  5006               	movf	(___flmul@a+1)^0,w,c
  3639   001BD8  0202               	mulwf	(___flmul@b+1)^0,c
  3640   001BDA  CFF3 F018          	movff	prodl,___flmul@temp
  3641   001BDE  CFF4 F019          	movff	prodh,___flmul@temp+1
  3642   001BE2  5018               	movf	___flmul@temp^0,w,c
  3643   001BE4  260E               	addwf	___flmul@grs^0,f,c
  3644   001BE6  0E00               	movlw	0
  3645   001BE8  220F               	addwfc	(___flmul@grs+1)^0,f,c
  3646   001BEA  2210               	addwfc	(___flmul@grs+2)^0,f,c
  3647   001BEC  2211               	addwfc	(___flmul@grs+3)^0,f,c
  3648   001BEE  5019               	movf	(___flmul@temp+1)^0,w,c
  3649   001BF0  2614               	addwf	___flmul@prod^0,f,c
  3650   001BF2  0E00               	movlw	0
  3651   001BF4  2215               	addwfc	(___flmul@prod+1)^0,f,c
  3652   001BF6  2216               	addwfc	(___flmul@prod+2)^0,f,c
  3653   001BF8  2217               	addwfc	(___flmul@prod+3)^0,f,c
  3654   001BFA  5005               	movf	___flmul@a^0,w,c
  3655   001BFC  0203               	mulwf	(___flmul@b+2)^0,c
  3656   001BFE  CFF3 F018          	movff	prodl,___flmul@temp
  3657   001C02  CFF4 F019          	movff	prodh,___flmul@temp+1
  3658   001C06  5018               	movf	___flmul@temp^0,w,c
  3659   001C08  260E               	addwf	___flmul@grs^0,f,c
  3660   001C0A  0E00               	movlw	0
  3661   001C0C  220F               	addwfc	(___flmul@grs+1)^0,f,c
  3662   001C0E  2210               	addwfc	(___flmul@grs+2)^0,f,c
  3663   001C10  2211               	addwfc	(___flmul@grs+3)^0,f,c
  3664   001C12  5019               	movf	(___flmul@temp+1)^0,w,c
  3665   001C14  2614               	addwf	___flmul@prod^0,f,c
  3666   001C16  0E00               	movlw	0
  3667   001C18  2215               	addwfc	(___flmul@prod+1)^0,f,c
  3668   001C1A  2216               	addwfc	(___flmul@prod+2)^0,f,c
  3669   001C1C  2217               	addwfc	(___flmul@prod+3)^0,f,c
  3670   001C1E  C010  F011         	movff	___flmul@grs+2,___flmul@grs+3
  3671   001C22  C00F  F010         	movff	___flmul@grs+1,___flmul@grs+2
  3672   001C26  C00E  F00F         	movff	___flmul@grs,___flmul@grs+1
  3673   001C2A  6A0E               	clrf	___flmul@grs^0,c
  3674   001C2C  5005               	movf	___flmul@a^0,w,c
  3675   001C2E  0202               	mulwf	(___flmul@b+1)^0,c
  3676   001C30  CFF3 F018          	movff	prodl,___flmul@temp
  3677   001C34  CFF4 F019          	movff	prodh,___flmul@temp+1
  3678   001C38  5018               	movf	___flmul@temp^0,w,c
  3679   001C3A  260E               	addwf	___flmul@grs^0,f,c
  3680   001C3C  5019               	movf	(___flmul@temp+1)^0,w,c
  3681   001C3E  220F               	addwfc	(___flmul@grs+1)^0,f,c
  3682   001C40  0E00               	movlw	0
  3683   001C42  2210               	addwfc	(___flmul@grs+2)^0,f,c
  3684   001C44  0E00               	movlw	0
  3685   001C46  2211               	addwfc	(___flmul@grs+3)^0,f,c
  3686   001C48  5006               	movf	(___flmul@a+1)^0,w,c
  3687   001C4A  0201               	mulwf	___flmul@b^0,c
  3688   001C4C  CFF3 F018          	movff	prodl,___flmul@temp
  3689   001C50  CFF4 F019          	movff	prodh,___flmul@temp+1
  3690   001C54  5018               	movf	___flmul@temp^0,w,c
  3691   001C56  260E               	addwf	___flmul@grs^0,f,c
  3692   001C58  5019               	movf	(___flmul@temp+1)^0,w,c
  3693   001C5A  220F               	addwfc	(___flmul@grs+1)^0,f,c
  3694   001C5C  0E00               	movlw	0
  3695   001C5E  2210               	addwfc	(___flmul@grs+2)^0,f,c
  3696   001C60  0E00               	movlw	0
  3697   001C62  2211               	addwfc	(___flmul@grs+3)^0,f,c
  3698   001C64  C010  F011         	movff	___flmul@grs+2,___flmul@grs+3
  3699   001C68  C00F  F010         	movff	___flmul@grs+1,___flmul@grs+2
  3700   001C6C  C00E  F00F         	movff	___flmul@grs,___flmul@grs+1
  3701   001C70  6A0E               	clrf	___flmul@grs^0,c
  3702   001C72  5005               	movf	___flmul@a^0,w,c
  3703   001C74  0201               	mulwf	___flmul@b^0,c
  3704   001C76  CFF3 F018          	movff	prodl,___flmul@temp
  3705   001C7A  CFF4 F019          	movff	prodh,___flmul@temp+1
  3706   001C7E  5018               	movf	___flmul@temp^0,w,c
  3707   001C80  260E               	addwf	___flmul@grs^0,f,c
  3708   001C82  5019               	movf	(___flmul@temp+1)^0,w,c
  3709   001C84  220F               	addwfc	(___flmul@grs+1)^0,f,c
  3710   001C86  0E00               	movlw	0
  3711   001C88  2210               	addwfc	(___flmul@grs+2)^0,f,c
  3712   001C8A  0E00               	movlw	0
  3713   001C8C  2211               	addwfc	(___flmul@grs+3)^0,f,c
  3714   001C8E  5007               	movf	(___flmul@a+2)^0,w,c
  3715   001C90  0202               	mulwf	(___flmul@b+1)^0,c
  3716   001C92  CFF3 F018          	movff	prodl,___flmul@temp
  3717   001C96  CFF4 F019          	movff	prodh,___flmul@temp+1
  3718   001C9A  5018               	movf	___flmul@temp^0,w,c
  3719   001C9C  2614               	addwf	___flmul@prod^0,f,c
  3720   001C9E  5019               	movf	(___flmul@temp+1)^0,w,c
  3721   001CA0  2215               	addwfc	(___flmul@prod+1)^0,f,c
  3722   001CA2  0E00               	movlw	0
  3723   001CA4  2216               	addwfc	(___flmul@prod+2)^0,f,c
  3724   001CA6  0E00               	movlw	0
  3725   001CA8  2217               	addwfc	(___flmul@prod+3)^0,f,c
  3726   001CAA  5006               	movf	(___flmul@a+1)^0,w,c
  3727   001CAC  0203               	mulwf	(___flmul@b+2)^0,c
  3728   001CAE  CFF3 F018          	movff	prodl,___flmul@temp
  3729   001CB2  CFF4 F019          	movff	prodh,___flmul@temp+1
  3730   001CB6  5018               	movf	___flmul@temp^0,w,c
  3731   001CB8  2614               	addwf	___flmul@prod^0,f,c
  3732   001CBA  5019               	movf	(___flmul@temp+1)^0,w,c
  3733   001CBC  2215               	addwfc	(___flmul@prod+1)^0,f,c
  3734   001CBE  0E00               	movlw	0
  3735   001CC0  2216               	addwfc	(___flmul@prod+2)^0,f,c
  3736   001CC2  0E00               	movlw	0
  3737   001CC4  2217               	addwfc	(___flmul@prod+3)^0,f,c
  3738   001CC6  5007               	movf	(___flmul@a+2)^0,w,c
  3739   001CC8  0203               	mulwf	(___flmul@b+2)^0,c
  3740   001CCA  CFF3 F018          	movff	prodl,___flmul@temp
  3741   001CCE  CFF4 F019          	movff	prodh,___flmul@temp+1
  3742   001CD2  5018               	movf	___flmul@temp^0,w,c
  3743   001CD4  6E09               	movwf	??___flmul^0,c
  3744   001CD6  5019               	movf	(___flmul@temp+1)^0,w,c
  3745   001CD8  6E0A               	movwf	(??___flmul+1)^0,c
  3746   001CDA  6A0B               	clrf	(??___flmul+2)^0,c
  3747   001CDC  6A0C               	clrf	(??___flmul+3)^0,c
  3748   001CDE  C00B  F00C         	movff	??___flmul+2,??___flmul+3
  3749   001CE2  C00A  F00B         	movff	??___flmul+1,??___flmul+2
  3750   001CE6  C009  F00A         	movff	??___flmul,??___flmul+1
  3751   001CEA  6A09               	clrf	??___flmul^0,c
  3752   001CEC  5009               	movf	??___flmul^0,w,c
  3753   001CEE  2614               	addwf	___flmul@prod^0,f,c
  3754   001CF0  500A               	movf	(??___flmul+1)^0,w,c
  3755   001CF2  2215               	addwfc	(___flmul@prod+1)^0,f,c
  3756   001CF4  500B               	movf	(??___flmul+2)^0,w,c
  3757   001CF6  2216               	addwfc	(___flmul@prod+2)^0,f,c
  3758   001CF8  500C               	movf	(??___flmul+3)^0,w,c
  3759   001CFA  2217               	addwfc	(___flmul@prod+3)^0,f,c
  3760   001CFC  C00E  F009         	movff	___flmul@grs,??___flmul
  3761   001D00  C00F  F00A         	movff	___flmul@grs+1,??___flmul+1
  3762   001D04  C010  F00B         	movff	___flmul@grs+2,??___flmul+2
  3763   001D08  C011  F00C         	movff	___flmul@grs+3,??___flmul+3
  3764   001D0C  0E19               	movlw	25
  3765   001D0E  EF8E  F00E         	goto	u3330
  3766   001D12                     u3335:
  3767   001D12  90D8               	bcf	status,0,c
  3768   001D14  320C               	rrcf	(??___flmul+3)^0,f,c
  3769   001D16  320B               	rrcf	(??___flmul+2)^0,f,c
  3770   001D18  320A               	rrcf	(??___flmul+1)^0,f,c
  3771   001D1A  3209               	rrcf	??___flmul^0,f,c
  3772   001D1C                     u3330:
  3773   001D1C  2EE8               	decfsz	wreg,f,c
  3774   001D1E  EF89  F00E         	goto	u3335
  3775   001D22  5009               	movf	??___flmul^0,w,c
  3776   001D24  2614               	addwf	___flmul@prod^0,f,c
  3777   001D26  500A               	movf	(??___flmul+1)^0,w,c
  3778   001D28  2215               	addwfc	(___flmul@prod+1)^0,f,c
  3779   001D2A  500B               	movf	(??___flmul+2)^0,w,c
  3780   001D2C  2216               	addwfc	(___flmul@prod+2)^0,f,c
  3781   001D2E  500C               	movf	(??___flmul+3)^0,w,c
  3782   001D30  2217               	addwfc	(___flmul@prod+3)^0,f,c
  3783   001D32  C010  F011         	movff	___flmul@grs+2,___flmul@grs+3
  3784   001D36  C00F  F010         	movff	___flmul@grs+1,___flmul@grs+2
  3785   001D3A  C00E  F00F         	movff	___flmul@grs,___flmul@grs+1
  3786   001D3E  6A0E               	clrf	___flmul@grs^0,c
  3787   001D40  5012               	movf	___flmul@aexp^0,w,c
  3788   001D42  C013  F009         	movff	___flmul@bexp,??___flmul
  3789   001D46  6A0A               	clrf	(??___flmul+1)^0,c
  3790   001D48  2609               	addwf	??___flmul^0,f,c
  3791   001D4A  0E00               	movlw	0
  3792   001D4C  220A               	addwfc	(??___flmul+1)^0,f,c
  3793   001D4E  0E82               	movlw	130
  3794   001D50  2409               	addwf	??___flmul^0,w,c
  3795   001D52  6E18               	movwf	___flmul@temp^0,c
  3796   001D54  0EFF               	movlw	255
  3797   001D56  200A               	addwfc	(??___flmul+1)^0,w,c
  3798   001D58  6E19               	movwf	(___flmul@temp+1)^0,c
  3799   001D5A  EFC4  F00E         	goto	l3873
  3800   001D5E                     l3867:
  3801   001D5E  90D8               	bcf	status,0,c
  3802   001D60  3614               	rlcf	___flmul@prod^0,f,c
  3803   001D62  3615               	rlcf	(___flmul@prod+1)^0,f,c
  3804   001D64  3616               	rlcf	(___flmul@prod+2)^0,f,c
  3805   001D66  3617               	rlcf	(___flmul@prod+3)^0,f,c
  3806   001D68  AE11               	btfss	(___flmul@grs+3)^0,7,c
  3807   001D6A  EFB9  F00E         	goto	u3341
  3808   001D6E  EFBB  F00E         	goto	u3340
  3809   001D72                     u3341:
  3810   001D72  EFBC  F00E         	goto	l1186
  3811   001D76                     u3340:
  3812   001D76  8014               	bsf	___flmul@prod^0,0,c
  3813   001D78                     l1186:
  3814   001D78  90D8               	bcf	status,0,c
  3815   001D7A  360E               	rlcf	___flmul@grs^0,f,c
  3816   001D7C  360F               	rlcf	(___flmul@grs+1)^0,f,c
  3817   001D7E  3610               	rlcf	(___flmul@grs+2)^0,f,c
  3818   001D80  3611               	rlcf	(___flmul@grs+3)^0,f,c
  3819   001D82  0618               	decf	___flmul@temp^0,f,c
  3820   001D84  A0D8               	btfss	status,0,c
  3821   001D86  0619               	decf	(___flmul@temp+1)^0,f,c
  3822   001D88                     l3873:
  3823   001D88  AE16               	btfss	(___flmul@prod+2)^0,7,c
  3824   001D8A  EFC9  F00E         	goto	u3351
  3825   001D8E  EFCB  F00E         	goto	u3350
  3826   001D92                     u3351:
  3827   001D92  EFAF  F00E         	goto	l3867
  3828   001D96                     u3350:
  3829   001D96  0E00               	movlw	0
  3830   001D98  6E12               	movwf	___flmul@aexp^0,c
  3831   001D9A  AE11               	btfss	(___flmul@grs+3)^0,7,c
  3832   001D9C  EFD2  F00E         	goto	u3361
  3833   001DA0  EFD4  F00E         	goto	u3360
  3834   001DA4                     u3361:
  3835   001DA4  EFF8  F00E         	goto	l1188
  3836   001DA8                     u3360:
  3837   001DA8  0EFF               	movlw	255
  3838   001DAA  140E               	andwf	___flmul@grs^0,w,c
  3839   001DAC  6E09               	movwf	??___flmul^0,c
  3840   001DAE  0EFF               	movlw	255
  3841   001DB0  140F               	andwf	(___flmul@grs+1)^0,w,c
  3842   001DB2  6E0A               	movwf	(??___flmul+1)^0,c
  3843   001DB4  0EFF               	movlw	255
  3844   001DB6  1410               	andwf	(___flmul@grs+2)^0,w,c
  3845   001DB8  6E0B               	movwf	(??___flmul+2)^0,c
  3846   001DBA  0E7F               	movlw	127
  3847   001DBC  1411               	andwf	(___flmul@grs+3)^0,w,c
  3848   001DBE  6E0C               	movwf	(??___flmul+3)^0,c
  3849   001DC0  5009               	movf	??___flmul^0,w,c
  3850   001DC2  100A               	iorwf	(??___flmul+1)^0,w,c
  3851   001DC4  100B               	iorwf	(??___flmul+2)^0,w,c
  3852   001DC6  100C               	iorwf	(??___flmul+3)^0,w,c
  3853   001DC8  B4D8               	btfsc	status,2,c
  3854   001DCA  EFE9  F00E         	goto	u3371
  3855   001DCE  EFEB  F00E         	goto	u3370
  3856   001DD2                     u3371:
  3857   001DD2  EFEF  F00E         	goto	l1189
  3858   001DD6                     u3370:
  3859   001DD6                     l3881:
  3860   001DD6  0E01               	movlw	1
  3861   001DD8  6E12               	movwf	___flmul@aexp^0,c
  3862   001DDA  EFF8  F00E         	goto	l1188
  3863   001DDE                     l1189:
  3864   001DDE  A014               	btfss	___flmul@prod^0,0,c
  3865   001DE0  EFF4  F00E         	goto	u3381
  3866   001DE4  EFF6  F00E         	goto	u3380
  3867   001DE8                     u3381:
  3868   001DE8  EFF8  F00E         	goto	l1188
  3869   001DEC                     u3380:
  3870   001DEC  EFEB  F00E         	goto	l3881
  3871   001DF0                     l1188:
  3872   001DF0  5012               	movf	___flmul@aexp^0,w,c
  3873   001DF2  B4D8               	btfsc	status,2,c
  3874   001DF4  EFFE  F00E         	goto	u3391
  3875   001DF8  EF00  F00F         	goto	u3390
  3876   001DFC                     u3391:
  3877   001DFC  EF24  F00F         	goto	l3893
  3878   001E00                     u3390:
  3879   001E00  0E01               	movlw	1
  3880   001E02  2614               	addwf	___flmul@prod^0,f,c
  3881   001E04  0E00               	movlw	0
  3882   001E06  2215               	addwfc	(___flmul@prod+1)^0,f,c
  3883   001E08  2216               	addwfc	(___flmul@prod+2)^0,f,c
  3884   001E0A  2217               	addwfc	(___flmul@prod+3)^0,f,c
  3885   001E0C  A017               	btfss	(___flmul@prod+3)^0,0,c
  3886   001E0E  EF0B  F00F         	goto	u3401
  3887   001E12  EF0D  F00F         	goto	u3400
  3888   001E16                     u3401:
  3889   001E16  EF24  F00F         	goto	l3893
  3890   001E1A                     u3400:
  3891   001E1A  C014  F009         	movff	___flmul@prod,??___flmul
  3892   001E1E  C015  F00A         	movff	___flmul@prod+1,??___flmul+1
  3893   001E22  C016  F00B         	movff	___flmul@prod+2,??___flmul+2
  3894   001E26  C017  F00C         	movff	___flmul@prod+3,??___flmul+3
  3895   001E2A  340C               	rlcf	(??___flmul+3)^0,w,c
  3896   001E2C  320C               	rrcf	(??___flmul+3)^0,f,c
  3897   001E2E  320B               	rrcf	(??___flmul+2)^0,f,c
  3898   001E30  320A               	rrcf	(??___flmul+1)^0,f,c
  3899   001E32  3209               	rrcf	??___flmul^0,f,c
  3900   001E34  C009  F014         	movff	??___flmul,___flmul@prod
  3901   001E38  C00A  F015         	movff	??___flmul+1,___flmul@prod+1
  3902   001E3C  C00B  F016         	movff	??___flmul+2,___flmul@prod+2
  3903   001E40  C00C  F017         	movff	??___flmul+3,___flmul@prod+3
  3904   001E44  4A18               	infsnz	___flmul@temp^0,f,c
  3905   001E46  2A19               	incf	(___flmul@temp+1)^0,f,c
  3906   001E48                     l3893:
  3907   001E48  BE19               	btfsc	(___flmul@temp+1)^0,7,c
  3908   001E4A  EF2F  F00F         	goto	u3411
  3909   001E4E  5019               	movf	(___flmul@temp+1)^0,w,c
  3910   001E50  E108               	bnz	u3410
  3911   001E52  2818               	incf	___flmul@temp^0,w,c
  3912   001E54  A0D8               	btfss	status,0,c
  3913   001E56  EF2F  F00F         	goto	u3411
  3914   001E5A  EF31  F00F         	goto	u3410
  3915   001E5E                     u3411:
  3916   001E5E  EF3B  F00F         	goto	l3897
  3917   001E62                     u3410:
  3918   001E62  0E00               	movlw	0
  3919   001E64  6E14               	movwf	___flmul@prod^0,c
  3920   001E66  0E00               	movlw	0
  3921   001E68  6E15               	movwf	(___flmul@prod+1)^0,c
  3922   001E6A  0E80               	movlw	128
  3923   001E6C  6E16               	movwf	(___flmul@prod+2)^0,c
  3924   001E6E  0E7F               	movlw	127
  3925   001E70  6E17               	movwf	(___flmul@prod+3)^0,c
  3926   001E72  EF69  F00F         	goto	l3909
  3927   001E76                     l3897:
  3928   001E76  BE19               	btfsc	(___flmul@temp+1)^0,7,c
  3929   001E78  EF48  F00F         	goto	u3420
  3930   001E7C  5019               	movf	(___flmul@temp+1)^0,w,c
  3931   001E7E  E106               	bnz	u3421
  3932   001E80  0418               	decf	___flmul@temp^0,w,c
  3933   001E82  B0D8               	btfsc	status,0,c
  3934   001E84  EF46  F00F         	goto	u3421
  3935   001E88  EF48  F00F         	goto	u3420
  3936   001E8C                     u3421:
  3937   001E8C  EF54  F00F         	goto	l1196
  3938   001E90                     u3420:
  3939   001E90  0E00               	movlw	0
  3940   001E92  6E14               	movwf	___flmul@prod^0,c
  3941   001E94  0E00               	movlw	0
  3942   001E96  6E15               	movwf	(___flmul@prod+1)^0,c
  3943   001E98  0E00               	movlw	0
  3944   001E9A  6E16               	movwf	(___flmul@prod+2)^0,c
  3945   001E9C  0E00               	movlw	0
  3946   001E9E  6E17               	movwf	(___flmul@prod+3)^0,c
  3947   001EA0  0E00               	movlw	0
  3948   001EA2  6E0D               	movwf	___flmul@sign^0,c
  3949   001EA4  EF69  F00F         	goto	l3909
  3950   001EA8                     l1196:
  3951   001EA8  C018  F013         	movff	___flmul@temp,___flmul@bexp
  3952   001EAC  0EFF               	movlw	255
  3953   001EAE  1614               	andwf	___flmul@prod^0,f,c
  3954   001EB0  0EFF               	movlw	255
  3955   001EB2  1615               	andwf	(___flmul@prod+1)^0,f,c
  3956   001EB4  0E7F               	movlw	127
  3957   001EB6  1616               	andwf	(___flmul@prod+2)^0,f,c
  3958   001EB8  0E00               	movlw	0
  3959   001EBA  1617               	andwf	(___flmul@prod+3)^0,f,c
  3960   001EBC  A013               	btfss	___flmul@bexp^0,0,c
  3961   001EBE  EF63  F00F         	goto	u3431
  3962   001EC2  EF65  F00F         	goto	u3430
  3963   001EC6                     u3431:
  3964   001EC6  EF66  F00F         	goto	l3907
  3965   001ECA                     u3430:
  3966   001ECA  8E16               	bsf	(___flmul@prod+2)^0,7,c
  3967   001ECC                     l3907:
  3968   001ECC  90D8               	bcf	status,0,c
  3969   001ECE  3013               	rrcf	___flmul@bexp^0,w,c
  3970   001ED0  6E17               	movwf	(___flmul@prod+3)^0,c
  3971   001ED2                     l3909:
  3972   001ED2  500D               	movf	___flmul@sign^0,w,c
  3973   001ED4  1217               	iorwf	(___flmul@prod+3)^0,f,c
  3974   001ED6  C014  F001         	movff	___flmul@prod,?___flmul
  3975   001EDA  C015  F002         	movff	___flmul@prod+1,?___flmul+1
  3976   001EDE  C016  F003         	movff	___flmul@prod+2,?___flmul+2
  3977   001EE2  C017  F004         	movff	___flmul@prod+3,?___flmul+3
  3978   001EE6                     l1183:
  3979   001EE6  0012               	return		;funcret
  3980   001EE8                     __end_of___flmul:
  3981                           	callstack 0
  3982                           
  3983 ;; *************** function ___flge *****************
  3984 ;; Defined at:
  3985 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  3986 ;; Parameters:    Size  Location     Type
  3987 ;;  ff1             4    0[COMRAM] unsigned char 
  3988 ;;  ff2             4    4[COMRAM] unsigned char 
  3989 ;; Auto vars:     Size  Location     Type
  3990 ;;		None
  3991 ;; Return value:  Size  Location     Type
  3992 ;;		None               void
  3993 ;; Registers used:
  3994 ;;		wreg, status,2, status,0
  3995 ;; Tracked objects:
  3996 ;;		On entry : 0/0
  3997 ;;		On exit  : 0/0
  3998 ;;		Unchanged: 0/0
  3999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4000 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4002 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4003 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4004 ;;Total ram usage:       12 bytes
  4005 ;; Hardware stack levels used: 1
  4006 ;; This function calls:
  4007 ;;		Nothing
  4008 ;; This function is called by:
  4009 ;;		_convert_rgb2hue
  4010 ;;		_main
  4011 ;; This function uses a non-reentrant model
  4012 ;;
  4013                           
  4014                           	psect	text8
  4015   002E8E                     __ptext8:
  4016                           	callstack 0
  4017   002E8E                     ___flge:
  4018                           	callstack 28
  4019   002E8E  0E00               	movlw	0
  4020   002E90  1401               	andwf	___flge@ff1^0,w,c
  4021   002E92  6E09               	movwf	??___flge^0,c
  4022   002E94  0E00               	movlw	0
  4023   002E96  1402               	andwf	(___flge@ff1+1)^0,w,c
  4024   002E98  6E0A               	movwf	(??___flge+1)^0,c
  4025   002E9A  0E80               	movlw	128
  4026   002E9C  1403               	andwf	(___flge@ff1+2)^0,w,c
  4027   002E9E  6E0B               	movwf	(??___flge+2)^0,c
  4028   002EA0  0E7F               	movlw	127
  4029   002EA2  1404               	andwf	(___flge@ff1+3)^0,w,c
  4030   002EA4  6E0C               	movwf	(??___flge+3)^0,c
  4031   002EA6  5009               	movf	??___flge^0,w,c
  4032   002EA8  100A               	iorwf	(??___flge+1)^0,w,c
  4033   002EAA  100B               	iorwf	(??___flge+2)^0,w,c
  4034   002EAC  100C               	iorwf	(??___flge+3)^0,w,c
  4035   002EAE  A4D8               	btfss	status,2,c
  4036   002EB0  EF5C  F017         	goto	u3471
  4037   002EB4  EF5E  F017         	goto	u3470
  4038   002EB8                     u3471:
  4039   002EB8  EF66  F017         	goto	l3941
  4040   002EBC                     u3470:
  4041   002EBC  0E00               	movlw	0
  4042   002EBE  6E01               	movwf	___flge@ff1^0,c
  4043   002EC0  0E00               	movlw	0
  4044   002EC2  6E02               	movwf	(___flge@ff1+1)^0,c
  4045   002EC4  0E00               	movlw	0
  4046   002EC6  6E03               	movwf	(___flge@ff1+2)^0,c
  4047   002EC8  0E00               	movlw	0
  4048   002ECA  6E04               	movwf	(___flge@ff1+3)^0,c
  4049   002ECC                     l3941:
  4050   002ECC  0E00               	movlw	0
  4051   002ECE  1405               	andwf	___flge@ff2^0,w,c
  4052   002ED0  6E09               	movwf	??___flge^0,c
  4053   002ED2  0E00               	movlw	0
  4054   002ED4  1406               	andwf	(___flge@ff2+1)^0,w,c
  4055   002ED6  6E0A               	movwf	(??___flge+1)^0,c
  4056   002ED8  0E80               	movlw	128
  4057   002EDA  1407               	andwf	(___flge@ff2+2)^0,w,c
  4058   002EDC  6E0B               	movwf	(??___flge+2)^0,c
  4059   002EDE  0E7F               	movlw	127
  4060   002EE0  1408               	andwf	(___flge@ff2+3)^0,w,c
  4061   002EE2  6E0C               	movwf	(??___flge+3)^0,c
  4062   002EE4  5009               	movf	??___flge^0,w,c
  4063   002EE6  100A               	iorwf	(??___flge+1)^0,w,c
  4064   002EE8  100B               	iorwf	(??___flge+2)^0,w,c
  4065   002EEA  100C               	iorwf	(??___flge+3)^0,w,c
  4066   002EEC  A4D8               	btfss	status,2,c
  4067   002EEE  EF7B  F017         	goto	u3481
  4068   002EF2  EF7D  F017         	goto	u3480
  4069   002EF6                     u3481:
  4070   002EF6  EF85  F017         	goto	l3945
  4071   002EFA                     u3480:
  4072   002EFA  0E00               	movlw	0
  4073   002EFC  6E05               	movwf	___flge@ff2^0,c
  4074   002EFE  0E00               	movlw	0
  4075   002F00  6E06               	movwf	(___flge@ff2+1)^0,c
  4076   002F02  0E00               	movlw	0
  4077   002F04  6E07               	movwf	(___flge@ff2+2)^0,c
  4078   002F06  0E00               	movlw	0
  4079   002F08  6E08               	movwf	(___flge@ff2+3)^0,c
  4080   002F0A                     l3945:
  4081   002F0A  AE04               	btfss	(___flge@ff1+3)^0,7,c
  4082   002F0C  EF8A  F017         	goto	u3491
  4083   002F10  EF8C  F017         	goto	u3490
  4084   002F14                     u3491:
  4085   002F14  EF95  F017         	goto	l3949
  4086   002F18                     u3490:
  4087   002F18  6C01               	negf	___flge@ff1^0,c
  4088   002F1A  1E02               	comf	(___flge@ff1+1)^0,f,c
  4089   002F1C  B0D8               	btfsc	status,0,c
  4090   002F1E  2A02               	incf	(___flge@ff1+1)^0,f,c
  4091   002F20  1E03               	comf	(___flge@ff1+2)^0,f,c
  4092   002F22  B0D8               	btfsc	status,0,c
  4093   002F24  2A03               	incf	(___flge@ff1+2)^0,f,c
  4094   002F26  0E80               	movlw	128
  4095   002F28  5604               	subfwb	(___flge@ff1+3)^0,f,c
  4096   002F2A                     l3949:
  4097   002F2A  AE08               	btfss	(___flge@ff2+3)^0,7,c
  4098   002F2C  EF9A  F017         	goto	u3501
  4099   002F30  EF9C  F017         	goto	u3500
  4100   002F34                     u3501:
  4101   002F34  EFA5  F017         	goto	l830
  4102   002F38                     u3500:
  4103   002F38  6C05               	negf	___flge@ff2^0,c
  4104   002F3A  1E06               	comf	(___flge@ff2+1)^0,f,c
  4105   002F3C  B0D8               	btfsc	status,0,c
  4106   002F3E  2A06               	incf	(___flge@ff2+1)^0,f,c
  4107   002F40  1E07               	comf	(___flge@ff2+2)^0,f,c
  4108   002F42  B0D8               	btfsc	status,0,c
  4109   002F44  2A07               	incf	(___flge@ff2+2)^0,f,c
  4110   002F46  0E80               	movlw	128
  4111   002F48  5608               	subfwb	(___flge@ff2+3)^0,f,c
  4112   002F4A                     l830:
  4113   002F4A  0E00               	movlw	0
  4114   002F4C  1A01               	xorwf	___flge@ff1^0,f,c
  4115   002F4E  0E00               	movlw	0
  4116   002F50  1A02               	xorwf	(___flge@ff1+1)^0,f,c
  4117   002F52  0E00               	movlw	0
  4118   002F54  1A03               	xorwf	(___flge@ff1+2)^0,f,c
  4119   002F56  0E80               	movlw	128
  4120   002F58  1A04               	xorwf	(___flge@ff1+3)^0,f,c
  4121   002F5A  0E00               	movlw	0
  4122   002F5C  1A05               	xorwf	___flge@ff2^0,f,c
  4123   002F5E  0E00               	movlw	0
  4124   002F60  1A06               	xorwf	(___flge@ff2+1)^0,f,c
  4125   002F62  0E00               	movlw	0
  4126   002F64  1A07               	xorwf	(___flge@ff2+2)^0,f,c
  4127   002F66  0E80               	movlw	128
  4128   002F68  1A08               	xorwf	(___flge@ff2+3)^0,f,c
  4129   002F6A  5005               	movf	___flge@ff2^0,w,c
  4130   002F6C  5C01               	subwf	___flge@ff1^0,w,c
  4131   002F6E  5006               	movf	(___flge@ff2+1)^0,w,c
  4132   002F70  5802               	subwfb	(___flge@ff1+1)^0,w,c
  4133   002F72  5007               	movf	(___flge@ff2+2)^0,w,c
  4134   002F74  5803               	subwfb	(___flge@ff1+2)^0,w,c
  4135   002F76  5008               	movf	(___flge@ff2+3)^0,w,c
  4136   002F78  5804               	subwfb	(___flge@ff1+3)^0,w,c
  4137   002F7A  B0D8               	btfsc	status,0,c
  4138   002F7C  EFC2  F017         	goto	u3511
  4139   002F80  EFC4  F017         	goto	u3510
  4140   002F84                     u3511:
  4141   002F84  EFC7  F017         	goto	l3955
  4142   002F88                     u3510:
  4143   002F88  90D8               	bcf	status,0,c
  4144   002F8A  EFC8  F017         	goto	l835
  4145   002F8E                     l3955:
  4146   002F8E  80D8               	bsf	status,0,c
  4147   002F90                     l835:
  4148   002F90  0012               	return		;funcret
  4149   002F92                     __end_of___flge:
  4150                           	callstack 0
  4151                           
  4152 ;; *************** function ___fleq *****************
  4153 ;; Defined at:
  4154 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;  ff1             4    0[COMRAM] unsigned char 
  4157 ;;  ff2             4    4[COMRAM] unsigned char 
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;		None
  4160 ;; Return value:  Size  Location     Type
  4161 ;;		None               void
  4162 ;; Registers used:
  4163 ;;		wreg, status,2, status,0
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4169 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4171 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4172 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4173 ;;Total ram usage:       12 bytes
  4174 ;; Hardware stack levels used: 1
  4175 ;; This function calls:
  4176 ;;		Nothing
  4177 ;; This function is called by:
  4178 ;;		_convert_rgb2hue
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           	psect	text9
  4183   00329E                     __ptext9:
  4184                           	callstack 0
  4185   00329E                     ___fleq:
  4186                           	callstack 28
  4187   00329E  0E00               	movlw	0
  4188   0032A0  1401               	andwf	___fleq@ff1^0,w,c
  4189   0032A2  6E09               	movwf	??___fleq^0,c
  4190   0032A4  0E00               	movlw	0
  4191   0032A6  1402               	andwf	(___fleq@ff1+1)^0,w,c
  4192   0032A8  6E0A               	movwf	(??___fleq+1)^0,c
  4193   0032AA  0E80               	movlw	128
  4194   0032AC  1403               	andwf	(___fleq@ff1+2)^0,w,c
  4195   0032AE  6E0B               	movwf	(??___fleq+2)^0,c
  4196   0032B0  0E7F               	movlw	127
  4197   0032B2  1404               	andwf	(___fleq@ff1+3)^0,w,c
  4198   0032B4  6E0C               	movwf	(??___fleq+3)^0,c
  4199   0032B6  5009               	movf	??___fleq^0,w,c
  4200   0032B8  100A               	iorwf	(??___fleq+1)^0,w,c
  4201   0032BA  100B               	iorwf	(??___fleq+2)^0,w,c
  4202   0032BC  100C               	iorwf	(??___fleq+3)^0,w,c
  4203   0032BE  A4D8               	btfss	status,2,c
  4204   0032C0  EF64  F019         	goto	u3441
  4205   0032C4  EF66  F019         	goto	u3440
  4206   0032C8                     u3441:
  4207   0032C8  EF6E  F019         	goto	l3925
  4208   0032CC                     u3440:
  4209   0032CC  0E00               	movlw	0
  4210   0032CE  6E01               	movwf	___fleq@ff1^0,c
  4211   0032D0  0E00               	movlw	0
  4212   0032D2  6E02               	movwf	(___fleq@ff1+1)^0,c
  4213   0032D4  0E00               	movlw	0
  4214   0032D6  6E03               	movwf	(___fleq@ff1+2)^0,c
  4215   0032D8  0E00               	movlw	0
  4216   0032DA  6E04               	movwf	(___fleq@ff1+3)^0,c
  4217   0032DC                     l3925:
  4218   0032DC  0E00               	movlw	0
  4219   0032DE  1405               	andwf	___fleq@ff2^0,w,c
  4220   0032E0  6E09               	movwf	??___fleq^0,c
  4221   0032E2  0E00               	movlw	0
  4222   0032E4  1406               	andwf	(___fleq@ff2+1)^0,w,c
  4223   0032E6  6E0A               	movwf	(??___fleq+1)^0,c
  4224   0032E8  0E80               	movlw	128
  4225   0032EA  1407               	andwf	(___fleq@ff2+2)^0,w,c
  4226   0032EC  6E0B               	movwf	(??___fleq+2)^0,c
  4227   0032EE  0E7F               	movlw	127
  4228   0032F0  1408               	andwf	(___fleq@ff2+3)^0,w,c
  4229   0032F2  6E0C               	movwf	(??___fleq+3)^0,c
  4230   0032F4  5009               	movf	??___fleq^0,w,c
  4231   0032F6  100A               	iorwf	(??___fleq+1)^0,w,c
  4232   0032F8  100B               	iorwf	(??___fleq+2)^0,w,c
  4233   0032FA  100C               	iorwf	(??___fleq+3)^0,w,c
  4234   0032FC  A4D8               	btfss	status,2,c
  4235   0032FE  EF83  F019         	goto	u3451
  4236   003302  EF85  F019         	goto	u3450
  4237   003306                     u3451:
  4238   003306  EF8D  F019         	goto	l3929
  4239   00330A                     u3450:
  4240   00330A  0E00               	movlw	0
  4241   00330C  6E05               	movwf	___fleq@ff2^0,c
  4242   00330E  0E00               	movlw	0
  4243   003310  6E06               	movwf	(___fleq@ff2+1)^0,c
  4244   003312  0E00               	movlw	0
  4245   003314  6E07               	movwf	(___fleq@ff2+2)^0,c
  4246   003316  0E00               	movlw	0
  4247   003318  6E08               	movwf	(___fleq@ff2+3)^0,c
  4248   00331A                     l3929:
  4249   00331A  5005               	movf	___fleq@ff2^0,w,c
  4250   00331C  1801               	xorwf	___fleq@ff1^0,w,c
  4251   00331E  E10F               	bnz	u3460
  4252   003320  5006               	movf	(___fleq@ff2+1)^0,w,c
  4253   003322  1802               	xorwf	(___fleq@ff1+1)^0,w,c
  4254   003324  E10C               	bnz	u3460
  4255   003326  5007               	movf	(___fleq@ff2+2)^0,w,c
  4256   003328  1803               	xorwf	(___fleq@ff1+2)^0,w,c
  4257   00332A  E109               	bnz	u3460
  4258   00332C  5008               	movf	(___fleq@ff2+3)^0,w,c
  4259   00332E  1804               	xorwf	(___fleq@ff1+3)^0,w,c
  4260   003330  B4D8               	btfsc	status,2,c
  4261   003332  EF9D  F019         	goto	u3461
  4262   003336  EF9F  F019         	goto	u3460
  4263   00333A                     u3461:
  4264   00333A  EFA2  F019         	goto	l3933
  4265   00333E                     u3460:
  4266   00333E  90D8               	bcf	status,0,c
  4267   003340  EFA3  F019         	goto	l824
  4268   003344                     l3933:
  4269   003344  80D8               	bsf	status,0,c
  4270   003346                     l824:
  4271   003346  0012               	return		;funcret
  4272   003348                     __end_of___fleq:
  4273                           	callstack 0
  4274                           
  4275 ;; *************** function ___fldiv *****************
  4276 ;; Defined at:
  4277 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;  b               4   24[COMRAM] unsigned char 
  4280 ;;  a               4   28[COMRAM] unsigned char 
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;  grs             4   43[COMRAM] unsigned long 
  4283 ;;  rem             4   36[COMRAM] unsigned long 
  4284 ;;  new_exp         2   41[COMRAM] short 
  4285 ;;  aexp            1   48[COMRAM] unsigned char 
  4286 ;;  bexp            1   47[COMRAM] unsigned char 
  4287 ;;  sign            1   40[COMRAM] unsigned char 
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  4   24[COMRAM] unsigned char 
  4290 ;; Registers used:
  4291 ;;		wreg, status,2, status,0
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4297 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4298 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4299 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4300 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4301 ;;Total ram usage:       25 bytes
  4302 ;; Hardware stack levels used: 1
  4303 ;; This function calls:
  4304 ;;		Nothing
  4305 ;; This function is called by:
  4306 ;;		_convert_rgb2hue
  4307 ;;		_main
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text10
  4312   001EE8                     __ptext10:
  4313                           	callstack 0
  4314   001EE8                     ___fldiv:
  4315                           	callstack 28
  4316   001EE8  501C               	movf	(___fldiv@b+3)^0,w,c
  4317   001EEA  0B80               	andlw	128
  4318   001EEC  6E29               	movwf	___fldiv@sign^0,c
  4319   001EEE  501C               	movf	(___fldiv@b+3)^0,w,c
  4320   001EF0  241C               	addwf	(___fldiv@b+3)^0,w,c
  4321   001EF2  6E30               	movwf	___fldiv@bexp^0,c
  4322   001EF4  AE1B               	btfss	(___fldiv@b+2)^0,7,c
  4323   001EF6  EF7F  F00F         	goto	u3021
  4324   001EFA  EF81  F00F         	goto	u3020
  4325   001EFE                     u3021:
  4326   001EFE  EF82  F00F         	goto	l3653
  4327   001F02                     u3020:
  4328   001F02  8030               	bsf	___fldiv@bexp^0,0,c
  4329   001F04                     l3653:
  4330   001F04  5030               	movf	___fldiv@bexp^0,w,c
  4331   001F06  B4D8               	btfsc	status,2,c
  4332   001F08  EF88  F00F         	goto	u3031
  4333   001F0C  EF8A  F00F         	goto	u3030
  4334   001F10                     u3031:
  4335   001F10  EF9F  F00F         	goto	l3663
  4336   001F14                     u3030:
  4337   001F14  2830               	incf	___fldiv@bexp^0,w,c
  4338   001F16  A4D8               	btfss	status,2,c
  4339   001F18  EF90  F00F         	goto	u3041
  4340   001F1C  EF92  F00F         	goto	u3040
  4341   001F20                     u3041:
  4342   001F20  EF9A  F00F         	goto	l3659
  4343   001F24                     u3040:
  4344   001F24  0E00               	movlw	0
  4345   001F26  6E19               	movwf	___fldiv@b^0,c
  4346   001F28  0E00               	movlw	0
  4347   001F2A  6E1A               	movwf	(___fldiv@b+1)^0,c
  4348   001F2C  0E00               	movlw	0
  4349   001F2E  6E1B               	movwf	(___fldiv@b+2)^0,c
  4350   001F30  0E00               	movlw	0
  4351   001F32  6E1C               	movwf	(___fldiv@b+3)^0,c
  4352   001F34                     l3659:
  4353   001F34  8E1B               	bsf	(___fldiv@b+2)^0,7,c
  4354   001F36  0E00               	movlw	0
  4355   001F38  6E1C               	movwf	(___fldiv@b+3)^0,c
  4356   001F3A  EFA7  F00F         	goto	l3665
  4357   001F3E                     l3663:
  4358   001F3E  0E00               	movlw	0
  4359   001F40  6E19               	movwf	___fldiv@b^0,c
  4360   001F42  0E00               	movlw	0
  4361   001F44  6E1A               	movwf	(___fldiv@b+1)^0,c
  4362   001F46  0E00               	movlw	0
  4363   001F48  6E1B               	movwf	(___fldiv@b+2)^0,c
  4364   001F4A  0E00               	movlw	0
  4365   001F4C  6E1C               	movwf	(___fldiv@b+3)^0,c
  4366   001F4E                     l3665:
  4367   001F4E  5020               	movf	(___fldiv@a+3)^0,w,c
  4368   001F50  0B80               	andlw	128
  4369   001F52  1A29               	xorwf	___fldiv@sign^0,f,c
  4370   001F54  5020               	movf	(___fldiv@a+3)^0,w,c
  4371   001F56  2420               	addwf	(___fldiv@a+3)^0,w,c
  4372   001F58  6E31               	movwf	___fldiv@aexp^0,c
  4373   001F5A  AE1F               	btfss	(___fldiv@a+2)^0,7,c
  4374   001F5C  EFB2  F00F         	goto	u3051
  4375   001F60  EFB4  F00F         	goto	u3050
  4376   001F64                     u3051:
  4377   001F64  EFB5  F00F         	goto	l3673
  4378   001F68                     u3050:
  4379   001F68  8031               	bsf	___fldiv@aexp^0,0,c
  4380   001F6A                     l3673:
  4381   001F6A  5031               	movf	___fldiv@aexp^0,w,c
  4382   001F6C  B4D8               	btfsc	status,2,c
  4383   001F6E  EFBB  F00F         	goto	u3061
  4384   001F72  EFBD  F00F         	goto	u3060
  4385   001F76                     u3061:
  4386   001F76  EFD2  F00F         	goto	l3683
  4387   001F7A                     u3060:
  4388   001F7A  2831               	incf	___fldiv@aexp^0,w,c
  4389   001F7C  A4D8               	btfss	status,2,c
  4390   001F7E  EFC3  F00F         	goto	u3071
  4391   001F82  EFC5  F00F         	goto	u3070
  4392   001F86                     u3071:
  4393   001F86  EFCD  F00F         	goto	l3679
  4394   001F8A                     u3070:
  4395   001F8A  0E00               	movlw	0
  4396   001F8C  6E1D               	movwf	___fldiv@a^0,c
  4397   001F8E  0E00               	movlw	0
  4398   001F90  6E1E               	movwf	(___fldiv@a+1)^0,c
  4399   001F92  0E00               	movlw	0
  4400   001F94  6E1F               	movwf	(___fldiv@a+2)^0,c
  4401   001F96  0E00               	movlw	0
  4402   001F98  6E20               	movwf	(___fldiv@a+3)^0,c
  4403   001F9A                     l3679:
  4404   001F9A  8E1F               	bsf	(___fldiv@a+2)^0,7,c
  4405   001F9C  0E00               	movlw	0
  4406   001F9E  6E20               	movwf	(___fldiv@a+3)^0,c
  4407   001FA0  EFDA  F00F         	goto	l3685
  4408   001FA4                     l3683:
  4409   001FA4  0E00               	movlw	0
  4410   001FA6  6E1D               	movwf	___fldiv@a^0,c
  4411   001FA8  0E00               	movlw	0
  4412   001FAA  6E1E               	movwf	(___fldiv@a+1)^0,c
  4413   001FAC  0E00               	movlw	0
  4414   001FAE  6E1F               	movwf	(___fldiv@a+2)^0,c
  4415   001FB0  0E00               	movlw	0
  4416   001FB2  6E20               	movwf	(___fldiv@a+3)^0,c
  4417   001FB4                     l3685:
  4418   001FB4  501D               	movf	___fldiv@a^0,w,c
  4419   001FB6  101E               	iorwf	(___fldiv@a+1)^0,w,c
  4420   001FB8  101F               	iorwf	(___fldiv@a+2)^0,w,c
  4421   001FBA  1020               	iorwf	(___fldiv@a+3)^0,w,c
  4422   001FBC  A4D8               	btfss	status,2,c
  4423   001FBE  EFE3  F00F         	goto	u3081
  4424   001FC2  EFE5  F00F         	goto	u3080
  4425   001FC6                     u3081:
  4426   001FC6  EFFD  F00F         	goto	l3697
  4427   001FCA                     u3080:
  4428   001FCA  0E00               	movlw	0
  4429   001FCC  6E19               	movwf	___fldiv@b^0,c
  4430   001FCE  0E00               	movlw	0
  4431   001FD0  6E1A               	movwf	(___fldiv@b+1)^0,c
  4432   001FD2  0E00               	movlw	0
  4433   001FD4  6E1B               	movwf	(___fldiv@b+2)^0,c
  4434   001FD6  0E00               	movlw	0
  4435   001FD8  6E1C               	movwf	(___fldiv@b+3)^0,c
  4436   001FDA  0E80               	movlw	128
  4437   001FDC  121B               	iorwf	(___fldiv@b+2)^0,f,c
  4438   001FDE  0E7F               	movlw	127
  4439   001FE0  121C               	iorwf	(___fldiv@b+3)^0,f,c
  4440   001FE2                     l3691:
  4441   001FE2  5029               	movf	___fldiv@sign^0,w,c
  4442   001FE4  121C               	iorwf	(___fldiv@b+3)^0,f,c
  4443   001FE6  C019  F019         	movff	___fldiv@b,?___fldiv
  4444   001FEA  C01A  F01A         	movff	___fldiv@b+1,?___fldiv+1
  4445   001FEE  C01B  F01B         	movff	___fldiv@b+2,?___fldiv+2
  4446   001FF2  C01C  F01C         	movff	___fldiv@b+3,?___fldiv+3
  4447   001FF6  EF40  F011         	goto	l1147
  4448   001FFA                     l3697:
  4449   001FFA  5030               	movf	___fldiv@bexp^0,w,c
  4450   001FFC  A4D8               	btfss	status,2,c
  4451   001FFE  EF03  F010         	goto	u3091
  4452   002002  EF05  F010         	goto	u3090
  4453   002006                     u3091:
  4454   002006  EF0F  F010         	goto	l3705
  4455   00200A                     u3090:
  4456   00200A  0E00               	movlw	0
  4457   00200C  6E19               	movwf	?___fldiv^0,c
  4458   00200E  0E00               	movlw	0
  4459   002010  6E1A               	movwf	(?___fldiv+1)^0,c
  4460   002012  0E00               	movlw	0
  4461   002014  6E1B               	movwf	(?___fldiv+2)^0,c
  4462   002016  0E00               	movlw	0
  4463   002018  6E1C               	movwf	(?___fldiv+3)^0,c
  4464   00201A  EF40  F011         	goto	l1147
  4465   00201E                     l3705:
  4466   00201E  5031               	movf	___fldiv@aexp^0,w,c
  4467   002020  C030  F021         	movff	___fldiv@bexp,??___fldiv
  4468   002024  6A22               	clrf	(??___fldiv+1)^0,c
  4469   002026  5E21               	subwf	??___fldiv^0,f,c
  4470   002028  0E00               	movlw	0
  4471   00202A  5A22               	subwfb	(??___fldiv+1)^0,f,c
  4472   00202C  0E7F               	movlw	127
  4473   00202E  2421               	addwf	??___fldiv^0,w,c
  4474   002030  6E2A               	movwf	___fldiv@new_exp^0,c
  4475   002032  0E00               	movlw	0
  4476   002034  2022               	addwfc	(??___fldiv+1)^0,w,c
  4477   002036  6E2B               	movwf	(___fldiv@new_exp+1)^0,c
  4478   002038  C019  F025         	movff	___fldiv@b,___fldiv@rem
  4479   00203C  C01A  F026         	movff	___fldiv@b+1,___fldiv@rem+1
  4480   002040  C01B  F027         	movff	___fldiv@b+2,___fldiv@rem+2
  4481   002044  C01C  F028         	movff	___fldiv@b+3,___fldiv@rem+3
  4482   002048  0E00               	movlw	0
  4483   00204A  6E19               	movwf	___fldiv@b^0,c
  4484   00204C  0E00               	movlw	0
  4485   00204E  6E1A               	movwf	(___fldiv@b+1)^0,c
  4486   002050  0E00               	movlw	0
  4487   002052  6E1B               	movwf	(___fldiv@b+2)^0,c
  4488   002054  0E00               	movlw	0
  4489   002056  6E1C               	movwf	(___fldiv@b+3)^0,c
  4490   002058  0E00               	movlw	0
  4491   00205A  6E2C               	movwf	___fldiv@grs^0,c
  4492   00205C  0E00               	movlw	0
  4493   00205E  6E2D               	movwf	(___fldiv@grs+1)^0,c
  4494   002060  0E00               	movlw	0
  4495   002062  6E2E               	movwf	(___fldiv@grs+2)^0,c
  4496   002064  0E00               	movlw	0
  4497   002066  6E2F               	movwf	(___fldiv@grs+3)^0,c
  4498   002068  0E00               	movlw	0
  4499   00206A  6E31               	movwf	___fldiv@aexp^0,c
  4500   00206C  EF70  F010         	goto	l1149
  4501   002070                     l3715:
  4502   002070  5031               	movf	___fldiv@aexp^0,w,c
  4503   002072  B4D8               	btfsc	status,2,c
  4504   002074  EF3E  F010         	goto	u3101
  4505   002078  EF40  F010         	goto	u3100
  4506   00207C                     u3101:
  4507   00207C  EF57  F010         	goto	l3723
  4508   002080                     u3100:
  4509   002080  90D8               	bcf	status,0,c
  4510   002082  3625               	rlcf	___fldiv@rem^0,f,c
  4511   002084  3626               	rlcf	(___fldiv@rem+1)^0,f,c
  4512   002086  3627               	rlcf	(___fldiv@rem+2)^0,f,c
  4513   002088  3628               	rlcf	(___fldiv@rem+3)^0,f,c
  4514   00208A  90D8               	bcf	status,0,c
  4515   00208C  3619               	rlcf	___fldiv@b^0,f,c
  4516   00208E  361A               	rlcf	(___fldiv@b+1)^0,f,c
  4517   002090  361B               	rlcf	(___fldiv@b+2)^0,f,c
  4518   002092  361C               	rlcf	(___fldiv@b+3)^0,f,c
  4519   002094  AE2F               	btfss	(___fldiv@grs+3)^0,7,c
  4520   002096  EF4F  F010         	goto	u3111
  4521   00209A  EF51  F010         	goto	u3110
  4522   00209E                     u3111:
  4523   00209E  EF52  F010         	goto	l1152
  4524   0020A2                     u3110:
  4525   0020A2  8019               	bsf	___fldiv@b^0,0,c
  4526   0020A4                     l1152:
  4527   0020A4  90D8               	bcf	status,0,c
  4528   0020A6  362C               	rlcf	___fldiv@grs^0,f,c
  4529   0020A8  362D               	rlcf	(___fldiv@grs+1)^0,f,c
  4530   0020AA  362E               	rlcf	(___fldiv@grs+2)^0,f,c
  4531   0020AC  362F               	rlcf	(___fldiv@grs+3)^0,f,c
  4532   0020AE                     l3723:
  4533   0020AE  501D               	movf	___fldiv@a^0,w,c
  4534   0020B0  5C25               	subwf	___fldiv@rem^0,w,c
  4535   0020B2  501E               	movf	(___fldiv@a+1)^0,w,c
  4536   0020B4  5826               	subwfb	(___fldiv@rem+1)^0,w,c
  4537   0020B6  501F               	movf	(___fldiv@a+2)^0,w,c
  4538   0020B8  5827               	subwfb	(___fldiv@rem+2)^0,w,c
  4539   0020BA  5020               	movf	(___fldiv@a+3)^0,w,c
  4540   0020BC  5828               	subwfb	(___fldiv@rem+3)^0,w,c
  4541   0020BE  A0D8               	btfss	status,0,c
  4542   0020C0  EF64  F010         	goto	u3121
  4543   0020C4  EF66  F010         	goto	u3120
  4544   0020C8                     u3121:
  4545   0020C8  EF6F  F010         	goto	l3729
  4546   0020CC                     u3120:
  4547   0020CC  8C2F               	bsf	(___fldiv@grs+3)^0,6,c
  4548   0020CE  501D               	movf	___fldiv@a^0,w,c
  4549   0020D0  5E25               	subwf	___fldiv@rem^0,f,c
  4550   0020D2  501E               	movf	(___fldiv@a+1)^0,w,c
  4551   0020D4  5A26               	subwfb	(___fldiv@rem+1)^0,f,c
  4552   0020D6  501F               	movf	(___fldiv@a+2)^0,w,c
  4553   0020D8  5A27               	subwfb	(___fldiv@rem+2)^0,f,c
  4554   0020DA  5020               	movf	(___fldiv@a+3)^0,w,c
  4555   0020DC  5A28               	subwfb	(___fldiv@rem+3)^0,f,c
  4556   0020DE                     l3729:
  4557   0020DE  2A31               	incf	___fldiv@aexp^0,f,c
  4558   0020E0                     l1149:
  4559   0020E0  0E19               	movlw	25
  4560   0020E2  6431               	cpfsgt	___fldiv@aexp^0,c
  4561   0020E4  EF76  F010         	goto	u3131
  4562   0020E8  EF78  F010         	goto	u3130
  4563   0020EC                     u3131:
  4564   0020EC  EF38  F010         	goto	l3715
  4565   0020F0                     u3130:
  4566   0020F0  5025               	movf	___fldiv@rem^0,w,c
  4567   0020F2  1026               	iorwf	(___fldiv@rem+1)^0,w,c
  4568   0020F4  1027               	iorwf	(___fldiv@rem+2)^0,w,c
  4569   0020F6  1028               	iorwf	(___fldiv@rem+3)^0,w,c
  4570   0020F8  B4D8               	btfsc	status,2,c
  4571   0020FA  EF81  F010         	goto	u3141
  4572   0020FE  EF83  F010         	goto	u3140
  4573   002102                     u3141:
  4574   002102  EF9B  F010         	goto	l3741
  4575   002106                     u3140:
  4576   002106  802C               	bsf	___fldiv@grs^0,0,c
  4577   002108  EF9B  F010         	goto	l3741
  4578   00210C                     l3735:
  4579   00210C  90D8               	bcf	status,0,c
  4580   00210E  3619               	rlcf	___fldiv@b^0,f,c
  4581   002110  361A               	rlcf	(___fldiv@b+1)^0,f,c
  4582   002112  361B               	rlcf	(___fldiv@b+2)^0,f,c
  4583   002114  361C               	rlcf	(___fldiv@b+3)^0,f,c
  4584   002116  AE2F               	btfss	(___fldiv@grs+3)^0,7,c
  4585   002118  EF90  F010         	goto	u3151
  4586   00211C  EF92  F010         	goto	u3150
  4587   002120                     u3151:
  4588   002120  EF93  F010         	goto	l1158
  4589   002124                     u3150:
  4590   002124  8019               	bsf	___fldiv@b^0,0,c
  4591   002126                     l1158:
  4592   002126  90D8               	bcf	status,0,c
  4593   002128  362C               	rlcf	___fldiv@grs^0,f,c
  4594   00212A  362D               	rlcf	(___fldiv@grs+1)^0,f,c
  4595   00212C  362E               	rlcf	(___fldiv@grs+2)^0,f,c
  4596   00212E  362F               	rlcf	(___fldiv@grs+3)^0,f,c
  4597   002130  062A               	decf	___fldiv@new_exp^0,f,c
  4598   002132  A0D8               	btfss	status,0,c
  4599   002134  062B               	decf	(___fldiv@new_exp+1)^0,f,c
  4600   002136                     l3741:
  4601   002136  AE1B               	btfss	(___fldiv@b+2)^0,7,c
  4602   002138  EFA0  F010         	goto	u3161
  4603   00213C  EFA2  F010         	goto	u3160
  4604   002140                     u3161:
  4605   002140  EF86  F010         	goto	l3735
  4606   002144                     u3160:
  4607   002144  0E00               	movlw	0
  4608   002146  6E31               	movwf	___fldiv@aexp^0,c
  4609   002148  AE2F               	btfss	(___fldiv@grs+3)^0,7,c
  4610   00214A  EFA9  F010         	goto	u3171
  4611   00214E  EFAB  F010         	goto	u3170
  4612   002152                     u3171:
  4613   002152  EFCF  F010         	goto	l1160
  4614   002156                     u3170:
  4615   002156  0EFF               	movlw	255
  4616   002158  142C               	andwf	___fldiv@grs^0,w,c
  4617   00215A  6E21               	movwf	??___fldiv^0,c
  4618   00215C  0EFF               	movlw	255
  4619   00215E  142D               	andwf	(___fldiv@grs+1)^0,w,c
  4620   002160  6E22               	movwf	(??___fldiv+1)^0,c
  4621   002162  0EFF               	movlw	255
  4622   002164  142E               	andwf	(___fldiv@grs+2)^0,w,c
  4623   002166  6E23               	movwf	(??___fldiv+2)^0,c
  4624   002168  0E7F               	movlw	127
  4625   00216A  142F               	andwf	(___fldiv@grs+3)^0,w,c
  4626   00216C  6E24               	movwf	(??___fldiv+3)^0,c
  4627   00216E  5021               	movf	??___fldiv^0,w,c
  4628   002170  1022               	iorwf	(??___fldiv+1)^0,w,c
  4629   002172  1023               	iorwf	(??___fldiv+2)^0,w,c
  4630   002174  1024               	iorwf	(??___fldiv+3)^0,w,c
  4631   002176  B4D8               	btfsc	status,2,c
  4632   002178  EFC0  F010         	goto	u3181
  4633   00217C  EFC2  F010         	goto	u3180
  4634   002180                     u3181:
  4635   002180  EFC6  F010         	goto	l1161
  4636   002184                     u3180:
  4637   002184                     l3749:
  4638   002184  0E01               	movlw	1
  4639   002186  6E31               	movwf	___fldiv@aexp^0,c
  4640   002188  EFCF  F010         	goto	l1160
  4641   00218C                     l1161:
  4642   00218C  A019               	btfss	___fldiv@b^0,0,c
  4643   00218E  EFCB  F010         	goto	u3191
  4644   002192  EFCD  F010         	goto	u3190
  4645   002196                     u3191:
  4646   002196  EFCF  F010         	goto	l1160
  4647   00219A                     u3190:
  4648   00219A  EFC2  F010         	goto	l3749
  4649   00219E                     l1160:
  4650   00219E  5031               	movf	___fldiv@aexp^0,w,c
  4651   0021A0  B4D8               	btfsc	status,2,c
  4652   0021A2  EFD5  F010         	goto	u3201
  4653   0021A6  EFD7  F010         	goto	u3200
  4654   0021AA                     u3201:
  4655   0021AA  EFFB  F010         	goto	l3761
  4656   0021AE                     u3200:
  4657   0021AE  0E01               	movlw	1
  4658   0021B0  2619               	addwf	___fldiv@b^0,f,c
  4659   0021B2  0E00               	movlw	0
  4660   0021B4  221A               	addwfc	(___fldiv@b+1)^0,f,c
  4661   0021B6  221B               	addwfc	(___fldiv@b+2)^0,f,c
  4662   0021B8  221C               	addwfc	(___fldiv@b+3)^0,f,c
  4663   0021BA  A01C               	btfss	(___fldiv@b+3)^0,0,c
  4664   0021BC  EFE2  F010         	goto	u3211
  4665   0021C0  EFE4  F010         	goto	u3210
  4666   0021C4                     u3211:
  4667   0021C4  EFFB  F010         	goto	l3761
  4668   0021C8                     u3210:
  4669   0021C8  C019  F021         	movff	___fldiv@b,??___fldiv
  4670   0021CC  C01A  F022         	movff	___fldiv@b+1,??___fldiv+1
  4671   0021D0  C01B  F023         	movff	___fldiv@b+2,??___fldiv+2
  4672   0021D4  C01C  F024         	movff	___fldiv@b+3,??___fldiv+3
  4673   0021D8  3424               	rlcf	(??___fldiv+3)^0,w,c
  4674   0021DA  3224               	rrcf	(??___fldiv+3)^0,f,c
  4675   0021DC  3223               	rrcf	(??___fldiv+2)^0,f,c
  4676   0021DE  3222               	rrcf	(??___fldiv+1)^0,f,c
  4677   0021E0  3221               	rrcf	??___fldiv^0,f,c
  4678   0021E2  C021  F019         	movff	??___fldiv,___fldiv@b
  4679   0021E6  C022  F01A         	movff	??___fldiv+1,___fldiv@b+1
  4680   0021EA  C023  F01B         	movff	??___fldiv+2,___fldiv@b+2
  4681   0021EE  C024  F01C         	movff	??___fldiv+3,___fldiv@b+3
  4682   0021F2  4A2A               	infsnz	___fldiv@new_exp^0,f,c
  4683   0021F4  2A2B               	incf	(___fldiv@new_exp+1)^0,f,c
  4684   0021F6                     l3761:
  4685   0021F6  BE2B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  4686   0021F8  EF06  F011         	goto	u3221
  4687   0021FC  502B               	movf	(___fldiv@new_exp+1)^0,w,c
  4688   0021FE  E108               	bnz	u3220
  4689   002200  282A               	incf	___fldiv@new_exp^0,w,c
  4690   002202  A0D8               	btfss	status,0,c
  4691   002204  EF06  F011         	goto	u3221
  4692   002208  EF08  F011         	goto	u3220
  4693   00220C                     u3221:
  4694   00220C  EF13  F011         	goto	l3765
  4695   002210                     u3220:
  4696   002210  0E00               	movlw	0
  4697   002212  6E2B               	movwf	(___fldiv@new_exp+1)^0,c
  4698   002214  682A               	setf	___fldiv@new_exp^0,c
  4699   002216  0E00               	movlw	0
  4700   002218  6E19               	movwf	___fldiv@b^0,c
  4701   00221A  0E00               	movlw	0
  4702   00221C  6E1A               	movwf	(___fldiv@b+1)^0,c
  4703   00221E  0E00               	movlw	0
  4704   002220  6E1B               	movwf	(___fldiv@b+2)^0,c
  4705   002222  0E00               	movlw	0
  4706   002224  6E1C               	movwf	(___fldiv@b+3)^0,c
  4707   002226                     l3765:
  4708   002226  BE2B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  4709   002228  EF20  F011         	goto	u3230
  4710   00222C  502B               	movf	(___fldiv@new_exp+1)^0,w,c
  4711   00222E  E106               	bnz	u3231
  4712   002230  042A               	decf	___fldiv@new_exp^0,w,c
  4713   002232  B0D8               	btfsc	status,0,c
  4714   002234  EF1E  F011         	goto	u3231
  4715   002238  EF20  F011         	goto	u3230
  4716   00223C                     u3231:
  4717   00223C  EF2E  F011         	goto	l3769
  4718   002240                     u3230:
  4719   002240  0E00               	movlw	0
  4720   002242  6E2B               	movwf	(___fldiv@new_exp+1)^0,c
  4721   002244  0E00               	movlw	0
  4722   002246  6E2A               	movwf	___fldiv@new_exp^0,c
  4723   002248  0E00               	movlw	0
  4724   00224A  6E19               	movwf	___fldiv@b^0,c
  4725   00224C  0E00               	movlw	0
  4726   00224E  6E1A               	movwf	(___fldiv@b+1)^0,c
  4727   002250  0E00               	movlw	0
  4728   002252  6E1B               	movwf	(___fldiv@b+2)^0,c
  4729   002254  0E00               	movlw	0
  4730   002256  6E1C               	movwf	(___fldiv@b+3)^0,c
  4731   002258  0E00               	movlw	0
  4732   00225A  6E29               	movwf	___fldiv@sign^0,c
  4733   00225C                     l3769:
  4734   00225C  C02A  F030         	movff	___fldiv@new_exp,___fldiv@bexp
  4735   002260  A030               	btfss	___fldiv@bexp^0,0,c
  4736   002262  EF35  F011         	goto	u3241
  4737   002266  EF37  F011         	goto	u3240
  4738   00226A                     u3241:
  4739   00226A  EF3A  F011         	goto	l3775
  4740   00226E                     u3240:
  4741   00226E  8E1B               	bsf	(___fldiv@b+2)^0,7,c
  4742   002270  EF3B  F011         	goto	l3777
  4743   002274                     l3775:
  4744   002274  9E1B               	bcf	(___fldiv@b+2)^0,7,c
  4745   002276                     l3777:
  4746   002276  90D8               	bcf	status,0,c
  4747   002278  3030               	rrcf	___fldiv@bexp^0,w,c
  4748   00227A  6E1C               	movwf	(___fldiv@b+3)^0,c
  4749   00227C  EFF1  F00F         	goto	l3691
  4750   002280                     l1147:
  4751   002280  0012               	return		;funcret
  4752   002282                     __end_of___fldiv:
  4753                           	callstack 0
  4754                           
  4755 ;; *************** function _initUSART4 *****************
  4756 ;; Defined at:
  4757 ;;		line 14 in file "serial.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;		None
  4760 ;; Auto vars:     Size  Location     Type
  4761 ;;		None
  4762 ;; Return value:  Size  Location     Type
  4763 ;;                  1    wreg      void 
  4764 ;; Registers used:
  4765 ;;		wreg, status,2
  4766 ;; Tracked objects:
  4767 ;;		On entry : 0/0
  4768 ;;		On exit  : 0/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4775 ;;Total ram usage:        0 bytes
  4776 ;; Hardware stack levels used: 1
  4777 ;; This function calls:
  4778 ;;		Nothing
  4779 ;; This function is called by:
  4780 ;;		_main
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784                           	psect	text11
  4785   003EA6                     __ptext11:
  4786                           	callstack 0
  4787   003EA6                     _initUSART4:
  4788                           	callstack 30
  4789   003EA6                     
  4790                           ;serial.c: 15:     RC0PPS = 0x12;
  4791   003EA6  0E12               	movlw	18
  4792   003EA8  010E               	movlb	14	; () banked
  4793   003EAA  6F62               	movwf	98,b	;volatile
  4794                           
  4795                           ;serial.c: 16:     RX4PPS = 0x11;
  4796   003EAC  0E11               	movlw	17
  4797   003EAE  6F15               	movwf	21,b	;volatile
  4798   003EB0                     
  4799                           ; BSR set to: 14
  4800                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  4801   003EB0  97E9               	bcf	233,3,b	;volatile
  4802   003EB2                     
  4803                           ; BSR set to: 14
  4804                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  4805   003EB2  95E8               	bcf	232,2,b	;volatile
  4806                           
  4807                           ;serial.c: 19:     SP4BRGL = 51;
  4808   003EB4  0E33               	movlw	51
  4809   003EB6  6FE5               	movwf	229,b	;volatile
  4810                           
  4811                           ;serial.c: 20:     SP4BRGH = 0;
  4812   003EB8  0E00               	movlw	0
  4813   003EBA  6FE6               	movwf	230,b	;volatile
  4814   003EBC                     
  4815                           ; BSR set to: 14
  4816                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  4817   003EBC  89E7               	bsf	231,4,b	;volatile
  4818   003EBE                     
  4819                           ; BSR set to: 14
  4820                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  4821   003EBE  8BE8               	bsf	232,5,b	;volatile
  4822   003EC0                     
  4823                           ; BSR set to: 14
  4824                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  4825   003EC0  8FE7               	bsf	231,7,b	;volatile
  4826   003EC2                     
  4827                           ; BSR set to: 14
  4828   003EC2  0012               	return		;funcret
  4829   003EC4                     __end_of_initUSART4:
  4830                           	callstack 0
  4831                           
  4832 ;; *************** function _initDCmotorsPWM *****************
  4833 ;; Defined at:
  4834 ;;		line 5 in file "dc_motor.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;		None
  4839 ;; Return value:  Size  Location     Type
  4840 ;;                  1    wreg      void 
  4841 ;; Registers used:
  4842 ;;		wreg, status,2
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4848 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4851 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4852 ;;Total ram usage:        2 bytes
  4853 ;; Hardware stack levels used: 1
  4854 ;; This function calls:
  4855 ;;		Nothing
  4856 ;; This function is called by:
  4857 ;;		_main
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           	psect	text12
  4862   003484                     __ptext12:
  4863                           	callstack 0
  4864   003484                     _initDCmotorsPWM:
  4865                           	callstack 30
  4866   003484                     
  4867                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  4868   003484  9485               	bcf	133,2,c	;volatile
  4869                           
  4870                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  4871   003486  9E83               	bcf	131,7,c	;volatile
  4872                           
  4873                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  4874   003488  9885               	bcf	133,4,c	;volatile
  4875                           
  4876                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  4877   00348A  9C87               	bcf	135,6,c	;volatile
  4878                           
  4879                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  4880   00348C  947D               	bcf	125,2,c	;volatile
  4881                           
  4882                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  4883   00348E  9E7B               	bcf	123,7,c	;volatile
  4884                           
  4885                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  4886   003490  987D               	bcf	125,4,c	;volatile
  4887                           
  4888                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  4889   003492  9C7F               	bcf	127,6,c	;volatile
  4890   003494                     
  4891                           ;dc_motor.c: 18:     RE2PPS=0x05;
  4892   003494  0E05               	movlw	5
  4893   003496  010E               	movlb	14	; () banked
  4894   003498  6F74               	movwf	116,b	;volatile
  4895                           
  4896                           ;dc_motor.c: 19:     RE4PPS=0x06;
  4897   00349A  0E06               	movlw	6
  4898   00349C  6F76               	movwf	118,b	;volatile
  4899                           
  4900                           ;dc_motor.c: 20:     RC7PPS=0x07;
  4901   00349E  0E07               	movlw	7
  4902   0034A0  6F69               	movwf	105,b	;volatile
  4903                           
  4904                           ;dc_motor.c: 21:     RG6PPS=0x08;
  4905   0034A2  0E08               	movlw	8
  4906   0034A4  6F88               	movwf	136,b	;volatile
  4907                           
  4908                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  4909   0034A6  50BD               	movf	189,w,c	;volatile
  4910   0034A8  0B8F               	andlw	-113
  4911   0034AA  0940               	iorlw	64
  4912   0034AC  6EBD               	movwf	189,c	;volatile
  4913                           
  4914                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  4915   0034AE  0EE0               	movlw	-32
  4916   0034B0  16BE               	andwf	190,f,c	;volatile
  4917                           
  4918                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  4919   0034B2  50BF               	movf	191,w,c	;volatile
  4920   0034B4  0BF0               	andlw	-16
  4921   0034B6  0901               	iorlw	1
  4922   0034B8  6EBF               	movwf	191,c	;volatile
  4923   0034BA                     
  4924                           ; BSR set to: 14
  4925                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  4926   0034BA  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  4927   0034BE                     
  4928                           ; BSR set to: 14
  4929                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  4930   0034BE  8EBD               	bsf	189,7,c	;volatile
  4931                           
  4932                           ;dc_motor.c: 35:     CCPR1H=0;
  4933   0034C0  0E00               	movlw	0
  4934   0034C2  6EAA               	movwf	170,c	;volatile
  4935                           
  4936                           ;dc_motor.c: 36:     CCPR2H=0;
  4937   0034C4  0E00               	movlw	0
  4938   0034C6  6EA6               	movwf	166,c	;volatile
  4939                           
  4940                           ;dc_motor.c: 37:     CCPR3H=0;
  4941   0034C8  0E00               	movlw	0
  4942   0034CA  010F               	movlb	15	; () banked
  4943   0034CC  6F25               	movwf	37,b	;volatile
  4944                           
  4945                           ;dc_motor.c: 38:     CCPR4H=0;
  4946   0034CE  0E00               	movlw	0
  4947   0034D0  6F21               	movwf	33,b	;volatile
  4948                           
  4949                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  4950   0034D2  0EFC               	movlw	-4
  4951   0034D4  16AD               	andwf	173,f,c	;volatile
  4952                           
  4953                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  4954   0034D6  0EF3               	movlw	-13
  4955   0034D8  16AD               	andwf	173,f,c	;volatile
  4956                           
  4957                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  4958   0034DA  0ECF               	movlw	-49
  4959   0034DC  16AD               	andwf	173,f,c	;volatile
  4960                           
  4961                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  4962   0034DE  0E3F               	movlw	-193
  4963   0034E0  16AD               	andwf	173,f,c	;volatile
  4964   0034E2                     
  4965                           ; BSR set to: 15
  4966                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  4967   0034E2  88AB               	bsf	171,4,c	;volatile
  4968                           
  4969                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  4970   0034E4  50AB               	movf	171,w,c	;volatile
  4971   0034E6  0BF0               	andlw	-16
  4972   0034E8  090C               	iorlw	12
  4973   0034EA  6EAB               	movwf	171,c	;volatile
  4974   0034EC                     
  4975                           ; BSR set to: 15
  4976                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  4977   0034EC  8EAB               	bsf	171,7,c	;volatile
  4978   0034EE                     
  4979                           ; BSR set to: 15
  4980                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  4981   0034EE  88A7               	bsf	167,4,c	;volatile
  4982                           
  4983                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  4984   0034F0  50A7               	movf	167,w,c	;volatile
  4985   0034F2  0BF0               	andlw	-16
  4986   0034F4  090C               	iorlw	12
  4987   0034F6  6EA7               	movwf	167,c	;volatile
  4988   0034F8                     
  4989                           ; BSR set to: 15
  4990                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  4991   0034F8  8EA7               	bsf	167,7,c	;volatile
  4992   0034FA                     
  4993                           ; BSR set to: 15
  4994                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  4995   0034FA  8926               	bsf	38,4,b	;volatile
  4996                           
  4997                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  4998   0034FC  5126               	movf	38,w,b	;volatile
  4999   0034FE  0BF0               	andlw	-16
  5000   003500  090C               	iorlw	12
  5001   003502  6F26               	movwf	38,b	;volatile
  5002   003504                     
  5003                           ; BSR set to: 15
  5004                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  5005   003504  8F26               	bsf	38,7,b	;volatile
  5006   003506                     
  5007                           ; BSR set to: 15
  5008                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  5009   003506  8922               	bsf	34,4,b	;volatile
  5010                           
  5011                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  5012   003508  5122               	movf	34,w,b	;volatile
  5013   00350A  0BF0               	andlw	-16
  5014   00350C  090C               	iorlw	12
  5015   00350E  6F22               	movwf	34,b	;volatile
  5016   003510                     
  5017                           ; BSR set to: 15
  5018                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  5019   003510  8F22               	bsf	34,7,b	;volatile
  5020   003512                     
  5021                           ; BSR set to: 15
  5022   003512  0012               	return		;funcret
  5023   003514                     __end_of_initDCmotorsPWM:
  5024                           	callstack 0
  5025                           
  5026 ;; *************** function _fullSpeedAhead *****************
  5027 ;; Defined at:
  5028 ;;		line 144 in file "dc_motor.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5031 ;;		 -> motorL(9), 
  5032 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5033 ;;		 -> motorR(9), 
  5034 ;; Auto vars:     Size  Location     Type
  5035 ;;  power           2   21[COMRAM] int 
  5036 ;; Return value:  Size  Location     Type
  5037 ;;                  1    wreg      void 
  5038 ;; Registers used:
  5039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5040 ;; Tracked objects:
  5041 ;;		On entry : 0/0
  5042 ;;		On exit  : 0/0
  5043 ;;		Unchanged: 0/0
  5044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5045 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5046 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5047 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5048 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5049 ;;Total ram usage:        5 bytes
  5050 ;; Hardware stack levels used: 1
  5051 ;; Hardware stack levels required when called: 2
  5052 ;; This function calls:
  5053 ;;		_setMotorPWM
  5054 ;; This function is called by:
  5055 ;;		_main
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           	psect	text13
  5060   00369E                     __ptext13:
  5061                           	callstack 0
  5062   00369E                     _fullSpeedAhead:
  5063                           	callstack 28
  5064   00369E                     
  5065                           ;dc_motor.c: 144: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_
      +                          motor.c: 147:     mL->direction = 1;
  5066   00369E  5013               	movf	fullSpeedAhead@mL^0,w,c
  5067   0036A0  6ED9               	movwf	fsr2l,c
  5068   0036A2  6ADA               	clrf	fsr2h,c
  5069   0036A4  0E01               	movlw	1
  5070   0036A6  26D9               	addwf	fsr2l,f,c
  5071   0036A8  0E01               	movlw	1
  5072   0036AA  6EDF               	movwf	indf2,c
  5073                           
  5074                           ;dc_motor.c: 148:     mR->direction = 1;
  5075   0036AC  5014               	movf	fullSpeedAhead@mR^0,w,c
  5076   0036AE  6ED9               	movwf	fsr2l,c
  5077   0036B0  6ADA               	clrf	fsr2h,c
  5078   0036B2  0E01               	movlw	1
  5079   0036B4  26D9               	addwf	fsr2l,f,c
  5080   0036B6  0E01               	movlw	1
  5081   0036B8  6EDF               	movwf	indf2,c
  5082   0036BA                     
  5083                           ;dc_motor.c: 150:     for(int power = 0; power <= 50; power++) {
  5084   0036BA  0E00               	movlw	0
  5085   0036BC  6E17               	movwf	(fullSpeedAhead@power+1)^0,c
  5086   0036BE  0E00               	movlw	0
  5087   0036C0  6E16               	movwf	fullSpeedAhead@power^0,c
  5088   0036C2                     l4423:
  5089                           
  5090                           ;dc_motor.c: 151:         mL->power = power;
  5091   0036C2  5013               	movf	fullSpeedAhead@mL^0,w,c
  5092   0036C4  6ED9               	movwf	fsr2l,c
  5093   0036C6  6ADA               	clrf	fsr2h,c
  5094   0036C8  C016  FFDF         	movff	fullSpeedAhead@power,indf2
  5095                           
  5096                           ;dc_motor.c: 152:         mR->power = power;
  5097   0036CC  5014               	movf	fullSpeedAhead@mR^0,w,c
  5098   0036CE  6ED9               	movwf	fsr2l,c
  5099   0036D0  6ADA               	clrf	fsr2h,c
  5100   0036D2  C016  FFDF         	movff	fullSpeedAhead@power,indf2
  5101   0036D6                     
  5102                           ;dc_motor.c: 155:         setMotorPWM(mL);
  5103   0036D6  C013  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  5104   0036DA  EC1A  F016         	call	_setMotorPWM	;wreg free
  5105   0036DE                     
  5106                           ;dc_motor.c: 156:         setMotorPWM(mR);
  5107   0036DE  C014  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  5108   0036E2  EC1A  F016         	call	_setMotorPWM	;wreg free
  5109   0036E6                     
  5110                           ;dc_motor.c: 159:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  5111   0036E6  0E0B               	movlw	11
  5112   0036E8  6E15               	movwf	??_fullSpeedAhead^0,c
  5113   0036EA  0E62               	movlw	98
  5114   0036EC                     u4447:
  5115   0036EC  2EE8               	decfsz	wreg,f,c
  5116   0036EE  D7FE               	bra	u4447
  5117   0036F0  2E15               	decfsz	??_fullSpeedAhead^0,f,c
  5118   0036F2  D7FC               	bra	u4447
  5119   0036F4  D000               	nop2	
  5120   0036F6                     
  5121                           ;dc_motor.c: 160:     }
  5122   0036F6  4A16               	infsnz	fullSpeedAhead@power^0,f,c
  5123   0036F8  2A17               	incf	(fullSpeedAhead@power+1)^0,f,c
  5124   0036FA  BE17               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  5125   0036FC  EF89  F01B         	goto	u4001
  5126   003700  5017               	movf	(fullSpeedAhead@power+1)^0,w,c
  5127   003702  E109               	bnz	u4000
  5128   003704  0E33               	movlw	51
  5129   003706  5C16               	subwf	fullSpeedAhead@power^0,w,c
  5130   003708  A0D8               	btfss	status,0,c
  5131   00370A  EF89  F01B         	goto	u4001
  5132   00370E  EF8B  F01B         	goto	u4000
  5133   003712                     u4001:
  5134   003712  EF61  F01B         	goto	l4423
  5135   003716                     u4000:
  5136   003716  0012               	return		;funcret
  5137   003718                     __end_of_fullSpeedAhead:
  5138                           	callstack 0
  5139                           
  5140 ;; *************** function _decision *****************
  5141 ;; Defined at:
  5142 ;;		line 318 in file "color.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;  hue             2   31[COMRAM] unsigned int 
  5145 ;; Auto vars:     Size  Location     Type
  5146 ;;		None
  5147 ;; Return value:  Size  Location     Type
  5148 ;;                  1    wreg      void 
  5149 ;; Registers used:
  5150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5151 ;; Tracked objects:
  5152 ;;		On entry : 0/0
  5153 ;;		On exit  : 0/0
  5154 ;;		Unchanged: 0/0
  5155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5156 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5159 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5160 ;;Total ram usage:        2 bytes
  5161 ;; Hardware stack levels used: 1
  5162 ;; Hardware stack levels required when called: 5
  5163 ;; This function calls:
  5164 ;;		_moveBlue
  5165 ;;		_moveGreen
  5166 ;;		_moveLightBlue
  5167 ;;		_moveOrange
  5168 ;;		_movePink
  5169 ;;		_moveRed
  5170 ;;		_moveYellow
  5171 ;; This function is called by:
  5172 ;;		_main
  5173 ;; This function uses a non-reentrant model
  5174 ;;
  5175                           
  5176                           	psect	text14
  5177   0027A8                     __ptext14:
  5178                           	callstack 0
  5179   0027A8                     _decision:
  5180                           	callstack 25
  5181   0027A8                     
  5182                           ;color.c: 322:     if (hue<=18) {
  5183   0027A8  5021               	movf	(decision@hue+1)^0,w,c
  5184   0027AA  E107               	bnz	u3871
  5185   0027AC  0E13               	movlw	19
  5186   0027AE  5C20               	subwf	decision@hue^0,w,c
  5187   0027B0  B0D8               	btfsc	status,0,c
  5188   0027B2  EFDD  F013         	goto	u3871
  5189   0027B6  EFDF  F013         	goto	u3870
  5190   0027BA                     u3871:
  5191   0027BA  EFE7  F013         	goto	l4333
  5192   0027BE                     u3870:
  5193   0027BE                     
  5194                           ;color.c: 323:         moveRed(&motorL, &motorR);
  5195   0027BE  0EDE               	movlw	low _motorL
  5196   0027C0  6E1C               	movwf	moveRed@mL^0,c
  5197   0027C2  0ED5               	movlw	low _motorR
  5198   0027C4  6E1D               	movwf	moveRed@mR^0,c
  5199   0027C6  ECAA  F01D         	call	_moveRed	;wreg free
  5200                           
  5201                           ;color.c: 324:     } else if (hue>=105 && hue<=130){
  5202   0027CA  EF9B  F014         	goto	l158
  5203   0027CE                     l4333:
  5204   0027CE  5021               	movf	(decision@hue+1)^0,w,c
  5205   0027D0  E109               	bnz	u3880
  5206   0027D2  0E69               	movlw	105
  5207   0027D4  5C20               	subwf	decision@hue^0,w,c
  5208   0027D6  A0D8               	btfss	status,0,c
  5209   0027D8  EFF0  F013         	goto	u3881
  5210   0027DC  EFF2  F013         	goto	u3880
  5211   0027E0                     u3881:
  5212   0027E0  EF05  F014         	goto	l4339
  5213   0027E4                     u3880:
  5214   0027E4  5021               	movf	(decision@hue+1)^0,w,c
  5215   0027E6  E107               	bnz	u3891
  5216   0027E8  0E83               	movlw	131
  5217   0027EA  5C20               	subwf	decision@hue^0,w,c
  5218   0027EC  B0D8               	btfsc	status,0,c
  5219   0027EE  EFFB  F013         	goto	u3891
  5220   0027F2  EFFD  F013         	goto	u3890
  5221   0027F6                     u3891:
  5222   0027F6  EF05  F014         	goto	l4339
  5223   0027FA                     u3890:
  5224   0027FA                     
  5225                           ;color.c: 325:         moveGreen(&motorL, &motorR);
  5226   0027FA  0EDE               	movlw	low _motorL
  5227   0027FC  6E1C               	movwf	moveGreen@mL^0,c
  5228   0027FE  0ED5               	movlw	low _motorR
  5229   002800  6E1D               	movwf	moveGreen@mR^0,c
  5230   002802  EC72  F01E         	call	_moveGreen	;wreg free
  5231                           
  5232                           ;color.c: 326:     } else if (hue>=230 && hue<=240){
  5233   002806  EF9B  F014         	goto	l158
  5234   00280A                     l4339:
  5235   00280A  5021               	movf	(decision@hue+1)^0,w,c
  5236   00280C  E109               	bnz	u3900
  5237   00280E  0EE6               	movlw	230
  5238   002810  5C20               	subwf	decision@hue^0,w,c
  5239   002812  A0D8               	btfss	status,0,c
  5240   002814  EF0E  F014         	goto	u3901
  5241   002818  EF10  F014         	goto	u3900
  5242   00281C                     u3901:
  5243   00281C  EF23  F014         	goto	l4345
  5244   002820                     u3900:
  5245   002820  5021               	movf	(decision@hue+1)^0,w,c
  5246   002822  E107               	bnz	u3911
  5247   002824  0EF1               	movlw	241
  5248   002826  5C20               	subwf	decision@hue^0,w,c
  5249   002828  B0D8               	btfsc	status,0,c
  5250   00282A  EF19  F014         	goto	u3911
  5251   00282E  EF1B  F014         	goto	u3910
  5252   002832                     u3911:
  5253   002832  EF23  F014         	goto	l4345
  5254   002836                     u3910:
  5255   002836                     
  5256                           ;color.c: 327:         moveBlue(&motorL,&motorR);
  5257   002836  0EDE               	movlw	low _motorL
  5258   002838  6E1C               	movwf	moveBlue@mL^0,c
  5259   00283A  0ED5               	movlw	low _motorR
  5260   00283C  6E1D               	movwf	moveBlue@mR^0,c
  5261   00283E  ECA4  F01E         	call	_moveBlue	;wreg free
  5262                           
  5263                           ;color.c: 328:     } else if (hue>=216 && hue<=221){
  5264   002842  EF9B  F014         	goto	l158
  5265   002846                     l4345:
  5266   002846  5021               	movf	(decision@hue+1)^0,w,c
  5267   002848  E109               	bnz	u3920
  5268   00284A  0ED8               	movlw	216
  5269   00284C  5C20               	subwf	decision@hue^0,w,c
  5270   00284E  A0D8               	btfss	status,0,c
  5271   002850  EF2C  F014         	goto	u3921
  5272   002854  EF2E  F014         	goto	u3920
  5273   002858                     u3921:
  5274   002858  EF41  F014         	goto	l4351
  5275   00285C                     u3920:
  5276   00285C  5021               	movf	(decision@hue+1)^0,w,c
  5277   00285E  E107               	bnz	u3931
  5278   002860  0EDE               	movlw	222
  5279   002862  5C20               	subwf	decision@hue^0,w,c
  5280   002864  B0D8               	btfsc	status,0,c
  5281   002866  EF37  F014         	goto	u3931
  5282   00286A  EF39  F014         	goto	u3930
  5283   00286E                     u3931:
  5284   00286E  EF41  F014         	goto	l4351
  5285   002872                     u3930:
  5286   002872                     
  5287                           ;color.c: 329:         moveLightBlue(&motorL,&motorR);
  5288   002872  0EDE               	movlw	low _motorL
  5289   002874  6E1C               	movwf	moveLightBlue@mL^0,c
  5290   002876  0ED5               	movlw	low _motorR
  5291   002878  6E1D               	movwf	moveLightBlue@mR^0,c
  5292   00287A  EC40  F01E         	call	_moveLightBlue	;wreg free
  5293                           
  5294                           ;color.c: 330:     } else if (hue>=302 && hue<=346){
  5295   00287E  EF9B  F014         	goto	l158
  5296   002882                     l4351:
  5297   002882  0E2E               	movlw	46
  5298   002884  5C20               	subwf	decision@hue^0,w,c
  5299   002886  0E01               	movlw	1
  5300   002888  5821               	subwfb	(decision@hue+1)^0,w,c
  5301   00288A  A0D8               	btfss	status,0,c
  5302   00288C  EF4A  F014         	goto	u3941
  5303   002890  EF4C  F014         	goto	u3940
  5304   002894                     u3941:
  5305   002894  EF5F  F014         	goto	l4357
  5306   002898                     u3940:
  5307   002898  0E5B               	movlw	91
  5308   00289A  5C20               	subwf	decision@hue^0,w,c
  5309   00289C  0E01               	movlw	1
  5310   00289E  5821               	subwfb	(decision@hue+1)^0,w,c
  5311   0028A0  B0D8               	btfsc	status,0,c
  5312   0028A2  EF55  F014         	goto	u3951
  5313   0028A6  EF57  F014         	goto	u3950
  5314   0028AA                     u3951:
  5315   0028AA  EF5F  F014         	goto	l4357
  5316   0028AE                     u3950:
  5317   0028AE                     
  5318                           ;color.c: 331:         moveYellow(&motorL,&motorR);
  5319   0028AE  0EDE               	movlw	low _motorL
  5320   0028B0  6E1C               	movwf	moveYellow@mL^0,c
  5321   0028B2  0ED5               	movlw	low _motorR
  5322   0028B4  6E1D               	movwf	moveYellow@mR^0,c
  5323   0028B6  EC91  F01D         	call	_moveYellow	;wreg free
  5324                           
  5325                           ;color.c: 332:     } else if (hue>18 && hue<=35){
  5326   0028BA  EF9B  F014         	goto	l158
  5327   0028BE                     l4357:
  5328   0028BE  5021               	movf	(decision@hue+1)^0,w,c
  5329   0028C0  E109               	bnz	u3960
  5330   0028C2  0E13               	movlw	19
  5331   0028C4  5C20               	subwf	decision@hue^0,w,c
  5332   0028C6  A0D8               	btfss	status,0,c
  5333   0028C8  EF68  F014         	goto	u3961
  5334   0028CC  EF6A  F014         	goto	u3960
  5335   0028D0                     u3961:
  5336   0028D0  EF7D  F014         	goto	l4363
  5337   0028D4                     u3960:
  5338   0028D4  5021               	movf	(decision@hue+1)^0,w,c
  5339   0028D6  E107               	bnz	u3971
  5340   0028D8  0E24               	movlw	36
  5341   0028DA  5C20               	subwf	decision@hue^0,w,c
  5342   0028DC  B0D8               	btfsc	status,0,c
  5343   0028DE  EF73  F014         	goto	u3971
  5344   0028E2  EF75  F014         	goto	u3970
  5345   0028E6                     u3971:
  5346   0028E6  EF7D  F014         	goto	l4363
  5347   0028EA                     u3970:
  5348   0028EA                     
  5349                           ;color.c: 333:         moveOrange(&motorL,&motorR);
  5350   0028EA  0EDE               	movlw	low _motorL
  5351   0028EC  6E1C               	movwf	moveOrange@mL^0,c
  5352   0028EE  0ED5               	movlw	low _motorR
  5353   0028F0  6E1D               	movwf	moveOrange@mR^0,c
  5354   0028F2  EC0E  F01E         	call	_moveOrange	;wreg free
  5355                           
  5356                           ;color.c: 334:     } else if (hue>=244 && hue<=251){
  5357   0028F6  EF9B  F014         	goto	l158
  5358   0028FA                     l4363:
  5359   0028FA  5021               	movf	(decision@hue+1)^0,w,c
  5360   0028FC  E109               	bnz	u3980
  5361   0028FE  0EF4               	movlw	244
  5362   002900  5C20               	subwf	decision@hue^0,w,c
  5363   002902  A0D8               	btfss	status,0,c
  5364   002904  EF86  F014         	goto	u3981
  5365   002908  EF88  F014         	goto	u3980
  5366   00290C                     u3981:
  5367   00290C  EF9B  F014         	goto	l152
  5368   002910                     u3980:
  5369   002910  5021               	movf	(decision@hue+1)^0,w,c
  5370   002912  E107               	bnz	u3991
  5371   002914  0EFC               	movlw	252
  5372   002916  5C20               	subwf	decision@hue^0,w,c
  5373   002918  B0D8               	btfsc	status,0,c
  5374   00291A  EF91  F014         	goto	u3991
  5375   00291E  EF93  F014         	goto	u3990
  5376   002922                     u3991:
  5377   002922  EF9B  F014         	goto	l152
  5378   002926                     u3990:
  5379   002926                     
  5380                           ;color.c: 335:         movePink(&motorL,&motorR);
  5381   002926  0EDE               	movlw	low _motorL
  5382   002928  6E1C               	movwf	movePink@mL^0,c
  5383   00292A  0ED5               	movlw	low _motorR
  5384   00292C  6E1D               	movwf	movePink@mR^0,c
  5385   00292E  ECDC  F01D         	call	_movePink	;wreg free
  5386   002932  EF9B  F014         	goto	l158
  5387   002936                     l152:
  5388   002936                     l158:
  5389   002936  0012               	return		;funcret
  5390   002938                     __end_of_decision:
  5391                           	callstack 0
  5392                           
  5393 ;; *************** function _moveYellow *****************
  5394 ;; Defined at:
  5395 ;;		line 278 in file "dc_motor.c"
  5396 ;; Parameters:    Size  Location     Type
  5397 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5398 ;;		 -> motorL(9), 
  5399 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5400 ;;		 -> motorR(9), 
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;		None
  5403 ;; Return value:  Size  Location     Type
  5404 ;;                  1    wreg      void 
  5405 ;; Registers used:
  5406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5407 ;; Tracked objects:
  5408 ;;		On entry : 0/0
  5409 ;;		On exit  : 0/0
  5410 ;;		Unchanged: 0/0
  5411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5412 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5414 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5415 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5416 ;;Total ram usage:        4 bytes
  5417 ;; Hardware stack levels used: 1
  5418 ;; Hardware stack levels required when called: 4
  5419 ;; This function calls:
  5420 ;;		_backOneAndHalf
  5421 ;;		_right90
  5422 ;; This function is called by:
  5423 ;;		_decision
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           	psect	text15
  5428   003B22                     __ptext15:
  5429                           	callstack 0
  5430   003B22                     _moveYellow:
  5431                           	callstack 25
  5432   003B22                     
  5433                           ;dc_motor.c: 278: void moveYellow(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 
      +                          279: {;dc_motor.c: 281:     backOneAndHalf(mL,mR);
  5434   003B22  C01C  F018         	movff	moveYellow@mL,backOneAndHalf@mL
  5435   003B26  C01D  F019         	movff	moveYellow@mR,backOneAndHalf@mR
  5436   003B2A  ECF5  F01D         	call	_backOneAndHalf	;wreg free
  5437   003B2E                     
  5438                           ;dc_motor.c: 282:     _delay((unsigned long)((500)*(64000000/4000.0)));
  5439   003B2E  0E29               	movlw	41
  5440   003B30  6E1F               	movwf	(??_moveYellow+1)^0,c
  5441   003B32  0E96               	movlw	150
  5442   003B34  6E1E               	movwf	??_moveYellow^0,c
  5443   003B36  0E7F               	movlw	127
  5444   003B38                     u4457:
  5445   003B38  2EE8               	decfsz	wreg,f,c
  5446   003B3A  D7FE               	bra	u4457
  5447   003B3C  2E1E               	decfsz	??_moveYellow^0,f,c
  5448   003B3E  D7FC               	bra	u4457
  5449   003B40  2E1F               	decfsz	(??_moveYellow+1)^0,f,c
  5450   003B42  D7FA               	bra	u4457
  5451   003B44  0000               	nop	
  5452   003B46                     
  5453                           ;dc_motor.c: 283:     right90(mL,mR);
  5454   003B46  C01C  F018         	movff	moveYellow@mL,right90@mL
  5455   003B4A  C01D  F019         	movff	moveYellow@mR,right90@mR
  5456   003B4E  ECC3  F01D         	call	_right90	;wreg free
  5457   003B52  0012               	return		;funcret
  5458   003B54                     __end_of_moveYellow:
  5459                           	callstack 0
  5460                           
  5461 ;; *************** function _moveRed *****************
  5462 ;; Defined at:
  5463 ;;		line 254 in file "dc_motor.c"
  5464 ;; Parameters:    Size  Location     Type
  5465 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5466 ;;		 -> motorL(9), 
  5467 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5468 ;;		 -> motorR(9), 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;		None
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5480 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5482 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5483 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5484 ;;Total ram usage:        4 bytes
  5485 ;; Hardware stack levels used: 1
  5486 ;; Hardware stack levels required when called: 4
  5487 ;; This function calls:
  5488 ;;		_backHalf
  5489 ;;		_right90
  5490 ;; This function is called by:
  5491 ;;		_decision
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           	psect	text16
  5496   003B54                     __ptext16:
  5497                           	callstack 0
  5498   003B54                     _moveRed:
  5499                           	callstack 25
  5500   003B54                     
  5501                           ;dc_motor.c: 254: void moveRed(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 255
      +                          : {;dc_motor.c: 257:     backHalf(mL,mR);
  5502   003B54  C01C  F018         	movff	moveRed@mL,backHalf@mL
  5503   003B58  C01D  F019         	movff	moveRed@mR,backHalf@mR
  5504   003B5C  ECEF  F01E         	call	_backHalf	;wreg free
  5505   003B60                     
  5506                           ;dc_motor.c: 258:     _delay((unsigned long)((500)*(64000000/4000.0)));
  5507   003B60  0E29               	movlw	41
  5508   003B62  6E1F               	movwf	(??_moveRed+1)^0,c
  5509   003B64  0E96               	movlw	150
  5510   003B66  6E1E               	movwf	??_moveRed^0,c
  5511   003B68  0E7F               	movlw	127
  5512   003B6A                     u4467:
  5513   003B6A  2EE8               	decfsz	wreg,f,c
  5514   003B6C  D7FE               	bra	u4467
  5515   003B6E  2E1E               	decfsz	??_moveRed^0,f,c
  5516   003B70  D7FC               	bra	u4467
  5517   003B72  2E1F               	decfsz	(??_moveRed+1)^0,f,c
  5518   003B74  D7FA               	bra	u4467
  5519   003B76  0000               	nop	
  5520   003B78                     
  5521                           ;dc_motor.c: 259:     right90(mL,mR);
  5522   003B78  C01C  F018         	movff	moveRed@mL,right90@mL
  5523   003B7C  C01D  F019         	movff	moveRed@mR,right90@mR
  5524   003B80  ECC3  F01D         	call	_right90	;wreg free
  5525   003B84  0012               	return		;funcret
  5526   003B86                     __end_of_moveRed:
  5527                           	callstack 0
  5528                           
  5529 ;; *************** function _right90 *****************
  5530 ;; Defined at:
  5531 ;;		line 193 in file "dc_motor.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5534 ;;		 -> motorL(9), 
  5535 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5536 ;;		 -> motorR(9), 
  5537 ;; Auto vars:     Size  Location     Type
  5538 ;;		None
  5539 ;; Return value:  Size  Location     Type
  5540 ;;                  1    wreg      void 
  5541 ;; Registers used:
  5542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5543 ;; Tracked objects:
  5544 ;;		On entry : 0/0
  5545 ;;		On exit  : 0/0
  5546 ;;		Unchanged: 0/0
  5547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5548 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5550 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5551 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5552 ;;Total ram usage:        4 bytes
  5553 ;; Hardware stack levels used: 1
  5554 ;; Hardware stack levels required when called: 3
  5555 ;; This function calls:
  5556 ;;		_stop
  5557 ;;		_turnRight
  5558 ;; This function is called by:
  5559 ;;		_moveRed
  5560 ;;		_moveYellow
  5561 ;; This function uses a non-reentrant model
  5562 ;;
  5563                           
  5564                           	psect	text17
  5565   003B86                     __ptext17:
  5566                           	callstack 0
  5567   003B86                     _right90:
  5568                           	callstack 25
  5569   003B86                     
  5570                           ;dc_motor.c: 193: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     turnRight(mL,mR);
  5571   003B86  C018  F013         	movff	right90@mL,turnRight@mL
  5572   003B8A  C019  F014         	movff	right90@mR,turnRight@mR
  5573   003B8E  ECD1  F01A         	call	_turnRight	;wreg free
  5574   003B92                     
  5575                           ;dc_motor.c: 196:     _delay((unsigned long)((260)*(64000000/4000.0)));
  5576   003B92  0E16               	movlw	22
  5577   003B94  6E1B               	movwf	(??_right90+1)^0,c
  5578   003B96  0E1B               	movlw	27
  5579   003B98  6E1A               	movwf	??_right90^0,c
  5580   003B9A  0E88               	movlw	136
  5581   003B9C                     u4477:
  5582   003B9C  2EE8               	decfsz	wreg,f,c
  5583   003B9E  D7FE               	bra	u4477
  5584   003BA0  2E1A               	decfsz	??_right90^0,f,c
  5585   003BA2  D7FC               	bra	u4477
  5586   003BA4  2E1B               	decfsz	(??_right90+1)^0,f,c
  5587   003BA6  D7FA               	bra	u4477
  5588   003BA8  D000               	nop2	
  5589   003BAA                     
  5590                           ;dc_motor.c: 197:     stop(mL,mR);
  5591   003BAA  C018  F013         	movff	right90@mL,stop@mL
  5592   003BAE  C019  F014         	movff	right90@mR,stop@mR
  5593   003BB2  EC8A  F01A         	call	_stop	;wreg free
  5594   003BB6  0012               	return		;funcret
  5595   003BB8                     __end_of_right90:
  5596                           	callstack 0
  5597                           
  5598 ;; *************** function _movePink *****************
  5599 ;; Defined at:
  5600 ;;		line 286 in file "dc_motor.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5603 ;;		 -> motorL(9), 
  5604 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5605 ;;		 -> motorR(9), 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;		None
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  1    wreg      void 
  5610 ;; Registers used:
  5611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5617 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5619 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5620 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5621 ;;Total ram usage:        4 bytes
  5622 ;; Hardware stack levels used: 1
  5623 ;; Hardware stack levels required when called: 4
  5624 ;; This function calls:
  5625 ;;		_backOneAndHalf
  5626 ;;		_left90
  5627 ;; This function is called by:
  5628 ;;		_decision
  5629 ;; This function uses a non-reentrant model
  5630 ;;
  5631                           
  5632                           	psect	text18
  5633   003BB8                     __ptext18:
  5634                           	callstack 0
  5635   003BB8                     _movePink:
  5636                           	callstack 25
  5637   003BB8                     
  5638                           ;dc_motor.c: 286: void movePink(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 28
      +                          7: {;dc_motor.c: 289:     backOneAndHalf(mL,mR);
  5639   003BB8  C01C  F018         	movff	movePink@mL,backOneAndHalf@mL
  5640   003BBC  C01D  F019         	movff	movePink@mR,backOneAndHalf@mR
  5641   003BC0  ECF5  F01D         	call	_backOneAndHalf	;wreg free
  5642   003BC4                     
  5643                           ;dc_motor.c: 290:     _delay((unsigned long)((500)*(64000000/4000.0)));
  5644   003BC4  0E29               	movlw	41
  5645   003BC6  6E1F               	movwf	(??_movePink+1)^0,c
  5646   003BC8  0E96               	movlw	150
  5647   003BCA  6E1E               	movwf	??_movePink^0,c
  5648   003BCC  0E7F               	movlw	127
  5649   003BCE                     u4487:
  5650   003BCE  2EE8               	decfsz	wreg,f,c
  5651   003BD0  D7FE               	bra	u4487
  5652   003BD2  2E1E               	decfsz	??_movePink^0,f,c
  5653   003BD4  D7FC               	bra	u4487
  5654   003BD6  2E1F               	decfsz	(??_movePink+1)^0,f,c
  5655   003BD8  D7FA               	bra	u4487
  5656   003BDA  0000               	nop	
  5657   003BDC                     
  5658                           ;dc_motor.c: 291:     left90(mL,mR);
  5659   003BDC  C01C  F018         	movff	movePink@mL,left90@mL
  5660   003BE0  C01D  F019         	movff	movePink@mR,left90@mR
  5661   003BE4  EC8B  F01E         	call	_left90	;wreg free
  5662   003BE8  0012               	return		;funcret
  5663   003BEA                     __end_of_movePink:
  5664                           	callstack 0
  5665                           
  5666 ;; *************** function _backOneAndHalf *****************
  5667 ;; Defined at:
  5668 ;;		line 241 in file "dc_motor.c"
  5669 ;; Parameters:    Size  Location     Type
  5670 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5671 ;;		 -> motorL(9), 
  5672 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5673 ;;		 -> motorR(9), 
  5674 ;; Auto vars:     Size  Location     Type
  5675 ;;		None
  5676 ;; Return value:  Size  Location     Type
  5677 ;;                  1    wreg      void 
  5678 ;; Registers used:
  5679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5680 ;; Tracked objects:
  5681 ;;		On entry : 0/0
  5682 ;;		On exit  : 0/0
  5683 ;;		Unchanged: 0/0
  5684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5685 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5687 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5688 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5689 ;;Total ram usage:        4 bytes
  5690 ;; Hardware stack levels used: 1
  5691 ;; Hardware stack levels required when called: 3
  5692 ;; This function calls:
  5693 ;;		_fullSpeedBack
  5694 ;;		_stop
  5695 ;; This function is called by:
  5696 ;;		_moveYellow
  5697 ;;		_movePink
  5698 ;; This function uses a non-reentrant model
  5699 ;;
  5700                           
  5701                           	psect	text19
  5702   003BEA                     __ptext19:
  5703                           	callstack 0
  5704   003BEA                     _backOneAndHalf:
  5705                           	callstack 25
  5706   003BEA                     
  5707                           ;dc_motor.c: 241: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 242: {;dc_motor.c: 243:     fullSpeedBack(mL,mR);
  5708   003BEA  C018  F013         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  5709   003BEE  C019  F014         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  5710   003BF2  EC8C  F01B         	call	_fullSpeedBack	;wreg free
  5711   003BF6                     
  5712                           ;dc_motor.c: 244:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  5713   003BF6  0E6A               	movlw	106
  5714   003BF8  6E1B               	movwf	(??_backOneAndHalf+1)^0,c
  5715   003BFA  0E85               	movlw	133
  5716   003BFC  6E1A               	movwf	??_backOneAndHalf^0,c
  5717   003BFE  0EB4               	movlw	180
  5718   003C00                     u4497:
  5719   003C00  2EE8               	decfsz	wreg,f,c
  5720   003C02  D7FE               	bra	u4497
  5721   003C04  2E1A               	decfsz	??_backOneAndHalf^0,f,c
  5722   003C06  D7FC               	bra	u4497
  5723   003C08  2E1B               	decfsz	(??_backOneAndHalf+1)^0,f,c
  5724   003C0A  D7FA               	bra	u4497
  5725   003C0C  D000               	nop2	
  5726   003C0E                     
  5727                           ;dc_motor.c: 245:     stop(mL,mR);
  5728   003C0E  C018  F013         	movff	backOneAndHalf@mL,stop@mL
  5729   003C12  C019  F014         	movff	backOneAndHalf@mR,stop@mR
  5730   003C16  EC8A  F01A         	call	_stop	;wreg free
  5731   003C1A  0012               	return		;funcret
  5732   003C1C                     __end_of_backOneAndHalf:
  5733                           	callstack 0
  5734                           
  5735 ;; *************** function _moveOrange *****************
  5736 ;; Defined at:
  5737 ;;		line 294 in file "dc_motor.c"
  5738 ;; Parameters:    Size  Location     Type
  5739 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5740 ;;		 -> motorL(9), 
  5741 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5742 ;;		 -> motorR(9), 
  5743 ;; Auto vars:     Size  Location     Type
  5744 ;;		None
  5745 ;; Return value:  Size  Location     Type
  5746 ;;                  1    wreg      void 
  5747 ;; Registers used:
  5748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5749 ;; Tracked objects:
  5750 ;;		On entry : 0/0
  5751 ;;		On exit  : 0/0
  5752 ;;		Unchanged: 0/0
  5753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5754 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5756 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5757 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5758 ;;Total ram usage:        4 bytes
  5759 ;; Hardware stack levels used: 1
  5760 ;; Hardware stack levels required when called: 4
  5761 ;; This function calls:
  5762 ;;		_backHalf
  5763 ;;		_right135
  5764 ;; This function is called by:
  5765 ;;		_decision
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           	psect	text20
  5770   003C1C                     __ptext20:
  5771                           	callstack 0
  5772   003C1C                     _moveOrange:
  5773                           	callstack 25
  5774   003C1C                     
  5775                           ;dc_motor.c: 294: void moveOrange(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 
      +                          295: {;dc_motor.c: 297:     backHalf(mL,mR);
  5776   003C1C  C01C  F018         	movff	moveOrange@mL,backHalf@mL
  5777   003C20  C01D  F019         	movff	moveOrange@mR,backHalf@mR
  5778   003C24  ECEF  F01E         	call	_backHalf	;wreg free
  5779   003C28                     
  5780                           ;dc_motor.c: 298:     _delay((unsigned long)((500)*(64000000/4000.0)));
  5781   003C28  0E29               	movlw	41
  5782   003C2A  6E1F               	movwf	(??_moveOrange+1)^0,c
  5783   003C2C  0E96               	movlw	150
  5784   003C2E  6E1E               	movwf	??_moveOrange^0,c
  5785   003C30  0E7F               	movlw	127
  5786   003C32                     u4507:
  5787   003C32  2EE8               	decfsz	wreg,f,c
  5788   003C34  D7FE               	bra	u4507
  5789   003C36  2E1E               	decfsz	??_moveOrange^0,f,c
  5790   003C38  D7FC               	bra	u4507
  5791   003C3A  2E1F               	decfsz	(??_moveOrange+1)^0,f,c
  5792   003C3C  D7FA               	bra	u4507
  5793   003C3E  0000               	nop	
  5794   003C40                     
  5795                           ;dc_motor.c: 299:     right135(mL,mR);
  5796   003C40  C01C  F018         	movff	moveOrange@mL,right135@mL
  5797   003C44  C01D  F019         	movff	moveOrange@mR,right135@mR
  5798   003C48  EC27  F01E         	call	_right135	;wreg free
  5799   003C4C  0012               	return		;funcret
  5800   003C4E                     __end_of_moveOrange:
  5801                           	callstack 0
  5802                           
  5803 ;; *************** function _right135 *****************
  5804 ;; Defined at:
  5805 ;;		line 217 in file "dc_motor.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5808 ;;		 -> motorL(9), 
  5809 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5810 ;;		 -> motorR(9), 
  5811 ;; Auto vars:     Size  Location     Type
  5812 ;;		None
  5813 ;; Return value:  Size  Location     Type
  5814 ;;                  1    wreg      void 
  5815 ;; Registers used:
  5816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5817 ;; Tracked objects:
  5818 ;;		On entry : 0/0
  5819 ;;		On exit  : 0/0
  5820 ;;		Unchanged: 0/0
  5821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5822 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5824 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5825 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5826 ;;Total ram usage:        4 bytes
  5827 ;; Hardware stack levels used: 1
  5828 ;; Hardware stack levels required when called: 3
  5829 ;; This function calls:
  5830 ;;		_stop
  5831 ;;		_turnRight
  5832 ;; This function is called by:
  5833 ;;		_moveOrange
  5834 ;; This function uses a non-reentrant model
  5835 ;;
  5836                           
  5837                           	psect	text21
  5838   003C4E                     __ptext21:
  5839                           	callstack 0
  5840   003C4E                     _right135:
  5841                           	callstack 25
  5842   003C4E                     
  5843                           ;dc_motor.c: 217: void right135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 21
      +                          8: {;dc_motor.c: 219:     turnRight(mL,mR);
  5844   003C4E  C018  F013         	movff	right135@mL,turnRight@mL
  5845   003C52  C019  F014         	movff	right135@mR,turnRight@mR
  5846   003C56  ECD1  F01A         	call	_turnRight	;wreg free
  5847   003C5A                     
  5848                           ;dc_motor.c: 220:     _delay((unsigned long)((400)*(64000000/4000.0)));
  5849   003C5A  0E21               	movlw	33
  5850   003C5C  6E1B               	movwf	(??_right135+1)^0,c
  5851   003C5E  0E78               	movlw	120
  5852   003C60  6E1A               	movwf	??_right135^0,c
  5853   003C62  0E98               	movlw	152
  5854   003C64                     u4517:
  5855   003C64  2EE8               	decfsz	wreg,f,c
  5856   003C66  D7FE               	bra	u4517
  5857   003C68  2E1A               	decfsz	??_right135^0,f,c
  5858   003C6A  D7FC               	bra	u4517
  5859   003C6C  2E1B               	decfsz	(??_right135+1)^0,f,c
  5860   003C6E  D7FA               	bra	u4517
  5861   003C70  D000               	nop2	
  5862   003C72                     
  5863                           ;dc_motor.c: 221:     stop(mL,mR);
  5864   003C72  C018  F013         	movff	right135@mL,stop@mL
  5865   003C76  C019  F014         	movff	right135@mR,stop@mR
  5866   003C7A  EC8A  F01A         	call	_stop	;wreg free
  5867   003C7E  0012               	return		;funcret
  5868   003C80                     __end_of_right135:
  5869                           	callstack 0
  5870                           
  5871 ;; *************** function _turnRight *****************
  5872 ;; Defined at:
  5873 ;;		line 125 in file "dc_motor.c"
  5874 ;; Parameters:    Size  Location     Type
  5875 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5876 ;;		 -> motorL(9), 
  5877 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5878 ;;		 -> motorR(9), 
  5879 ;; Auto vars:     Size  Location     Type
  5880 ;;  i               2   21[COMRAM] unsigned int 
  5881 ;; Return value:  Size  Location     Type
  5882 ;;                  1    wreg      void 
  5883 ;; Registers used:
  5884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5885 ;; Tracked objects:
  5886 ;;		On entry : 0/0
  5887 ;;		On exit  : 0/0
  5888 ;;		Unchanged: 0/0
  5889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5890 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5891 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5892 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5893 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5894 ;;Total ram usage:        5 bytes
  5895 ;; Hardware stack levels used: 1
  5896 ;; Hardware stack levels required when called: 2
  5897 ;; This function calls:
  5898 ;;		_setMotorPWM
  5899 ;; This function is called by:
  5900 ;;		_right90
  5901 ;;		_right135
  5902 ;; This function uses a non-reentrant model
  5903 ;;
  5904                           
  5905                           	psect	text22
  5906   0035A2                     __ptext22:
  5907                           	callstack 0
  5908   0035A2                     _turnRight:
  5909                           	callstack 25
  5910   0035A2                     
  5911                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  5912   0035A2  5013               	movf	turnRight@mL^0,w,c
  5913   0035A4  6ED9               	movwf	fsr2l,c
  5914   0035A6  6ADA               	clrf	fsr2h,c
  5915   0035A8  0E01               	movlw	1
  5916   0035AA  26D9               	addwf	fsr2l,f,c
  5917   0035AC  0E01               	movlw	1
  5918   0035AE  6EDF               	movwf	indf2,c
  5919                           
  5920                           ;dc_motor.c: 129:     mR->direction = 0;
  5921   0035B0  5014               	movf	turnRight@mR^0,w,c
  5922   0035B2  6ED9               	movwf	fsr2l,c
  5923   0035B4  6ADA               	clrf	fsr2h,c
  5924   0035B6  0E01               	movlw	1
  5925   0035B8  26D9               	addwf	fsr2l,f,c
  5926   0035BA  6ADF               	clrf	indf2,c
  5927   0035BC                     
  5928                           ;dc_motor.c: 131:     setMotorPWM(mL);
  5929   0035BC  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  5930   0035C0  EC1A  F016         	call	_setMotorPWM	;wreg free
  5931   0035C4                     
  5932                           ;dc_motor.c: 132:     setMotorPWM(mR);
  5933   0035C4  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  5934   0035C8  EC1A  F016         	call	_setMotorPWM	;wreg free
  5935   0035CC                     
  5936                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  5937   0035CC  0E00               	movlw	0
  5938   0035CE  6E17               	movwf	(turnRight@i+1)^0,c
  5939   0035D0  0E00               	movlw	0
  5940   0035D2  6E16               	movwf	turnRight@i^0,c
  5941   0035D4                     l3281:
  5942                           
  5943                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  5944   0035D4  5013               	movf	turnRight@mL^0,w,c
  5945   0035D6  6ED9               	movwf	fsr2l,c
  5946   0035D8  6ADA               	clrf	fsr2h,c
  5947   0035DA  2ADF               	incf	indf2,f,c
  5948                           
  5949                           ;dc_motor.c: 136:         mR->power++;
  5950   0035DC  5014               	movf	turnRight@mR^0,w,c
  5951   0035DE  6ED9               	movwf	fsr2l,c
  5952   0035E0  6ADA               	clrf	fsr2h,c
  5953   0035E2  2ADF               	incf	indf2,f,c
  5954   0035E4                     
  5955                           ;dc_motor.c: 137:         setMotorPWM(mL);
  5956   0035E4  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  5957   0035E8  EC1A  F016         	call	_setMotorPWM	;wreg free
  5958   0035EC                     
  5959                           ;dc_motor.c: 138:         setMotorPWM(mR);
  5960   0035EC  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  5961   0035F0  EC1A  F016         	call	_setMotorPWM	;wreg free
  5962   0035F4                     
  5963                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  5964   0035F4  0E0B               	movlw	11
  5965   0035F6  6E15               	movwf	??_turnRight^0,c
  5966   0035F8  0E62               	movlw	98
  5967   0035FA                     u4527:
  5968   0035FA  2EE8               	decfsz	wreg,f,c
  5969   0035FC  D7FE               	bra	u4527
  5970   0035FE  2E15               	decfsz	??_turnRight^0,f,c
  5971   003600  D7FC               	bra	u4527
  5972   003602  D000               	nop2	
  5973   003604                     
  5974                           ;dc_motor.c: 140:     }
  5975   003604  4A16               	infsnz	turnRight@i^0,f,c
  5976   003606  2A17               	incf	(turnRight@i+1)^0,f,c
  5977   003608  5017               	movf	(turnRight@i+1)^0,w,c
  5978   00360A  E109               	bnz	u2530
  5979   00360C  0E32               	movlw	50
  5980   00360E  5C16               	subwf	turnRight@i^0,w,c
  5981   003610  A0D8               	btfss	status,0,c
  5982   003612  EF0D  F01B         	goto	u2531
  5983   003616  EF0F  F01B         	goto	u2530
  5984   00361A                     u2531:
  5985   00361A  EFEA  F01A         	goto	l3281
  5986   00361E                     u2530:
  5987   00361E  0012               	return		;funcret
  5988   003620                     __end_of_turnRight:
  5989                           	callstack 0
  5990                           
  5991 ;; *************** function _moveLightBlue *****************
  5992 ;; Defined at:
  5993 ;;		line 302 in file "dc_motor.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5996 ;;		 -> motorL(9), 
  5997 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5998 ;;		 -> motorR(9), 
  5999 ;; Auto vars:     Size  Location     Type
  6000 ;;		None
  6001 ;; Return value:  Size  Location     Type
  6002 ;;                  1    wreg      void 
  6003 ;; Registers used:
  6004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6010 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6012 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6013 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6014 ;;Total ram usage:        4 bytes
  6015 ;; Hardware stack levels used: 1
  6016 ;; Hardware stack levels required when called: 4
  6017 ;; This function calls:
  6018 ;;		_backHalf
  6019 ;;		_left135
  6020 ;; This function is called by:
  6021 ;;		_decision
  6022 ;; This function uses a non-reentrant model
  6023 ;;
  6024                           
  6025                           	psect	text23
  6026   003C80                     __ptext23:
  6027                           	callstack 0
  6028   003C80                     _moveLightBlue:
  6029                           	callstack 25
  6030   003C80                     
  6031                           ;dc_motor.c: 302: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 303: {;dc_motor.c: 305:     backHalf(mL,mR);
  6032   003C80  C01C  F018         	movff	moveLightBlue@mL,backHalf@mL
  6033   003C84  C01D  F019         	movff	moveLightBlue@mR,backHalf@mR
  6034   003C88  ECEF  F01E         	call	_backHalf	;wreg free
  6035   003C8C                     
  6036                           ;dc_motor.c: 306:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6037   003C8C  0E29               	movlw	41
  6038   003C8E  6E1F               	movwf	(??_moveLightBlue+1)^0,c
  6039   003C90  0E96               	movlw	150
  6040   003C92  6E1E               	movwf	??_moveLightBlue^0,c
  6041   003C94  0E7F               	movlw	127
  6042   003C96                     u4537:
  6043   003C96  2EE8               	decfsz	wreg,f,c
  6044   003C98  D7FE               	bra	u4537
  6045   003C9A  2E1E               	decfsz	??_moveLightBlue^0,f,c
  6046   003C9C  D7FC               	bra	u4537
  6047   003C9E  2E1F               	decfsz	(??_moveLightBlue+1)^0,f,c
  6048   003CA0  D7FA               	bra	u4537
  6049   003CA2  0000               	nop	
  6050   003CA4                     
  6051                           ;dc_motor.c: 307:     left135(mL,mR);
  6052   003CA4  C01C  F018         	movff	moveLightBlue@mL,left135@mL
  6053   003CA8  C01D  F019         	movff	moveLightBlue@mR,left135@mR
  6054   003CAC  EC59  F01E         	call	_left135	;wreg free
  6055   003CB0  0012               	return		;funcret
  6056   003CB2                     __end_of_moveLightBlue:
  6057                           	callstack 0
  6058                           
  6059 ;; *************** function _left135 *****************
  6060 ;; Defined at:
  6061 ;;		line 225 in file "dc_motor.c"
  6062 ;; Parameters:    Size  Location     Type
  6063 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6064 ;;		 -> motorL(9), 
  6065 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6066 ;;		 -> motorR(9), 
  6067 ;; Auto vars:     Size  Location     Type
  6068 ;;		None
  6069 ;; Return value:  Size  Location     Type
  6070 ;;                  1    wreg      void 
  6071 ;; Registers used:
  6072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6073 ;; Tracked objects:
  6074 ;;		On entry : 0/0
  6075 ;;		On exit  : 0/0
  6076 ;;		Unchanged: 0/0
  6077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6078 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6080 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6081 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6082 ;;Total ram usage:        4 bytes
  6083 ;; Hardware stack levels used: 1
  6084 ;; Hardware stack levels required when called: 3
  6085 ;; This function calls:
  6086 ;;		_stop
  6087 ;;		_turnLeft
  6088 ;; This function is called by:
  6089 ;;		_moveLightBlue
  6090 ;; This function uses a non-reentrant model
  6091 ;;
  6092                           
  6093                           	psect	text24
  6094   003CB2                     __ptext24:
  6095                           	callstack 0
  6096   003CB2                     _left135:
  6097                           	callstack 25
  6098   003CB2                     
  6099                           ;dc_motor.c: 225: void left135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 226
      +                          : {;dc_motor.c: 227:     turnLeft(mL,mR);
  6100   003CB2  C018  F013         	movff	left135@mL,turnLeft@mL
  6101   003CB6  C019  F014         	movff	left135@mR,turnLeft@mR
  6102   003CBA  EC10  F01B         	call	_turnLeft	;wreg free
  6103   003CBE                     
  6104                           ;dc_motor.c: 228:     _delay((unsigned long)((400)*(64000000/4000.0)));
  6105   003CBE  0E21               	movlw	33
  6106   003CC0  6E1B               	movwf	(??_left135+1)^0,c
  6107   003CC2  0E78               	movlw	120
  6108   003CC4  6E1A               	movwf	??_left135^0,c
  6109   003CC6  0E98               	movlw	152
  6110   003CC8                     u4547:
  6111   003CC8  2EE8               	decfsz	wreg,f,c
  6112   003CCA  D7FE               	bra	u4547
  6113   003CCC  2E1A               	decfsz	??_left135^0,f,c
  6114   003CCE  D7FC               	bra	u4547
  6115   003CD0  2E1B               	decfsz	(??_left135+1)^0,f,c
  6116   003CD2  D7FA               	bra	u4547
  6117   003CD4  D000               	nop2	
  6118   003CD6                     
  6119                           ;dc_motor.c: 229:     stop(mL,mR);
  6120   003CD6  C018  F013         	movff	left135@mL,stop@mL
  6121   003CDA  C019  F014         	movff	left135@mR,stop@mR
  6122   003CDE  EC8A  F01A         	call	_stop	;wreg free
  6123   003CE2  0012               	return		;funcret
  6124   003CE4                     __end_of_left135:
  6125                           	callstack 0
  6126                           
  6127 ;; *************** function _moveGreen *****************
  6128 ;; Defined at:
  6129 ;;		line 262 in file "dc_motor.c"
  6130 ;; Parameters:    Size  Location     Type
  6131 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6132 ;;		 -> motorL(9), 
  6133 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6134 ;;		 -> motorR(9), 
  6135 ;; Auto vars:     Size  Location     Type
  6136 ;;		None
  6137 ;; Return value:  Size  Location     Type
  6138 ;;                  1    wreg      void 
  6139 ;; Registers used:
  6140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6141 ;; Tracked objects:
  6142 ;;		On entry : 0/0
  6143 ;;		On exit  : 0/0
  6144 ;;		Unchanged: 0/0
  6145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6146 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6148 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6149 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6150 ;;Total ram usage:        4 bytes
  6151 ;; Hardware stack levels used: 1
  6152 ;; Hardware stack levels required when called: 4
  6153 ;; This function calls:
  6154 ;;		_backHalf
  6155 ;;		_left90
  6156 ;; This function is called by:
  6157 ;;		_decision
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           	psect	text25
  6162   003CE4                     __ptext25:
  6163                           	callstack 0
  6164   003CE4                     _moveGreen:
  6165                           	callstack 25
  6166   003CE4                     
  6167                           ;dc_motor.c: 262: void moveGreen(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 2
      +                          63: {;dc_motor.c: 265:     backHalf(mL,mR);
  6168   003CE4  C01C  F018         	movff	moveGreen@mL,backHalf@mL
  6169   003CE8  C01D  F019         	movff	moveGreen@mR,backHalf@mR
  6170   003CEC  ECEF  F01E         	call	_backHalf	;wreg free
  6171   003CF0                     
  6172                           ;dc_motor.c: 266:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6173   003CF0  0E29               	movlw	41
  6174   003CF2  6E1F               	movwf	(??_moveGreen+1)^0,c
  6175   003CF4  0E96               	movlw	150
  6176   003CF6  6E1E               	movwf	??_moveGreen^0,c
  6177   003CF8  0E7F               	movlw	127
  6178   003CFA                     u4557:
  6179   003CFA  2EE8               	decfsz	wreg,f,c
  6180   003CFC  D7FE               	bra	u4557
  6181   003CFE  2E1E               	decfsz	??_moveGreen^0,f,c
  6182   003D00  D7FC               	bra	u4557
  6183   003D02  2E1F               	decfsz	(??_moveGreen+1)^0,f,c
  6184   003D04  D7FA               	bra	u4557
  6185   003D06  0000               	nop	
  6186   003D08                     
  6187                           ;dc_motor.c: 267:     left90(mL,mR);
  6188   003D08  C01C  F018         	movff	moveGreen@mL,left90@mL
  6189   003D0C  C01D  F019         	movff	moveGreen@mR,left90@mR
  6190   003D10  EC8B  F01E         	call	_left90	;wreg free
  6191   003D14  0012               	return		;funcret
  6192   003D16                     __end_of_moveGreen:
  6193                           	callstack 0
  6194                           
  6195 ;; *************** function _left90 *****************
  6196 ;; Defined at:
  6197 ;;		line 201 in file "dc_motor.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6200 ;;		 -> motorL(9), 
  6201 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6202 ;;		 -> motorR(9), 
  6203 ;; Auto vars:     Size  Location     Type
  6204 ;;		None
  6205 ;; Return value:  Size  Location     Type
  6206 ;;                  1    wreg      void 
  6207 ;; Registers used:
  6208 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6209 ;; Tracked objects:
  6210 ;;		On entry : 0/0
  6211 ;;		On exit  : 0/0
  6212 ;;		Unchanged: 0/0
  6213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6214 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6216 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6217 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6218 ;;Total ram usage:        4 bytes
  6219 ;; Hardware stack levels used: 1
  6220 ;; Hardware stack levels required when called: 3
  6221 ;; This function calls:
  6222 ;;		_stop
  6223 ;;		_turnLeft
  6224 ;; This function is called by:
  6225 ;;		_moveGreen
  6226 ;;		_movePink
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           	psect	text26
  6231   003D16                     __ptext26:
  6232                           	callstack 0
  6233   003D16                     _left90:
  6234                           	callstack 25
  6235   003D16                     
  6236                           ;dc_motor.c: 201: void left90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 202:
      +                           {;dc_motor.c: 203:     turnLeft(mL,mR);
  6237   003D16  C018  F013         	movff	left90@mL,turnLeft@mL
  6238   003D1A  C019  F014         	movff	left90@mR,turnLeft@mR
  6239   003D1E  EC10  F01B         	call	_turnLeft	;wreg free
  6240   003D22                     
  6241                           ;dc_motor.c: 204:     _delay((unsigned long)((260)*(64000000/4000.0)));
  6242   003D22  0E16               	movlw	22
  6243   003D24  6E1B               	movwf	(??_left90+1)^0,c
  6244   003D26  0E1B               	movlw	27
  6245   003D28  6E1A               	movwf	??_left90^0,c
  6246   003D2A  0E88               	movlw	136
  6247   003D2C                     u4567:
  6248   003D2C  2EE8               	decfsz	wreg,f,c
  6249   003D2E  D7FE               	bra	u4567
  6250   003D30  2E1A               	decfsz	??_left90^0,f,c
  6251   003D32  D7FC               	bra	u4567
  6252   003D34  2E1B               	decfsz	(??_left90+1)^0,f,c
  6253   003D36  D7FA               	bra	u4567
  6254   003D38  D000               	nop2	
  6255   003D3A                     
  6256                           ;dc_motor.c: 205:     stop(mL,mR);
  6257   003D3A  C018  F013         	movff	left90@mL,stop@mL
  6258   003D3E  C019  F014         	movff	left90@mR,stop@mR
  6259   003D42  EC8A  F01A         	call	_stop	;wreg free
  6260   003D46  0012               	return		;funcret
  6261   003D48                     __end_of_left90:
  6262                           	callstack 0
  6263                           
  6264 ;; *************** function _moveBlue *****************
  6265 ;; Defined at:
  6266 ;;		line 270 in file "dc_motor.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6269 ;;		 -> motorL(9), 
  6270 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6271 ;;		 -> motorR(9), 
  6272 ;; Auto vars:     Size  Location     Type
  6273 ;;		None
  6274 ;; Return value:  Size  Location     Type
  6275 ;;                  1    wreg      void 
  6276 ;; Registers used:
  6277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6278 ;; Tracked objects:
  6279 ;;		On entry : 0/0
  6280 ;;		On exit  : 0/0
  6281 ;;		Unchanged: 0/0
  6282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6283 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6285 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6286 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6287 ;;Total ram usage:        4 bytes
  6288 ;; Hardware stack levels used: 1
  6289 ;; Hardware stack levels required when called: 4
  6290 ;; This function calls:
  6291 ;;		_backHalf
  6292 ;;		_turn180
  6293 ;; This function is called by:
  6294 ;;		_decision
  6295 ;; This function uses a non-reentrant model
  6296 ;;
  6297                           
  6298                           	psect	text27
  6299   003D48                     __ptext27:
  6300                           	callstack 0
  6301   003D48                     _moveBlue:
  6302                           	callstack 25
  6303   003D48                     
  6304                           ;dc_motor.c: 270: void moveBlue(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 27
      +                          1: {;dc_motor.c: 273:     backHalf(mL,mR);
  6305   003D48  C01C  F018         	movff	moveBlue@mL,backHalf@mL
  6306   003D4C  C01D  F019         	movff	moveBlue@mR,backHalf@mR
  6307   003D50  ECEF  F01E         	call	_backHalf	;wreg free
  6308   003D54                     
  6309                           ;dc_motor.c: 274:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6310   003D54  0E29               	movlw	41
  6311   003D56  6E1F               	movwf	(??_moveBlue+1)^0,c
  6312   003D58  0E96               	movlw	150
  6313   003D5A  6E1E               	movwf	??_moveBlue^0,c
  6314   003D5C  0E7F               	movlw	127
  6315   003D5E                     u4577:
  6316   003D5E  2EE8               	decfsz	wreg,f,c
  6317   003D60  D7FE               	bra	u4577
  6318   003D62  2E1E               	decfsz	??_moveBlue^0,f,c
  6319   003D64  D7FC               	bra	u4577
  6320   003D66  2E1F               	decfsz	(??_moveBlue+1)^0,f,c
  6321   003D68  D7FA               	bra	u4577
  6322   003D6A  0000               	nop	
  6323   003D6C                     
  6324                           ;dc_motor.c: 275:     turn180(mL,mR);
  6325   003D6C  C01C  F018         	movff	moveBlue@mL,turn180@mL
  6326   003D70  C01D  F019         	movff	moveBlue@mR,turn180@mR
  6327   003D74  ECBD  F01E         	call	_turn180	;wreg free
  6328   003D78  0012               	return		;funcret
  6329   003D7A                     __end_of_moveBlue:
  6330                           	callstack 0
  6331                           
  6332 ;; *************** function _turn180 *****************
  6333 ;; Defined at:
  6334 ;;		line 209 in file "dc_motor.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6337 ;;		 -> motorL(9), 
  6338 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6339 ;;		 -> motorR(9), 
  6340 ;; Auto vars:     Size  Location     Type
  6341 ;;		None
  6342 ;; Return value:  Size  Location     Type
  6343 ;;                  1    wreg      void 
  6344 ;; Registers used:
  6345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6346 ;; Tracked objects:
  6347 ;;		On entry : 0/0
  6348 ;;		On exit  : 0/0
  6349 ;;		Unchanged: 0/0
  6350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6351 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6353 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6354 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6355 ;;Total ram usage:        4 bytes
  6356 ;; Hardware stack levels used: 1
  6357 ;; Hardware stack levels required when called: 3
  6358 ;; This function calls:
  6359 ;;		_stop
  6360 ;;		_turnLeft
  6361 ;; This function is called by:
  6362 ;;		_moveBlue
  6363 ;; This function uses a non-reentrant model
  6364 ;;
  6365                           
  6366                           	psect	text28
  6367   003D7A                     __ptext28:
  6368                           	callstack 0
  6369   003D7A                     _turn180:
  6370                           	callstack 25
  6371   003D7A                     
  6372                           ;dc_motor.c: 209: void turn180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 210
      +                          : {;dc_motor.c: 211:     turnLeft(mL,mR);
  6373   003D7A  C018  F013         	movff	turn180@mL,turnLeft@mL
  6374   003D7E  C019  F014         	movff	turn180@mR,turnLeft@mR
  6375   003D82  EC10  F01B         	call	_turnLeft	;wreg free
  6376   003D86                     
  6377                           ;dc_motor.c: 212:     _delay((unsigned long)((520)*(64000000/4000.0)));
  6378   003D86  0E2B               	movlw	43
  6379   003D88  6E1B               	movwf	(??_turn180+1)^0,c
  6380   003D8A  0E36               	movlw	54
  6381   003D8C  6E1A               	movwf	??_turn180^0,c
  6382   003D8E  0E13               	movlw	19
  6383   003D90                     u4587:
  6384   003D90  2EE8               	decfsz	wreg,f,c
  6385   003D92  D7FE               	bra	u4587
  6386   003D94  2E1A               	decfsz	??_turn180^0,f,c
  6387   003D96  D7FC               	bra	u4587
  6388   003D98  2E1B               	decfsz	(??_turn180+1)^0,f,c
  6389   003D9A  D7FA               	bra	u4587
  6390   003D9C  0000               	nop	
  6391   003D9E                     
  6392                           ;dc_motor.c: 213:     stop(mL,mR);
  6393   003D9E  C018  F013         	movff	turn180@mL,stop@mL
  6394   003DA2  C019  F014         	movff	turn180@mR,stop@mR
  6395   003DA6  EC8A  F01A         	call	_stop	;wreg free
  6396   003DAA  0012               	return		;funcret
  6397   003DAC                     __end_of_turn180:
  6398                           	callstack 0
  6399                           
  6400 ;; *************** function _turnLeft *****************
  6401 ;; Defined at:
  6402 ;;		line 105 in file "dc_motor.c"
  6403 ;; Parameters:    Size  Location     Type
  6404 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  6405 ;;		 -> motorL(9), 
  6406 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  6407 ;;		 -> motorR(9), 
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;  i               2   21[COMRAM] unsigned int 
  6410 ;; Return value:  Size  Location     Type
  6411 ;;                  1    wreg      void 
  6412 ;; Registers used:
  6413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6419 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6420 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6421 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6422 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6423 ;;Total ram usage:        5 bytes
  6424 ;; Hardware stack levels used: 1
  6425 ;; Hardware stack levels required when called: 2
  6426 ;; This function calls:
  6427 ;;		_setMotorPWM
  6428 ;; This function is called by:
  6429 ;;		_left90
  6430 ;;		_turn180
  6431 ;;		_left135
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           	psect	text29
  6436   003620                     __ptext29:
  6437                           	callstack 0
  6438   003620                     _turnLeft:
  6439                           	callstack 25
  6440   003620                     
  6441                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  6442   003620  5013               	movf	turnLeft@mL^0,w,c
  6443   003622  6ED9               	movwf	fsr2l,c
  6444   003624  6ADA               	clrf	fsr2h,c
  6445   003626  0E01               	movlw	1
  6446   003628  26D9               	addwf	fsr2l,f,c
  6447   00362A  6ADF               	clrf	indf2,c
  6448                           
  6449                           ;dc_motor.c: 109:     mR->direction = 1;
  6450   00362C  5014               	movf	turnLeft@mR^0,w,c
  6451   00362E  6ED9               	movwf	fsr2l,c
  6452   003630  6ADA               	clrf	fsr2h,c
  6453   003632  0E01               	movlw	1
  6454   003634  26D9               	addwf	fsr2l,f,c
  6455   003636  0E01               	movlw	1
  6456   003638  6EDF               	movwf	indf2,c
  6457   00363A                     
  6458                           ;dc_motor.c: 111:     setMotorPWM(mL);
  6459   00363A  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  6460   00363E  EC1A  F016         	call	_setMotorPWM	;wreg free
  6461   003642                     
  6462                           ;dc_motor.c: 112:     setMotorPWM(mR);
  6463   003642  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  6464   003646  EC1A  F016         	call	_setMotorPWM	;wreg free
  6465   00364A                     
  6466                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  6467   00364A  0E00               	movlw	0
  6468   00364C  6E17               	movwf	(turnLeft@i+1)^0,c
  6469   00364E  0E00               	movlw	0
  6470   003650  6E16               	movwf	turnLeft@i^0,c
  6471   003652                     l3257:
  6472                           
  6473                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  6474   003652  5013               	movf	turnLeft@mL^0,w,c
  6475   003654  6ED9               	movwf	fsr2l,c
  6476   003656  6ADA               	clrf	fsr2h,c
  6477   003658  2ADF               	incf	indf2,f,c
  6478                           
  6479                           ;dc_motor.c: 116:         mR->power++;
  6480   00365A  5014               	movf	turnLeft@mR^0,w,c
  6481   00365C  6ED9               	movwf	fsr2l,c
  6482   00365E  6ADA               	clrf	fsr2h,c
  6483   003660  2ADF               	incf	indf2,f,c
  6484   003662                     
  6485                           ;dc_motor.c: 117:         setMotorPWM(mL);
  6486   003662  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  6487   003666  EC1A  F016         	call	_setMotorPWM	;wreg free
  6488   00366A                     
  6489                           ;dc_motor.c: 118:         setMotorPWM(mR);
  6490   00366A  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  6491   00366E  EC1A  F016         	call	_setMotorPWM	;wreg free
  6492   003672                     
  6493                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  6494   003672  0E0B               	movlw	11
  6495   003674  6E15               	movwf	??_turnLeft^0,c
  6496   003676  0E62               	movlw	98
  6497   003678                     u4597:
  6498   003678  2EE8               	decfsz	wreg,f,c
  6499   00367A  D7FE               	bra	u4597
  6500   00367C  2E15               	decfsz	??_turnLeft^0,f,c
  6501   00367E  D7FC               	bra	u4597
  6502   003680  D000               	nop2	
  6503   003682                     
  6504                           ;dc_motor.c: 120:     }
  6505   003682  4A16               	infsnz	turnLeft@i^0,f,c
  6506   003684  2A17               	incf	(turnLeft@i+1)^0,f,c
  6507   003686  5017               	movf	(turnLeft@i+1)^0,w,c
  6508   003688  E109               	bnz	u2520
  6509   00368A  0E32               	movlw	50
  6510   00368C  5C16               	subwf	turnLeft@i^0,w,c
  6511   00368E  A0D8               	btfss	status,0,c
  6512   003690  EF4C  F01B         	goto	u2521
  6513   003694  EF4E  F01B         	goto	u2520
  6514   003698                     u2521:
  6515   003698  EF29  F01B         	goto	l3257
  6516   00369C                     u2520:
  6517   00369C  0012               	return		;funcret
  6518   00369E                     __end_of_turnLeft:
  6519                           	callstack 0
  6520                           
  6521 ;; *************** function _backHalf *****************
  6522 ;; Defined at:
  6523 ;;		line 233 in file "dc_motor.c"
  6524 ;; Parameters:    Size  Location     Type
  6525 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6526 ;;		 -> motorL(9), 
  6527 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6528 ;;		 -> motorR(9), 
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;		None
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  1    wreg      void 
  6533 ;; Registers used:
  6534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/0
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6540 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6542 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6543 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6544 ;;Total ram usage:        4 bytes
  6545 ;; Hardware stack levels used: 1
  6546 ;; Hardware stack levels required when called: 3
  6547 ;; This function calls:
  6548 ;;		_fullSpeedBack
  6549 ;;		_stop
  6550 ;; This function is called by:
  6551 ;;		_moveRed
  6552 ;;		_moveGreen
  6553 ;;		_moveBlue
  6554 ;;		_moveOrange
  6555 ;;		_moveLightBlue
  6556 ;; This function uses a non-reentrant model
  6557 ;;
  6558                           
  6559                           	psect	text30
  6560   003DDE                     __ptext30:
  6561                           	callstack 0
  6562   003DDE                     _backHalf:
  6563                           	callstack 25
  6564   003DDE                     
  6565                           ;dc_motor.c: 233: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          4: {;dc_motor.c: 235:     fullSpeedBack(mL,mR);
  6566   003DDE  C018  F013         	movff	backHalf@mL,fullSpeedBack@mL
  6567   003DE2  C019  F014         	movff	backHalf@mR,fullSpeedBack@mR
  6568   003DE6  EC8C  F01B         	call	_fullSpeedBack	;wreg free
  6569   003DEA                     
  6570                           ;dc_motor.c: 236:     _delay((unsigned long)((300)*(64000000/4000.0)));
  6571   003DEA  0E19               	movlw	25
  6572   003DEC  6E1B               	movwf	(??_backHalf+1)^0,c
  6573   003DEE  0E5A               	movlw	90
  6574   003DF0  6E1A               	movwf	??_backHalf^0,c
  6575   003DF2  0EB2               	movlw	178
  6576   003DF4                     u4607:
  6577   003DF4  2EE8               	decfsz	wreg,f,c
  6578   003DF6  D7FE               	bra	u4607
  6579   003DF8  2E1A               	decfsz	??_backHalf^0,f,c
  6580   003DFA  D7FC               	bra	u4607
  6581   003DFC  2E1B               	decfsz	(??_backHalf+1)^0,f,c
  6582   003DFE  D7FA               	bra	u4607
  6583   003E00                     
  6584                           ;dc_motor.c: 237:     stop(mL,mR);
  6585   003E00  C018  F013         	movff	backHalf@mL,stop@mL
  6586   003E04  C019  F014         	movff	backHalf@mR,stop@mR
  6587   003E08  EC8A  F01A         	call	_stop	;wreg free
  6588   003E0C  0012               	return		;funcret
  6589   003E0E                     __end_of_backHalf:
  6590                           	callstack 0
  6591                           
  6592 ;; *************** function _stop *****************
  6593 ;; Defined at:
  6594 ;;		line 88 in file "dc_motor.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  6597 ;;		 -> motorL(9), 
  6598 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  6599 ;;		 -> motorR(9), 
  6600 ;; Auto vars:     Size  Location     Type
  6601 ;;		None
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  1    wreg      void 
  6604 ;; Registers used:
  6605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6611 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6613 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6614 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6615 ;;Total ram usage:        3 bytes
  6616 ;; Hardware stack levels used: 1
  6617 ;; Hardware stack levels required when called: 2
  6618 ;; This function calls:
  6619 ;;		_setMotorPWM
  6620 ;; This function is called by:
  6621 ;;		_main
  6622 ;;		_right90
  6623 ;;		_left90
  6624 ;;		_turn180
  6625 ;;		_right135
  6626 ;;		_left135
  6627 ;;		_backHalf
  6628 ;;		_backOneAndHalf
  6629 ;; This function uses a non-reentrant model
  6630 ;;
  6631                           
  6632                           	psect	text31
  6633   003514                     __ptext31:
  6634                           	callstack 0
  6635   003514                     _stop:
  6636                           	callstack 28
  6637   003514                     
  6638                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  6639   003514  EFBA  F01A         	goto	l3241
  6640   003518                     l3227:
  6641                           
  6642                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  6643   003518  5013               	movf	stop@mL^0,w,c
  6644   00351A  6ED9               	movwf	fsr2l,c
  6645   00351C  6ADA               	clrf	fsr2h,c
  6646   00351E  50DF               	movf	indf2,w,c
  6647   003520  B4D8               	btfsc	status,2,c
  6648   003522  EF95  F01A         	goto	u2481
  6649   003526  EF97  F01A         	goto	u2480
  6650   00352A                     u2481:
  6651   00352A  EF9B  F01A         	goto	l3231
  6652   00352E                     u2480:
  6653   00352E  5013               	movf	stop@mL^0,w,c
  6654   003530  6ED9               	movwf	fsr2l,c
  6655   003532  6ADA               	clrf	fsr2h,c
  6656   003534  06DF               	decf	indf2,f,c
  6657   003536                     l3231:
  6658                           
  6659                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  6660   003536  5014               	movf	stop@mR^0,w,c
  6661   003538  6ED9               	movwf	fsr2l,c
  6662   00353A  6ADA               	clrf	fsr2h,c
  6663   00353C  50DF               	movf	indf2,w,c
  6664   00353E  B4D8               	btfsc	status,2,c
  6665   003540  EFA4  F01A         	goto	u2491
  6666   003544  EFA6  F01A         	goto	u2490
  6667   003548                     u2491:
  6668   003548  EFAA  F01A         	goto	l3235
  6669   00354C                     u2490:
  6670   00354C  5014               	movf	stop@mR^0,w,c
  6671   00354E  6ED9               	movwf	fsr2l,c
  6672   003550  6ADA               	clrf	fsr2h,c
  6673   003552  06DF               	decf	indf2,f,c
  6674   003554                     l3235:
  6675                           
  6676                           ;dc_motor.c: 96:         setMotorPWM(mL);
  6677   003554  C013  F00E         	movff	stop@mL,setMotorPWM@m
  6678   003558  EC1A  F016         	call	_setMotorPWM	;wreg free
  6679   00355C                     
  6680                           ;dc_motor.c: 97:         setMotorPWM(mR);
  6681   00355C  C014  F00E         	movff	stop@mR,setMotorPWM@m
  6682   003560  EC1A  F016         	call	_setMotorPWM	;wreg free
  6683   003564                     
  6684                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  6685   003564  0E0B               	movlw	11
  6686   003566  6E15               	movwf	??_stop^0,c
  6687   003568  0E62               	movlw	98
  6688   00356A                     u4617:
  6689   00356A  2EE8               	decfsz	wreg,f,c
  6690   00356C  D7FE               	bra	u4617
  6691   00356E  2E15               	decfsz	??_stop^0,f,c
  6692   003570  D7FC               	bra	u4617
  6693   003572  D000               	nop2	
  6694   003574                     l3241:
  6695                           
  6696                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  6697   003574  5013               	movf	stop@mL^0,w,c
  6698   003576  6ED9               	movwf	fsr2l,c
  6699   003578  6ADA               	clrf	fsr2h,c
  6700   00357A  50DF               	movf	indf2,w,c
  6701   00357C  A4D8               	btfss	status,2,c
  6702   00357E  EFC3  F01A         	goto	u2501
  6703   003582  EFC5  F01A         	goto	u2500
  6704   003586                     u2501:
  6705   003586  EF8C  F01A         	goto	l3227
  6706   00358A                     u2500:
  6707   00358A  5014               	movf	stop@mR^0,w,c
  6708   00358C  6ED9               	movwf	fsr2l,c
  6709   00358E  6ADA               	clrf	fsr2h,c
  6710   003590  50DF               	movf	indf2,w,c
  6711   003592  A4D8               	btfss	status,2,c
  6712   003594  EFCE  F01A         	goto	u2511
  6713   003598  EFD0  F01A         	goto	u2510
  6714   00359C                     u2511:
  6715   00359C  EF8C  F01A         	goto	l3227
  6716   0035A0                     u2510:
  6717   0035A0  0012               	return		;funcret
  6718   0035A2                     __end_of_stop:
  6719                           	callstack 0
  6720                           
  6721 ;; *************** function _fullSpeedBack *****************
  6722 ;; Defined at:
  6723 ;;		line 165 in file "dc_motor.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  6726 ;;		 -> motorL(9), 
  6727 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  6728 ;;		 -> motorR(9), 
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;  power           2   21[COMRAM] int 
  6731 ;; Return value:  Size  Location     Type
  6732 ;;                  1    wreg      void 
  6733 ;; Registers used:
  6734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6740 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6741 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6742 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6743 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6744 ;;Total ram usage:        5 bytes
  6745 ;; Hardware stack levels used: 1
  6746 ;; Hardware stack levels required when called: 2
  6747 ;; This function calls:
  6748 ;;		_setMotorPWM
  6749 ;; This function is called by:
  6750 ;;		_backHalf
  6751 ;;		_backOneAndHalf
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           	psect	text32
  6756   003718                     __ptext32:
  6757                           	callstack 0
  6758   003718                     _fullSpeedBack:
  6759                           	callstack 25
  6760   003718                     
  6761                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  6762   003718  5013               	movf	fullSpeedBack@mL^0,w,c
  6763   00371A  6ED9               	movwf	fsr2l,c
  6764   00371C  6ADA               	clrf	fsr2h,c
  6765   00371E  0E01               	movlw	1
  6766   003720  26D9               	addwf	fsr2l,f,c
  6767   003722  6ADF               	clrf	indf2,c
  6768                           
  6769                           ;dc_motor.c: 169:     mR->direction = 0;
  6770   003724  5014               	movf	fullSpeedBack@mR^0,w,c
  6771   003726  6ED9               	movwf	fsr2l,c
  6772   003728  6ADA               	clrf	fsr2h,c
  6773   00372A  0E01               	movlw	1
  6774   00372C  26D9               	addwf	fsr2l,f,c
  6775   00372E  6ADF               	clrf	indf2,c
  6776   003730                     
  6777                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  6778   003730  0E00               	movlw	0
  6779   003732  6E17               	movwf	(fullSpeedBack@power+1)^0,c
  6780   003734  0E00               	movlw	0
  6781   003736  6E16               	movwf	fullSpeedBack@power^0,c
  6782   003738                     l3301:
  6783                           
  6784                           ;dc_motor.c: 172:         mL->power = power;
  6785   003738  5013               	movf	fullSpeedBack@mL^0,w,c
  6786   00373A  6ED9               	movwf	fsr2l,c
  6787   00373C  6ADA               	clrf	fsr2h,c
  6788   00373E  C016  FFDF         	movff	fullSpeedBack@power,indf2
  6789                           
  6790                           ;dc_motor.c: 173:         mR->power = power;
  6791   003742  5014               	movf	fullSpeedBack@mR^0,w,c
  6792   003744  6ED9               	movwf	fsr2l,c
  6793   003746  6ADA               	clrf	fsr2h,c
  6794   003748  C016  FFDF         	movff	fullSpeedBack@power,indf2
  6795   00374C                     
  6796                           ;dc_motor.c: 176:         setMotorPWM(mL);
  6797   00374C  C013  F00E         	movff	fullSpeedBack@mL,setMotorPWM@m
  6798   003750  EC1A  F016         	call	_setMotorPWM	;wreg free
  6799   003754                     
  6800                           ;dc_motor.c: 177:         setMotorPWM(mR);
  6801   003754  C014  F00E         	movff	fullSpeedBack@mR,setMotorPWM@m
  6802   003758  EC1A  F016         	call	_setMotorPWM	;wreg free
  6803   00375C                     
  6804                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  6805   00375C  0E0B               	movlw	11
  6806   00375E  6E15               	movwf	??_fullSpeedBack^0,c
  6807   003760  0E62               	movlw	98
  6808   003762                     u4627:
  6809   003762  2EE8               	decfsz	wreg,f,c
  6810   003764  D7FE               	bra	u4627
  6811   003766  2E15               	decfsz	??_fullSpeedBack^0,f,c
  6812   003768  D7FC               	bra	u4627
  6813   00376A  D000               	nop2	
  6814   00376C                     
  6815                           ;dc_motor.c: 181:     }
  6816   00376C  4A16               	infsnz	fullSpeedBack@power^0,f,c
  6817   00376E  2A17               	incf	(fullSpeedBack@power+1)^0,f,c
  6818   003770  BE17               	btfsc	(fullSpeedBack@power+1)^0,7,c
  6819   003772  EFC4  F01B         	goto	u2541
  6820   003776  5017               	movf	(fullSpeedBack@power+1)^0,w,c
  6821   003778  E109               	bnz	u2540
  6822   00377A  0E33               	movlw	51
  6823   00377C  5C16               	subwf	fullSpeedBack@power^0,w,c
  6824   00377E  A0D8               	btfss	status,0,c
  6825   003780  EFC4  F01B         	goto	u2541
  6826   003784  EFC6  F01B         	goto	u2540
  6827   003788                     u2541:
  6828   003788  EF9C  F01B         	goto	l3301
  6829   00378C                     u2540:
  6830   00378C  0012               	return		;funcret
  6831   00378E                     __end_of_fullSpeedBack:
  6832                           	callstack 0
  6833                           
  6834 ;; *************** function _setMotorPWM *****************
  6835 ;; Defined at:
  6836 ;;		line 65 in file "dc_motor.c"
  6837 ;; Parameters:    Size  Location     Type
  6838 ;;  m               1   13[COMRAM] PTR struct DC_motor
  6839 ;;		 -> motorR(9), motorL(9), 
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;  negDuty         1   17[COMRAM] unsigned char 
  6842 ;;  posDuty         1   16[COMRAM] unsigned char 
  6843 ;; Return value:  Size  Location     Type
  6844 ;;                  1    wreg      void 
  6845 ;; Registers used:
  6846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6847 ;; Tracked objects:
  6848 ;;		On entry : 0/0
  6849 ;;		On exit  : 0/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6852 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6853 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6854 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6855 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6856 ;;Total ram usage:        5 bytes
  6857 ;; Hardware stack levels used: 1
  6858 ;; Hardware stack levels required when called: 1
  6859 ;; This function calls:
  6860 ;;		___lwdiv
  6861 ;;		___wmul
  6862 ;; This function is called by:
  6863 ;;		_stop
  6864 ;;		_turnLeft
  6865 ;;		_turnRight
  6866 ;;		_fullSpeedAhead
  6867 ;;		_fullSpeedBack
  6868 ;; This function uses a non-reentrant model
  6869 ;;
  6870                           
  6871                           	psect	text33
  6872   002C34                     __ptext33:
  6873                           	callstack 0
  6874   002C34                     _setMotorPWM:
  6875                           	callstack 28
  6876   002C34                     
  6877                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  6878   002C34  500E               	movf	setMotorPWM@m^0,w,c
  6879   002C36  6ED9               	movwf	fsr2l,c
  6880   002C38  6ADA               	clrf	fsr2h,c
  6881   002C3A  0E02               	movlw	2
  6882   002C3C  26D9               	addwf	fsr2l,f,c
  6883   002C3E  50DF               	movf	indf2,w,c
  6884   002C40  B4D8               	btfsc	status,2,c
  6885   002C42  EF25  F016         	goto	u2321
  6886   002C46  EF27  F016         	goto	u2320
  6887   002C4A                     u2321:
  6888   002C4A  EF57  F016         	goto	l3147
  6889   002C4E                     u2320:
  6890   002C4E                     
  6891                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6892   002C4E  500E               	movf	setMotorPWM@m^0,w,c
  6893   002C50  6ED9               	movwf	fsr2l,c
  6894   002C52  6ADA               	clrf	fsr2h,c
  6895   002C54  50DF               	movf	indf2,w,c
  6896   002C56  6E0F               	movwf	??_setMotorPWM^0,c
  6897   002C58  500F               	movf	??_setMotorPWM^0,w,c
  6898   002C5A  6E01               	movwf	___wmul@multiplier^0,c
  6899   002C5C  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6900   002C5E  500E               	movf	setMotorPWM@m^0,w,c
  6901   002C60  6ED9               	movwf	fsr2l,c
  6902   002C62  6ADA               	clrf	fsr2h,c
  6903   002C64  0E03               	movlw	3
  6904   002C66  26D9               	addwf	fsr2l,f,c
  6905   002C68  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6906   002C6C  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6907   002C70  EC30  F01F         	call	___wmul	;wreg free
  6908   002C74  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6909   002C78  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6910   002C7C  0E00               	movlw	0
  6911   002C7E  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6912   002C80  0E64               	movlw	100
  6913   002C82  6E09               	movwf	___lwdiv@divisor^0,c
  6914   002C84  ECC7  F01B         	call	___lwdiv	;wreg free
  6915   002C88  500E               	movf	setMotorPWM@m^0,w,c
  6916   002C8A  6ED9               	movwf	fsr2l,c
  6917   002C8C  6ADA               	clrf	fsr2h,c
  6918   002C8E  0E03               	movlw	3
  6919   002C90  26D9               	addwf	fsr2l,f,c
  6920   002C92  50DF               	movf	indf2,w,c
  6921   002C94  6E10               	movwf	(??_setMotorPWM+1)^0,c
  6922   002C96  5007               	movf	?___lwdiv^0,w,c
  6923   002C98  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  6924   002C9A  6E11               	movwf	setMotorPWM@posDuty^0,c
  6925   002C9C                     
  6926                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  6927   002C9C  500E               	movf	setMotorPWM@m^0,w,c
  6928   002C9E  6ED9               	movwf	fsr2l,c
  6929   002CA0  6ADA               	clrf	fsr2h,c
  6930   002CA2  0E03               	movlw	3
  6931   002CA4  26D9               	addwf	fsr2l,f,c
  6932   002CA6  50DF               	movf	indf2,w,c
  6933   002CA8  6E12               	movwf	setMotorPWM@negDuty^0,c
  6934                           
  6935                           ;dc_motor.c: 72:     }
  6936   002CAA  EF78  F016         	goto	l3151
  6937   002CAE                     l3147:
  6938                           
  6939                           ;dc_motor.c: 74:         posDuty=0;
  6940   002CAE  0E00               	movlw	0
  6941   002CB0  6E11               	movwf	setMotorPWM@posDuty^0,c
  6942   002CB2                     
  6943                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6944   002CB2  500E               	movf	setMotorPWM@m^0,w,c
  6945   002CB4  6ED9               	movwf	fsr2l,c
  6946   002CB6  6ADA               	clrf	fsr2h,c
  6947   002CB8  50DF               	movf	indf2,w,c
  6948   002CBA  6E0F               	movwf	??_setMotorPWM^0,c
  6949   002CBC  500F               	movf	??_setMotorPWM^0,w,c
  6950   002CBE  6E01               	movwf	___wmul@multiplier^0,c
  6951   002CC0  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6952   002CC2  500E               	movf	setMotorPWM@m^0,w,c
  6953   002CC4  6ED9               	movwf	fsr2l,c
  6954   002CC6  6ADA               	clrf	fsr2h,c
  6955   002CC8  0E03               	movlw	3
  6956   002CCA  26D9               	addwf	fsr2l,f,c
  6957   002CCC  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6958   002CD0  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6959   002CD4  EC30  F01F         	call	___wmul	;wreg free
  6960   002CD8  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6961   002CDC  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6962   002CE0  0E00               	movlw	0
  6963   002CE2  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6964   002CE4  0E64               	movlw	100
  6965   002CE6  6E09               	movwf	___lwdiv@divisor^0,c
  6966   002CE8  ECC7  F01B         	call	___lwdiv	;wreg free
  6967   002CEC  5007               	movf	?___lwdiv^0,w,c
  6968   002CEE  6E12               	movwf	setMotorPWM@negDuty^0,c
  6969   002CF0                     l3151:
  6970                           
  6971                           ;dc_motor.c: 78:     if (m->direction) {
  6972   002CF0  500E               	movf	setMotorPWM@m^0,w,c
  6973   002CF2  6ED9               	movwf	fsr2l,c
  6974   002CF4  6ADA               	clrf	fsr2h,c
  6975   002CF6  0E01               	movlw	1
  6976   002CF8  26D9               	addwf	fsr2l,f,c
  6977   002CFA  50DF               	movf	indf2,w,c
  6978   002CFC  B4D8               	btfsc	status,2,c
  6979   002CFE  EF83  F016         	goto	u2331
  6980   002D02  EF85  F016         	goto	u2330
  6981   002D06                     u2331:
  6982   002D06  EFA5  F016         	goto	l3155
  6983   002D0A                     u2330:
  6984   002D0A                     
  6985                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  6986   002D0A  500E               	movf	setMotorPWM@m^0,w,c
  6987   002D0C  6ED9               	movwf	fsr2l,c
  6988   002D0E  6ADA               	clrf	fsr2h,c
  6989   002D10  0E05               	movlw	5
  6990   002D12  26D9               	addwf	fsr2l,f,c
  6991   002D14  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6992   002D18  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6993   002D1C  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6994   002D20  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6995   002D24  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  6996                           
  6997                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  6998   002D28  500E               	movf	setMotorPWM@m^0,w,c
  6999   002D2A  6ED9               	movwf	fsr2l,c
  7000   002D2C  6ADA               	clrf	fsr2h,c
  7001   002D2E  0E07               	movlw	7
  7002   002D30  26D9               	addwf	fsr2l,f,c
  7003   002D32  CFDE F00F          	movff	postinc2,??_setMotorPWM
  7004   002D36  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  7005   002D3A  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  7006   002D3E  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7007   002D42  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  7008                           
  7009                           ;dc_motor.c: 81:     } else {
  7010   002D46  EFC3  F016         	goto	l378
  7011   002D4A                     l3155:
  7012                           
  7013                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  7014   002D4A  500E               	movf	setMotorPWM@m^0,w,c
  7015   002D4C  6ED9               	movwf	fsr2l,c
  7016   002D4E  6ADA               	clrf	fsr2h,c
  7017   002D50  0E05               	movlw	5
  7018   002D52  26D9               	addwf	fsr2l,f,c
  7019   002D54  CFDE F00F          	movff	postinc2,??_setMotorPWM
  7020   002D58  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  7021   002D5C  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  7022   002D60  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7023   002D64  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  7024                           
  7025                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  7026   002D68  500E               	movf	setMotorPWM@m^0,w,c
  7027   002D6A  6ED9               	movwf	fsr2l,c
  7028   002D6C  6ADA               	clrf	fsr2h,c
  7029   002D6E  0E07               	movlw	7
  7030   002D70  26D9               	addwf	fsr2l,f,c
  7031   002D72  CFDE F00F          	movff	postinc2,??_setMotorPWM
  7032   002D76  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  7033   002D7A  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  7034   002D7E  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7035   002D82  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  7036   002D86                     l378:
  7037   002D86  0012               	return		;funcret
  7038   002D88                     __end_of_setMotorPWM:
  7039                           	callstack 0
  7040                           
  7041 ;; *************** function ___lwdiv *****************
  7042 ;; Defined at:
  7043 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  7044 ;; Parameters:    Size  Location     Type
  7045 ;;  dividend        2    6[COMRAM] unsigned int 
  7046 ;;  divisor         2    8[COMRAM] unsigned int 
  7047 ;; Auto vars:     Size  Location     Type
  7048 ;;  quotient        2   10[COMRAM] unsigned int 
  7049 ;;  counter         1   12[COMRAM] unsigned char 
  7050 ;; Return value:  Size  Location     Type
  7051 ;;                  2    6[COMRAM] unsigned int 
  7052 ;; Registers used:
  7053 ;;		wreg, status,2, status,0
  7054 ;; Tracked objects:
  7055 ;;		On entry : 0/0
  7056 ;;		On exit  : 0/0
  7057 ;;		Unchanged: 0/0
  7058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7059 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7060 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7062 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7063 ;;Total ram usage:        7 bytes
  7064 ;; Hardware stack levels used: 1
  7065 ;; This function calls:
  7066 ;;		Nothing
  7067 ;; This function is called by:
  7068 ;;		_setMotorPWM
  7069 ;;		_ADC2String
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           	psect	text34
  7074   00378E                     __ptext34:
  7075                           	callstack 0
  7076   00378E                     ___lwdiv:
  7077                           	callstack 28
  7078   00378E  0E00               	movlw	0
  7079   003790  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  7080   003792  0E00               	movlw	0
  7081   003794  6E0B               	movwf	___lwdiv@quotient^0,c
  7082   003796  5009               	movf	___lwdiv@divisor^0,w,c
  7083   003798  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7084   00379A  B4D8               	btfsc	status,2,c
  7085   00379C  EFD2  F01B         	goto	u2241
  7086   0037A0  EFD4  F01B         	goto	u2240
  7087   0037A4                     u2241:
  7088   0037A4  EFFC  F01B         	goto	l1056
  7089   0037A8                     u2240:
  7090   0037A8  0E01               	movlw	1
  7091   0037AA  6E0D               	movwf	___lwdiv@counter^0,c
  7092   0037AC  EFDC  F01B         	goto	l3107
  7093   0037B0                     l3105:
  7094   0037B0  90D8               	bcf	status,0,c
  7095   0037B2  3609               	rlcf	___lwdiv@divisor^0,f,c
  7096   0037B4  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7097   0037B6  2A0D               	incf	___lwdiv@counter^0,f,c
  7098   0037B8                     l3107:
  7099   0037B8  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  7100   0037BA  EFE1  F01B         	goto	u2251
  7101   0037BE  EFE3  F01B         	goto	u2250
  7102   0037C2                     u2251:
  7103   0037C2  EFD8  F01B         	goto	l3105
  7104   0037C6                     u2250:
  7105   0037C6                     l3109:
  7106   0037C6  90D8               	bcf	status,0,c
  7107   0037C8  360B               	rlcf	___lwdiv@quotient^0,f,c
  7108   0037CA  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7109   0037CC  5009               	movf	___lwdiv@divisor^0,w,c
  7110   0037CE  5C07               	subwf	___lwdiv@dividend^0,w,c
  7111   0037D0  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  7112   0037D2  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7113   0037D4  A0D8               	btfss	status,0,c
  7114   0037D6  EFEF  F01B         	goto	u2261
  7115   0037DA  EFF1  F01B         	goto	u2260
  7116   0037DE                     u2261:
  7117   0037DE  EFF6  F01B         	goto	l3117
  7118   0037E2                     u2260:
  7119   0037E2  5009               	movf	___lwdiv@divisor^0,w,c
  7120   0037E4  5E07               	subwf	___lwdiv@dividend^0,f,c
  7121   0037E6  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  7122   0037E8  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7123   0037EA  800B               	bsf	___lwdiv@quotient^0,0,c
  7124   0037EC                     l3117:
  7125   0037EC  90D8               	bcf	status,0,c
  7126   0037EE  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7127   0037F0  3209               	rrcf	___lwdiv@divisor^0,f,c
  7128   0037F2  2E0D               	decfsz	___lwdiv@counter^0,f,c
  7129   0037F4  EFE3  F01B         	goto	l3109
  7130   0037F8                     l1056:
  7131   0037F8  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  7132   0037FC  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7133   003800  0012               	return		;funcret
  7134   003802                     __end_of___lwdiv:
  7135                           	callstack 0
  7136                           
  7137 ;; *************** function _color_click_init *****************
  7138 ;; Defined at:
  7139 ;;		line 8 in file "color.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;		None
  7142 ;; Auto vars:     Size  Location     Type
  7143 ;;		None
  7144 ;; Return value:  Size  Location     Type
  7145 ;;                  1    wreg      void 
  7146 ;; Registers used:
  7147 ;;		wreg, status,2, status,0, cstack
  7148 ;; Tracked objects:
  7149 ;;		On entry : 0/0
  7150 ;;		On exit  : 0/0
  7151 ;;		Unchanged: 0/0
  7152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7155 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7156 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7157 ;;Total ram usage:        1 bytes
  7158 ;; Hardware stack levels used: 1
  7159 ;; Hardware stack levels required when called: 3
  7160 ;; This function calls:
  7161 ;;		_I2C_2_Master_Init
  7162 ;;		_color_writetoaddr
  7163 ;; This function is called by:
  7164 ;;		_main
  7165 ;; This function uses a non-reentrant model
  7166 ;;
  7167                           
  7168                           	psect	text35
  7169   003A86                     __ptext35:
  7170                           	callstack 0
  7171   003A86                     _color_click_init:
  7172                           	callstack 27
  7173   003A86                     
  7174                           ;color.c: 11:     I2C_2_Master_Init();
  7175   003A86  EC07  F01F         	call	_I2C_2_Master_Init	;wreg free
  7176   003A8A                     
  7177                           ;color.c: 14:   color_writetoaddr(0x00, 0x01);
  7178   003A8A  0E01               	movlw	1
  7179   003A8C  6E03               	movwf	color_writetoaddr@value^0,c
  7180   003A8E  0E00               	movlw	0
  7181   003A90  EC43  F01F         	call	_color_writetoaddr
  7182   003A94                     
  7183                           ;color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  7184   003A94  0E3F               	movlw	63
  7185   003A96  6E05               	movwf	??_color_click_init^0,c
  7186   003A98  0E55               	movlw	85
  7187   003A9A                     u4637:
  7188   003A9A  2EE8               	decfsz	wreg,f,c
  7189   003A9C  D7FE               	bra	u4637
  7190   003A9E  2E05               	decfsz	??_color_click_init^0,f,c
  7191   003AA0  D7FC               	bra	u4637
  7192   003AA2  0000               	nop	
  7193   003AA4                     
  7194                           ;color.c: 18:  color_writetoaddr(0x00, 0x03);
  7195   003AA4  0E03               	movlw	3
  7196   003AA6  6E03               	movwf	color_writetoaddr@value^0,c
  7197   003AA8  0E00               	movlw	0
  7198   003AAA  EC43  F01F         	call	_color_writetoaddr
  7199   003AAE                     
  7200                           ;color.c: 21:  color_writetoaddr(0x01, 0xD5);
  7201   003AAE  0ED5               	movlw	213
  7202   003AB0  6E03               	movwf	color_writetoaddr@value^0,c
  7203   003AB2  0E01               	movlw	1
  7204   003AB4  EC43  F01F         	call	_color_writetoaddr
  7205   003AB8  0012               	return		;funcret
  7206   003ABA                     __end_of_color_click_init:
  7207                           	callstack 0
  7208                           
  7209 ;; *************** function _color_writetoaddr *****************
  7210 ;; Defined at:
  7211 ;;		line 24 in file "color.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;  address         1    wreg     unsigned char 
  7214 ;;  value           1    2[COMRAM] unsigned char 
  7215 ;; Auto vars:     Size  Location     Type
  7216 ;;  address         1    3[COMRAM] unsigned char 
  7217 ;; Return value:  Size  Location     Type
  7218 ;;                  1    wreg      void 
  7219 ;; Registers used:
  7220 ;;		wreg, status,2, status,0, cstack
  7221 ;; Tracked objects:
  7222 ;;		On entry : 0/0
  7223 ;;		On exit  : 0/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7226 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7227 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7229 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7230 ;;Total ram usage:        2 bytes
  7231 ;; Hardware stack levels used: 1
  7232 ;; Hardware stack levels required when called: 2
  7233 ;; This function calls:
  7234 ;;		_I2C_2_Master_Start
  7235 ;;		_I2C_2_Master_Stop
  7236 ;;		_I2C_2_Master_Write
  7237 ;; This function is called by:
  7238 ;;		_color_click_init
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           	psect	text36
  7243   003E86                     __ptext36:
  7244                           	callstack 0
  7245   003E86                     _color_writetoaddr:
  7246                           	callstack 27
  7247                           
  7248                           ;incstack = 0
  7249                           ;color_writetoaddr@address stored from wreg
  7250   003E86  6E04               	movwf	color_writetoaddr@address^0,c
  7251   003E88                     
  7252                           ;color.c: 25:     I2C_2_Master_Start();
  7253   003E88  EC86  F01F         	call	_I2C_2_Master_Start	;wreg free
  7254                           
  7255                           ;color.c: 26:     I2C_2_Master_Write(0x52 | 0x00);
  7256   003E8C  0E52               	movlw	82
  7257   003E8E  EC7B  F01F         	call	_I2C_2_Master_Write
  7258                           
  7259                           ;color.c: 27:     I2C_2_Master_Write(0x80 | address);
  7260   003E92  5004               	movf	color_writetoaddr@address^0,w,c
  7261   003E94  0980               	iorlw	128
  7262   003E96  EC7B  F01F         	call	_I2C_2_Master_Write
  7263                           
  7264                           ;color.c: 28:     I2C_2_Master_Write(value);
  7265   003E9A  5003               	movf	color_writetoaddr@value^0,w,c
  7266   003E9C  EC7B  F01F         	call	_I2C_2_Master_Write
  7267                           
  7268                           ;color.c: 29:     I2C_2_Master_Stop();
  7269   003EA0  EC81  F01F         	call	_I2C_2_Master_Stop	;wreg free
  7270   003EA4  0012               	return		;funcret
  7271   003EA6                     __end_of_color_writetoaddr:
  7272                           	callstack 0
  7273                           
  7274 ;; *************** function _I2C_2_Master_Init *****************
  7275 ;; Defined at:
  7276 ;;		line 4 in file "i2c.c"
  7277 ;; Parameters:    Size  Location     Type
  7278 ;;		None
  7279 ;; Auto vars:     Size  Location     Type
  7280 ;;		None
  7281 ;; Return value:  Size  Location     Type
  7282 ;;                  1    wreg      void 
  7283 ;; Registers used:
  7284 ;;		wreg, status,2
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7294 ;;Total ram usage:        0 bytes
  7295 ;; Hardware stack levels used: 1
  7296 ;; This function calls:
  7297 ;;		Nothing
  7298 ;; This function is called by:
  7299 ;;		_color_click_init
  7300 ;; This function uses a non-reentrant model
  7301 ;;
  7302                           
  7303                           	psect	text37
  7304   003E0E                     __ptext37:
  7305                           	callstack 0
  7306   003E0E                     _I2C_2_Master_Init:
  7307                           	callstack 29
  7308   003E0E                     
  7309                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  7310   003E0E  010E               	movlb	14	; () banked
  7311   003E10  51D9               	movf	217,w,b	;volatile
  7312   003E12  0BF0               	andlw	-16
  7313   003E14  0908               	iorlw	8
  7314   003E16  6FD9               	movwf	217,b	;volatile
  7315   003E18                     
  7316                           ; BSR set to: 14
  7317                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  7318   003E18  8BD9               	bsf	217,5,b	;volatile
  7319                           
  7320                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  7321   003E1A  0E9F               	movlw	159
  7322   003E1C  6FD6               	movwf	214,b	;volatile
  7323   003E1E                     
  7324                           ; BSR set to: 14
  7325                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  7326   003E1E  8A84               	bsf	132,5,c	;volatile
  7327   003E20                     
  7328                           ; BSR set to: 14
  7329                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  7330   003E20  8C84               	bsf	132,6,c	;volatile
  7331   003E22                     
  7332                           ; BSR set to: 14
  7333                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  7334   003E22  9BA7               	bcf	167,5,b	;volatile
  7335   003E24                     
  7336                           ; BSR set to: 14
  7337                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  7338   003E24  9DA7               	bcf	167,6,b	;volatile
  7339                           
  7340                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  7341   003E26  0E1D               	movlw	29
  7342   003E28  6F1D               	movwf	29,b	;volatile
  7343                           
  7344                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  7345   003E2A  0E1E               	movlw	30
  7346   003E2C  6F1C               	movwf	28,b	;volatile
  7347                           
  7348                           ;i2c.c: 18:   RD5PPS=0x1C;
  7349   003E2E  0E1C               	movlw	28
  7350   003E30  6F6F               	movwf	111,b	;volatile
  7351                           
  7352                           ;i2c.c: 19:   RD6PPS=0x1B;
  7353   003E32  0E1B               	movlw	27
  7354   003E34  6F70               	movwf	112,b	;volatile
  7355   003E36                     
  7356                           ; BSR set to: 14
  7357   003E36  0012               	return		;funcret
  7358   003E38                     __end_of_I2C_2_Master_Init:
  7359                           	callstack 0
  7360                           
  7361 ;; *************** function _calibration_routine *****************
  7362 ;; Defined at:
  7363 ;;		line 196 in file "color.c"
  7364 ;; Parameters:    Size  Location     Type
  7365 ;;  cCal            1   67[COMRAM] PTR struct colors
  7366 ;;		 -> colorCalibration(8), 
  7367 ;; Auto vars:     Size  Location     Type
  7368 ;;  cal_state      20   70[COMRAM] unsigned char [20]
  7369 ;; Return value:  Size  Location     Type
  7370 ;;                  1    wreg      void 
  7371 ;; Registers used:
  7372 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7373 ;; Tracked objects:
  7374 ;;		On entry : 0/0
  7375 ;;		On exit  : 0/0
  7376 ;;		Unchanged: 0/0
  7377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7378 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7379 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7380 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7381 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7382 ;;Total ram usage:       23 bytes
  7383 ;; Hardware stack levels used: 1
  7384 ;; Hardware stack levels required when called: 8
  7385 ;; This function calls:
  7386 ;;		_color_read_Blue
  7387 ;;		_color_read_Clear
  7388 ;;		_color_read_Green
  7389 ;;		_color_read_Red
  7390 ;;		_sendStringSerial4
  7391 ;;		_sprintf
  7392 ;; This function is called by:
  7393 ;;		_main
  7394 ;; This function uses a non-reentrant model
  7395 ;;
  7396                           
  7397                           	psect	text38
  7398   002282                     __ptext38:
  7399                           	callstack 0
  7400   002282                     _calibration_routine:
  7401                           	callstack 22
  7402   002282                     
  7403                           ;color.c: 196: void calibration_routine(colors *cCal);color.c: 197: {;color.c: 199:     
      +                          LATGbits.LATG0 = 0;
  7404   002282  907F               	bcf	127,0,c	;volatile
  7405                           
  7406                           ;color.c: 200:     LATEbits.LATE7 = 0;
  7407   002284  9E7D               	bcf	125,7,c	;volatile
  7408                           
  7409                           ;color.c: 201:     LATAbits.LATA3 = 0;
  7410   002286  9679               	bcf	121,3,c	;volatile
  7411   002288                     
  7412                           ;color.c: 203:     char cal_state[20];;color.c: 207:     sprintf(cal_state,"Calibration 
      +                          state = red", ".");
  7413   002288  0E47               	movlw	low calibration_routine@cal_state
  7414   00228A  6E31               	movwf	sprintf@s^0,c
  7415   00228C  0E73               	movlw	low STR_1
  7416   00228E  6E32               	movwf	sprintf@fmt^0,c
  7417   002290  0EAC               	movlw	low STR_2
  7418   002292  6E33               	movwf	(?_sprintf+2)^0,c
  7419   002294  5033               	movf	(?_sprintf+2)^0,w,c
  7420   002296  A4D8               	btfss	status,2,c
  7421   002298  0E0E               	movlw	high __smallconst
  7422   00229A  6E34               	movwf	(?_sprintf+3)^0,c
  7423   00229C  EC5D  F01D         	call	_sprintf	;wreg free
  7424   0022A0                     
  7425                           ;color.c: 208:     sendStringSerial4(cal_state);
  7426   0022A0  0E47               	movlw	low calibration_routine@cal_state
  7427   0022A2  6E02               	movwf	sendStringSerial4@string^0,c
  7428   0022A4  ECD6  F01E         	call	_sendStringSerial4	;wreg free
  7429   0022A8                     l92:
  7430                           
  7431                           ;color.c: 211:     while(PORTFbits.RF2 == 1){
  7432   0022A8  B48E               	btfsc	142,2,c	;volatile
  7433   0022AA  EF59  F011         	goto	u4321
  7434   0022AE  EF5B  F011         	goto	u4320
  7435   0022B2                     u4321:
  7436   0022B2  EF54  F011         	goto	l92
  7437   0022B6                     u4320:
  7438   0022B6                     
  7439                           ;color.c: 215:     LATGbits.LATG0 = 1;
  7440   0022B6  807F               	bsf	127,0,c	;volatile
  7441   0022B8                     
  7442                           ;color.c: 216:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7443   0022B8  0E29               	movlw	41
  7444   0022BA  6E46               	movwf	(??_calibration_routine+1)^0,c
  7445   0022BC  0E96               	movlw	150
  7446   0022BE  6E45               	movwf	??_calibration_routine^0,c
  7447   0022C0  0E7F               	movlw	127
  7448   0022C2                     u4647:
  7449   0022C2  2EE8               	decfsz	wreg,f,c
  7450   0022C4  D7FE               	bra	u4647
  7451   0022C6  2E45               	decfsz	??_calibration_routine^0,f,c
  7452   0022C8  D7FC               	bra	u4647
  7453   0022CA  2E46               	decfsz	(??_calibration_routine+1)^0,f,c
  7454   0022CC  D7FA               	bra	u4647
  7455   0022CE  0000               	nop	
  7456   0022D0                     
  7457                           ;color.c: 217:     (cCal->red) = color_read_Red();
  7458   0022D0  EC01  F01C         	call	_color_read_Red	;wreg free
  7459   0022D4  5044               	movf	calibration_routine@cCal^0,w,c
  7460   0022D6  6ED9               	movwf	fsr2l,c
  7461   0022D8  6ADA               	clrf	fsr2h,c
  7462   0022DA  C005  FFDE         	movff	?_color_read_Red,postinc2
  7463   0022DE  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  7464   0022E2                     
  7465                           ;color.c: 218:     LATGbits.LATG0 = 0;
  7466   0022E2  907F               	bcf	127,0,c	;volatile
  7467   0022E4                     
  7468                           ;color.c: 221:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  7469   0022E4  0E47               	movlw	low calibration_routine@cal_state
  7470   0022E6  6E31               	movwf	sprintf@s^0,c
  7471   0022E8  0E22               	movlw	low STR_3
  7472   0022EA  6E32               	movwf	sprintf@fmt^0,c
  7473   0022EC  0EAC               	movlw	low STR_2
  7474   0022EE  6E33               	movwf	(?_sprintf+2)^0,c
  7475   0022F0  5033               	movf	(?_sprintf+2)^0,w,c
  7476   0022F2  A4D8               	btfss	status,2,c
  7477   0022F4  0E0E               	movlw	high __smallconst
  7478   0022F6  6E34               	movwf	(?_sprintf+3)^0,c
  7479   0022F8  EC5D  F01D         	call	_sprintf	;wreg free
  7480   0022FC                     
  7481                           ;color.c: 222:     sendStringSerial4(&cal_state);
  7482   0022FC  0E47               	movlw	low calibration_routine@cal_state
  7483   0022FE  6E02               	movwf	sendStringSerial4@string^0,c
  7484   002300  ECD6  F01E         	call	_sendStringSerial4	;wreg free
  7485   002304                     l95:
  7486                           
  7487                           ;color.c: 224:     while(PORTFbits.RF2 == 1){
  7488   002304  B48E               	btfsc	142,2,c	;volatile
  7489   002306  EF87  F011         	goto	u4331
  7490   00230A  EF89  F011         	goto	u4330
  7491   00230E                     u4331:
  7492   00230E  EF82  F011         	goto	l95
  7493   002312                     u4330:
  7494   002312                     
  7495                           ;color.c: 228:     LATEbits.LATE7 = 1;
  7496   002312  8E7D               	bsf	125,7,c	;volatile
  7497   002314                     
  7498                           ;color.c: 229:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7499   002314  0E29               	movlw	41
  7500   002316  6E46               	movwf	(??_calibration_routine+1)^0,c
  7501   002318  0E96               	movlw	150
  7502   00231A  6E45               	movwf	??_calibration_routine^0,c
  7503   00231C  0E7F               	movlw	127
  7504   00231E                     u4657:
  7505   00231E  2EE8               	decfsz	wreg,f,c
  7506   002320  D7FE               	bra	u4657
  7507   002322  2E45               	decfsz	??_calibration_routine^0,f,c
  7508   002324  D7FC               	bra	u4657
  7509   002326  2E46               	decfsz	(??_calibration_routine+1)^0,f,c
  7510   002328  D7FA               	bra	u4657
  7511   00232A  0000               	nop	
  7512   00232C                     
  7513                           ;color.c: 230:     (cCal->green) = color_read_Green();
  7514   00232C  EC29  F01C         	call	_color_read_Green	;wreg free
  7515   002330  5044               	movf	calibration_routine@cCal^0,w,c
  7516   002332  6ED9               	movwf	fsr2l,c
  7517   002334  6ADA               	clrf	fsr2h,c
  7518   002336  0E02               	movlw	2
  7519   002338  26D9               	addwf	fsr2l,f,c
  7520   00233A  C005  FFDE         	movff	?_color_read_Green,postinc2
  7521   00233E  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  7522   002342                     
  7523                           ;color.c: 231:     LATEbits.LATE7 = 0;
  7524   002342  9E7D               	bcf	125,7,c	;volatile
  7525   002344                     
  7526                           ;color.c: 234:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  7527   002344  0E47               	movlw	low calibration_routine@cal_state
  7528   002346  6E31               	movwf	sprintf@s^0,c
  7529   002348  0E3F               	movlw	low STR_5
  7530   00234A  6E32               	movwf	sprintf@fmt^0,c
  7531   00234C  0EAC               	movlw	low STR_2
  7532   00234E  6E33               	movwf	(?_sprintf+2)^0,c
  7533   002350  5033               	movf	(?_sprintf+2)^0,w,c
  7534   002352  A4D8               	btfss	status,2,c
  7535   002354  0E0E               	movlw	high __smallconst
  7536   002356  6E34               	movwf	(?_sprintf+3)^0,c
  7537   002358  EC5D  F01D         	call	_sprintf	;wreg free
  7538   00235C                     
  7539                           ;color.c: 235:     sendStringSerial4(&cal_state);
  7540   00235C  0E47               	movlw	low calibration_routine@cal_state
  7541   00235E  6E02               	movwf	sendStringSerial4@string^0,c
  7542   002360  ECD6  F01E         	call	_sendStringSerial4	;wreg free
  7543   002364                     l98:
  7544                           
  7545                           ;color.c: 237:     while(PORTFbits.RF2 == 1){
  7546   002364  B48E               	btfsc	142,2,c	;volatile
  7547   002366  EFB7  F011         	goto	u4341
  7548   00236A  EFB9  F011         	goto	u4340
  7549   00236E                     u4341:
  7550   00236E  EFB2  F011         	goto	l98
  7551   002372                     u4340:
  7552   002372                     
  7553                           ;color.c: 241:     LATAbits.LATA3 = 1;
  7554   002372  8679               	bsf	121,3,c	;volatile
  7555   002374                     
  7556                           ;color.c: 242:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7557   002374  0E29               	movlw	41
  7558   002376  6E46               	movwf	(??_calibration_routine+1)^0,c
  7559   002378  0E96               	movlw	150
  7560   00237A  6E45               	movwf	??_calibration_routine^0,c
  7561   00237C  0E7F               	movlw	127
  7562   00237E                     u4667:
  7563   00237E  2EE8               	decfsz	wreg,f,c
  7564   002380  D7FE               	bra	u4667
  7565   002382  2E45               	decfsz	??_calibration_routine^0,f,c
  7566   002384  D7FC               	bra	u4667
  7567   002386  2E46               	decfsz	(??_calibration_routine+1)^0,f,c
  7568   002388  D7FA               	bra	u4667
  7569   00238A  0000               	nop	
  7570   00238C                     
  7571                           ;color.c: 243:     (cCal->blue) = color_read_Blue();
  7572   00238C  EC79  F01C         	call	_color_read_Blue	;wreg free
  7573   002390  5044               	movf	calibration_routine@cCal^0,w,c
  7574   002392  6ED9               	movwf	fsr2l,c
  7575   002394  6ADA               	clrf	fsr2h,c
  7576   002396  0E04               	movlw	4
  7577   002398  26D9               	addwf	fsr2l,f,c
  7578   00239A  C005  FFDE         	movff	?_color_read_Blue,postinc2
  7579   00239E  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  7580   0023A2                     
  7581                           ;color.c: 244:     LATAbits.LATA3 = 0;
  7582   0023A2  9679               	bcf	121,3,c	;volatile
  7583   0023A4                     
  7584                           ;color.c: 247:     sprintf(cal_state,"Calibration state =  white light", ".");
  7585   0023A4  0E47               	movlw	low calibration_routine@cal_state
  7586   0023A6  6E31               	movwf	sprintf@s^0,c
  7587   0023A8  0E01               	movlw	low STR_7
  7588   0023AA  6E32               	movwf	sprintf@fmt^0,c
  7589   0023AC  0EAC               	movlw	low STR_2
  7590   0023AE  6E33               	movwf	(?_sprintf+2)^0,c
  7591   0023B0  5033               	movf	(?_sprintf+2)^0,w,c
  7592   0023B2  A4D8               	btfss	status,2,c
  7593   0023B4  0E0E               	movlw	high __smallconst
  7594   0023B6  6E34               	movwf	(?_sprintf+3)^0,c
  7595   0023B8  EC5D  F01D         	call	_sprintf	;wreg free
  7596   0023BC                     
  7597                           ;color.c: 248:     sendStringSerial4(&cal_state);
  7598   0023BC  0E47               	movlw	low calibration_routine@cal_state
  7599   0023BE  6E02               	movwf	sendStringSerial4@string^0,c
  7600   0023C0  ECD6  F01E         	call	_sendStringSerial4	;wreg free
  7601   0023C4                     l101:
  7602                           
  7603                           ;color.c: 250:     while(PORTFbits.RF2 == 1){
  7604   0023C4  B48E               	btfsc	142,2,c	;volatile
  7605   0023C6  EFE7  F011         	goto	u4351
  7606   0023CA  EFE9  F011         	goto	u4350
  7607   0023CE                     u4351:
  7608   0023CE  EFE2  F011         	goto	l101
  7609   0023D2                     u4350:
  7610   0023D2                     
  7611                           ;color.c: 253:     LATGbits.LATG0 = 1;
  7612   0023D2  807F               	bsf	127,0,c	;volatile
  7613                           
  7614                           ;color.c: 254:     LATEbits.LATE7 = 1;
  7615   0023D4  8E7D               	bsf	125,7,c	;volatile
  7616                           
  7617                           ;color.c: 255:     LATAbits.LATA3 = 1;
  7618   0023D6  8679               	bsf	121,3,c	;volatile
  7619   0023D8                     
  7620                           ;color.c: 256:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7621   0023D8  0E29               	movlw	41
  7622   0023DA  6E46               	movwf	(??_calibration_routine+1)^0,c
  7623   0023DC  0E96               	movlw	150
  7624   0023DE  6E45               	movwf	??_calibration_routine^0,c
  7625   0023E0  0E7F               	movlw	127
  7626   0023E2                     u4677:
  7627   0023E2  2EE8               	decfsz	wreg,f,c
  7628   0023E4  D7FE               	bra	u4677
  7629   0023E6  2E45               	decfsz	??_calibration_routine^0,f,c
  7630   0023E8  D7FC               	bra	u4677
  7631   0023EA  2E46               	decfsz	(??_calibration_routine+1)^0,f,c
  7632   0023EC  D7FA               	bra	u4677
  7633   0023EE  0000               	nop	
  7634   0023F0                     
  7635                           ;color.c: 257:     (cCal->clear) = color_read_Clear();
  7636   0023F0  EC51  F01C         	call	_color_read_Clear	;wreg free
  7637   0023F4  5044               	movf	calibration_routine@cCal^0,w,c
  7638   0023F6  6ED9               	movwf	fsr2l,c
  7639   0023F8  6ADA               	clrf	fsr2h,c
  7640   0023FA  0E06               	movlw	6
  7641   0023FC  26D9               	addwf	fsr2l,f,c
  7642   0023FE  C005  FFDE         	movff	?_color_read_Clear,postinc2
  7643   002402  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  7644   002406                     
  7645                           ;color.c: 258:     LATGbits.LATG0 = 0;
  7646   002406  907F               	bcf	127,0,c	;volatile
  7647   002408                     
  7648                           ;color.c: 259:     LATEbits.LATE7 = 0;
  7649   002408  9E7D               	bcf	125,7,c	;volatile
  7650   00240A                     
  7651                           ;color.c: 260:     LATAbits.LATA3 = 0;
  7652   00240A  9679               	bcf	121,3,c	;volatile
  7653   00240C                     
  7654                           ;color.c: 263:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  7655   00240C  0E47               	movlw	low calibration_routine@cal_state
  7656   00240E  6E31               	movwf	sprintf@s^0,c
  7657   002410  0E5A               	movlw	low STR_9
  7658   002412  6E32               	movwf	sprintf@fmt^0,c
  7659   002414  0EAC               	movlw	low STR_2
  7660   002416  6E33               	movwf	(?_sprintf+2)^0,c
  7661   002418  5033               	movf	(?_sprintf+2)^0,w,c
  7662   00241A  A4D8               	btfss	status,2,c
  7663   00241C  0E0E               	movlw	high __smallconst
  7664   00241E  6E34               	movwf	(?_sprintf+3)^0,c
  7665   002420  EC5D  F01D         	call	_sprintf	;wreg free
  7666   002424                     
  7667                           ;color.c: 264:     sendStringSerial4(&cal_state);
  7668   002424  0E47               	movlw	low calibration_routine@cal_state
  7669   002426  6E02               	movwf	sendStringSerial4@string^0,c
  7670   002428  ECD6  F01E         	call	_sendStringSerial4	;wreg free
  7671   00242C                     l104:
  7672                           
  7673                           ;color.c: 266:     while(PORTFbits.RF2 == 1){
  7674   00242C  B48E               	btfsc	142,2,c	;volatile
  7675   00242E  EF1B  F012         	goto	u4361
  7676   002432  EF1D  F012         	goto	u4360
  7677   002436                     u4361:
  7678   002436  EF16  F012         	goto	l104
  7679   00243A                     u4360:
  7680   00243A                     
  7681                           ;color.c: 269:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7682   00243A  0E29               	movlw	41
  7683   00243C  6E46               	movwf	(??_calibration_routine+1)^0,c
  7684   00243E  0E96               	movlw	150
  7685   002440  6E45               	movwf	??_calibration_routine^0,c
  7686   002442  0E7F               	movlw	127
  7687   002444                     u4687:
  7688   002444  2EE8               	decfsz	wreg,f,c
  7689   002446  D7FE               	bra	u4687
  7690   002448  2E45               	decfsz	??_calibration_routine^0,f,c
  7691   00244A  D7FC               	bra	u4687
  7692   00244C  2E46               	decfsz	(??_calibration_routine+1)^0,f,c
  7693   00244E  D7FA               	bra	u4687
  7694   002450  0000               	nop	
  7695   002452  0012               	return		;funcret
  7696   002454                     __end_of_calibration_routine:
  7697                           	callstack 0
  7698                           
  7699 ;; *************** function _sprintf *****************
  7700 ;; Defined at:
  7701 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;  s               1   48[COMRAM] PTR unsigned char 
  7704 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  7705 ;;  fmt             1   49[COMRAM] PTR const unsigned char 
  7706 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(33), 
  7707 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  7708 ;; Auto vars:     Size  Location     Type
  7709 ;;  f              12   55[COMRAM] struct _IO_FILE
  7710 ;;  ret             2    0        int 
  7711 ;;  ap              1   54[COMRAM] PTR void [1]
  7712 ;;		 -> ?_sprintf(2), 
  7713 ;; Return value:  Size  Location     Type
  7714 ;;                  2   48[COMRAM] int 
  7715 ;; Registers used:
  7716 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7717 ;; Tracked objects:
  7718 ;;		On entry : 0/0
  7719 ;;		On exit  : 0/0
  7720 ;;		Unchanged: 0/0
  7721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7722 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7723 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7725 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7726 ;;Total ram usage:       19 bytes
  7727 ;; Hardware stack levels used: 1
  7728 ;; Hardware stack levels required when called: 7
  7729 ;; This function calls:
  7730 ;;		_vfprintf
  7731 ;; This function is called by:
  7732 ;;		_calibration_routine
  7733 ;;		_ADC2String
  7734 ;;		_send2USART
  7735 ;; This function uses a non-reentrant model
  7736 ;;
  7737                           
  7738                           	psect	text39
  7739   003ABA                     __ptext39:
  7740                           	callstack 0
  7741   003ABA                     _sprintf:
  7742                           	callstack 22
  7743   003ABA  0E33               	movlw	low (?_sprintf+2)
  7744   003ABC  6E37               	movwf	sprintf@ap^0,c
  7745   003ABE  C031  F038         	movff	sprintf@s,sprintf@f
  7746   003AC2  0E00               	movlw	0
  7747   003AC4  6E3C               	movwf	(sprintf@f+4)^0,c
  7748   003AC6  0E00               	movlw	0
  7749   003AC8  6E3B               	movwf	(sprintf@f+3)^0,c
  7750   003ACA  0E00               	movlw	0
  7751   003ACC  6E43               	movwf	(sprintf@f+11)^0,c
  7752   003ACE  0E00               	movlw	0
  7753   003AD0  6E42               	movwf	(sprintf@f+10)^0,c
  7754   003AD2  0E38               	movlw	low sprintf@f
  7755   003AD4  6E2D               	movwf	vfprintf@fp^0,c
  7756   003AD6  C032  F02E         	movff	sprintf@fmt,vfprintf@fmt
  7757   003ADA  0E37               	movlw	low sprintf@ap
  7758   003ADC  6E2F               	movwf	vfprintf@ap^0,c
  7759   003ADE  ECC4  F01C         	call	_vfprintf	;wreg free
  7760   003AE2  5031               	movf	sprintf@s^0,w,c
  7761   003AE4  243B               	addwf	(sprintf@f+3)^0,w,c
  7762   003AE6  6ED9               	movwf	fsr2l,c
  7763   003AE8  6ADA               	clrf	fsr2h,c
  7764   003AEA  6ADF               	clrf	indf2,c
  7765   003AEC  0012               	return		;funcret
  7766   003AEE                     __end_of_sprintf:
  7767                           	callstack 0
  7768                           
  7769 ;; *************** function _vfprintf *****************
  7770 ;; Defined at:
  7771 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  7772 ;; Parameters:    Size  Location     Type
  7773 ;;  fp              1   44[COMRAM] PTR struct _IO_FILE
  7774 ;;		 -> sprintf@f(12), 
  7775 ;;  fmt             1   45[COMRAM] PTR const unsigned char 
  7776 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(33), 
  7777 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  7778 ;;  ap              1   46[COMRAM] PTR PTR void 
  7779 ;;		 -> sprintf@ap(1), 
  7780 ;; Auto vars:     Size  Location     Type
  7781 ;;  cfmt            1   47[COMRAM] PTR unsigned char 
  7782 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(33), 
  7783 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  7784 ;; Return value:  Size  Location     Type
  7785 ;;                  2   44[COMRAM] int 
  7786 ;; Registers used:
  7787 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7788 ;; Tracked objects:
  7789 ;;		On entry : 0/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7793 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7794 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7796 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7797 ;;Total ram usage:        4 bytes
  7798 ;; Hardware stack levels used: 1
  7799 ;; Hardware stack levels required when called: 6
  7800 ;; This function calls:
  7801 ;;		_vfpfcnvrt
  7802 ;; This function is called by:
  7803 ;;		_sprintf
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807                           	psect	text40
  7808   003988                     __ptext40:
  7809                           	callstack 0
  7810   003988                     _vfprintf:
  7811                           	callstack 22
  7812   003988                     
  7813                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  7814   003988  C02E  F030         	movff	vfprintf@fmt,vfprintf@cfmt
  7815                           
  7816                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  7817   00398C  EFD0  F01C         	goto	l4757
  7818   003990                     l4755:
  7819                           
  7820                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  7821   003990  C02D  F022         	movff	vfprintf@fp,vfpfcnvrt@fp
  7822   003994  0E30               	movlw	low vfprintf@cfmt
  7823   003996  6E23               	movwf	vfpfcnvrt@fmt^0,c
  7824   003998  C02F  F024         	movff	vfprintf@ap,vfpfcnvrt@ap
  7825   00399C  EC9C  F014         	call	_vfpfcnvrt	;wreg free
  7826   0039A0                     l4757:
  7827                           
  7828                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  7829   0039A0  C030  FFF6         	movff	vfprintf@cfmt,tblptrl
  7830   0039A4                     	if	1	;There is more than 1 active tblptr byte
  7831   0039A4  0E0E               	movlw	high __smallconst
  7832   0039A6  6EF7               	movwf	tblptrh,c
  7833   0039A8                     	endif
  7834   0039A8                     	if	0	;tblptru may be non-zero
  7835   0039A8                     	endif
  7836   0039A8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7837   0039A8  0E00               	movlw	low (__smallconst shr (0+16))
  7838   0039AA  6EF8               	movwf	tblptru,c
  7839   0039AC                     	endif
  7840   0039AC  0008               	tblrd		*
  7841   0039AE  50F5               	movf	tablat,w,c
  7842   0039B0  0900               	iorlw	0
  7843   0039B2  A4D8               	btfss	status,2,c
  7844   0039B4  EFDE  F01C         	goto	u4311
  7845   0039B8  EFE0  F01C         	goto	u4310
  7846   0039BC                     u4311:
  7847   0039BC  EFC8  F01C         	goto	l4755
  7848   0039C0                     u4310:
  7849   0039C0                     
  7850                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  7851   0039C0  0E00               	movlw	0
  7852   0039C2  6E2E               	movwf	(?_vfprintf+1)^0,c
  7853   0039C4  0E00               	movlw	0
  7854   0039C6  6E2D               	movwf	?_vfprintf^0,c
  7855   0039C8  0012               	return		;funcret
  7856   0039CA                     __end_of_vfprintf:
  7857                           	callstack 0
  7858                           
  7859 ;; *************** function _vfpfcnvrt *****************
  7860 ;; Defined at:
  7861 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  7862 ;; Parameters:    Size  Location     Type
  7863 ;;  fp              1   33[COMRAM] PTR struct _IO_FILE
  7864 ;;		 -> sprintf@f(12), 
  7865 ;;  fmt             1   34[COMRAM] PTR PTR unsigned char 
  7866 ;;		 -> vfprintf@cfmt(1), 
  7867 ;;  ap              1   35[COMRAM] PTR PTR void 
  7868 ;;		 -> sprintf@ap(1), 
  7869 ;; Auto vars:     Size  Location     Type
  7870 ;;  convarg         4   38[COMRAM] struct .
  7871 ;;  cp              1   43[COMRAM] PTR unsigned char 
  7872 ;;		 -> STR_12(12), STR_11(21), STR_9(25), STR_7(33), 
  7873 ;;		 -> STR_5(27), STR_3(29), STR_1(24), 
  7874 ;;  done            1   42[COMRAM] _Bool 
  7875 ;;  c               1    0        unsigned char 
  7876 ;; Return value:  Size  Location     Type
  7877 ;;                  1    wreg      void 
  7878 ;; Registers used:
  7879 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7880 ;; Tracked objects:
  7881 ;;		On entry : 0/0
  7882 ;;		On exit  : 0/0
  7883 ;;		Unchanged: 0/0
  7884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7885 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7886 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7887 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7888 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7889 ;;Total ram usage:       11 bytes
  7890 ;; Hardware stack levels used: 1
  7891 ;; Hardware stack levels required when called: 5
  7892 ;; This function calls:
  7893 ;;		_dtoa
  7894 ;;		_fputc
  7895 ;;		_read_prec_or_width
  7896 ;; This function is called by:
  7897 ;;		_vfprintf
  7898 ;; This function uses a non-reentrant model
  7899 ;;
  7900                           
  7901                           	psect	text41
  7902   002938                     __ptext41:
  7903                           	callstack 0
  7904   002938                     _vfpfcnvrt:
  7905                           	callstack 22
  7906   002938                     
  7907                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  7908   002938  5023               	movf	vfpfcnvrt@fmt^0,w,c
  7909   00293A  6ED9               	movwf	fsr2l,c
  7910   00293C  6ADA               	clrf	fsr2h,c
  7911   00293E  CFDF FFF6          	movff	indf2,tblptrl
  7912   002942                     	if	1	;There is more than 1 active tblptr byte
  7913   002942  0E0E               	movlw	high __smallconst
  7914   002944  6EF7               	movwf	tblptrh,c
  7915   002946                     	endif
  7916   002946                     	if	0	;tblptru may be non-zero
  7917   002946                     	endif
  7918   002946                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7919   002946  0E00               	movlw	low (__smallconst shr (0+16))
  7920   002948  6EF8               	movwf	tblptru,c
  7921   00294A                     	endif
  7922   00294A  0008               	tblrd		*
  7923   00294C  50F5               	movf	tablat,w,c
  7924   00294E  0A25               	xorlw	37
  7925   002950  A4D8               	btfss	status,2,c
  7926   002952  EFAD  F014         	goto	u4261
  7927   002956  EFAF  F014         	goto	u4260
  7928   00295A                     u4261:
  7929   00295A  EF4B  F015         	goto	l4743
  7930   00295E                     u4260:
  7931   00295E                     
  7932                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  7933   00295E  5023               	movf	vfpfcnvrt@fmt^0,w,c
  7934   002960  6ED9               	movwf	fsr2l,c
  7935   002962  6ADA               	clrf	fsr2h,c
  7936   002964  2ADF               	incf	indf2,f,c
  7937   002966                     
  7938                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  7939   002966  0E00               	movlw	0
  7940   002968  0100               	movlb	0	; () banked
  7941   00296A  6FD1               	movwf	(_width+1)& (0+255),b
  7942   00296C  0E00               	movlw	0
  7943   00296E  6FD0               	movwf	_width& (0+255),b
  7944   002970  C0D0  F05B         	movff	_width,_flags
  7945   002974                     
  7946                           ; BSR set to: 0
  7947                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  7948   002974  69D2               	setf	_prec& (0+255),b
  7949   002976  69D3               	setf	(_prec+1)& (0+255),b
  7950   002978                     
  7951                           ; BSR set to: 0
  7952                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  7953   002978  0E00               	movlw	0
  7954   00297A  6E2B               	movwf	vfpfcnvrt@done^0,c
  7955                           
  7956                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  7957   00297C  EFE6  F014         	goto	l4717
  7958   002980                     l4707:
  7959                           
  7960                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  7961   002980  825B               	bsf	_flags^0,1,c
  7962   002982                     
  7963                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  7964   002982  5023               	movf	vfpfcnvrt@fmt^0,w,c
  7965   002984  6ED9               	movwf	fsr2l,c
  7966   002986  6ADA               	clrf	fsr2h,c
  7967   002988  2ADF               	incf	indf2,f,c
  7968                           
  7969                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  7970   00298A  EFE6  F014         	goto	l4717
  7971   00298E                     l4711:
  7972                           
  7973                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  7974   00298E  0E01               	movlw	1
  7975   002990  6E2B               	movwf	vfpfcnvrt@done^0,c
  7976                           
  7977                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  7978   002992  EFE6  F014         	goto	l4717
  7979   002996                     l4715:
  7980   002996  5023               	movf	vfpfcnvrt@fmt^0,w,c
  7981   002998  6ED9               	movwf	fsr2l,c
  7982   00299A  6ADA               	clrf	fsr2h,c
  7983   00299C  CFDF FFF6          	movff	indf2,tblptrl
  7984   0029A0                     	if	1	;There is more than 1 active tblptr byte
  7985   0029A0  0E0E               	movlw	high __smallconst
  7986   0029A2  6EF7               	movwf	tblptrh,c
  7987   0029A4                     	endif
  7988   0029A4                     	if	0	;tblptru may be non-zero
  7989   0029A4                     	endif
  7990   0029A4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7991   0029A4  0E00               	movlw	low (__smallconst shr (0+16))
  7992   0029A6  6EF8               	movwf	tblptru,c
  7993   0029A8                     	endif
  7994   0029A8  0008               	tblrd		*
  7995   0029AA  50F5               	movf	tablat,w,c
  7996   0029AC  6E25               	movwf	??_vfpfcnvrt^0,c
  7997   0029AE  6A26               	clrf	(??_vfpfcnvrt+1)^0,c
  7998                           
  7999                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8000                           ; Switch size 1, requested type "simple"
  8001                           ; Number of cases is 1, Range of values is 0 to 0
  8002                           ; switch strategies available:
  8003                           ; Name         Instructions Cycles
  8004                           ; simple_byte            4     3 (average)
  8005                           ;	Chosen strategy is simple_byte
  8006   0029B0  5026               	movf	(??_vfpfcnvrt+1)^0,w,c
  8007   0029B2  0A00               	xorlw	0	; case 0
  8008   0029B4  B4D8               	btfsc	status,2,c
  8009   0029B6  EFDF  F014         	goto	l4959
  8010   0029BA  EFC7  F014         	goto	l4711
  8011   0029BE                     l4959:
  8012                           
  8013                           ; Switch size 1, requested type "simple"
  8014                           ; Number of cases is 1, Range of values is 48 to 48
  8015                           ; switch strategies available:
  8016                           ; Name         Instructions Cycles
  8017                           ; simple_byte            4     3 (average)
  8018                           ;	Chosen strategy is simple_byte
  8019   0029BE  5025               	movf	??_vfpfcnvrt^0,w,c
  8020   0029C0  0A30               	xorlw	48	; case 48
  8021   0029C2  B4D8               	btfsc	status,2,c
  8022   0029C4  EFC0  F014         	goto	l4707
  8023   0029C8  EFC7  F014         	goto	l4711
  8024   0029CC                     l4717:
  8025                           
  8026                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  8027   0029CC  502B               	movf	vfpfcnvrt@done^0,w,c
  8028   0029CE  B4D8               	btfsc	status,2,c
  8029   0029D0  EFEC  F014         	goto	u4271
  8030   0029D4  EFEE  F014         	goto	u4270
  8031   0029D8                     u4271:
  8032   0029D8  EFCB  F014         	goto	l4715
  8033   0029DC                     u4270:
  8034   0029DC                     
  8035                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  8036   0029DC  C023  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  8037   0029E0  C024  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  8038   0029E4  ECF8  F018         	call	_read_prec_or_width	;wreg free
  8039   0029E8  C007  F0D0         	movff	?_read_prec_or_width,_width
  8040   0029EC  C008  F0D1         	movff	?_read_prec_or_width+1,_width+1
  8041   0029F0                     
  8042                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  8043   0029F0  0100               	movlb	0	; () banked
  8044   0029F2  BFD1               	btfsc	(_width+1)& (0+255),7,b
  8045   0029F4  EF00  F015         	goto	u4280
  8046   0029F8  EFFE  F014         	goto	u4281
  8047   0029FC                     u4281:
  8048   0029FC  EF05  F015         	goto	l4725
  8049   002A00                     u4280:
  8050   002A00                     
  8051                           ; BSR set to: 0
  8052                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  8053   002A00  805B               	bsf	_flags^0,0,c
  8054                           
  8055                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  8056   002A02  6DD0               	negf	_width& (0+255),b
  8057   002A04  1FD1               	comf	(_width+1)& (0+255),f,b
  8058   002A06  B0D8               	btfsc	status,0,c
  8059   002A08  2BD1               	incf	(_width+1)& (0+255),f,b
  8060   002A0A                     l4725:
  8061                           
  8062                           ; BSR set to: 0
  8063                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  8064   002A0A  5023               	movf	vfpfcnvrt@fmt^0,w,c
  8065   002A0C  6ED9               	movwf	fsr2l,c
  8066   002A0E  6ADA               	clrf	fsr2h,c
  8067   002A10  50DF               	movf	indf2,w,c
  8068   002A12  6E2C               	movwf	vfpfcnvrt@cp^0,c
  8069   002A14                     
  8070                           ; BSR set to: 0
  8071                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  8072   002A14  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  8073   002A18                     	if	1	;There is more than 1 active tblptr byte
  8074   002A18  0E0E               	movlw	high __smallconst
  8075   002A1A  6EF7               	movwf	tblptrh,c
  8076   002A1C                     	endif
  8077   002A1C                     	if	0	;tblptru may be non-zero
  8078   002A1C                     	endif
  8079   002A1C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8080   002A1C  0E00               	movlw	low (__smallconst shr (0+16))
  8081   002A1E  6EF8               	movwf	tblptru,c
  8082   002A20                     	endif
  8083   002A20  0008               	tblrd		*
  8084   002A22  50F5               	movf	tablat,w,c
  8085   002A24  0A64               	xorlw	100
  8086   002A26  B4D8               	btfsc	status,2,c
  8087   002A28  EF18  F015         	goto	u4291
  8088   002A2C  EF1A  F015         	goto	u4290
  8089   002A30                     u4291:
  8090   002A30  EF2A  F015         	goto	l4731
  8091   002A34                     u4290:
  8092   002A34                     
  8093                           ; BSR set to: 0
  8094   002A34  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  8095   002A38                     	if	1	;There is more than 1 active tblptr byte
  8096   002A38  0E0E               	movlw	high __smallconst
  8097   002A3A  6EF7               	movwf	tblptrh,c
  8098   002A3C                     	endif
  8099   002A3C                     	if	0	;tblptru may be non-zero
  8100   002A3C                     	endif
  8101   002A3C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8102   002A3C  0E00               	movlw	low (__smallconst shr (0+16))
  8103   002A3E  6EF8               	movwf	tblptru,c
  8104   002A40                     	endif
  8105   002A40  0008               	tblrd		*
  8106   002A42  50F5               	movf	tablat,w,c
  8107   002A44  0A69               	xorlw	105
  8108   002A46  A4D8               	btfss	status,2,c
  8109   002A48  EF28  F015         	goto	u4301
  8110   002A4C  EF2A  F015         	goto	u4300
  8111   002A50                     u4301:
  8112   002A50  EF45  F015         	goto	l4739
  8113   002A54                     u4300:
  8114   002A54                     l4731:
  8115                           
  8116                           ; BSR set to: 0
  8117                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  8118   002A54  5024               	movf	vfpfcnvrt@ap^0,w,c
  8119   002A56  6ED9               	movwf	fsr2l,c
  8120   002A58  6ADA               	clrf	fsr2h,c
  8121   002A5A  0E02               	movlw	2
  8122   002A5C  26DF               	addwf	indf2,f,c
  8123   002A5E  5CDF               	subwf	indf2,w,c
  8124   002A60  6ED9               	movwf	fsr2l,c
  8125   002A62  6ADA               	clrf	fsr2h,c
  8126   002A64  CFDE F027          	movff	postinc2,vfpfcnvrt@convarg
  8127   002A68  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg+1
  8128   002A6C                     
  8129                           ; BSR set to: 0
  8130                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  8131   002A6C  5023               	movf	vfpfcnvrt@fmt^0,w,c
  8132   002A6E  6ED9               	movwf	fsr2l,c
  8133   002A70  6ADA               	clrf	fsr2h,c
  8134   002A72  282C               	incf	vfpfcnvrt@cp^0,w,c
  8135   002A74  6EDF               	movwf	indf2,c
  8136   002A76                     
  8137                           ; BSR set to: 0
  8138                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  8139   002A76  C022  F017         	movff	vfpfcnvrt@fp,dtoa@fp
  8140   002A7A  C027  F018         	movff	vfpfcnvrt@convarg,dtoa@d
  8141   002A7E  C028  F019         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  8142   002A82  EC5F  F015         	call	_dtoa	;wreg free
  8143   002A86  EF5E  F015         	goto	l1307
  8144   002A8A                     l4739:
  8145                           
  8146                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  8147   002A8A  5023               	movf	vfpfcnvrt@fmt^0,w,c
  8148   002A8C  6ED9               	movwf	fsr2l,c
  8149   002A8E  6ADA               	clrf	fsr2h,c
  8150   002A90  2ADF               	incf	indf2,f,c
  8151   002A92  EF5E  F015         	goto	l1307
  8152   002A96                     l4743:
  8153                           
  8154                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  8155   002A96  5023               	movf	vfpfcnvrt@fmt^0,w,c
  8156   002A98  6ED9               	movwf	fsr2l,c
  8157   002A9A  6ADA               	clrf	fsr2h,c
  8158   002A9C  CFDF FFF6          	movff	indf2,tblptrl
  8159   002AA0                     	if	1	;There is more than 1 active tblptr byte
  8160   002AA0  0E0E               	movlw	high __smallconst
  8161   002AA2  6EF7               	movwf	tblptrh,c
  8162   002AA4                     	endif
  8163   002AA4                     	if	0	;tblptru may be non-zero
  8164   002AA4                     	endif
  8165   002AA4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8166   002AA4  0E00               	movlw	low (__smallconst shr (0+16))
  8167   002AA6  6EF8               	movwf	tblptru,c
  8168   002AA8                     	endif
  8169   002AA8  0008               	tblrd		*
  8170   002AAA  50F5               	movf	tablat,w,c
  8171   002AAC  6E01               	movwf	fputc@c^0,c
  8172   002AAE  6A02               	clrf	(fputc@c+1)^0,c
  8173   002AB0  C022  F003         	movff	vfpfcnvrt@fp,fputc@fp
  8174   002AB4  ECA4  F019         	call	_fputc	;wreg free
  8175   002AB8  EF45  F015         	goto	l4739
  8176   002ABC                     l1307:
  8177   002ABC  0012               	return		;funcret
  8178   002ABE                     __end_of_vfpfcnvrt:
  8179                           	callstack 0
  8180                           
  8181 ;; *************** function _read_prec_or_width *****************
  8182 ;; Defined at:
  8183 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  8184 ;; Parameters:    Size  Location     Type
  8185 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  8186 ;;		 -> vfprintf@cfmt(1), 
  8187 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  8188 ;;		 -> sprintf@ap(1), 
  8189 ;; Auto vars:     Size  Location     Type
  8190 ;;  c               1    8[COMRAM] unsigned char 
  8191 ;;  n               2    9[COMRAM] int 
  8192 ;; Return value:  Size  Location     Type
  8193 ;;                  2    6[COMRAM] int 
  8194 ;; Registers used:
  8195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8196 ;; Tracked objects:
  8197 ;;		On entry : 0/0
  8198 ;;		On exit  : 0/0
  8199 ;;		Unchanged: 0/0
  8200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8201 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8202 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8204 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8205 ;;Total ram usage:        5 bytes
  8206 ;; Hardware stack levels used: 1
  8207 ;; Hardware stack levels required when called: 1
  8208 ;; This function calls:
  8209 ;;		___wmul
  8210 ;; This function is called by:
  8211 ;;		_vfpfcnvrt
  8212 ;; This function uses a non-reentrant model
  8213 ;;
  8214                           
  8215                           	psect	text42
  8216   0031F0                     __ptext42:
  8217                           	callstack 0
  8218   0031F0                     _read_prec_or_width:
  8219                           	callstack 25
  8220   0031F0                     
  8221                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  8222   0031F0  0E00               	movlw	0
  8223   0031F2  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  8224   0031F4  0E00               	movlw	0
  8225   0031F6  6E0A               	movwf	read_prec_or_width@n^0,c
  8226   0031F8                     
  8227                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  8228   0031F8  5007               	movf	read_prec_or_width@fmt^0,w,c
  8229   0031FA  6ED9               	movwf	fsr2l,c
  8230   0031FC  6ADA               	clrf	fsr2h,c
  8231   0031FE  CFDF FFF6          	movff	indf2,tblptrl
  8232   003202                     	if	1	;There is more than 1 active tblptr byte
  8233   003202  0E0E               	movlw	high __smallconst
  8234   003204  6EF7               	movwf	tblptrh,c
  8235   003206                     	endif
  8236   003206                     	if	0	;tblptru may be non-zero
  8237   003206                     	endif
  8238   003206                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8239   003206  0E00               	movlw	low (__smallconst shr (0+16))
  8240   003208  6EF8               	movwf	tblptru,c
  8241   00320A                     	endif
  8242   00320A  0008               	tblrd		*
  8243   00320C  50F5               	movf	tablat,w,c
  8244   00320E  0A2A               	xorlw	42
  8245   003210  A4D8               	btfss	status,2,c
  8246   003212  EF0D  F019         	goto	u2441
  8247   003216  EF0F  F019         	goto	u2440
  8248   00321A                     u2441:
  8249   00321A  EF35  F019         	goto	l3219
  8250   00321E                     u2440:
  8251   00321E                     
  8252                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  8253   00321E  5007               	movf	read_prec_or_width@fmt^0,w,c
  8254   003220  6ED9               	movwf	fsr2l,c
  8255   003222  6ADA               	clrf	fsr2h,c
  8256   003224  2ADF               	incf	indf2,f,c
  8257   003226                     
  8258                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  8259   003226  5008               	movf	read_prec_or_width@ap^0,w,c
  8260   003228  6ED9               	movwf	fsr2l,c
  8261   00322A  6ADA               	clrf	fsr2h,c
  8262   00322C  0E02               	movlw	2
  8263   00322E  26DF               	addwf	indf2,f,c
  8264   003230  5CDF               	subwf	indf2,w,c
  8265   003232  6ED9               	movwf	fsr2l,c
  8266   003234  6ADA               	clrf	fsr2h,c
  8267   003236  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  8268   00323A  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  8269                           
  8270                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  8271   00323E  EF4A  F019         	goto	l1288
  8272   003242                     l3215:
  8273                           
  8274                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  8275   003242  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  8276   003246  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  8277   00324A  0E00               	movlw	0
  8278   00324C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  8279   00324E  0E0A               	movlw	10
  8280   003250  6E03               	movwf	___wmul@multiplicand^0,c
  8281   003252  EC30  F01F         	call	___wmul	;wreg free
  8282   003256  5009               	movf	read_prec_or_width@c^0,w,c
  8283   003258  2401               	addwf	?___wmul^0,w,c
  8284   00325A  6E0A               	movwf	read_prec_or_width@n^0,c
  8285   00325C  0E00               	movlw	0
  8286   00325E  2002               	addwfc	(?___wmul+1)^0,w,c
  8287   003260  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  8288   003262                     
  8289                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  8290   003262  5007               	movf	read_prec_or_width@fmt^0,w,c
  8291   003264  6ED9               	movwf	fsr2l,c
  8292   003266  6ADA               	clrf	fsr2h,c
  8293   003268  2ADF               	incf	indf2,f,c
  8294   00326A                     l3219:
  8295                           
  8296                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  8297   00326A  5007               	movf	read_prec_or_width@fmt^0,w,c
  8298   00326C  6ED9               	movwf	fsr2l,c
  8299   00326E  6ADA               	clrf	fsr2h,c
  8300   003270  CFDF FFF6          	movff	indf2,tblptrl
  8301   003274                     	if	1	;There is more than 1 active tblptr byte
  8302   003274  0E0E               	movlw	high __smallconst
  8303   003276  6EF7               	movwf	tblptrh,c
  8304   003278                     	endif
  8305   003278                     	if	0	;tblptru may be non-zero
  8306   003278                     	endif
  8307   003278                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8308   003278  0E00               	movlw	low (__smallconst shr (0+16))
  8309   00327A  6EF8               	movwf	tblptru,c
  8310   00327C                     	endif
  8311   00327C  0008               	tblrd		*
  8312   00327E  50F5               	movf	tablat,w,c
  8313   003280  0FD0               	addlw	208
  8314   003282  6E09               	movwf	read_prec_or_width@c^0,c
  8315   003284  0E09               	movlw	9
  8316   003286  6409               	cpfsgt	read_prec_or_width@c^0,c
  8317   003288  EF48  F019         	goto	u2451
  8318   00328C  EF4A  F019         	goto	u2450
  8319   003290                     u2451:
  8320   003290  EF21  F019         	goto	l3215
  8321   003294                     u2450:
  8322   003294                     l1288:
  8323                           
  8324                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  8325   003294  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  8326   003298  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  8327   00329C  0012               	return		;funcret
  8328   00329E                     __end_of_read_prec_or_width:
  8329                           	callstack 0
  8330                           
  8331 ;; *************** function ___wmul *****************
  8332 ;; Defined at:
  8333 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  8334 ;; Parameters:    Size  Location     Type
  8335 ;;  multiplier      2    0[COMRAM] unsigned int 
  8336 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;  product         2    4[COMRAM] unsigned int 
  8339 ;; Return value:  Size  Location     Type
  8340 ;;                  2    0[COMRAM] unsigned int 
  8341 ;; Registers used:
  8342 ;;		wreg, status,2, status,0, prodl, prodh
  8343 ;; Tracked objects:
  8344 ;;		On entry : 0/0
  8345 ;;		On exit  : 0/0
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8348 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8349 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8351 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8352 ;;Total ram usage:        6 bytes
  8353 ;; Hardware stack levels used: 1
  8354 ;; This function calls:
  8355 ;;		Nothing
  8356 ;; This function is called by:
  8357 ;;		_setMotorPWM
  8358 ;;		_read_prec_or_width
  8359 ;;		_ADC2String
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           	psect	text43
  8364   003E60                     __ptext43:
  8365                           	callstack 0
  8366   003E60                     ___wmul:
  8367                           	callstack 28
  8368   003E60  5001               	movf	___wmul@multiplier^0,w,c
  8369   003E62  0203               	mulwf	___wmul@multiplicand^0,c
  8370   003E64  CFF3 F005          	movff	prodl,___wmul@product
  8371   003E68  CFF4 F006          	movff	prodh,___wmul@product+1
  8372   003E6C  5001               	movf	___wmul@multiplier^0,w,c
  8373   003E6E  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  8374   003E70  50F3               	movf	243,w,c
  8375   003E72  2606               	addwf	(___wmul@product+1)^0,f,c
  8376   003E74  5002               	movf	(___wmul@multiplier+1)^0,w,c
  8377   003E76  0203               	mulwf	___wmul@multiplicand^0,c
  8378   003E78  50F3               	movf	243,w,c
  8379   003E7A  2606               	addwf	(___wmul@product+1)^0,f,c
  8380   003E7C  C005  F001         	movff	___wmul@product,?___wmul
  8381   003E80  C006  F002         	movff	___wmul@product+1,?___wmul+1
  8382   003E84  0012               	return		;funcret
  8383   003E86                     __end_of___wmul:
  8384                           	callstack 0
  8385                           
  8386 ;; *************** function _dtoa *****************
  8387 ;; Defined at:
  8388 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;  fp              1   22[COMRAM] PTR struct _IO_FILE
  8391 ;;		 -> sprintf@f(12), 
  8392 ;;  d               2   23[COMRAM] int 
  8393 ;; Auto vars:     Size  Location     Type
  8394 ;;  i               2   31[COMRAM] int 
  8395 ;;  w               2   28[COMRAM] int 
  8396 ;;  s               1   30[COMRAM] unsigned char 
  8397 ;;  p               1   27[COMRAM] _Bool 
  8398 ;; Return value:  Size  Location     Type
  8399 ;;                  1    wreg      void 
  8400 ;; Registers used:
  8401 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8402 ;; Tracked objects:
  8403 ;;		On entry : 0/0
  8404 ;;		On exit  : 0/0
  8405 ;;		Unchanged: 0/0
  8406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8407 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8408 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8410 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8411 ;;Total ram usage:       11 bytes
  8412 ;; Hardware stack levels used: 1
  8413 ;; Hardware stack levels required when called: 4
  8414 ;; This function calls:
  8415 ;;		___awdiv
  8416 ;;		___awmod
  8417 ;;		_abs
  8418 ;;		_pad
  8419 ;; This function is called by:
  8420 ;;		_vfpfcnvrt
  8421 ;; This function uses a non-reentrant model
  8422 ;;
  8423                           
  8424                           	psect	text44
  8425   002ABE                     __ptext44:
  8426                           	callstack 0
  8427   002ABE                     _dtoa:
  8428                           	callstack 22
  8429   002ABE                     
  8430                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  8431   002ABE  0E01               	movlw	1
  8432   002AC0  6E1C               	movwf	dtoa@p^0,c
  8433   002AC2                     
  8434                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  8435   002AC2  BE19               	btfsc	(dtoa@d+1)^0,7,c
  8436   002AC4  EF66  F015         	goto	u4161
  8437   002AC8  EF69  F015         	goto	u4160
  8438   002ACC                     u4161:
  8439   002ACC  0E01               	movlw	1
  8440   002ACE  EF6A  F015         	goto	u4170
  8441   002AD2                     u4160:
  8442   002AD2  0E00               	movlw	0
  8443   002AD4                     u4170:
  8444   002AD4  6E1F               	movwf	dtoa@s^0,c
  8445   002AD6                     
  8446                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  8447   002AD6  C0D0  F01D         	movff	_width,dtoa@w
  8448   002ADA  C0D1  F01E         	movff	_width+1,dtoa@w+1
  8449   002ADE                     
  8450                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  8451   002ADE  501F               	movf	dtoa@s^0,w,c
  8452   002AE0  B4D8               	btfsc	status,2,c
  8453   002AE2  EF75  F015         	goto	u4181
  8454   002AE6  EF77  F015         	goto	u4180
  8455   002AEA                     u4181:
  8456   002AEA  EF8E  F015         	goto	l1271
  8457   002AEE                     u4180:
  8458   002AEE                     
  8459                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  8460   002AEE  061D               	decf	dtoa@w^0,f,c
  8461   002AF0  A0D8               	btfss	status,0,c
  8462   002AF2  061E               	decf	(dtoa@w+1)^0,f,c
  8463   002AF4                     
  8464                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  8465   002AF4  501F               	movf	dtoa@s^0,w,c
  8466   002AF6  A4D8               	btfss	status,2,c
  8467   002AF8  EF80  F015         	goto	u4191
  8468   002AFC  EF82  F015         	goto	u4190
  8469   002B00                     u4191:
  8470   002B00  EF88  F015         	goto	l4661
  8471   002B04                     u4190:
  8472   002B04  0E00               	movlw	0
  8473   002B06  6E1B               	movwf	(_dtoa$2657+1)^0,c
  8474   002B08  0E2B               	movlw	43
  8475   002B0A  6E1A               	movwf	_dtoa$2657^0,c
  8476   002B0C  EF8C  F015         	goto	l4663
  8477   002B10                     l4661:
  8478   002B10  0E00               	movlw	0
  8479   002B12  6E1B               	movwf	(_dtoa$2657+1)^0,c
  8480   002B14  0E2D               	movlw	45
  8481   002B16  6E1A               	movwf	_dtoa$2657^0,c
  8482   002B18                     l4663:
  8483   002B18  C01A  F01F         	movff	_dtoa$2657,dtoa@s
  8484   002B1C                     l1271:
  8485                           
  8486                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  8487   002B1C  0E00               	movlw	0
  8488   002B1E  6E21               	movwf	(dtoa@i+1)^0,c
  8489   002B20  0E1F               	movlw	31
  8490   002B22  6E20               	movwf	dtoa@i^0,c
  8491   002B24                     
  8492                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  8493   002B24  0E00               	movlw	0
  8494   002B26  0101               	movlb	1	; () banked
  8495   002B28  6F6F               	movwf	(_dbuf+31)& (0+255),b
  8496                           
  8497                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  8498   002B2A  EFC6  F015         	goto	l4677
  8499   002B2E                     l4667:
  8500                           
  8501                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  8502   002B2E  0620               	decf	dtoa@i^0,f,c
  8503   002B30  A0D8               	btfss	status,0,c
  8504   002B32  0621               	decf	(dtoa@i+1)^0,f,c
  8505   002B34                     
  8506                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  8507   002B34  0E50               	movlw	low _dbuf
  8508   002B36  2420               	addwf	dtoa@i^0,w,c
  8509   002B38  6ED9               	movwf	fsr2l,c
  8510   002B3A  0E01               	movlw	high _dbuf
  8511   002B3C  2021               	addwfc	(dtoa@i+1)^0,w,c
  8512   002B3E  6EDA               	movwf	fsr2h,c
  8513   002B40  C018  F001         	movff	dtoa@d,___awmod@dividend
  8514   002B44  C019  F002         	movff	dtoa@d+1,___awmod@dividend+1
  8515   002B48  0E00               	movlw	0
  8516   002B4A  6E04               	movwf	(___awmod@divisor+1)^0,c
  8517   002B4C  0E0A               	movlw	10
  8518   002B4E  6E03               	movwf	___awmod@divisor^0,c
  8519   002B50  ECA0  F018         	call	___awmod	;wreg free
  8520   002B54  C001  F007         	movff	?___awmod,abs@a
  8521   002B58  C002  F008         	movff	?___awmod+1,abs@a+1
  8522   002B5C  EC77  F01D         	call	_abs	;wreg free
  8523   002B60  5007               	movf	?_abs^0,w,c
  8524   002B62  0F30               	addlw	48
  8525   002B64  6EDF               	movwf	indf2,c
  8526   002B66                     
  8527                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  8528   002B66  0E00               	movlw	0
  8529   002B68  6E1C               	movwf	dtoa@p^0,c
  8530   002B6A                     
  8531                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  8532   002B6A  061D               	decf	dtoa@w^0,f,c
  8533   002B6C  A0D8               	btfss	status,0,c
  8534   002B6E  061E               	decf	(dtoa@w+1)^0,f,c
  8535   002B70                     
  8536                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  8537   002B70  C018  F001         	movff	dtoa@d,___awdiv@dividend
  8538   002B74  C019  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  8539   002B78  0E00               	movlw	0
  8540   002B7A  6E04               	movwf	(___awdiv@divisor+1)^0,c
  8541   002B7C  0E0A               	movlw	10
  8542   002B7E  6E03               	movwf	___awdiv@divisor^0,c
  8543   002B80  EC3E  F018         	call	___awdiv	;wreg free
  8544   002B84  C001  F018         	movff	?___awdiv,dtoa@d
  8545   002B88  C002  F019         	movff	?___awdiv+1,dtoa@d+1
  8546   002B8C                     l4677:
  8547                           
  8548                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  8549   002B8C  BE21               	btfsc	(dtoa@i+1)^0,7,c
  8550   002B8E  EFD1  F015         	goto	u4201
  8551   002B92  5021               	movf	(dtoa@i+1)^0,w,c
  8552   002B94  E108               	bnz	u4200
  8553   002B96  0420               	decf	dtoa@i^0,w,c
  8554   002B98  A0D8               	btfss	status,0,c
  8555   002B9A  EFD1  F015         	goto	u4201
  8556   002B9E  EFD3  F015         	goto	u4200
  8557   002BA2                     u4201:
  8558   002BA2  EFF8  F015         	goto	l4687
  8559   002BA6                     u4200:
  8560   002BA6  5018               	movf	dtoa@d^0,w,c
  8561   002BA8  1019               	iorwf	(dtoa@d+1)^0,w,c
  8562   002BAA  A4D8               	btfss	status,2,c
  8563   002BAC  EFDA  F015         	goto	u4211
  8564   002BB0  EFDC  F015         	goto	u4210
  8565   002BB4                     u4211:
  8566   002BB4  EF97  F015         	goto	l4667
  8567   002BB8                     u4210:
  8568   002BB8  501C               	movf	dtoa@p^0,w,c
  8569   002BBA  A4D8               	btfss	status,2,c
  8570   002BBC  EFE2  F015         	goto	u4221
  8571   002BC0  EFE4  F015         	goto	u4220
  8572   002BC4                     u4221:
  8573   002BC4  EF97  F015         	goto	l4667
  8574   002BC8                     u4220:
  8575   002BC8  BE1E               	btfsc	(dtoa@w+1)^0,7,c
  8576   002BCA  EFEF  F015         	goto	u4231
  8577   002BCE  501E               	movf	(dtoa@w+1)^0,w,c
  8578   002BD0  E108               	bnz	u4230
  8579   002BD2  041D               	decf	dtoa@w^0,w,c
  8580   002BD4  A0D8               	btfss	status,0,c
  8581   002BD6  EFEF  F015         	goto	u4231
  8582   002BDA  EFF1  F015         	goto	u4230
  8583   002BDE                     u4231:
  8584   002BDE  EFF8  F015         	goto	l4687
  8585   002BE2                     u4230:
  8586   002BE2  B25B               	btfsc	_flags^0,1,c
  8587   002BE4  EFF6  F015         	goto	u4241
  8588   002BE8  EFF8  F015         	goto	u4240
  8589   002BEC                     u4241:
  8590   002BEC  EF97  F015         	goto	l4667
  8591   002BF0                     u4240:
  8592   002BF0                     l4687:
  8593                           
  8594                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  8595   002BF0  501F               	movf	dtoa@s^0,w,c
  8596   002BF2  B4D8               	btfsc	status,2,c
  8597   002BF4  EFFE  F015         	goto	u4251
  8598   002BF8  EF00  F016         	goto	u4250
  8599   002BFC                     u4251:
  8600   002BFC  EF0B  F016         	goto	l4693
  8601   002C00                     u4250:
  8602   002C00                     
  8603                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  8604   002C00  0620               	decf	dtoa@i^0,f,c
  8605   002C02  A0D8               	btfss	status,0,c
  8606   002C04  0621               	decf	(dtoa@i+1)^0,f,c
  8607   002C06                     
  8608                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  8609   002C06  0E50               	movlw	low _dbuf
  8610   002C08  2420               	addwf	dtoa@i^0,w,c
  8611   002C0A  6ED9               	movwf	fsr2l,c
  8612   002C0C  0E01               	movlw	high _dbuf
  8613   002C0E  2021               	addwfc	(dtoa@i+1)^0,w,c
  8614   002C10  6EDA               	movwf	fsr2h,c
  8615   002C12  C01F  FFDF         	movff	dtoa@s,indf2
  8616   002C16                     l4693:
  8617                           
  8618                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  8619   002C16  C017  F00F         	movff	dtoa@fp,pad@fp
  8620   002C1A  0E50               	movlw	low _dbuf
  8621   002C1C  2420               	addwf	dtoa@i^0,w,c
  8622   002C1E  6E10               	movwf	pad@buf^0,c
  8623   002C20  0E01               	movlw	high _dbuf
  8624   002C22  2021               	addwfc	(dtoa@i+1)^0,w,c
  8625   002C24  6E11               	movwf	(pad@buf+1)^0,c
  8626   002C26  C01D  F012         	movff	dtoa@w,pad@p
  8627   002C2A  C01E  F013         	movff	dtoa@w+1,pad@p+1
  8628   002C2E  ECF9  F019         	call	_pad	;wreg free
  8629   002C32  0012               	return		;funcret
  8630   002C34                     __end_of_dtoa:
  8631                           	callstack 0
  8632                           
  8633 ;; *************** function _pad *****************
  8634 ;; Defined at:
  8635 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  8636 ;; Parameters:    Size  Location     Type
  8637 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  8638 ;;		 -> sprintf@f(12), 
  8639 ;;  buf             2   15[COMRAM] PTR unsigned char 
  8640 ;;		 -> dbuf(32), 
  8641 ;;  p               2   17[COMRAM] int 
  8642 ;; Auto vars:     Size  Location     Type
  8643 ;;  i               2   20[COMRAM] int 
  8644 ;; Return value:  Size  Location     Type
  8645 ;;                  1    wreg      void 
  8646 ;; Registers used:
  8647 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8648 ;; Tracked objects:
  8649 ;;		On entry : 0/0
  8650 ;;		On exit  : 0/0
  8651 ;;		Unchanged: 0/0
  8652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8653 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8654 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8655 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8656 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8657 ;;Total ram usage:        8 bytes
  8658 ;; Hardware stack levels used: 1
  8659 ;; Hardware stack levels required when called: 3
  8660 ;; This function calls:
  8661 ;;		_fputc
  8662 ;;		_fputs
  8663 ;; This function is called by:
  8664 ;;		_dtoa
  8665 ;; This function uses a non-reentrant model
  8666 ;;
  8667                           
  8668                           	psect	text45
  8669   0033F2                     __ptext45:
  8670                           	callstack 0
  8671   0033F2                     _pad:
  8672                           	callstack 22
  8673   0033F2                     
  8674                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  8675   0033F2  A05B               	btfss	_flags^0,0,c
  8676   0033F4  EFFE  F019         	goto	u4121
  8677   0033F8  EF00  F01A         	goto	u4120
  8678   0033FC                     u4121:
  8679   0033FC  EF08  F01A         	goto	l4635
  8680   003400                     u4120:
  8681   003400                     
  8682                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  8683   003400  C010  F009         	movff	pad@buf,fputs@s
  8684   003404  C011  F00A         	movff	pad@buf+1,fputs@s+1
  8685   003408  C00F  F00B         	movff	pad@fp,fputs@fp
  8686   00340C  EC06  F01D         	call	_fputs	;wreg free
  8687   003410                     l4635:
  8688                           
  8689                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  8690   003410  BE13               	btfsc	(pad@p+1)^0,7,c
  8691   003412  EF0F  F01A         	goto	u4130
  8692   003416  EF0D  F01A         	goto	u4131
  8693   00341A                     u4131:
  8694   00341A  EF13  F01A         	goto	l1263
  8695   00341E                     u4130:
  8696   00341E                     
  8697                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  8698   00341E  0E00               	movlw	0
  8699   003420  6E13               	movwf	(pad@p+1)^0,c
  8700   003422  0E00               	movlw	0
  8701   003424  6E12               	movwf	pad@p^0,c
  8702   003426                     l1263:
  8703                           
  8704                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  8705   003426  0E00               	movlw	0
  8706   003428  6E16               	movwf	(pad@i+1)^0,c
  8707   00342A  0E00               	movlw	0
  8708   00342C  6E15               	movwf	pad@i^0,c
  8709                           
  8710                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  8711   00342E  EF23  F01A         	goto	l4643
  8712   003432                     l4639:
  8713                           
  8714                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  8715   003432  0E00               	movlw	0
  8716   003434  6E02               	movwf	(fputc@c+1)^0,c
  8717   003436  0E20               	movlw	32
  8718   003438  6E01               	movwf	fputc@c^0,c
  8719   00343A  C00F  F003         	movff	pad@fp,fputc@fp
  8720   00343E  ECA4  F019         	call	_fputc	;wreg free
  8721   003442                     
  8722                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  8723   003442  4A15               	infsnz	pad@i^0,f,c
  8724   003444  2A16               	incf	(pad@i+1)^0,f,c
  8725   003446                     l4643:
  8726                           
  8727                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  8728   003446  5012               	movf	pad@p^0,w,c
  8729   003448  5C15               	subwf	pad@i^0,w,c
  8730   00344A  5016               	movf	(pad@i+1)^0,w,c
  8731   00344C  0A80               	xorlw	128
  8732   00344E  6E14               	movwf	??_pad^0,c
  8733   003450  5013               	movf	(pad@p+1)^0,w,c
  8734   003452  0A80               	xorlw	128
  8735   003454  5814               	subwfb	??_pad^0,w,c
  8736   003456  A0D8               	btfss	status,0,c
  8737   003458  EF30  F01A         	goto	u4141
  8738   00345C  EF32  F01A         	goto	u4140
  8739   003460                     u4141:
  8740   003460  EF19  F01A         	goto	l4639
  8741   003464                     u4140:
  8742   003464                     
  8743                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  8744   003464  B05B               	btfsc	_flags^0,0,c
  8745   003466  EF37  F01A         	goto	u4151
  8746   00346A  EF39  F01A         	goto	u4150
  8747   00346E                     u4151:
  8748   00346E  EF41  F01A         	goto	l1268
  8749   003472                     u4150:
  8750   003472                     
  8751                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  8752   003472  C010  F009         	movff	pad@buf,fputs@s
  8753   003476  C011  F00A         	movff	pad@buf+1,fputs@s+1
  8754   00347A  C00F  F00B         	movff	pad@fp,fputs@fp
  8755   00347E  EC06  F01D         	call	_fputs	;wreg free
  8756   003482                     l1268:
  8757   003482  0012               	return		;funcret
  8758   003484                     __end_of_pad:
  8759                           	callstack 0
  8760                           
  8761 ;; *************** function _fputs *****************
  8762 ;; Defined at:
  8763 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  8764 ;; Parameters:    Size  Location     Type
  8765 ;;  s               2    8[COMRAM] PTR const unsigned char 
  8766 ;;		 -> dbuf(32), 
  8767 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  8768 ;;		 -> sprintf@f(12), 
  8769 ;; Auto vars:     Size  Location     Type
  8770 ;;  i               2   12[COMRAM] int 
  8771 ;;  c               1   11[COMRAM] unsigned char 
  8772 ;; Return value:  Size  Location     Type
  8773 ;;                  2    8[COMRAM] int 
  8774 ;; Registers used:
  8775 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8776 ;; Tracked objects:
  8777 ;;		On entry : 0/0
  8778 ;;		On exit  : 0/0
  8779 ;;		Unchanged: 0/0
  8780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8781 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8782 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8784 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8785 ;;Total ram usage:        6 bytes
  8786 ;; Hardware stack levels used: 1
  8787 ;; Hardware stack levels required when called: 2
  8788 ;; This function calls:
  8789 ;;		_fputc
  8790 ;; This function is called by:
  8791 ;;		_pad
  8792 ;; This function uses a non-reentrant model
  8793 ;;
  8794                           
  8795                           	psect	text46
  8796   003A0C                     __ptext46:
  8797                           	callstack 0
  8798   003A0C                     _fputs:
  8799                           	callstack 22
  8800   003A0C  0E00               	movlw	0
  8801   003A0E  6E0E               	movwf	(fputs@i+1)^0,c
  8802   003A10  0E00               	movlw	0
  8803   003A12  6E0D               	movwf	fputs@i^0,c
  8804   003A14  EF15  F01D         	goto	l4629
  8805   003A18                     l4625:
  8806   003A18  C00C  F001         	movff	fputs@c,fputc@c
  8807   003A1C  6A02               	clrf	(fputc@c+1)^0,c
  8808   003A1E  C00B  F003         	movff	fputs@fp,fputc@fp
  8809   003A22  ECA4  F019         	call	_fputc	;wreg free
  8810   003A26  4A0D               	infsnz	fputs@i^0,f,c
  8811   003A28  2A0E               	incf	(fputs@i+1)^0,f,c
  8812   003A2A                     l4629:
  8813   003A2A  500D               	movf	fputs@i^0,w,c
  8814   003A2C  2409               	addwf	fputs@s^0,w,c
  8815   003A2E  6ED9               	movwf	fsr2l,c
  8816   003A30  500E               	movf	(fputs@i+1)^0,w,c
  8817   003A32  200A               	addwfc	(fputs@s+1)^0,w,c
  8818   003A34  6EDA               	movwf	fsr2h,c
  8819   003A36  50DF               	movf	indf2,w,c
  8820   003A38  6E0C               	movwf	fputs@c^0,c
  8821   003A3A  500C               	movf	fputs@c^0,w,c
  8822   003A3C  A4D8               	btfss	status,2,c
  8823   003A3E  EF23  F01D         	goto	u4111
  8824   003A42  EF25  F01D         	goto	u4110
  8825   003A46                     u4111:
  8826   003A46  EF0C  F01D         	goto	l4625
  8827   003A4A                     u4110:
  8828   003A4A  0012               	return		;funcret
  8829   003A4C                     __end_of_fputs:
  8830                           	callstack 0
  8831                           
  8832 ;; *************** function _fputc *****************
  8833 ;; Defined at:
  8834 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  8835 ;; Parameters:    Size  Location     Type
  8836 ;;  c               2    0[COMRAM] int 
  8837 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  8838 ;;		 -> sprintf@f(12), 
  8839 ;; Auto vars:     Size  Location     Type
  8840 ;;		None
  8841 ;; Return value:  Size  Location     Type
  8842 ;;                  2    0[COMRAM] int 
  8843 ;; Registers used:
  8844 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8845 ;; Tracked objects:
  8846 ;;		On entry : 0/0
  8847 ;;		On exit  : 0/0
  8848 ;;		Unchanged: 0/0
  8849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8850 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8852 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8853 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8854 ;;Total ram usage:        8 bytes
  8855 ;; Hardware stack levels used: 1
  8856 ;; Hardware stack levels required when called: 1
  8857 ;; This function calls:
  8858 ;;		_putch
  8859 ;; This function is called by:
  8860 ;;		_pad
  8861 ;;		_vfpfcnvrt
  8862 ;;		_fputs
  8863 ;; This function uses a non-reentrant model
  8864 ;;
  8865                           
  8866                           	psect	text47
  8867   003348                     __ptext47:
  8868                           	callstack 0
  8869   003348                     _fputc:
  8870                           	callstack 25
  8871   003348  5003               	movf	fputc@fp^0,w,c
  8872   00334A  B4D8               	btfsc	status,2,c
  8873   00334C  EFAA  F019         	goto	u2071
  8874   003350  EFAC  F019         	goto	u2070
  8875   003354                     u2071:
  8876   003354  EFB4  F019         	goto	l2995
  8877   003358                     u2070:
  8878   003358  5003               	movf	fputc@fp^0,w,c
  8879   00335A  A4D8               	btfss	status,2,c
  8880   00335C  EFB2  F019         	goto	u2081
  8881   003360  EFB4  F019         	goto	u2080
  8882   003364                     u2081:
  8883   003364  EFB9  F019         	goto	l2997
  8884   003368                     u2080:
  8885   003368                     l2995:
  8886   003368  5001               	movf	fputc@c^0,w,c
  8887   00336A  EC90  F01F         	call	_putch
  8888   00336E  EFF8  F019         	goto	l1332
  8889   003372                     l2997:
  8890   003372  5003               	movf	fputc@fp^0,w,c
  8891   003374  6ED9               	movwf	fsr2l,c
  8892   003376  6ADA               	clrf	fsr2h,c
  8893   003378  0E0A               	movlw	10
  8894   00337A  26D9               	addwf	fsr2l,f,c
  8895   00337C  50DE               	movf	postinc2,w,c
  8896   00337E  10DE               	iorwf	postinc2,w,c
  8897   003380  B4D8               	btfsc	status,2,c
  8898   003382  EFC5  F019         	goto	u2091
  8899   003386  EFC7  F019         	goto	u2090
  8900   00338A                     u2091:
  8901   00338A  EFE0  F019         	goto	l3001
  8902   00338E                     u2090:
  8903   00338E  5003               	movf	fputc@fp^0,w,c
  8904   003390  6ED9               	movwf	fsr2l,c
  8905   003392  6ADA               	clrf	fsr2h,c
  8906   003394  0E0A               	movlw	10
  8907   003396  26D9               	addwf	fsr2l,f,c
  8908   003398  5003               	movf	fputc@fp^0,w,c
  8909   00339A  6EE1               	movwf	fsr1l,c
  8910   00339C  6AE2               	clrf	fsr1h,c
  8911   00339E  0E03               	movlw	3
  8912   0033A0  26E1               	addwf	fsr1l,f,c
  8913   0033A2  50DE               	movf	postinc2,w,c
  8914   0033A4  5CE6               	subwf	postinc1,w,c
  8915   0033A6  50E6               	movf	postinc1,w,c
  8916   0033A8  0A80               	xorlw	128
  8917   0033AA  6E08               	movwf	(??_fputc+4)^0,c
  8918   0033AC  50DE               	movf	postinc2,w,c
  8919   0033AE  0A80               	xorlw	128
  8920   0033B0  5808               	subwfb	(??_fputc+4)^0,w,c
  8921   0033B2  B0D8               	btfsc	status,0,c
  8922   0033B4  EFDE  F019         	goto	u2101
  8923   0033B8  EFE0  F019         	goto	u2100
  8924   0033BC                     u2101:
  8925   0033BC  EFF8  F019         	goto	l1332
  8926   0033C0                     u2100:
  8927   0033C0                     l3001:
  8928   0033C0  5003               	movf	fputc@fp^0,w,c
  8929   0033C2  6ED9               	movwf	fsr2l,c
  8930   0033C4  6ADA               	clrf	fsr2h,c
  8931   0033C6  0E03               	movlw	3
  8932   0033C8  26D9               	addwf	fsr2l,f,c
  8933   0033CA  50DF               	movf	indf2,w,c
  8934   0033CC  6E04               	movwf	??_fputc^0,c
  8935   0033CE  5003               	movf	fputc@fp^0,w,c
  8936   0033D0  6ED9               	movwf	fsr2l,c
  8937   0033D2  6ADA               	clrf	fsr2h,c
  8938   0033D4  50DF               	movf	indf2,w,c
  8939   0033D6  2404               	addwf	??_fputc^0,w,c
  8940   0033D8  6ED9               	movwf	fsr2l,c
  8941   0033DA  6ADA               	clrf	fsr2h,c
  8942   0033DC  C001  FFDF         	movff	fputc@c,indf2
  8943   0033E0  5003               	movf	fputc@fp^0,w,c
  8944   0033E2  6ED9               	movwf	fsr2l,c
  8945   0033E4  6ADA               	clrf	fsr2h,c
  8946   0033E6  0E03               	movlw	3
  8947   0033E8  26D9               	addwf	fsr2l,f,c
  8948   0033EA  2ADE               	incf	postinc2,f,c
  8949   0033EC  0E00               	movlw	0
  8950   0033EE  22DD               	addwfc	postdec2,f,c
  8951   0033F0                     l1332:
  8952   0033F0  0012               	return		;funcret
  8953   0033F2                     __end_of_fputc:
  8954                           	callstack 0
  8955                           
  8956 ;; *************** function _putch *****************
  8957 ;; Defined at:
  8958 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  8959 ;; Parameters:    Size  Location     Type
  8960 ;;  c               1    wreg     unsigned char 
  8961 ;; Auto vars:     Size  Location     Type
  8962 ;;  c               1    0[COMRAM] unsigned char 
  8963 ;; Return value:  Size  Location     Type
  8964 ;;                  1    wreg      void 
  8965 ;; Registers used:
  8966 ;;		wreg
  8967 ;; Tracked objects:
  8968 ;;		On entry : 0/0
  8969 ;;		On exit  : 0/0
  8970 ;;		Unchanged: 0/0
  8971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8976 ;;Total ram usage:        0 bytes
  8977 ;; Hardware stack levels used: 1
  8978 ;; This function calls:
  8979 ;;		Nothing
  8980 ;; This function is called by:
  8981 ;;		_fputc
  8982 ;; This function uses a non-reentrant model
  8983 ;;
  8984                           
  8985                           	psect	text48
  8986   003F20                     __ptext48:
  8987                           	callstack 0
  8988   003F20                     _putch:
  8989                           	callstack 25
  8990   003F20  0012               	return		;funcret
  8991   003F22                     __end_of_putch:
  8992                           	callstack 0
  8993                           
  8994 ;; *************** function _abs *****************
  8995 ;; Defined at:
  8996 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  8997 ;; Parameters:    Size  Location     Type
  8998 ;;  a               2    6[COMRAM] int 
  8999 ;; Auto vars:     Size  Location     Type
  9000 ;;		None
  9001 ;; Return value:  Size  Location     Type
  9002 ;;                  2    6[COMRAM] int 
  9003 ;; Registers used:
  9004 ;;		wreg, status,2, status,0
  9005 ;; Tracked objects:
  9006 ;;		On entry : 0/0
  9007 ;;		On exit  : 0/0
  9008 ;;		Unchanged: 0/0
  9009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9010 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9012 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9013 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9014 ;;Total ram usage:        4 bytes
  9015 ;; Hardware stack levels used: 1
  9016 ;; This function calls:
  9017 ;;		Nothing
  9018 ;; This function is called by:
  9019 ;;		_dtoa
  9020 ;; This function uses a non-reentrant model
  9021 ;;
  9022                           
  9023                           	psect	text49
  9024   003AEE                     __ptext49:
  9025                           	callstack 0
  9026   003AEE                     _abs:
  9027                           	callstack 25
  9028   003AEE  BE08               	btfsc	(abs@a+1)^0,7,c
  9029   003AF0  EF7C  F01D         	goto	u2311
  9030   003AF4  EF7E  F01D         	goto	u2310
  9031   003AF8                     u2311:
  9032   003AF8  EF84  F01D         	goto	l1317
  9033   003AFC                     u2310:
  9034   003AFC  C007  F007         	movff	abs@a,?_abs
  9035   003B00  C008  F008         	movff	abs@a+1,?_abs+1
  9036   003B04  EF90  F01D         	goto	l1320
  9037   003B08                     l1317:
  9038   003B08  C007  F009         	movff	abs@a,??_abs
  9039   003B0C  C008  F00A         	movff	abs@a+1,??_abs+1
  9040   003B10  1E09               	comf	??_abs^0,f,c
  9041   003B12  1E0A               	comf	(??_abs+1)^0,f,c
  9042   003B14  4A09               	infsnz	??_abs^0,f,c
  9043   003B16  2A0A               	incf	(??_abs+1)^0,f,c
  9044   003B18  C009  F007         	movff	??_abs,?_abs
  9045   003B1C  C00A  F008         	movff	??_abs+1,?_abs+1
  9046   003B20                     l1320:
  9047   003B20  0012               	return		;funcret
  9048   003B22                     __end_of_abs:
  9049                           	callstack 0
  9050                           
  9051 ;; *************** function ___awmod *****************
  9052 ;; Defined at:
  9053 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  9054 ;; Parameters:    Size  Location     Type
  9055 ;;  dividend        2    0[COMRAM] int 
  9056 ;;  divisor         2    2[COMRAM] int 
  9057 ;; Auto vars:     Size  Location     Type
  9058 ;;  sign            1    5[COMRAM] unsigned char 
  9059 ;;  counter         1    4[COMRAM] unsigned char 
  9060 ;; Return value:  Size  Location     Type
  9061 ;;                  2    0[COMRAM] int 
  9062 ;; Registers used:
  9063 ;;		wreg, status,2, status,0
  9064 ;; Tracked objects:
  9065 ;;		On entry : 0/0
  9066 ;;		On exit  : 0/0
  9067 ;;		Unchanged: 0/0
  9068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9069 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9070 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9072 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9073 ;;Total ram usage:        6 bytes
  9074 ;; Hardware stack levels used: 1
  9075 ;; This function calls:
  9076 ;;		Nothing
  9077 ;; This function is called by:
  9078 ;;		_dtoa
  9079 ;; This function uses a non-reentrant model
  9080 ;;
  9081                           
  9082                           	psect	text50
  9083   003140                     __ptext50:
  9084                           	callstack 0
  9085   003140                     ___awmod:
  9086                           	callstack 25
  9087   003140  0E00               	movlw	0
  9088   003142  6E06               	movwf	___awmod@sign^0,c
  9089   003144  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  9090   003146  EFA9  F018         	goto	u2180
  9091   00314A  EFA7  F018         	goto	u2181
  9092   00314E                     u2181:
  9093   00314E  EFAF  F018         	goto	l3071
  9094   003152                     u2180:
  9095   003152  6C01               	negf	___awmod@dividend^0,c
  9096   003154  1E02               	comf	(___awmod@dividend+1)^0,f,c
  9097   003156  B0D8               	btfsc	status,0,c
  9098   003158  2A02               	incf	(___awmod@dividend+1)^0,f,c
  9099   00315A  0E01               	movlw	1
  9100   00315C  6E06               	movwf	___awmod@sign^0,c
  9101   00315E                     l3071:
  9102   00315E  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  9103   003160  EFB6  F018         	goto	u2190
  9104   003164  EFB4  F018         	goto	u2191
  9105   003168                     u2191:
  9106   003168  EFBA  F018         	goto	l3075
  9107   00316C                     u2190:
  9108   00316C  6C03               	negf	___awmod@divisor^0,c
  9109   00316E  1E04               	comf	(___awmod@divisor+1)^0,f,c
  9110   003170  B0D8               	btfsc	status,0,c
  9111   003172  2A04               	incf	(___awmod@divisor+1)^0,f,c
  9112   003174                     l3075:
  9113   003174  5003               	movf	___awmod@divisor^0,w,c
  9114   003176  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  9115   003178  B4D8               	btfsc	status,2,c
  9116   00317A  EFC1  F018         	goto	u2201
  9117   00317E  EFC3  F018         	goto	u2200
  9118   003182                     u2201:
  9119   003182  EFE7  F018         	goto	l3091
  9120   003186                     u2200:
  9121   003186  0E01               	movlw	1
  9122   003188  6E05               	movwf	___awmod@counter^0,c
  9123   00318A  EFCB  F018         	goto	l3081
  9124   00318E                     l3079:
  9125   00318E  90D8               	bcf	status,0,c
  9126   003190  3603               	rlcf	___awmod@divisor^0,f,c
  9127   003192  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  9128   003194  2A05               	incf	___awmod@counter^0,f,c
  9129   003196                     l3081:
  9130   003196  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  9131   003198  EFD0  F018         	goto	u2211
  9132   00319C  EFD2  F018         	goto	u2210
  9133   0031A0                     u2211:
  9134   0031A0  EFC7  F018         	goto	l3079
  9135   0031A4                     u2210:
  9136   0031A4                     l3083:
  9137   0031A4  5003               	movf	___awmod@divisor^0,w,c
  9138   0031A6  5C01               	subwf	___awmod@dividend^0,w,c
  9139   0031A8  5004               	movf	(___awmod@divisor+1)^0,w,c
  9140   0031AA  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  9141   0031AC  A0D8               	btfss	status,0,c
  9142   0031AE  EFDB  F018         	goto	u2221
  9143   0031B2  EFDD  F018         	goto	u2220
  9144   0031B6                     u2221:
  9145   0031B6  EFE1  F018         	goto	l3087
  9146   0031BA                     u2220:
  9147   0031BA  5003               	movf	___awmod@divisor^0,w,c
  9148   0031BC  5E01               	subwf	___awmod@dividend^0,f,c
  9149   0031BE  5004               	movf	(___awmod@divisor+1)^0,w,c
  9150   0031C0  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  9151   0031C2                     l3087:
  9152   0031C2  90D8               	bcf	status,0,c
  9153   0031C4  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  9154   0031C6  3203               	rrcf	___awmod@divisor^0,f,c
  9155   0031C8  2E05               	decfsz	___awmod@counter^0,f,c
  9156   0031CA  EFD2  F018         	goto	l3083
  9157   0031CE                     l3091:
  9158   0031CE  5006               	movf	___awmod@sign^0,w,c
  9159   0031D0  B4D8               	btfsc	status,2,c
  9160   0031D2  EFED  F018         	goto	u2231
  9161   0031D6  EFEF  F018         	goto	u2230
  9162   0031DA                     u2231:
  9163   0031DA  EFF3  F018         	goto	l3095
  9164   0031DE                     u2230:
  9165   0031DE  6C01               	negf	___awmod@dividend^0,c
  9166   0031E0  1E02               	comf	(___awmod@dividend+1)^0,f,c
  9167   0031E2  B0D8               	btfsc	status,0,c
  9168   0031E4  2A02               	incf	(___awmod@dividend+1)^0,f,c
  9169   0031E6                     l3095:
  9170   0031E6  C001  F001         	movff	___awmod@dividend,?___awmod
  9171   0031EA  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  9172   0031EE  0012               	return		;funcret
  9173   0031F0                     __end_of___awmod:
  9174                           	callstack 0
  9175                           
  9176 ;; *************** function ___awdiv *****************
  9177 ;; Defined at:
  9178 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  9179 ;; Parameters:    Size  Location     Type
  9180 ;;  dividend        2    0[COMRAM] int 
  9181 ;;  divisor         2    2[COMRAM] int 
  9182 ;; Auto vars:     Size  Location     Type
  9183 ;;  quotient        2    6[COMRAM] int 
  9184 ;;  sign            1    5[COMRAM] unsigned char 
  9185 ;;  counter         1    4[COMRAM] unsigned char 
  9186 ;; Return value:  Size  Location     Type
  9187 ;;                  2    0[COMRAM] int 
  9188 ;; Registers used:
  9189 ;;		wreg, status,2, status,0
  9190 ;; Tracked objects:
  9191 ;;		On entry : 0/0
  9192 ;;		On exit  : 0/0
  9193 ;;		Unchanged: 0/0
  9194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9195 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9196 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9198 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9199 ;;Total ram usage:        8 bytes
  9200 ;; Hardware stack levels used: 1
  9201 ;; This function calls:
  9202 ;;		Nothing
  9203 ;; This function is called by:
  9204 ;;		_dtoa
  9205 ;; This function uses a non-reentrant model
  9206 ;;
  9207                           
  9208                           	psect	text51
  9209   00307C                     __ptext51:
  9210                           	callstack 0
  9211   00307C                     ___awdiv:
  9212                           	callstack 25
  9213   00307C  0E00               	movlw	0
  9214   00307E  6E06               	movwf	___awdiv@sign^0,c
  9215   003080  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  9216   003082  EF47  F018         	goto	u2120
  9217   003086  EF45  F018         	goto	u2121
  9218   00308A                     u2121:
  9219   00308A  EF4D  F018         	goto	l3027
  9220   00308E                     u2120:
  9221   00308E  6C03               	negf	___awdiv@divisor^0,c
  9222   003090  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  9223   003092  B0D8               	btfsc	status,0,c
  9224   003094  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  9225   003096  0E01               	movlw	1
  9226   003098  6E06               	movwf	___awdiv@sign^0,c
  9227   00309A                     l3027:
  9228   00309A  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  9229   00309C  EF54  F018         	goto	u2130
  9230   0030A0  EF52  F018         	goto	u2131
  9231   0030A4                     u2131:
  9232   0030A4  EF5A  F018         	goto	l3033
  9233   0030A8                     u2130:
  9234   0030A8  6C01               	negf	___awdiv@dividend^0,c
  9235   0030AA  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  9236   0030AC  B0D8               	btfsc	status,0,c
  9237   0030AE  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  9238   0030B0  0E01               	movlw	1
  9239   0030B2  1A06               	xorwf	___awdiv@sign^0,f,c
  9240   0030B4                     l3033:
  9241   0030B4  0E00               	movlw	0
  9242   0030B6  6E08               	movwf	(___awdiv@quotient+1)^0,c
  9243   0030B8  0E00               	movlw	0
  9244   0030BA  6E07               	movwf	___awdiv@quotient^0,c
  9245   0030BC  5003               	movf	___awdiv@divisor^0,w,c
  9246   0030BE  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  9247   0030C0  B4D8               	btfsc	status,2,c
  9248   0030C2  EF65  F018         	goto	u2141
  9249   0030C6  EF67  F018         	goto	u2140
  9250   0030CA                     u2141:
  9251   0030CA  EF8F  F018         	goto	l3055
  9252   0030CE                     u2140:
  9253   0030CE  0E01               	movlw	1
  9254   0030D0  6E05               	movwf	___awdiv@counter^0,c
  9255   0030D2  EF6F  F018         	goto	l3041
  9256   0030D6                     l3039:
  9257   0030D6  90D8               	bcf	status,0,c
  9258   0030D8  3603               	rlcf	___awdiv@divisor^0,f,c
  9259   0030DA  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  9260   0030DC  2A05               	incf	___awdiv@counter^0,f,c
  9261   0030DE                     l3041:
  9262   0030DE  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  9263   0030E0  EF74  F018         	goto	u2151
  9264   0030E4  EF76  F018         	goto	u2150
  9265   0030E8                     u2151:
  9266   0030E8  EF6B  F018         	goto	l3039
  9267   0030EC                     u2150:
  9268   0030EC                     l3043:
  9269   0030EC  90D8               	bcf	status,0,c
  9270   0030EE  3607               	rlcf	___awdiv@quotient^0,f,c
  9271   0030F0  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  9272   0030F2  5003               	movf	___awdiv@divisor^0,w,c
  9273   0030F4  5C01               	subwf	___awdiv@dividend^0,w,c
  9274   0030F6  5004               	movf	(___awdiv@divisor+1)^0,w,c
  9275   0030F8  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  9276   0030FA  A0D8               	btfss	status,0,c
  9277   0030FC  EF82  F018         	goto	u2161
  9278   003100  EF84  F018         	goto	u2160
  9279   003104                     u2161:
  9280   003104  EF89  F018         	goto	l3051
  9281   003108                     u2160:
  9282   003108  5003               	movf	___awdiv@divisor^0,w,c
  9283   00310A  5E01               	subwf	___awdiv@dividend^0,f,c
  9284   00310C  5004               	movf	(___awdiv@divisor+1)^0,w,c
  9285   00310E  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  9286   003110  8007               	bsf	___awdiv@quotient^0,0,c
  9287   003112                     l3051:
  9288   003112  90D8               	bcf	status,0,c
  9289   003114  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  9290   003116  3203               	rrcf	___awdiv@divisor^0,f,c
  9291   003118  2E05               	decfsz	___awdiv@counter^0,f,c
  9292   00311A  EF76  F018         	goto	l3043
  9293   00311E                     l3055:
  9294   00311E  5006               	movf	___awdiv@sign^0,w,c
  9295   003120  B4D8               	btfsc	status,2,c
  9296   003122  EF95  F018         	goto	u2171
  9297   003126  EF97  F018         	goto	u2170
  9298   00312A                     u2171:
  9299   00312A  EF9B  F018         	goto	l3059
  9300   00312E                     u2170:
  9301   00312E  6C07               	negf	___awdiv@quotient^0,c
  9302   003130  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  9303   003132  B0D8               	btfsc	status,0,c
  9304   003134  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  9305   003136                     l3059:
  9306   003136  C007  F001         	movff	___awdiv@quotient,?___awdiv
  9307   00313A  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  9308   00313E  0012               	return		;funcret
  9309   003140                     __end_of___awdiv:
  9310                           	callstack 0
  9311                           
  9312 ;; *************** function _sendStringSerial4 *****************
  9313 ;; Defined at:
  9314 ;;		line 41 in file "serial.c"
  9315 ;; Parameters:    Size  Location     Type
  9316 ;;  string          1    1[COMRAM] PTR unsigned char 
  9317 ;;		 -> send2USART@hue_char(50), sendAllReadings@buffer(10), calibration_routine@cal_state(20), 
  9318 ;; Auto vars:     Size  Location     Type
  9319 ;;		None
  9320 ;; Return value:  Size  Location     Type
  9321 ;;                  1    wreg      void 
  9322 ;; Registers used:
  9323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9324 ;; Tracked objects:
  9325 ;;		On entry : 0/0
  9326 ;;		On exit  : 0/0
  9327 ;;		Unchanged: 0/0
  9328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9329 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9332 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9333 ;;Total ram usage:        1 bytes
  9334 ;; Hardware stack levels used: 1
  9335 ;; Hardware stack levels required when called: 1
  9336 ;; This function calls:
  9337 ;;		_sendCharSerial4
  9338 ;; This function is called by:
  9339 ;;		_calibration_routine
  9340 ;;		_sendAllReadings
  9341 ;;		_send2USART
  9342 ;; This function uses a non-reentrant model
  9343 ;;
  9344                           
  9345                           	psect	text52
  9346   003DAC                     __ptext52:
  9347                           	callstack 0
  9348   003DAC                     _sendStringSerial4:
  9349                           	callstack 28
  9350   003DAC                     
  9351                           ;serial.c: 44:     while(*string != 0){
  9352   003DAC  EFE3  F01E         	goto	l4185
  9353   003DB0                     l4179:
  9354                           
  9355                           ;serial.c: 46:   sendCharSerial4(*string++);
  9356   003DB0  5002               	movf	sendStringSerial4@string^0,w,c
  9357   003DB2  6ED9               	movwf	fsr2l,c
  9358   003DB4  6ADA               	clrf	fsr2h,c
  9359   003DB6  50DF               	movf	indf2,w,c
  9360   003DB8  EC6F  F01F         	call	_sendCharSerial4
  9361   003DBC  2A02               	incf	sendStringSerial4@string^0,f,c
  9362   003DBE                     
  9363                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  9364   003DBE  0E6A               	movlw	106
  9365   003DC0                     u4697:
  9366   003DC0  2EE8               	decfsz	wreg,f,c
  9367   003DC2  D7FE               	bra	u4697
  9368   003DC4  D000               	nop2	
  9369   003DC6                     l4185:
  9370                           
  9371                           ;serial.c: 44:     while(*string != 0){
  9372   003DC6  5002               	movf	sendStringSerial4@string^0,w,c
  9373   003DC8  6ED9               	movwf	fsr2l,c
  9374   003DCA  6ADA               	clrf	fsr2h,c
  9375   003DCC  50DF               	movf	indf2,w,c
  9376   003DCE  A4D8               	btfss	status,2,c
  9377   003DD0  EFEC  F01E         	goto	u3811
  9378   003DD4  EFEE  F01E         	goto	u3810
  9379   003DD8                     u3811:
  9380   003DD8  EFD8  F01E         	goto	l4179
  9381   003DDC                     u3810:
  9382   003DDC  0012               	return		;funcret
  9383   003DDE                     __end_of_sendStringSerial4:
  9384                           	callstack 0
  9385                           
  9386 ;; *************** function _sendCharSerial4 *****************
  9387 ;; Defined at:
  9388 ;;		line 35 in file "serial.c"
  9389 ;; Parameters:    Size  Location     Type
  9390 ;;  charToSend      1    wreg     unsigned char 
  9391 ;; Auto vars:     Size  Location     Type
  9392 ;;  charToSend      1    0[COMRAM] unsigned char 
  9393 ;; Return value:  Size  Location     Type
  9394 ;;                  1    wreg      void 
  9395 ;; Registers used:
  9396 ;;		wreg
  9397 ;; Tracked objects:
  9398 ;;		On entry : 0/0
  9399 ;;		On exit  : 0/0
  9400 ;;		Unchanged: 0/0
  9401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9403 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9405 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9406 ;;Total ram usage:        1 bytes
  9407 ;; Hardware stack levels used: 1
  9408 ;; This function calls:
  9409 ;;		Nothing
  9410 ;; This function is called by:
  9411 ;;		_sendStringSerial4
  9412 ;; This function uses a non-reentrant model
  9413 ;;
  9414                           
  9415                           	psect	text53
  9416   003EDE                     __ptext53:
  9417                           	callstack 0
  9418   003EDE                     _sendCharSerial4:
  9419                           	callstack 28
  9420                           
  9421                           ;incstack = 0
  9422                           ;sendCharSerial4@charToSend stored from wreg
  9423   003EDE  6E01               	movwf	sendCharSerial4@charToSend^0,c
  9424   003EE0                     l508:
  9425   003EE0  010E               	movlb	14	; () banked
  9426   003EE2  A537               	btfss	55,2,b	;volatile
  9427   003EE4  EF76  F01F         	goto	u3011
  9428   003EE8  EF78  F01F         	goto	u3010
  9429   003EEC                     u3011:
  9430   003EEC  EF70  F01F         	goto	l508
  9431   003EF0                     u3010:
  9432   003EF0                     
  9433                           ; BSR set to: 14
  9434                           ;serial.c: 37:     TX4REG = charToSend;
  9435   003EF0  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  9436   003EF4                     
  9437                           ; BSR set to: 14
  9438   003EF4  0012               	return		;funcret
  9439   003EF6                     __end_of_sendCharSerial4:
  9440                           	callstack 0
  9441                           
  9442 ;; *************** function _color_read_Red *****************
  9443 ;; Defined at:
  9444 ;;		line 32 in file "color.c"
  9445 ;; Parameters:    Size  Location     Type
  9446 ;;		None
  9447 ;; Auto vars:     Size  Location     Type
  9448 ;;  tmp             2    9[COMRAM] unsigned int 
  9449 ;; Return value:  Size  Location     Type
  9450 ;;                  2    4[COMRAM] unsigned int 
  9451 ;; Registers used:
  9452 ;;		wreg, status,2, status,0, cstack
  9453 ;; Tracked objects:
  9454 ;;		On entry : 0/0
  9455 ;;		On exit  : 0/0
  9456 ;;		Unchanged: 0/0
  9457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9458 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9459 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9460 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9461 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9462 ;;Total ram usage:        7 bytes
  9463 ;; Hardware stack levels used: 1
  9464 ;; Hardware stack levels required when called: 2
  9465 ;; This function calls:
  9466 ;;		_I2C_2_Master_Read
  9467 ;;		_I2C_2_Master_RepStart
  9468 ;;		_I2C_2_Master_Start
  9469 ;;		_I2C_2_Master_Stop
  9470 ;;		_I2C_2_Master_Write
  9471 ;; This function is called by:
  9472 ;;		_reading_hue
  9473 ;;		_calibration_routine
  9474 ;; This function uses a non-reentrant model
  9475 ;;
  9476                           
  9477                           	psect	text54
  9478   003802                     __ptext54:
  9479                           	callstack 0
  9480   003802                     _color_read_Red:
  9481                           	callstack 27
  9482   003802                     
  9483                           ;color.c: 34:  unsigned int tmp;;color.c: 35:  I2C_2_Master_Start();
  9484   003802  EC86  F01F         	call	_I2C_2_Master_Start	;wreg free
  9485                           
  9486                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x00);
  9487   003806  0E52               	movlw	82
  9488   003808  EC7B  F01F         	call	_I2C_2_Master_Write
  9489                           
  9490                           ;color.c: 37:  I2C_2_Master_Write(0xA0 | 0x16);
  9491   00380C  0EB6               	movlw	182
  9492   00380E  EC7B  F01F         	call	_I2C_2_Master_Write
  9493                           
  9494                           ;color.c: 38:  I2C_2_Master_RepStart();
  9495   003812  EC8B  F01F         	call	_I2C_2_Master_RepStart	;wreg free
  9496                           
  9497                           ;color.c: 39:  I2C_2_Master_Write(0x52 | 0x01);
  9498   003816  0E53               	movlw	83
  9499   003818  EC7B  F01F         	call	_I2C_2_Master_Write
  9500                           
  9501                           ;color.c: 40:  tmp=I2C_2_Master_Read(1);
  9502   00381C  0E01               	movlw	1
  9503   00381E  ECE5  F01C         	call	_I2C_2_Master_Read
  9504   003822  6E07               	movwf	??_color_read_Red^0,c
  9505   003824  5007               	movf	??_color_read_Red^0,w,c
  9506   003826  6E0A               	movwf	color_read_Red@tmp^0,c
  9507   003828  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  9508                           
  9509                           ;color.c: 41:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  9510   00382A  0E00               	movlw	0
  9511   00382C  ECE5  F01C         	call	_I2C_2_Master_Read
  9512   003830  6E07               	movwf	??_color_read_Red^0,c
  9513   003832  5007               	movf	??_color_read_Red^0,w,c
  9514   003834  6E09               	movwf	(??_color_read_Red+2)^0,c
  9515   003836  6A08               	clrf	(??_color_read_Red+1)^0,c
  9516   003838  500A               	movf	color_read_Red@tmp^0,w,c
  9517   00383A  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  9518   00383C  6E0A               	movwf	color_read_Red@tmp^0,c
  9519   00383E  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  9520   003840  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  9521   003842  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  9522                           
  9523                           ;color.c: 42:  I2C_2_Master_Stop();
  9524   003844  EC81  F01F         	call	_I2C_2_Master_Stop	;wreg free
  9525   003848                     
  9526                           ;color.c: 43:  return tmp;
  9527   003848  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  9528   00384C  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  9529   003850  0012               	return		;funcret
  9530   003852                     __end_of_color_read_Red:
  9531                           	callstack 0
  9532                           
  9533 ;; *************** function _color_read_Green *****************
  9534 ;; Defined at:
  9535 ;;		line 46 in file "color.c"
  9536 ;; Parameters:    Size  Location     Type
  9537 ;;		None
  9538 ;; Auto vars:     Size  Location     Type
  9539 ;;  tmp             2    9[COMRAM] unsigned int 
  9540 ;; Return value:  Size  Location     Type
  9541 ;;                  2    4[COMRAM] unsigned int 
  9542 ;; Registers used:
  9543 ;;		wreg, status,2, status,0, cstack
  9544 ;; Tracked objects:
  9545 ;;		On entry : 0/0
  9546 ;;		On exit  : 0/0
  9547 ;;		Unchanged: 0/0
  9548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9549 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9550 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9551 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9552 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9553 ;;Total ram usage:        7 bytes
  9554 ;; Hardware stack levels used: 1
  9555 ;; Hardware stack levels required when called: 2
  9556 ;; This function calls:
  9557 ;;		_I2C_2_Master_Read
  9558 ;;		_I2C_2_Master_RepStart
  9559 ;;		_I2C_2_Master_Start
  9560 ;;		_I2C_2_Master_Stop
  9561 ;;		_I2C_2_Master_Write
  9562 ;; This function is called by:
  9563 ;;		_reading_hue
  9564 ;;		_calibration_routine
  9565 ;; This function uses a non-reentrant model
  9566 ;;
  9567                           
  9568                           	psect	text55
  9569   003852                     __ptext55:
  9570                           	callstack 0
  9571   003852                     _color_read_Green:
  9572                           	callstack 27
  9573   003852                     
  9574                           ;color.c: 48:  unsigned int tmp;;color.c: 49:  I2C_2_Master_Start();
  9575   003852  EC86  F01F         	call	_I2C_2_Master_Start	;wreg free
  9576                           
  9577                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
  9578   003856  0E52               	movlw	82
  9579   003858  EC7B  F01F         	call	_I2C_2_Master_Write
  9580                           
  9581                           ;color.c: 51:  I2C_2_Master_Write(0xA0 | 0x18);
  9582   00385C  0EB8               	movlw	184
  9583   00385E  EC7B  F01F         	call	_I2C_2_Master_Write
  9584                           
  9585                           ;color.c: 52:  I2C_2_Master_RepStart();
  9586   003862  EC8B  F01F         	call	_I2C_2_Master_RepStart	;wreg free
  9587                           
  9588                           ;color.c: 53:  I2C_2_Master_Write(0x52 | 0x01);
  9589   003866  0E53               	movlw	83
  9590   003868  EC7B  F01F         	call	_I2C_2_Master_Write
  9591                           
  9592                           ;color.c: 54:  tmp=I2C_2_Master_Read(1);
  9593   00386C  0E01               	movlw	1
  9594   00386E  ECE5  F01C         	call	_I2C_2_Master_Read
  9595   003872  6E07               	movwf	??_color_read_Green^0,c
  9596   003874  5007               	movf	??_color_read_Green^0,w,c
  9597   003876  6E0A               	movwf	color_read_Green@tmp^0,c
  9598   003878  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  9599                           
  9600                           ;color.c: 55:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  9601   00387A  0E00               	movlw	0
  9602   00387C  ECE5  F01C         	call	_I2C_2_Master_Read
  9603   003880  6E07               	movwf	??_color_read_Green^0,c
  9604   003882  5007               	movf	??_color_read_Green^0,w,c
  9605   003884  6E09               	movwf	(??_color_read_Green+2)^0,c
  9606   003886  6A08               	clrf	(??_color_read_Green+1)^0,c
  9607   003888  500A               	movf	color_read_Green@tmp^0,w,c
  9608   00388A  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  9609   00388C  6E0A               	movwf	color_read_Green@tmp^0,c
  9610   00388E  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  9611   003890  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  9612   003892  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  9613                           
  9614                           ;color.c: 56:  I2C_2_Master_Stop();
  9615   003894  EC81  F01F         	call	_I2C_2_Master_Stop	;wreg free
  9616   003898                     
  9617                           ;color.c: 57:  return tmp;
  9618   003898  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  9619   00389C  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  9620   0038A0  0012               	return		;funcret
  9621   0038A2                     __end_of_color_read_Green:
  9622                           	callstack 0
  9623                           
  9624 ;; *************** function _color_read_Clear *****************
  9625 ;; Defined at:
  9626 ;;		line 75 in file "color.c"
  9627 ;; Parameters:    Size  Location     Type
  9628 ;;		None
  9629 ;; Auto vars:     Size  Location     Type
  9630 ;;  tmp             2    9[COMRAM] unsigned int 
  9631 ;; Return value:  Size  Location     Type
  9632 ;;                  2    4[COMRAM] unsigned int 
  9633 ;; Registers used:
  9634 ;;		wreg, status,2, status,0, cstack
  9635 ;; Tracked objects:
  9636 ;;		On entry : 0/0
  9637 ;;		On exit  : 0/0
  9638 ;;		Unchanged: 0/0
  9639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9640 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9641 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9642 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9643 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9644 ;;Total ram usage:        7 bytes
  9645 ;; Hardware stack levels used: 1
  9646 ;; Hardware stack levels required when called: 2
  9647 ;; This function calls:
  9648 ;;		_I2C_2_Master_Read
  9649 ;;		_I2C_2_Master_RepStart
  9650 ;;		_I2C_2_Master_Start
  9651 ;;		_I2C_2_Master_Stop
  9652 ;;		_I2C_2_Master_Write
  9653 ;; This function is called by:
  9654 ;;		_reading_hue
  9655 ;;		_calibration_routine
  9656 ;;		_main
  9657 ;; This function uses a non-reentrant model
  9658 ;;
  9659                           
  9660                           	psect	text56
  9661   0038A2                     __ptext56:
  9662                           	callstack 0
  9663   0038A2                     _color_read_Clear:
  9664                           	callstack 27
  9665   0038A2                     
  9666                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
  9667   0038A2  EC86  F01F         	call	_I2C_2_Master_Start	;wreg free
  9668                           
  9669                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
  9670   0038A6  0E52               	movlw	82
  9671   0038A8  EC7B  F01F         	call	_I2C_2_Master_Write
  9672                           
  9673                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
  9674   0038AC  0EB4               	movlw	180
  9675   0038AE  EC7B  F01F         	call	_I2C_2_Master_Write
  9676                           
  9677                           ;color.c: 81:  I2C_2_Master_RepStart();
  9678   0038B2  EC8B  F01F         	call	_I2C_2_Master_RepStart	;wreg free
  9679                           
  9680                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
  9681   0038B6  0E53               	movlw	83
  9682   0038B8  EC7B  F01F         	call	_I2C_2_Master_Write
  9683                           
  9684                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
  9685   0038BC  0E01               	movlw	1
  9686   0038BE  ECE5  F01C         	call	_I2C_2_Master_Read
  9687   0038C2  6E07               	movwf	??_color_read_Clear^0,c
  9688   0038C4  5007               	movf	??_color_read_Clear^0,w,c
  9689   0038C6  6E0A               	movwf	color_read_Clear@tmp^0,c
  9690   0038C8  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  9691                           
  9692                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  9693   0038CA  0E00               	movlw	0
  9694   0038CC  ECE5  F01C         	call	_I2C_2_Master_Read
  9695   0038D0  6E07               	movwf	??_color_read_Clear^0,c
  9696   0038D2  5007               	movf	??_color_read_Clear^0,w,c
  9697   0038D4  6E09               	movwf	(??_color_read_Clear+2)^0,c
  9698   0038D6  6A08               	clrf	(??_color_read_Clear+1)^0,c
  9699   0038D8  500A               	movf	color_read_Clear@tmp^0,w,c
  9700   0038DA  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  9701   0038DC  6E0A               	movwf	color_read_Clear@tmp^0,c
  9702   0038DE  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  9703   0038E0  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  9704   0038E2  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  9705                           
  9706                           ;color.c: 85:  I2C_2_Master_Stop();
  9707   0038E4  EC81  F01F         	call	_I2C_2_Master_Stop	;wreg free
  9708   0038E8                     
  9709                           ;color.c: 86:  return tmp;
  9710   0038E8  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  9711   0038EC  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  9712   0038F0  0012               	return		;funcret
  9713   0038F2                     __end_of_color_read_Clear:
  9714                           	callstack 0
  9715                           
  9716 ;; *************** function _color_read_Blue *****************
  9717 ;; Defined at:
  9718 ;;		line 60 in file "color.c"
  9719 ;; Parameters:    Size  Location     Type
  9720 ;;		None
  9721 ;; Auto vars:     Size  Location     Type
  9722 ;;  tmp             2    9[COMRAM] unsigned int 
  9723 ;; Return value:  Size  Location     Type
  9724 ;;                  2    4[COMRAM] unsigned int 
  9725 ;; Registers used:
  9726 ;;		wreg, status,2, status,0, cstack
  9727 ;; Tracked objects:
  9728 ;;		On entry : 0/0
  9729 ;;		On exit  : 0/0
  9730 ;;		Unchanged: 0/0
  9731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9732 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9733 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9734 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9735 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9736 ;;Total ram usage:        7 bytes
  9737 ;; Hardware stack levels used: 1
  9738 ;; Hardware stack levels required when called: 2
  9739 ;; This function calls:
  9740 ;;		_I2C_2_Master_Read
  9741 ;;		_I2C_2_Master_RepStart
  9742 ;;		_I2C_2_Master_Start
  9743 ;;		_I2C_2_Master_Stop
  9744 ;;		_I2C_2_Master_Write
  9745 ;; This function is called by:
  9746 ;;		_reading_hue
  9747 ;;		_calibration_routine
  9748 ;; This function uses a non-reentrant model
  9749 ;;
  9750                           
  9751                           	psect	text57
  9752   0038F2                     __ptext57:
  9753                           	callstack 0
  9754   0038F2                     _color_read_Blue:
  9755                           	callstack 27
  9756   0038F2                     
  9757                           ;color.c: 62:  unsigned int tmp;;color.c: 63:  I2C_2_Master_Start();
  9758   0038F2  EC86  F01F         	call	_I2C_2_Master_Start	;wreg free
  9759                           
  9760                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x00);
  9761   0038F6  0E52               	movlw	82
  9762   0038F8  EC7B  F01F         	call	_I2C_2_Master_Write
  9763                           
  9764                           ;color.c: 65:  I2C_2_Master_Write(0xA0 | 0x1A);
  9765   0038FC  0EBA               	movlw	186
  9766   0038FE  EC7B  F01F         	call	_I2C_2_Master_Write
  9767                           
  9768                           ;color.c: 66:  I2C_2_Master_RepStart();
  9769   003902  EC8B  F01F         	call	_I2C_2_Master_RepStart	;wreg free
  9770                           
  9771                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x01);
  9772   003906  0E53               	movlw	83
  9773   003908  EC7B  F01F         	call	_I2C_2_Master_Write
  9774                           
  9775                           ;color.c: 68:  tmp=I2C_2_Master_Read(1);
  9776   00390C  0E01               	movlw	1
  9777   00390E  ECE5  F01C         	call	_I2C_2_Master_Read
  9778   003912  6E07               	movwf	??_color_read_Blue^0,c
  9779   003914  5007               	movf	??_color_read_Blue^0,w,c
  9780   003916  6E0A               	movwf	color_read_Blue@tmp^0,c
  9781   003918  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  9782                           
  9783                           ;color.c: 69:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  9784   00391A  0E00               	movlw	0
  9785   00391C  ECE5  F01C         	call	_I2C_2_Master_Read
  9786   003920  6E07               	movwf	??_color_read_Blue^0,c
  9787   003922  5007               	movf	??_color_read_Blue^0,w,c
  9788   003924  6E09               	movwf	(??_color_read_Blue+2)^0,c
  9789   003926  6A08               	clrf	(??_color_read_Blue+1)^0,c
  9790   003928  500A               	movf	color_read_Blue@tmp^0,w,c
  9791   00392A  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  9792   00392C  6E0A               	movwf	color_read_Blue@tmp^0,c
  9793   00392E  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  9794   003930  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  9795   003932  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  9796                           
  9797                           ;color.c: 70:  I2C_2_Master_Stop();
  9798   003934  EC81  F01F         	call	_I2C_2_Master_Stop	;wreg free
  9799   003938                     
  9800                           ;color.c: 71:  return tmp;
  9801   003938  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  9802   00393C  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  9803   003940  0012               	return		;funcret
  9804   003942                     __end_of_color_read_Blue:
  9805                           	callstack 0
  9806                           
  9807 ;; *************** function _I2C_2_Master_Write *****************
  9808 ;; Defined at:
  9809 ;;		line 45 in file "i2c.c"
  9810 ;; Parameters:    Size  Location     Type
  9811 ;;  data_byte       1    wreg     unsigned char 
  9812 ;; Auto vars:     Size  Location     Type
  9813 ;;  data_byte       1    1[COMRAM] unsigned char 
  9814 ;; Return value:  Size  Location     Type
  9815 ;;                  1    wreg      void 
  9816 ;; Registers used:
  9817 ;;		wreg, status,2, status,0, cstack
  9818 ;; Tracked objects:
  9819 ;;		On entry : 0/0
  9820 ;;		On exit  : 0/0
  9821 ;;		Unchanged: 0/0
  9822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9824 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9826 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9827 ;;Total ram usage:        1 bytes
  9828 ;; Hardware stack levels used: 1
  9829 ;; Hardware stack levels required when called: 1
  9830 ;; This function calls:
  9831 ;;		_I2C_2_Master_Idle
  9832 ;; This function is called by:
  9833 ;;		_color_writetoaddr
  9834 ;;		_color_read_Red
  9835 ;;		_color_read_Green
  9836 ;;		_color_read_Blue
  9837 ;;		_color_read_Clear
  9838 ;; This function uses a non-reentrant model
  9839 ;;
  9840                           
  9841                           	psect	text58
  9842   003EF6                     __ptext58:
  9843                           	callstack 0
  9844   003EF6                     _I2C_2_Master_Write:
  9845                           	callstack 27
  9846                           
  9847                           ;incstack = 0
  9848                           ;I2C_2_Master_Write@data_byte stored from wreg
  9849   003EF6  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  9850   003EF8                     
  9851                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  9852   003EF8  EC1C  F01F         	call	_I2C_2_Master_Idle	;wreg free
  9853   003EFC                     
  9854                           ;i2c.c: 48:   SSP2BUF = data_byte;
  9855   003EFC  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  9856   003F00  0012               	return		;funcret
  9857   003F02                     __end_of_I2C_2_Master_Write:
  9858                           	callstack 0
  9859                           
  9860 ;; *************** function _I2C_2_Master_Stop *****************
  9861 ;; Defined at:
  9862 ;;		line 39 in file "i2c.c"
  9863 ;; Parameters:    Size  Location     Type
  9864 ;;		None
  9865 ;; Auto vars:     Size  Location     Type
  9866 ;;		None
  9867 ;; Return value:  Size  Location     Type
  9868 ;;                  1    wreg      void 
  9869 ;; Registers used:
  9870 ;;		wreg, status,2, status,0, cstack
  9871 ;; Tracked objects:
  9872 ;;		On entry : 0/0
  9873 ;;		On exit  : 0/0
  9874 ;;		Unchanged: 0/0
  9875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9880 ;;Total ram usage:        0 bytes
  9881 ;; Hardware stack levels used: 1
  9882 ;; Hardware stack levels required when called: 1
  9883 ;; This function calls:
  9884 ;;		_I2C_2_Master_Idle
  9885 ;; This function is called by:
  9886 ;;		_color_writetoaddr
  9887 ;;		_color_read_Red
  9888 ;;		_color_read_Green
  9889 ;;		_color_read_Blue
  9890 ;;		_color_read_Clear
  9891 ;; This function uses a non-reentrant model
  9892 ;;
  9893                           
  9894                           	psect	text59
  9895   003F02                     __ptext59:
  9896                           	callstack 0
  9897   003F02                     _I2C_2_Master_Stop:
  9898                           	callstack 27
  9899   003F02                     
  9900                           ;i2c.c: 41:   I2C_2_Master_Idle();
  9901   003F02  EC1C  F01F         	call	_I2C_2_Master_Idle	;wreg free
  9902   003F06                     
  9903                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  9904   003F06  010E               	movlb	14	; () banked
  9905   003F08  85DA               	bsf	218,2,b	;volatile
  9906   003F0A                     
  9907                           ; BSR set to: 14
  9908   003F0A  0012               	return		;funcret
  9909   003F0C                     __end_of_I2C_2_Master_Stop:
  9910                           	callstack 0
  9911                           
  9912 ;; *************** function _I2C_2_Master_Start *****************
  9913 ;; Defined at:
  9914 ;;		line 27 in file "i2c.c"
  9915 ;; Parameters:    Size  Location     Type
  9916 ;;		None
  9917 ;; Auto vars:     Size  Location     Type
  9918 ;;		None
  9919 ;; Return value:  Size  Location     Type
  9920 ;;                  1    wreg      void 
  9921 ;; Registers used:
  9922 ;;		wreg, status,2, status,0, cstack
  9923 ;; Tracked objects:
  9924 ;;		On entry : 0/0
  9925 ;;		On exit  : 0/0
  9926 ;;		Unchanged: 0/0
  9927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9932 ;;Total ram usage:        0 bytes
  9933 ;; Hardware stack levels used: 1
  9934 ;; Hardware stack levels required when called: 1
  9935 ;; This function calls:
  9936 ;;		_I2C_2_Master_Idle
  9937 ;; This function is called by:
  9938 ;;		_color_writetoaddr
  9939 ;;		_color_read_Red
  9940 ;;		_color_read_Green
  9941 ;;		_color_read_Blue
  9942 ;;		_color_read_Clear
  9943 ;; This function uses a non-reentrant model
  9944 ;;
  9945                           
  9946                           	psect	text60
  9947   003F0C                     __ptext60:
  9948                           	callstack 0
  9949   003F0C                     _I2C_2_Master_Start:
  9950                           	callstack 27
  9951   003F0C                     
  9952                           ;i2c.c: 29:   I2C_2_Master_Idle();
  9953   003F0C  EC1C  F01F         	call	_I2C_2_Master_Idle	;wreg free
  9954   003F10                     
  9955                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  9956   003F10  010E               	movlb	14	; () banked
  9957   003F12  81DA               	bsf	218,0,b	;volatile
  9958   003F14                     
  9959                           ; BSR set to: 14
  9960   003F14  0012               	return		;funcret
  9961   003F16                     __end_of_I2C_2_Master_Start:
  9962                           	callstack 0
  9963                           
  9964 ;; *************** function _I2C_2_Master_RepStart *****************
  9965 ;; Defined at:
  9966 ;;		line 33 in file "i2c.c"
  9967 ;; Parameters:    Size  Location     Type
  9968 ;;		None
  9969 ;; Auto vars:     Size  Location     Type
  9970 ;;		None
  9971 ;; Return value:  Size  Location     Type
  9972 ;;                  1    wreg      void 
  9973 ;; Registers used:
  9974 ;;		wreg, status,2, status,0, cstack
  9975 ;; Tracked objects:
  9976 ;;		On entry : 0/0
  9977 ;;		On exit  : 0/0
  9978 ;;		Unchanged: 0/0
  9979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9984 ;;Total ram usage:        0 bytes
  9985 ;; Hardware stack levels used: 1
  9986 ;; Hardware stack levels required when called: 1
  9987 ;; This function calls:
  9988 ;;		_I2C_2_Master_Idle
  9989 ;; This function is called by:
  9990 ;;		_color_read_Red
  9991 ;;		_color_read_Green
  9992 ;;		_color_read_Blue
  9993 ;;		_color_read_Clear
  9994 ;; This function uses a non-reentrant model
  9995 ;;
  9996                           
  9997                           	psect	text61
  9998   003F16                     __ptext61:
  9999                           	callstack 0
 10000   003F16                     _I2C_2_Master_RepStart:
 10001                           	callstack 27
 10002   003F16                     
 10003                           ;i2c.c: 35:   I2C_2_Master_Idle();
 10004   003F16  EC1C  F01F         	call	_I2C_2_Master_Idle	;wreg free
 10005   003F1A                     
 10006                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 10007   003F1A  010E               	movlb	14	; () banked
 10008   003F1C  83DA               	bsf	218,1,b	;volatile
 10009   003F1E                     
 10010                           ; BSR set to: 14
 10011   003F1E  0012               	return		;funcret
 10012   003F20                     __end_of_I2C_2_Master_RepStart:
 10013                           	callstack 0
 10014                           
 10015 ;; *************** function _I2C_2_Master_Read *****************
 10016 ;; Defined at:
 10017 ;;		line 51 in file "i2c.c"
 10018 ;; Parameters:    Size  Location     Type
 10019 ;;  ack             1    wreg     unsigned char 
 10020 ;; Auto vars:     Size  Location     Type
 10021 ;;  ack             1    2[COMRAM] unsigned char 
 10022 ;;  tmp             1    3[COMRAM] unsigned char 
 10023 ;; Return value:  Size  Location     Type
 10024 ;;                  1    wreg      unsigned char 
 10025 ;; Registers used:
 10026 ;;		wreg, status,2, status,0, cstack
 10027 ;; Tracked objects:
 10028 ;;		On entry : 0/0
 10029 ;;		On exit  : 0/0
 10030 ;;		Unchanged: 0/0
 10031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10033 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10034 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10035 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10036 ;;Total ram usage:        3 bytes
 10037 ;; Hardware stack levels used: 1
 10038 ;; Hardware stack levels required when called: 1
 10039 ;; This function calls:
 10040 ;;		_I2C_2_Master_Idle
 10041 ;; This function is called by:
 10042 ;;		_color_read_Red
 10043 ;;		_color_read_Green
 10044 ;;		_color_read_Blue
 10045 ;;		_color_read_Clear
 10046 ;; This function uses a non-reentrant model
 10047 ;;
 10048                           
 10049                           	psect	text62
 10050   0039CA                     __ptext62:
 10051                           	callstack 0
 10052   0039CA                     _I2C_2_Master_Read:
 10053                           	callstack 27
 10054                           
 10055                           ; BSR set to: 14
 10056                           ;incstack = 0
 10057                           ;I2C_2_Master_Read@ack stored from wreg
 10058   0039CA  6E03               	movwf	I2C_2_Master_Read@ack^0,c
 10059   0039CC                     
 10060                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 10061   0039CC  EC1C  F01F         	call	_I2C_2_Master_Idle	;wreg free
 10062   0039D0                     
 10063                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 10064   0039D0  010E               	movlb	14	; () banked
 10065   0039D2  87DA               	bsf	218,3,b	;volatile
 10066                           
 10067                           ;i2c.c: 56:   I2C_2_Master_Idle();
 10068   0039D4  EC1C  F01F         	call	_I2C_2_Master_Idle	;wreg free
 10069   0039D8                     
 10070                           ;i2c.c: 57:   tmp = SSP2BUF;
 10071   0039D8  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 10072                           
 10073                           ;i2c.c: 58:   I2C_2_Master_Idle();
 10074   0039DC  EC1C  F01F         	call	_I2C_2_Master_Idle	;wreg free
 10075   0039E0                     
 10076                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 10077   0039E0  5003               	movf	I2C_2_Master_Read@ack^0,w,c
 10078   0039E2  B4D8               	btfsc	status,2,c
 10079   0039E4  EFF6  F01C         	goto	u2991
 10080   0039E8  EFFA  F01C         	goto	u2990
 10081   0039EC                     u2991:
 10082   0039EC  6A02               	clrf	??_I2C_2_Master_Read^0,c
 10083   0039EE  2A02               	incf	??_I2C_2_Master_Read^0,f,c
 10084   0039F0  EFFB  F01C         	goto	u3008
 10085   0039F4                     u2990:
 10086   0039F4  6A02               	clrf	??_I2C_2_Master_Read^0,c
 10087   0039F6                     u3008:
 10088   0039F6  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
 10089   0039F8  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
 10090   0039FA  010E               	movlb	14	; () banked
 10091   0039FC  51DA               	movf	218,w,b	;volatile
 10092   0039FE  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
 10093   003A00  0BDF               	andlw	-33
 10094   003A02  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
 10095   003A04  6FDA               	movwf	218,b	;volatile
 10096   003A06                     
 10097                           ; BSR set to: 14
 10098                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 10099   003A06  89DA               	bsf	218,4,b	;volatile
 10100   003A08                     
 10101                           ; BSR set to: 14
 10102                           ;i2c.c: 61:   return tmp;
 10103   003A08  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
 10104   003A0A                     
 10105                           ; BSR set to: 14
 10106   003A0A  0012               	return		;funcret
 10107   003A0C                     __end_of_I2C_2_Master_Read:
 10108                           	callstack 0
 10109                           
 10110 ;; *************** function _I2C_2_Master_Idle *****************
 10111 ;; Defined at:
 10112 ;;		line 22 in file "i2c.c"
 10113 ;; Parameters:    Size  Location     Type
 10114 ;;		None
 10115 ;; Auto vars:     Size  Location     Type
 10116 ;;		None
 10117 ;; Return value:  Size  Location     Type
 10118 ;;                  1    wreg      void 
 10119 ;; Registers used:
 10120 ;;		wreg, status,2, status,0
 10121 ;; Tracked objects:
 10122 ;;		On entry : 0/0
 10123 ;;		On exit  : 0/0
 10124 ;;		Unchanged: 0/0
 10125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10128 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10129 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10130 ;;Total ram usage:        1 bytes
 10131 ;; Hardware stack levels used: 1
 10132 ;; This function calls:
 10133 ;;		Nothing
 10134 ;; This function is called by:
 10135 ;;		_I2C_2_Master_Start
 10136 ;;		_I2C_2_Master_RepStart
 10137 ;;		_I2C_2_Master_Stop
 10138 ;;		_I2C_2_Master_Write
 10139 ;;		_I2C_2_Master_Read
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           	psect	text63
 10144   003E38                     __ptext63:
 10145                           	callstack 0
 10146   003E38                     _I2C_2_Master_Idle:
 10147                           	callstack 27
 10148   003E38                     l188:
 10149   003E38  010E               	movlb	14	; () banked
 10150   003E3A  B5D8               	btfsc	216,2,b	;volatile
 10151   003E3C  EF22  F01F         	goto	u2461
 10152   003E40  EF24  F01F         	goto	u2460
 10153   003E44                     u2461:
 10154   003E44  EF1C  F01F         	goto	l188
 10155   003E48                     u2460:
 10156   003E48                     
 10157                           ; BSR set to: 14
 10158   003E48  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
 10159   003E4C  0E1F               	movlw	31
 10160   003E4E  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
 10161   003E50  A4D8               	btfss	status,2,c
 10162   003E52  EF2D  F01F         	goto	u2471
 10163   003E56  EF2F  F01F         	goto	u2470
 10164   003E5A                     u2471:
 10165   003E5A  EF1C  F01F         	goto	l188
 10166   003E5E                     u2470:
 10167   003E5E                     
 10168                           ; BSR set to: 14
 10169   003E5E  0012               	return		;funcret
 10170   003E60                     __end_of_I2C_2_Master_Idle:
 10171                           	callstack 0
 10172                           
 10173 ;; *************** function _ADC_init *****************
 10174 ;; Defined at:
 10175 ;;		line 9 in file "ADC.c"
 10176 ;; Parameters:    Size  Location     Type
 10177 ;;		None
 10178 ;; Auto vars:     Size  Location     Type
 10179 ;;		None
 10180 ;; Return value:  Size  Location     Type
 10181 ;;                  1    wreg      void 
 10182 ;; Registers used:
 10183 ;;		wreg, status,2
 10184 ;; Tracked objects:
 10185 ;;		On entry : 0/0
 10186 ;;		On exit  : 0/0
 10187 ;;		Unchanged: 0/0
 10188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10193 ;;Total ram usage:        0 bytes
 10194 ;; Hardware stack levels used: 1
 10195 ;; This function calls:
 10196 ;;		Nothing
 10197 ;; This function is called by:
 10198 ;;		_main
 10199 ;; This function uses a non-reentrant model
 10200 ;;
 10201                           
 10202                           	psect	text64
 10203   003EC4                     __ptext64:
 10204                           	callstack 0
 10205   003EC4                     _ADC_init:
 10206                           	callstack 30
 10207   003EC4                     
 10208                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 10209   003EC4  8C86               	bsf	134,6,c	;volatile
 10210                           
 10211                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 10212   003EC6  010E               	movlb	14	; () banked
 10213   003EC8  8DB4               	bsf	180,6,b	;volatile
 10214                           
 10215                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 10216   003ECA  010F               	movlb	15	; () banked
 10217   003ECC  9958               	bcf	88,4,b	;volatile
 10218   003ECE                     
 10219                           ; BSR set to: 15
 10220                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 10221   003ECE  0EFC               	movlw	-4
 10222   003ED0  1758               	andwf	88,f,b	;volatile
 10223                           
 10224                           ;ADC.c: 17:     ADPCH=0b101110;
 10225   003ED2  0E2E               	movlw	46
 10226   003ED4  6F5F               	movwf	95,b	;volatile
 10227   003ED6                     
 10228                           ; BSR set to: 15
 10229                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 10230   003ED6  9460               	bcf	96,2,c	;volatile
 10231   003ED8                     
 10232                           ; BSR set to: 15
 10233                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 10234   003ED8  8860               	bsf	96,4,c	;volatile
 10235   003EDA                     
 10236                           ; BSR set to: 15
 10237                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 10238   003EDA  8E60               	bsf	96,7,c	;volatile
 10239   003EDC                     
 10240                           ; BSR set to: 15
 10241   003EDC  0012               	return		;funcret
 10242   003EDE                     __end_of_ADC_init:
 10243                           	callstack 0
 10244                           
 10245                           	psect	rparam
 10246   000000                     
 10247                           	psect	config
 10248                           
 10249                           ;Config register CONFIG1L @ 0x300000
 10250                           ;	External Oscillator mode Selection bits
 10251                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 10252                           ;	Power-up default value for COSC bits
 10253                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 10254   300000                     	org	3145728
 10255   300000  AA                 	db	170
 10256                           
 10257                           ;Config register CONFIG1H @ 0x300001
 10258                           ;	unspecified, using default values
 10259                           ;	Clock Out Enable bit
 10260                           ;	CLKOUTEN = 0x1, unprogrammed default
 10261                           ;	Clock Switch Enable bit
 10262                           ;	CSWEN = 0x1, unprogrammed default
 10263                           ;	Fail-Safe Clock Monitor Enable bit
 10264                           ;	FCMEN = 0x1, unprogrammed default
 10265   300001                     	org	3145729
 10266   300001  FF                 	db	255
 10267                           
 10268                           ;Config register CONFIG3L @ 0x300004
 10269                           ;	WDT Period Select bits
 10270                           ;	WDTCPS = 0x1F, unprogrammed default
 10271                           ;	WDT operating mode
 10272                           ;	WDTE = OFF, WDT Disabled
 10273   300004                     	org	3145732
 10274   300004  9F                 	db	159
 10275                           
 10276                           ;Config register CONFIG3H @ 0x300005
 10277                           ;	unspecified, using default values
 10278                           ;	WDT Window Select bits
 10279                           ;	WDTCWS = 0x7, unprogrammed default
 10280                           ;	WDT input clock selector
 10281                           ;	WDTCCS = 0x7, unprogrammed default
 10282   300005                     	org	3145733
 10283   300005  FF                 	db	255
 10284                           tosu	equ	0xFFF
 10285                           tosh	equ	0xFFE
 10286                           tosl	equ	0xFFD
 10287                           stkptr	equ	0xFFC
 10288                           pclatu	equ	0xFFB
 10289                           pclath	equ	0xFFA
 10290                           pcl	equ	0xFF9
 10291                           tblptru	equ	0xFF8
 10292                           tblptrh	equ	0xFF7
 10293                           tblptrl	equ	0xFF6
 10294                           tablat	equ	0xFF5
 10295                           prodh	equ	0xFF4
 10296                           prodl	equ	0xFF3
 10297                           indf0	equ	0xFEF
 10298                           postinc0	equ	0xFEE
 10299                           postdec0	equ	0xFED
 10300                           preinc0	equ	0xFEC
 10301                           plusw0	equ	0xFEB
 10302                           fsr0h	equ	0xFEA
 10303                           fsr0l	equ	0xFE9
 10304                           wreg	equ	0xFE8
 10305                           indf1	equ	0xFE7
 10306                           postinc1	equ	0xFE6
 10307                           postdec1	equ	0xFE5
 10308                           preinc1	equ	0xFE4
 10309                           plusw1	equ	0xFE3
 10310                           fsr1h	equ	0xFE2
 10311                           fsr1l	equ	0xFE1
 10312                           bsr	equ	0xFE0
 10313                           indf2	equ	0xFDF
 10314                           postinc2	equ	0xFDE
 10315                           postdec2	equ	0xFDD
 10316                           preinc2	equ	0xFDC
 10317                           plusw2	equ	0xFDB
 10318                           fsr2h	equ	0xFDA
 10319                           fsr2l	equ	0xFD9
 10320                           status	equ	0xFD8

Data Sizes:
    Strings     173
    Constant    0
    Data        1
    BSS         184
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     90      95
    BANK0           160     84     152
    BANK1           256      0     112
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_routine@cCal	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 8
		 -> colorCalibration(BANK0[8]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 8
		 -> colorCurrent(BANK0[8]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S2578$buffer	PTR unsigned char  size(2) Largest target is 0

    S2578$source	PTR const unsigned char  size(2) Largest target is 0

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(COMRAM[20]), send2USART@hue_char(COMRAM[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 33
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[33]), STR_9(CODE[25]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_routine@cal_state(COMRAM[20]), send2USART@hue_char(COMRAM[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 33
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[33]), STR_9(CODE[25]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 33
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[33]), STR_9(CODE[25]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 33
		 -> STR_1(CODE[24]), STR_11(CODE[21]), STR_12(CODE[12]), STR_3(CODE[29]), 
		 -> STR_5(CODE[27]), STR_7(CODE[33]), STR_9(CODE[25]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_calibration_routine
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fldiv
    ___flsub->___fladd
    ___fldiv->___flsub
    _fullSpeedAhead->_setMotorPWM
    _decision->_moveBlue
    _decision->_moveGreen
    _decision->_moveLightBlue
    _decision->_moveOrange
    _decision->_movePink
    _decision->_moveRed
    _decision->_moveYellow
    _moveYellow->_backOneAndHalf
    _moveYellow->_right90
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_backOneAndHalf
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_backHalf
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_backHalf
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_backHalf
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_backHalf
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_routine->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                54    54      0  156936
                                             68 BANK0     16    16      0
                           _ADC_init
                            ___fldiv
                             ___flge
                           ___xxtofl
                _calibration_routine
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                        _reading_hue
                               _stop
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   15847
                                             53 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                     84    82      2   15208
                                             49 COMRAM     4     2      2
                                              0 BANK0     68    68      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     866
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     305
                                              0 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    3497
                                             16 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2718
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    1744
                                              0 COMRAM    25    17      8
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1246
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     950
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2311
                                             24 COMRAM    25    17      8
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       5     3      2    3267
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _decision                                             2     0      2  117818
                                             31 COMRAM     2     0      2
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           4     2      2   16432
                                             27 COMRAM     4     2      2
                     _backOneAndHalf
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              4     2      2   16888
                                             27 COMRAM     4     2      2
                           _backHalf
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              4     2      2    8096
                                             23 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             4     2      2   16584
                                             27 COMRAM     4     2      2
                     _backOneAndHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2    8096
                                             23 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           4     2      2   16736
                                             27 COMRAM     4     2      2
                           _backHalf
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             4     2      2    7944
                                             23 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                            5     3      2    3419
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        4     2      2   16888
                                             27 COMRAM     4     2      2
                           _backHalf
                            _left135
 ---------------------------------------------------------------------------------
 (3) _left135                                              4     2      2    8096
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            4     2      2   17040
                                             27 COMRAM     4     2      2
                           _backHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _left90                                               4     2      2    8248
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             4     2      2   16888
                                             27 COMRAM     4     2      2
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              4     2      2    8096
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                             5     3      2    3571
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2    8552
                                             23 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    4285
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    3419
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2893
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_routine                                 23    22      1   10559
                                             67 COMRAM    23    22      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6    8966
                                             48 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    7394
                                             44 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    6906
                                             33 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1143
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     811
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4210
                                             22 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2391
                                             14 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1182
                                              8 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     682
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     599
                                              1 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   ___fldiv
     ___flsub (ARG)
       ___fladd
   ___flge
   ___xxtofl
   _calibration_routine
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _turn180
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         _stop
         _turnLeft
     _moveLightBlue
       _backHalf
       _left135
         _stop
         _turnLeft
     _moveOrange
       _backHalf
       _right135
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
     _moveRed
       _backHalf
       _right90
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _right90
   _fullSpeedAhead
     _setMotorPWM
   _initDCmotorsPWM
   _initUSART4
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      70       7       43.8%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     54      98       5       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5A      5F       1      100.0%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRlllhll     37      0       0      45        0.0%
BITBIGSFRlllhhl     31      0       0      43        0.0%
BITBIGSFRllllll     2A      0       0      56        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRlllllh     20      0       0      48        0.0%
BITBIGSFRllllll     1E      0       0      50        0.0%
BITBIGSFRhhll       17      0       0      36        0.0%
BITBIGSFRlllhhh     14      0       0      40        0.0%
BITBIGSFRllllll     11      0       0      51        0.0%
BITBIGSFRllllll      F      0       0      58        0.0%
BITBIGSFRhhhlh       E      0       0      33        0.0%
BITBIGSFRlllllh      C      0       0      49        0.0%
BITBIGSFRllllll      9      0       0      57        0.0%
BITBIGSFRlllhll      8      0       0      46        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRllllll      6      0       0      55        0.0%
BITBIGSFRlllhhh      6      0       0      42        0.0%
BITBIGSFRllllll      5      0       0      54        0.0%
BITBIGSFRhlhh        5      0       0      37        0.0%
BITBIGSFRlllhhh      3      0       0      41        0.0%
BITBIGSFRllllll      3      0       0      53        0.0%
BITBIGSFRlllhlh      2      0       0      44        0.0%
BITBIGSFRhhlh        2      0       0      35        0.0%
BITBIGSFRllllll      1      0       0      52        0.0%
BITBIGSFRhllh        1      0       0      38        0.0%
BITBIGSFRhhhll       1      0       0      34        0.0%
BITBIGSFRllllh       1      0       0      47        0.0%
BITBIGSFRllh         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     167      61        0.0%
DATA                 0      0     167       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 13:38:27 2024

               _color_read_Red 3802                   ___fldiv@aexp 0031                   ___fldiv@bexp 0030  
           fullSpeedBack@power 0016                   ___fldiv@sign 0029                _color_read_Blue 38F2  
                           l71 3AB8                             l80 38A0                             l74 3EA4  
                           l83 3940                             l92 22A8                             l77 3850  
                           l86 38F0                             l94 22B6                             l95 2304  
                           l97 2312                             l89 307A                             l98 2364  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0003                moveLightBlue@mL 001C  
              moveLightBlue@mR 001D             convert_rgb2hue@max 0090             convert_rgb2hue@hue 0094  
           convert_rgb2hue@min 0088               _color_read_Clear 38A2               _color_read_Green 3852  
                          l100 2372                            l101 23C4                            l103 23D2  
                          l200 3F0A                            l104 242C                            l121 11C8  
                          l203 3F00                            l107 2452                            l131 12BA  
                          l115 114E                            l141 15E0                            l133 12CA  
                          l117 115E                            l310 3EDC                            l206 3A0A  
                          l142 15FC                            l127 1250                            l119 11B8  
                          l152 2936                            l401 3716                            l137 1568  
                          l129 1260                            l412 3D46                            l421 3CE2  
                          l406 378C                            l430 3B84                            l158 2936  
                          l191 3E5E                            l511 3EF4                            l415 3DAA  
                          l424 3E0C                            l185 3E36                            l433 3D14  
                          l409 3BB6                            l194 3F14                            l418 3C7E  
                          l442 3BE8                            l427 3C1A                            l371 3512  
                          l188 3E38                            l508 3EE0                            l436 3D78  
                          l197 3F1E                            l517 3DDC                            l445 3C4C  
                          l391 369C                            l439 3B52                            l448 3CB0  
                          l378 2D86                            l386 35A0                            l396 361E  
                          l565 3E84                            l830 2F4A                            l824 3346  
                          l809 31EE                            l499 3EC2                            l835 2F90  
                          l862 2E8C                            l796 313E                            _abs 3AEE  
                          _pad 33F2                            _hue 00C8            convert_rgb2hue@cMax 0032  
                 ___awmod@sign 0006            convert_rgb2hue@diff 008C                            wreg 0FE8  
                 ___flmul@aexp 0012                   ___flmul@bexp 0013                   ___flmul@sign 000D  
                 ___flmul@temp 0018                   ___flmul@prod 0014                   ___fltol@exp1 000A  
                         l1110 1906                           l1102 1ABC                           l1120 19C4  
                         ?_abs 0007                           l1220 24AA                           l1063 3800  
                         l1119 19D6                           l1135 3986                           l1223 2606  
                         l1320 3B20                           l1056 37F8                           l1160 219E  
                         l1152 20A4                           l3001 33C0                           l1313 39C8  
                         l1161 218C                           l1234 259E                           l1307 2ABC  
                         l1243 3AEC                           l1147 2280                           l1227 2542  
                         l1332 33F0                           l1340 3A4A                           l3021 3080  
                         l1317 3B08                           l3013 3E60                           l3101 3796  
                         l1149 20E0                           l1093 17EC                           l1158 2126  
                         l1094 17DA                           l3031 30B0                           l3023 308E  
                         l1343 3F20                           l1263 3426                           l1271 2B1C  
                         l3015 3E7C                           l3111 37CC                           l3103 37A8  
                         l1183 1EE6                           l1095 17A0                           l3041 30DE  
                         l3033 30B4                           l3025 3096                           l3113 37E2  
                         l3105 37B0                           l1266 3464                           l1186 1D78  
                         l3051 3112                           l3043 30EC                           l3035 30BC  
                         l3027 309A                           l3019 307C                           l3211 321E  
                         l3115 37EA                           l3107 37B8                           l1179 1B82  
                         l4011 24D0                           l4003 2456                           l1268 3482  
                         l1284 2C32                           l1292 329C                           l1196 1EA8  
                         l1188 1DF0                           l3221 3E38                           l3053 3118  
                         l3045 30F2                           l3037 30CE                           l3029 30A8  
                         l3213 3226                           l3117 37EC                           l3109 37C6  
                         l3141 2C34                           l3301 3738                           l1189 1DDE  
                         l4021 252A                           l4005 2466                           l4101 0EF2  
                         l3223 3E48                           l3047 3108                           l3039 30D6  
                         l3055 311E                           l3071 315E                           l3063 3140  
                         l3215 3242                           l3207 31F0                           l3119 37F2  
                         l3151 2CF0                           l3143 2C4E                           l3311 3770  
                         l3303 374C                           l3231 3536                           l4031 258E  
                         l4023 252C                           l4015 24E4                           l4007 2474  
                         l4111 0FF2                           l4103 0F22                           l1288 3294  
                         l3057 312E                           l3049 3110                           l3081 3196  
                         l3073 316C                           l3065 3144                           l3137 3AEE  
                         l3217 3262                           l3209 31F8                           l3153 2D0A  
                         l3145 2C9C                           l3305 3754                           l3233 354C  
                         l3241 3574                           l3225 3514                           l4201 3D54  
                         l3401 17AE                           l3321 162A                           l3313 15FE  
                         l4041 25E6                           l4033 25AC                           l4025 2538  
                         l4017 24EC                           l4009 24BA                           l4121 10D6  
                         l4113 1016                           l4105 0F56                           l3059 3136  
                         l3083 31A4                           l3091 31CE                           l3075 3174  
                         l3067 3152                           l3139 3AFC                           l3219 326A  
                         l3155 2D4A                           l3147 2CAE                           l3307 375C  
                         l3243 358A                           l3235 3554                           l3227 3518  
                         l3251 364A                           l4203 3D6C                           l4211 3B22  
                         l3411 17D8                           l3403 17BA                           l3331 1664  
                         l3323 163A                           l3315 160A                           l4043 25F4  
                         l4035 25AE                           l4027 2574                           l4019 24F8  
                         l4131 11D8                           l4123 1108                           l4115 103A  
                         l4107 0F8A                           l3093 31DE                           l3085 31BA  
                         l3077 3186                           l3069 315A                           l4061 3E18  
                         l3149 2CB2                           l3309 376C                           l3237 355C  
                         l3229 352E                           l3261 366A                           l3245 3620  
                         l4205 3C80                           l4221 3C40                           l4213 3B2E  
                         l3501 1A8E                           l3421 182E                           l3413 17FA  
                         l3405 17BE                           l3341 1692                           l3333 166A  
                         l3325 164A                           l3317 1618                           l4045 25F6  
                         l4037 25B2                           l4029 2580                           l4141 12DA  
                         l4133 120A                           l4125 113A                           l4117 106E  
                         l4109 0FBE                           l3095 31E6                           l3087 31C2  
                         l3079 318E                           l4063 3E1E                           l4071 3E88  
                         l4231 3A8A                           l3239 3564                           l3263 3672  
                         l3247 363A                           l4207 3C8C                           l3271 35BC  
                         l4223 3BB8                           l4215 3B46                           l3511 1AAC  
                         l3503 1A94                           l3431 1868                           l3423 183C  
                         l3415 180A                           l3407 17CC                           l3351 16C6  
                         l3343 1694                           l3335 167C                           l3327 164C  
                         l3319 161A                           l4039 25D6                           l4151 1416  
                         l4143 1340                           l4135 123C                           l4127 1172  
                         l4119 10A2                           l4081 3898                           l4073 3802  
                         l3089 31C8                           l4065 3E20                           l4233 3A94  
                         l3265 3682                           l3257 3652                           l3249 3642  
                         l4209 3CA4                           l3281 35D4                           l3273 35C4  
                         l4217 3C1C                           l4225 3BC4                           l3601 3B86  
                         l4401 34EC                           l3505 1A96                           l3441 18D4  
                         l3433 186A                           l3425 184A                           l3409 17CE  
                         l3361 1702                           l3345 16A4                           l3353 16CE  
                         l3337 167E                           l3329 1654                           l4161 15AC  
                         l4153 14A6                           l4145 1356                           l4137 1274  
                         l4129 11A4                           l4241 2F98                           l4091 38A2  
                         l4075 3848                           l4067 3E22                           l4059 3E0E  
                         l4235 3AA4                           l3099 378E                           l3267 3686  
                         l3259 3662                           l3611 3D3A                           l3291 3608  
                         l3283 35E4                           l3275 35CC                           l4219 3C28  
                         l4227 3BDC                           l3603 3B92                           l4331 27BE  
                         l4411 3506                           l4403 34EE                           l3507 1A9C  
                         l3451 192C                           l3443 18D6                           l3435 1874  
                         l3427 1856                           l3419 181E                           l3371 1716  
                         l3363 1706                           l3355 16DE                           l3347 16B4  
                         l3339 1684                           l4155 14D8                           l4147 1388  
                         l4139 12A6                           l4251 2FC8                           l4243 2FB0  
                         l4085 38F2                           l4093 38E8                           l4181 3DBC  
                         l4069 3E24                           l4237 3AAE                           l4229 3A86  
                         l3293 3718                           l3613 3D7A                           l3285 35EC  
                         l3269 35A2                           l3621 3C5A                           l3605 3BAA  
                         l4341 2820                           l4333 27CE                           l4413 3510  
                         l4405 34F8                           l3701 200A                           l3509 1AAA  
                         l3461 195A                           l3445 18E6                           l3429 185A  
                         l3437 187A                           l3381 172A                           l3373 171A  
                         l3365 170A                           l3357 16F0                           l3349 16C4  
                         l4149 13E4                           l4157 1568                           l4261 3014  
                         l4253 2FF6                           l4245 2FC2                           l4087 3938  
                         l4079 3852                           l4183 3DBE                           l3295 3730  
                         l3631 3DDE                           l3615 3D86                           l3607 3D16  
                         l3287 35F4                           l3623 3C72                           l4191 3B78  
                         l4351 2882                           l4343 2836                           l4335 27E4  
                         l4431 36F6                           l4423 36C2                           l4415 369E  
                         l4407 34FA                           l3711 2058                           l3463 1968  
                         l3455 1940                           l3471 1986                           l3439 18A0  
                         l3447 18F6                           l3383 172E                           l3375 171E  
                         l3367 170E                           l3359 16FE                           l3391 173E  
                         l4159 159C                           l4271 305E                           l4263 302A  
                         l4255 2FF8                           l4247 2FC4                           l4239 2F92  
                         l4185 3DC6                           l4177 3DAC                           l3633 3DEA  
                         l3617 3D9E                           l3609 3D22                           l4193 3CE4  
                         l3625 3CB2                           l3289 3604                           l3641 3C0E  
                         l4361 28EA                           l4353 2898                           l4345 2846  
                         l4337 27FA                           l4329 27A8                           l4433 36FA  
                         l4425 36D6                           l4417 36BA                           l4409 3504  
                         l3721 20A2                           l3713 2068                           l3705 201E  
                         l3801 1B20                           l3465 1970                           l3457 194A  
                         l3449 191C                           l3473 1994                           l3393 1742  
                         l3385 1732                           l3377 1722                           l3369 1712  
                         l4097 0EB0                           l4273 3072                           l4265 302C  
                         l4257 2FFA                           l4249 2FC6                           l4371 3ECE  
                         l3571 3F0C                           l3643 3EE0                           l4179 3DB0  
                         l3635 3E00                           l4195 3CF0                           l3627 3CBE  
                         l3619 3C4E                           l4187 3B54                           l4363 28FA  
                         l4355 28AE                           l4347 285C                           l4339 280A  
                         l4427 36DE                           l3731 20F0                           l3723 20AE  
                         l3715 2070                           l3707 2038                           l3651 1F02  
                         l3811 1B4C                           l3803 1B26                           l3483 19E6  
                         l3491 1A3C                           l3475 1998                           l3467 1974  
                         l3459 1958                           l3395 176C                           l3387 1736  
                         l3379 1726                           l4099 0EC2                           l4267 302E  
                         l4259 2FFC                           l4373 3ED6                           l3573 3F10  
                         l3581 3F06                           l3645 3EF0                           l4701 2966  
                         l4197 3D08                           l3629 3CD6                           l3637 3BEA  
                         l4189 3B60                           l4365 2910                           l4357 28BE  
                         l4349 2872                           l4429 36E6                           l4381 3EB0  
                         l3733 2106                           l3741 2136                           l3725 20CC  
                         l3717 2080                           l3709 2048                           l3661 1F36  
                         l3653 1F04                           l3901 1EAC                           l3821 1BA2  
                         l3813 1B5C                           l3805 1B2C                           l3493 1A4C  
                         l3485 19F2                           l3477 19A6                           l3469 1984  
                         l3397 1788                           l3389 173A                           l4269 3048  
                         ?_pad 000F                           l4375 3ED8                           l3591 39D8  
                         l3583 3F16                           l3575 3EF8                           l4623 3A0C  
                         l4631 33F2                           l4711 298E                           l4703 2974  
                         l4199 3D48                           l3639 3BF6                           l4367 2926  
                         l4359 28D4                           l4391 3484                           l4383 3EB2  
                         l3743 2144                           l3735 210C                           l3727 20CE  
                         l3719 2094                           l3671 1F68                           l3655 1F14  
                         l3663 1F3E                           l3647 1EE8                           l3911 1ED6  
                         l3903 1EBC                           l3831 1BE2                           l3815 1B6C  
                         l3807 1B3A                           l3495 1A5C                           l3487 1A00  
                         l3479 19BC                           l3399 1798                           l4377 3EDA  
                         l4369 3EC4                           l3593 39E0                           l3585 3F1A  
                         l3577 3EFC                           l4625 3A18                           l4641 3442  
                         l4633 3400                           l4721 29F0                           l4705 2978  
                         l4801 2374                           l4393 3494                           l4385 3EBC  
                         l3753 21AE                           l3761 21F6                           l3745 2148  
                         l3737 2116                           l3729 20DE                           l3681 1F9C  
                         l3673 1F6A                           l3665 1F4E                           l3657 1F24  
                         l3649 1EF4                           l3921 329E                           l3905 1ECA  
                         l3841 1C2C                           l3833 1BEE                           l3825 1BB6  
                         l3817 1B72                           l3809 1B3C                           l3497 1A7C  
                         l3489 1A3A                           l3595 3A06                           l3587 39CC  
                         l3579 3F02                           l4627 3A26                           l4643 3446  
                         l4635 3410                           l4651 2AD6                           l4731 2A54  
                         l4723 2A00                           l4715 2996                           l4707 2980  
                         l4811 23D8                           l4803 238C                           l4395 34BA  
                         l4387 3EBE                           l4379 3EA6                           l3771 2260  
                         l3763 2210                           l3755 21BA                           l3747 2156  
                         l3739 2124                           l3691 1FE2                           l3675 1F7A  
                         l3683 1FA4                           l3667 1F54                           l3659 1F34  
                         l3931 333E                           l3923 32CC                           l3907 1ECC  
                         l3851 1C7E                           l3843 1C38                           l3835 1C06  
                         l3827 1BC2                           l3819 1B92                           l3499 1A80  
                         l3915 3942                           l3597 3A08                           l3589 39D0  
                         l4629 3A2A                           l4645 3472                           l4637 341E  
                         l4661 2B10                           l4653 2ADE                           l4733 2A6C  
                         l4725 2A0A                           l4709 2982                           l4717 29CC  
                         l4821 240C                           l4813 23F0                           l4805 23A2  
                         l4397 34BE                           l4389 3EC0                           l3773 226E  
                         l3765 2226                           l3757 21C8                           l3749 2184  
                         l3693 1FE6                           l3685 1FB4                           l3677 1F8A  
                         l3669 1F5A                           l3933 3344                           l3925 32DC  
                         l3941 2ECC                           l3909 1ED2                           l3861 1CFC  
                         l3853 1C8E                           l3845 1C48                           l3837 1C12  
                         l3829 1BCC                           l3917 3952                           l4901 26C2  
                         l2991 3348                           l4639 3432                           l4671 2B66  
                         l4663 2B18                           l4655 2AEE                           l4647 2ABE  
                         l4735 2A76                           l4727 2A14                           l4719 29DC  
                         l4743 2A96                           l4823 2424                           l4815 2406  
                         l4807 23A4                           l4399 34E2                           l3775 2274  
                         l3767 2240                           l3759 21F2                           l3687 1FCA  
                         l3679 1F9A                           l3927 330A                           l3951 2F38  
                         l3943 2EFA                           l3871 1D76                           l3863 1D32  
                         l3855 1CAA                           l3847 1C54                           l3839 1C1E  
                         l3791 1ADA                           l4911 2778                           l4903 26CE  
                         l4831 2610                           l2993 3358                           l4681 2BB8  
                         l4673 2B6A                           l4665 2B24                           l4657 2AF4  
                         l4649 2AC2                           l4729 2A34                           l4753 3988  
                         l4825 243A                           l4817 2408                           l4809 23BC  
                         l3777 2276                           l3769 225C                           l3689 1FDA  
                         l3697 1FFA                           l3929 331A                           l3953 2F88  
                         l3945 2F0A                           l3937 2E8E                           l3881 1DD6  
                         l3873 1D88                           l3865 1D40                           l3857 1CB6  
                         l3849 1C64                           l3793 1AEA                           l3785 1ABE  
                         l3961 2D9E                           l4905 26F0                           l4841 262A  
                         l4833 2614                           l2995 3368                           l4691 2C06  
                         l4683 2BC8                           l4675 2B70                           l4667 2B2E  
                         l4659 2B04                           l4739 2A8A                           l4755 3990  
                         l4771 3AE2                           l4763 3ABA                           l4819 240A  
                         l3699 200A                           l3955 2F8E                           l3947 2F18  
                         l3939 2EBC                           l3891 1E44                           l3875 1D96  
                         l3867 1D5E                           l3859 1CD2                           l3795 1AFA  
                         l3787 1ACA                           l3971 2DEE                           l4907 2712  
                         l4851 264A                           l4843 262E                           l4835 2614  
                         l4827 2608                           l2997 3372                           l4693 2C16  
                         l4685 2BE2                           l4669 2B34                           l4677 2B8C  
                         l4757 39A0                           l4765 3AC2                           l4781 22B8  
                         l3949 2F2A                           l3885 1E00                           l3893 1E48  
                         l3877 1D9A                           l3869 1D68                           l3797 1B0A  
                         l3789 1AD8                           l3981 2E18                           l3973 2DF2  
                         l3965 2DB2                           l4909 2746                           l4861 266E  
                         l4853 264E                           l4845 2636                           l4837 2620  
                         l4829 260C                           l2999 338E                           l4679 2BA6  
                         l4687 2BF0                           l4759 39C0                           l4767 3ACA  
                         l4791 2314                           l4783 22D0                           l4775 2282  
                         l3895 1E62                           l3887 1E0C                           l3879 1DA8  
                         l3799 1B10                           l3991 2E40                           l3983 2E22  
                         l3975 2E00                           l3967 2DDC                           l3959 2D88  
                         l4871 2678                           l4863 2670                           l4855 2652  
                         l4847 263E                           l4839 2626                           l4689 2C00  
                         l4697 2938                           l4769 3AD2                           l4793 232C  
                         l4785 22E2                           l4777 2288                           l3897 1E76  
                         l3889 1E1A                           l3993 2E4C                           l3985 2E2C  
                         l3969 2DDE                           l4881 2684                           l4873 267A  
                         l4865 2672                           l4857 266A                           l4849 2646  
                         l4699 295E                           l4795 2342                           l4787 22E4  
                         l4779 22A0                           l3899 1E90                           l3995 2E5C  
                         l4891 26A8                           l4883 269E                           l4875 267C  
                         l4867 2674                           l4859 266C                           l4797 2344  
                         l4789 22FC                           l3997 2E6C                           l4893 26B0  
                         l4885 26A0                           l4877 2680                           l4869 2676  
                         l4959 29BE                           l4799 235C                           l3999 2E7C  
                         l4895 26B2                           l4887 26A2                           l4879 2682  
                         l4897 26B4                           l4889 26A4                           l4899 26B6  
                         STR_1 0E73                           STR_2 0EAC                           STR_3 0E22  
                         STR_4 0EAC                           STR_5 0E3F                           STR_6 0EAC  
                         STR_7 0E01                           STR_8 0EAC                           STR_9 0E5A  
                         u2100 33C0                           u2101 33BC                           u2120 308E  
                         u2200 3186                           u2121 308A                           u2201 3182  
                         u3010 3EF0                           u2130 30A8                           u2210 31A4  
                         u3011 3EEC                           u2131 30A4                           u2211 31A0  
                         u2140 30CE                           u2220 31BA                           u3100 2080  
                         u3020 1F02                           u2141 30CA                           u2221 31B6  
                         u3101 207C                           u3021 1EFE                           u2150 30EC  
                         u2230 31DE                           u2310 3AFC                           u2070 3358  
                         u3110 20A2                           u3030 1F14                           u2151 30E8  
                         u2231 31DA                           u2311 3AF8                           u2071 3354  
                         u3111 209E                           u3031 1F10                           u3008 39F6  
                         u2160 3108                           u2080 3368                           u2240 37A8  
                         u2320 2C4E                           u4000 3716                           u3200 21AE  
                         u3120 20CC                           u3040 1F24                   _BAUD4CONbits 0EE9  
                         u2161 3104                           u2081 3364                           u2241 37A4  
                         u2321 2C4A                           u4001 3712                           u3201 21AA  
                         u3121 20C8                           u3041 1F20                           u2170 312E  
                         u2090 338E                           u2250 37C6                           u2330 2D0A  
                         u3210 21C8                           u3130 20F0                           u3050 1F68  
                         u2171 312A                           u2091 338A                           u2251 37C2  
                         u2331 2D06                           u3211 21C4                           u3131 20EC  
                         u3051 1F64                           u2180 3152                           u2260 37E2  
                         u2500 358A                           u3220 2210                           u3140 2106  
                         u3060 1F7A                           u3300 1B5C                           u2181 314E  
                         u2261 37DE                           u2501 3586                           u3221 220C  
                         u3141 2102                           u3061 1F76                           u3301 1B58  
                         u2190 316C                           u4110 3A4A                           u2510 35A0  
                         u3230 2240                           u3150 2124                           u3070 1F8A  
                         u3310 1B92                           u2191 3168                           u4111 3A46  
                         u2511 359C                           u3231 223C                           u3151 2120  
                         u3071 1F86                           u3311 1B8E                           u4120 3400  
                         u4200 2BA6                           u2440 321E                           u2520 369C  
                         u3240 226E                           u3160 2144                           u3080 1FCA  
                         u3400 1E1A                           u3320 1BA2                           u2600 16A4  
                         u4121 33FC                           u4201 2BA2                           u2441 321A  
                         u2521 3698                           u3241 226A                           u3161 2140  
                         u3081 1FC6                           u3401 1E16                           u3321 1B9E  
                         u2601 16A0                           u4130 341E                           u4210 2BB8  
                         u2450 3294                           u2530 361E                           u3170 2156  
                         u3090 200A                           u3410 1E62                           u3330 1D1C  
                         u3250 1AD8                           u2610 16B4                           _T2PR 0FBC  
                         u4131 341A                           u4211 2BB4                           u2451 3290  
                         u2531 361A                           u3171 2152                           u3091 2006  
                         u3411 1E5E                           u3251 1AD4                           u2611 16B0  
                         u2460 3E48                           u4140 3464                           u4220 2BC8  
                         u4300 2A54                           u2540 378C                           u3180 2184  
                         u3500 2F38                           u3420 1E90                           u3340 1D76  
                         u3260 1AEA                           u2700 17FA                           u2620 16F0  
                         u2461 3E44                           u4141 3460                           u4221 2BC4  
                         u4301 2A50                           u2541 3788                           u3181 2180  
                         u3501 2F34                           u3421 1E8C                           u3341 1D72  
                         u3261 1AE6                           u2701 17F6                           u2621 16EC  
                         u2470 3E5E                           u4150 3472                           u4230 2BE2  
                         u4310 39C0                           u3190 219A                           u3510 2F88  
                         u3430 1ECA                           u3350 1D96                           u3270 1AFA  
                         u2710 180A                           u2630 16FE                           u2550 1618  
                         u2471 3E5A                           u4151 346E                           u4231 2BDE  
                         u4311 39BC                           u3191 2196                           u3511 2F84  
                         u3431 1EC6                           u3351 1D92                           u3335 1D12  
                         u3271 1AF6                           u2711 1806                           u2631 16FA  
                         u2551 1614                           u4240 2BF0                           u4160 2AD2  
                         u4320 22B6                           u2480 352E                           u3440 32CC  
                         u3360 1DA8                           u3280 1B3A                           u2800 1968  
                         u2720 183C                           u2640 176C                           u2560 162A  
                         u3520 2D9E                           u3600 2474                           u4241 2BEC  
                         u4161 2ACC                           u4321 22B2                           u2481 352A  
                         u3441 32C8                           u3361 1DA4                           u3281 1B36  
                         u2801 1964                           u2721 1838                           u2641 1768  
                         u2561 1626                           u3521 2D9A                           u3601 2470  
                         u4250 2C00                           u4170 2AD4                           u4330 2312  
                         u2490 354C                           u3450 330A                           u3370 1DD6  
                         u3290 1B4C                           u2810 1984                           u2730 184A  
                         u2650 1784                           u2570 163A                           u3530 2DD2  
                         u3610 24D0                           u4251 2BFC                           u4331 230E  
                         u2491 3548                           u3451 3306                           u3371 1DD2  
                         u3291 1B48                           u2811 1980                           u2731 1846  
                         u2651 177E                           u2571 1636                           u3611 24CC  
                         u4180 2AEE                           u4260 295E                           u4340 2372  
                         u3460 333E                           u3380 1DEC                           u2900 1A5C  
                         u2820 1994                           u2740 1868                           u2660 1786  
                         u2580 167C                           u3540 2E00                           u3620 2526  
                         u3700 1108                           u4181 2AEA                           u4261 295A  
                         u4341 236E                           u3461 333A                           u3381 1DE8  
                         u2901 1A58                           u2821 1990                           u2741 1864  
                         u2581 1678                           u3541 2DFC                           u3621 2522  
                         u3701 1104                           u4190 2B04                           u4270 29DC  
                         u4350 23D2                           u3470 2EBC                           u3390 1E00  
                         u2910 1A7C                           u2830 19A6                           u2750 18A0  
                         u2670 17AE                           u2590 1692                           u3550 2E14  
                         u3630 2570                           u3710 113A                           u4191 2B00  
                         u4271 29D8                           u4351 23CE                           u3471 2EB8  
                         u3391 1DFC                           u2911 1A78                           u2831 19A2  
                         u2751 189C                           u2671 17AA                           u2591 168E  
                         u3551 2E10                           u3535 2DC8                           u3631 256C  
                         u3711 1136                           u4407 2FA2                           u4280 2A00  
                         u4360 243A                           u3480 2EFA                           u2920 1A8E  
                         u2840 19BC                           u2760 18E6                           u2680 17CC  
                         u3560 2E3C                           u3640 258E                           u3800 15AC  
                         u3720 11A4                           u4281 29FC                           u4361 2436  
                         u3481 2EF6                           u2921 1A8A                           u2841 19B8  
                         u2761 18E2                           u2681 17C8                           u3561 2E38  
                         u3641 258A                           u3801 15A8                           u3721 11A0  
                         u4417 2FD2                           u3810 3DDC                           u4290 2A34  
                         u3490 2F18                           u2930 1AAA                           u2850 19D2  
                         u2770 191C                           u2690 17EC                           u3570 2E5C  
                         u3650 259E                           u3730 120A                           u4370 2778  
                         u3811 3DD8                           u4291 2A30                           u4507 3C32  
                         u3491 2F14                           u2931 1AA6                           u2851 19CE  
                         u2771 1918                           u2691 17E8                           u3571 2E58  
                         u3651 259A                           u3731 1206                           u4427 3006  
                         u4371 2774                           u3900 2820                           u2860 19E6  
                         u2780 192C                           u3580 2E6C                           u3660 25AC  
                         u3740 123C                           u4517 3C64                           u3901 281C  
                         u2861 19E2                           u2781 1928                           u3581 2E68  
                         u3661 25A8                           u3741 1238                           u4437 303A  
                         u3910 2836                           u2870 1A00                           u2790 1958  
                         u3670 25E6                           u3590 2466                           u3750 12A6  
                         u4607 3DF4                           u4527 35FA                           u3911 2832  
                         u4447 36EC                           u2871 19FC                           u2791 1954  
                         u3671 25E2                           u3591 2462                           u3751 12A2  
                         u3920 285C                           u2880 1A3A                           u3680 25F4  
                         u3760 1340                           u4617 356A                           u4537 3C96  
                         u4457 3B38                           u3921 2858                           u2881 1A36  
                         u3681 25F0                           u3761 133C                           u3930 2872  
                         u2890 1A4C                           u3770 1388                           u4627 3762  
                         u4547 3CC8                           u4467 3B6A                           u3931 286E  
                         u2891 1A48                           u3771 1384                           u3940 2898  
                         u3780 1416                           u4637 3A9A                           u4557 3CFA  
                         u4477 3B9C                           u3941 2894                           u3781 1412  
                         u4397 2690                           u2990 39F4                           u3950 28AE  
                         u3870 27BE                           u3790 14D8                           u2991 39EC  
                         u4647 22C2                           u4567 3D2C                           u4487 3BCE  
                         u3951 28AA                           u3871 27BA                           u3791 14D4  
                         u3960 28D4                           u3880 27E4                           u4657 231E  
                         u4577 3D5E                           u4497 3C00                           u3961 28D0  
                         u3881 27E0                           u3970 28EA                           u3890 27FA  
                         u4667 237E                           u4587 3D90                           u3971 28E6  
                         u3891 27F6                           u3980 2910                           u4677 23E2  
                         u4597 3678                           u3981 290C                           u3990 2926  
                         u4687 2444                           u3991 2922                           u4697 3DC0  
                  main@current 00A6                    main@maximum 00AA                           abs@a 0007  
                         _dbuf 0150                           _main 2608                           _dtoa 2ABE  
         convert_rgb2hue@cCurr 0033                           _prec 00D2                           pad@i 0015  
                         pad@p 0012                           fsr1h 0FE2                           fsr2h 0FDA  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         _stop 3514            fullSpeedAhead@power 0016                           prodh 0FF4  
                         prodl 0FF3                           start 0000               __end_of_ADC_init 3EDE  
              ___fldiv@new_exp 002A         __end_of_color_read_Red 3852                   ___param_bank 0000  
               reading_hue@hue 003A                          ??_abs 0009                          ??_pad 0014  
                ___fltol@sign1 0009                __end_of___fladd 1ABE                          ?_main 0001  
                        ?_dtoa 0017                          _ADPCH 0F5F                __end_of___fldiv 2282  
              __end_of___awdiv 3140                          STR_10 0EAC                          STR_11 0E8B  
                        STR_12 0EA0                __end_of___awmod 31F0                __end_of___flmul 1EE8  
              __end_of___flsub 3988                __end_of___fltol 2E8E                          ?_stop 0013  
              ___awdiv@divisor 0003                __end_of___lwdiv 3802                ___awdiv@counter 0005  
            ??_convert_rgb2hue 0034                   vfpfcnvrt@fmt 0023                __end_of_left135 3CE4  
      __end_of_sendCharSerial4 3EF6     __end_of_I2C_2_Master_Start 3F16     __end_of_I2C_2_Master_Write 3F02  
                        _flags 005B            read_prec_or_width@c 0009            read_prec_or_width@n 000A  
                        _fputc 3348                          _fputs 3A0C                          pad@fp 000F  
                        _width 00D0                          _putch 3F20                          dtoa@d 0018  
                        dtoa@i 0020                          dtoa@p 001C                __end_of_right90 3BB8  
                        dtoa@s 001F                          dtoa@w 001D                   ?_reading_hue 0036  
              __end_of_moveRed 3B86                          tablat 0FF5                __end_of_turn180 3DAC  
                        status 0FD8                __end_of_sprintf 3AEE          convert_rgb2hue@redmax 0064  
      __end_of_color_read_Blue 3942          _I2C_2_Master_RepStart 3F16                ?_color_read_Red 0005  
              __initialization 3A4C                   __end_of_main 27A8                   __end_of_dtoa 2C34  
                 __end_of_stop 35A2          __end_of_moveLightBlue 3CB2                         ??_main 00A4  
                       ??_dtoa 001A                         ??_stop 0015                  __activetblptr 0003  
   __end_of_read_prec_or_width 329E                   ?_setMotorPWM 000E                         ?_fputc 0001  
                       ?_fputs 0009                         _ADRESH 0F64                         _CCPR1H 0FAA  
                       _CCPR2H 0FA6                         _CCPR3H 0F25                         _CCPR4H 0F21  
             ___awdiv@dividend 0001               __end_of_backHalf 3E0E                         ?_putch 0001  
                       _RC0PPS 0E62                         _RC4REG 0EE3                         _RE2PPS 0E74  
                       _RD5PPS 0E6F                         _RC7PPS 0E69                         _RE4PPS 0E76  
                       _RD6PPS 0E70                         _RG6PPS 0E88                  vfpfcnvrt@done 002B  
     __end_of_color_click_init 3ABA                         _RX4PPS 0E15                         _TX4REG 0EE4  
             __end_of___xxtofl 2608    convert_rgb2hue@greencurrent 0068               __end_of_decision 2938  
                 _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0030                         ___flge 2E8E  
                       ___fleq 329E                      ??___fladd 0009                         ___wmul 3E60  
                    ??___fldiv 0021               backOneAndHalf@mL 0018                      ??___awdiv 0005  
             backOneAndHalf@mR 0019                      ??___awmod 0005                      ??___flmul 0009  
                    ??___flsub 0019                      ??___fltol 0005                      ??___lwdiv 000B  
                       _left90 3D16           read_prec_or_width@ap 0008                         clear_0 3A64  
                       clear_1 3A70               ___awdiv@quotient 0007                ___awmod@divisor 0003  
                       _motorL 00DE                         _motorR 00D5                         isa$std 0001  
              ___awmod@counter 0005                      ??_left135 001A                         pad@buf 0010  
             __end_of_right135 3C80                         dtoa@fp 0017               __end_of_moveBlue 3D7A  
             __end_of_movePink 3BEA                         fputc@c 0001                         fputs@c 000C  
                       fputs@i 000D                         fputs@s 0009                      ??_right90 001A  
                 __mediumconst 0000        calibration_routine@cCal 0044                      ??_moveRed 001E  
                       tblptrh 0FF7                         tblptrl 0FF6                         tblptru 0FF8  
                    ?_ADC_init 0001               ?_sendCharSerial4 0001         convert_rgb2hue@bluemax 0074  
                       putch@c 0001               __end_of_vfprintf 39CA                      ??_turn180 001A  
                       stop@mL 0013                         stop@mR 0014              ??_initDCmotorsPWM 0003  
                    ??_sprintf 0037               __end_of_turnLeft 369E                     ___flge@ff1 0001  
                   ___flge@ff2 0005                   ___xxtofl@arg 000B                   ___xxtofl@exp 000A  
                 ___xxtofl@val 0001                     ___fleq@ff1 0001                     ___fleq@ff2 0005  
              fullSpeedBack@mL 0013                fullSpeedBack@mR 0014                     __accesstop 0060  
      __end_of__initialization 3A80       __end_of_color_read_Clear 38F2       __end_of_color_read_Green 38A2  
       ?_I2C_2_Master_RepStart 0001                 _backOneAndHalf 3BEA                  ___rparam_used 0001  
                   ___fltol@f1 0001               ?_color_read_Blue 0005                 __pcstackCOMRAM 0001  
                _fullSpeedBack 3718                   __pidataBANK0 3F22                  __end_of_fputc 33F2  
                __end_of_fputs 3A4C                  __end_of_putch 3F22               reading_hue@cCurr 0036  
                   ??_ADC_init 0001                 main@clear_norm 00AE                     backHalf@mL 0018  
                   backHalf@mR 0019                        ??_fputc 0004                        ??_fputs 000C  
                      ??_putch 0001                     __pbssBANK0 00B4                     __pbssBANK1 0100  
       __end_of_backOneAndHalf 3C1C              _color_writetoaddr 3E86                   _T2CLKCONbits 0FBF  
               ?_fullSpeedBack 0013                _convert_rgb2hue 0EB0                        ?___flge 0001  
                      ?___fleq 0001             ?_color_writetoaddr 0003                        ?___wmul 0001  
                      ?_left90 0018                      ?_backHalf 0018            ??_color_writetoaddr 0004  
                    ?___xxtofl 0001            _convert_rgb2hue$411 0078            _convert_rgb2hue$412 007C  
          _convert_rgb2hue$413 0080            _convert_rgb2hue$414 0084                      ?_decision 0020  
                      _SP4BRGH 0EE6                        _SP4BRGL 0EE5                        _SSP2ADD 0ED6  
                      _SSP2BUF 0ED5                    moveGreen@mL 001C                    moveGreen@mR 001D  
              ?_backOneAndHalf 0018         color_writetoaddr@value 0003               ??_color_read_Red 0007  
    __end_of_color_writetoaddr 3EA6                      _ADREFbits 0F58                      ?_right135 0018  
           _I2C_2_Master_Start 3F0C                     _initUSART4 3EA6             _I2C_2_Master_Write 3EF6  
                    ?_moveBlue 001C                        __Hparam 0000                      ?_movePink 001C  
                      __Lparam 0000              color_read_Red@tmp 000A        sendStringSerial4@string 0002  
                      ___fladd 15FE                        ___fldiv 1EE8                        ___awdiv 307C  
                      ___awmod 3140                        ___flmul 1ABE                        ___flsub 3942  
                      ___fltol 2D88            ?_I2C_2_Master_Start 0001                        ___lwdiv 378E  
          ?_I2C_2_Master_Write 0001                      ?_vfprintf 002D                   __psmallconst 0E00  
                      __pcinit 3A4C                     ??_backHalf 001A                        __ramtop 0E00  
                    ?_turnLeft 0013                        _left135 3CB2                        __ptext0 2608  
                      __ptext1 2F92                        __ptext2 0EB0                        __ptext3 2454  
                      __ptext4 2D88                        __ptext5 3942                        __ptext6 15FE  
                      __ptext7 1ABE                        __ptext8 2E8E                        __ptext9 329E  
                    _T2CONbits 0FBD          read_prec_or_width@fmt 0007                     ??___xxtofl 0005  
             ___awmod@dividend 0001                     ??_decision 0022                        _right90 3B86  
                    _T2HLTbits 0FBE                        _moveRed 3B54                  _RxBufWriteCnt 005F  
                      _turn180 3D7A                        _sprintf 3ABA                        main@hue 00B2  
         ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002           end_of_initialization 3A80  
            __end_of_moveGreen 3D16                        fputc@fp 0003        __end_of_convert_rgb2hue 15FE  
                      fputs@fp 000B              ?_color_click_init 0001             _read_prec_or_width 31F0  
                   _moveOrange 3C1C                     ??_right135 001A                     _moveYellow 3B22  
              ??_fullSpeedBack 0015                     ??_moveBlue 001E             ??_color_click_init 0005  
                   ??_movePink 001E               _colorCalibration 00EF              __end_of_vfpfcnvrt 2ABE  
                      postdec2 0FDD            ?_read_prec_or_width 0007                        postinc0 0FEE  
                      postinc1 0FE6                        postinc2 0FDE               vfpfcnvrt@convarg 0027  
                   ??_vfprintf 0030        convert_rgb2hue@greenmax 006C                   _colorCurrent 00E7  
              _initDCmotorsPWM 3484                     ??_turnLeft 0015                      _PORTFbits 0F8E  
           setMotorPWM@negDuty 0012              __end_of_turnRight 3620                    ___fladd@grs 0010  
                ___xxtofl@sign 0009                      _TRISAbits 0F81             setMotorPWM@posDuty 0011  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
             convert_rgb2hue@b 00A0           ??_read_prec_or_width 0009               convert_rgb2hue@g 009C  
                  ___fldiv@grs 002C               convert_rgb2hue@r 0098                    ___fldiv@rem 0025  
             fullSpeedAhead@mL 0013               fullSpeedAhead@mR 0014       color_writetoaddr@address 0004  
      ??_I2C_2_Master_RepStart 0002                    ___flmul@grs 000E                    _CCP1CONbits 0FAB  
          _calibration_routine 2282              ?_color_read_Clear 0005                   _EUSART4RXbuf 00B4  
                 _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7              ?_color_read_Green 0005  
   convert_rgb2hue@bluecurrent 0070                    _CCP3CONbits 0F26                    ?_initUSART4 0001  
                  _CCP4CONbits 0F22      sendCharSerial4@charToSend 0001             ??_color_read_Clear 0007  
           ??_color_read_Green 0007      convert_rgb2hue@redcurrent 0060                 __end_of___flge 2F92  
               __end_of___fleq 3348                 _fullSpeedAhead 369E                    vfpfcnvrt@ap 0024  
                  vfpfcnvrt@cp 002C                    vfpfcnvrt@fp 0022                 __end_of___wmul 3E86  
               __end_of_left90 3D48           ?_calibration_routine 0044            color_read_Clear@tmp 000A  
          start_initialization 3A4C   calibration_routine@cal_state 0047                    __end_of_abs 3B22  
                  __end_of_pad 3484                  _TxBufWriteCnt 005D               ?_convert_rgb2hue 0032  
                  ?_moveOrange 001C                    ?_moveYellow 001C            color_read_Green@tmp 000A  
      __end_of_initDCmotorsPWM 3514                    vfprintf@fmt 002E         __end_of_fullSpeedAhead 3718  
                     ??___flge 0009                       ??___fleq 0009                       ??___wmul 0005  
                     ??_left90 001A                    __pdataBANK0 00F7          ??_calibration_routine 0045  
                _moveLightBlue 3C80                      ___fladd@a 0005                      ___fladd@b 0001  
                    ___fldiv@a 001D                      ___fldiv@b 0019                      ___flmul@a 0005  
                    ___flmul@b 0001                    __pbssCOMRAM 005B                      ___flsub@a 0015  
                    ___flsub@b 0011                  __pcstackBANK0 0060               ??_backOneAndHalf 001A  
                ??_reading_hue 0038                     right135@mL 0018                     right135@mR 0019  
             ___lwdiv@dividend 0007                      _dtoa$2657 001A                ?_fullSpeedAhead 0013  
                     ?___fladd 0001                       ?___fldiv 0019                       ?___awdiv 0001  
                     ?___awmod 0001                       ?___flmul 0001                       ?___flsub 0011  
                     ?___fltol 0001                       ?___lwdiv 0007                     moveBlue@mL 001C  
                   moveBlue@mR 001D                 ?_moveLightBlue 001C                       ?_left135 0018  
                 _readingIndex 00D4           I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004  
                  __smallconst 0E00                     movePink@mL 001C                     movePink@mR 001D  
            _I2C_2_Master_Idle 3E38              _I2C_2_Master_Init 3E0E              _I2C_2_Master_Read 39CA  
                     ?_right90 0018              _I2C_2_Master_Stop 3F02                       ?_moveRed 001C  
                 _RxBufReadCnt 005E                       _ADC_init 3EC4             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 000F  
                     ?_turn180 0018             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000B  
     initDCmotorsPWM@PWMperiod 0001                       ?_sprintf 0031              _sendStringSerial4 3DAC  
          ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002  
               ___wmul@product 0005                       _LATAbits 0F79            ??_I2C_2_Master_Stop 0002  
                     _LATCbits 0F7B                       _LATDbits 0F7C                       _LATEbits 0F7D  
                     _LATFbits 0F7E                       _LATGbits 0F7F                       _LATHbits 0F80  
           ?_sendStringSerial4 0002                      _moveGreen 3CE4                       _PIE4bits 0E2D  
          __end_of_reading_hue 307C                    turnRight@mL 0013                    turnRight@mR 0014  
                     _PIR4bits 0E37               ?_initDCmotorsPWM 0001                      left135@mL 0018  
                    left135@mR 0019              ??_sendCharSerial4 0001                       _SSP2CON2 0EDA  
          ??_sendStringSerial4 0003                       _SSP2STAT 0ED8                      _vfpfcnvrt 2938  
                   _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 3E60      __end_of_I2C_2_Master_Init 3E38  
    __end_of_I2C_2_Master_Read 3A0C              ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 3F0C  
                 setMotorPWM@m 000E    I2C_2_Master_Write@data_byte 0002                    _ldrReadings 013C  
            ??_color_read_Blue 0007                   _TxBufReadCnt 005C                      _turnRight 35A2  
    __end_of_sendStringSerial4 3DDE                   moveOrange@mL 001C                   moveOrange@mR 001D  
__end_of_I2C_2_Master_RepStart 3F20             color_read_Blue@tmp 000A            __end_of_setMotorPWM 2D88  
                 ??_initUSART4 0001                     ?_moveGreen 001C                       __Hrparam 0000  
                   vfprintf@ap 002F                       __Lrparam 0000                     vfprintf@fp 002D  
        __end_of_fullSpeedBack 378E                ??_moveLightBlue 001E                   moveYellow@mL 001C  
                 moveYellow@mR 001D                     ?_vfpfcnvrt 0022                       _backHalf 3DDE  
                   _ANSELDbits 0EA7                     _ANSELFbits 0EB4                       _dataFlag 00F7  
                   sprintf@fmt 0032                       ___xxtofl 2454                       _decision 27A8  
                    right90@mL 0018                      right90@mR 0019                ___lwdiv@divisor 0009  
           __end_of_initUSART4 3EC4                ___lwdiv@counter 000D                     ?_turnRight 0013  
                     __ptext10 1EE8                       __ptext11 3EA6                       __ptext20 3C1C  
                     __ptext12 3484                       __ptext21 3C4E                       __ptext13 369E  
                     __ptext30 3DDE                       __ptext22 35A2                       __ptext14 27A8  
                     __ptext31 3514                       __ptext23 3C80                       __ptext15 3B22  
                     __ptext40 3988                       __ptext32 3718                       __ptext24 3CB2  
                     __ptext16 3B54                       __ptext41 2938                       __ptext33 2C34  
                     __ptext25 3CE4                       __ptext17 3B86                       __ptext50 3140  
                     __ptext42 31F0                       __ptext34 378E                       __ptext26 3D16  
                     __ptext18 3BB8                       __ptext51 307C                       __ptext43 3E60  
                     __ptext35 3A86                       __ptext27 3D48                       __ptext19 3BEA  
                     __ptext60 3F0C                       __ptext52 3DAC                       __ptext44 2ABE  
                     __ptext36 3E86                       __ptext28 3D7A                       __ptext61 3F16  
                     __ptext53 3EDE                       __ptext45 33F2                       __ptext37 3E0E  
                     __ptext29 3620                       __ptext62 39CA                       __ptext54 3802  
                     __ptext46 3A0C                       __ptext38 2282                       __ptext63 3E38  
                     __ptext55 3852                       __ptext47 3348                       __ptext39 3ABA  
                     __ptext64 3EC4                       __ptext56 38A2                       __ptext48 3F20  
                     __ptext57 38F2                       __ptext49 3AEE                       __ptext58 3EF6  
                     __ptext59 3F02                    decision@hue 0020                      moveRed@mL 001C  
                    moveRed@mR 001D                   _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA  
                  _reading_hue 2F92                   ??_moveOrange 001E                     turnLeft@mL 0013  
                   turnLeft@mR 0014                   ??_moveYellow 001E                       _right135 3C4E  
                     _moveBlue 3D48                       _movePink 3BB8                     turnRight@i 0016  
                     isa$xinst 0000                       left90@mL 0018                       left90@mR 0019  
                   _RC4STAbits 0EE7                       _vfprintf 3988                       _turnLeft 3620  
                    turn180@mL 0018                      turn180@mR 0019             __end_of_moveOrange 3C4E  
           __end_of_moveYellow 3B54                    _setMotorPWM 2C34                      sprintf@ap 0037  
             ??_fullSpeedAhead 0015                    ??_moveGreen 001E                      turnLeft@i 0016  
  __end_of_calibration_routine 2454                    ??_vfpfcnvrt 0025               _color_click_init 3A86  
                     sprintf@f 0038                       sprintf@s 0031                     _SSP2DATPPS 0E1D  
                   _SSP2CLKPPS 0E1C                    ??_turnRight 0015                  ___fladd@signs 000D  
                   _TX4STAbits 0EE8                _sendCharSerial4 3EDE                   ___fladd@aexp 000E  
                 ___fladd@bexp 000F  
