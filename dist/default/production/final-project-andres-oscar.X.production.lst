

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Mar 11 20:13:32 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    35   000000                     
    36                           ; Generated 21/07/2023 GMT
    37                           ; 
    38                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F67K40 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70   000000                     
    71                           	psect	idataCOMRAM
    72   001512                     __pidataCOMRAM:
    73                           	callstack 0
    74                           
    75                           ;initializer for _dataFlag
    76   001512  01                 	db	1
    77   000000                     _TX4REG	set	3812
    78   000000                     _RC4STAbits	set	3815
    79   000000                     _SP4BRGH	set	3814
    80   000000                     _TRISFbits	set	3974
    81   000000                     _TRISEbits	set	3973
    82   000000                     _TRISGbits	set	3975
    83   000000                     _CCPR2H	set	4006
    84   000000                     _CCPR1H	set	4010
    85   000000                     _SSP2CON2bits	set	3802
    86   000000                     _RX4PPS	set	3605
    87   000000                     _SSP2CLKPPS	set	3612
    88   000000                     _SSP2DATPPS	set	3613
    89   000000                     _ANSELDbits	set	3751
    90   000000                     _SSP2ADD	set	3798
    91   000000                     _SSP2CON1bits	set	3801
    92   000000                     _LATAbits	set	3961
    93   000000                     _LATEbits	set	3965
    94   000000                     _LATGbits	set	3967
    95   000000                     _TRISAbits	set	3969
    96   000000                     _TRISDbits	set	3972
    97   000000                     _LATCbits	set	3963
    98   000000                     _LATDbits	set	3964
    99   000000                     _RC4REG	set	3811
   100   000000                     _SP4BRGL	set	3813
   101   000000                     _TX4STAbits	set	3816
   102   000000                     _BAUD4CONbits	set	3817
   103   000000                     _SSP2CON2	set	3802
   104   000000                     _CCPR4H	set	3873
   105   000000                     _CCPR3H	set	3877
   106   000000                     _SSP2STAT	set	3800
   107   000000                     _ANSELFbits	set	3764
   108   000000                     _SSP2BUF	set	3797
   109   000000                     _PIE4bits	set	3629
   110   000000                     _PIR4bits	set	3639
   111   000000                     _RC0PPS	set	3682
   112   000000                     _RC7PPS	set	3689
   113   000000                     _RD5PPS	set	3695
   114   000000                     _RE2PPS	set	3700
   115   000000                     _RD6PPS	set	3696
   116   000000                     _CCP1CONbits	set	4011
   117   000000                     _CCPTMRS0bits	set	4013
   118   000000                     _T2PR	set	4028
   119   000000                     _T2CONbits	set	4029
   120   000000                     _CCP2CONbits	set	4007
   121   000000                     _CCP3CONbits	set	3878
   122   000000                     _ADREFbits	set	3928
   123   000000                     _CCP4CONbits	set	3874
   124   000000                     _PORTFbits	set	3982
   125   000000                     _TRISCbits	set	3971
   126   000000                     _ADPCH	set	3935
   127   000000                     _ADRESH	set	3940
   128   000000                     _ADCON0bits	set	3936
   129   000000                     _RE4PPS	set	3702
   130   000000                     _RG6PPS	set	3720
   131   000000                     _T2CLKCONbits	set	4031
   132   000000                     _T2HLTbits	set	4030
   133                           
   134                           	psect	smallconst
   135   000E00                     __psmallconst:
   136                           	callstack 0
   137   000E00  00                 	db	0
   138   000E01                     
   139                           ; BSR set to: 15
   140   000E01  56                 	db	86	;'V'
   141   000E02  6F                 	db	111	;'o'
   142   000E03  6C                 	db	108	;'l'
   143   000E04  74                 	db	116	;'t'
   144   000E05  61                 	db	97	;'a'
   145   000E06  67                 	db	103	;'g'
   146   000E07  65                 	db	101	;'e'
   147   000E08  20                 	db	32
   148   000E09  3D                 	db	61	;'='
   149   000E0A  20                 	db	32
   150   000E0B  25                 	db	37
   151   000E0C  64                 	db	100	;'d'
   152   000E0D  2E                 	db	46
   153   000E0E  25                 	db	37
   154   000E0F  30                 	db	48	;'0'
   155   000E10  32                 	db	50	;'2'
   156   000E11  64                 	db	100	;'d'
   157   000E12  2C                 	db	44
   158   000E13  20                 	db	32
   159   000E14  20                 	db	32
   160   000E15  00                 	db	0
   161   000E16                     
   162                           ; BSR set to: 15
   163   000E16  47                 	db	71	;'G'
   164   000E17  72                 	db	114	;'r'
   165   000E18  65                 	db	101	;'e'
   166   000E19  65                 	db	101	;'e'
   167   000E1A  6E                 	db	110	;'n'
   168   000E1B  5F                 	db	95	;'_'
   169   000E1C  6C                 	db	108	;'l'
   170   000E1D  69                 	db	105	;'i'
   171   000E1E  67                 	db	103	;'g'
   172   000E1F  68                 	db	104	;'h'
   173   000E20  74                 	db	116	;'t'
   174   000E21  3D                 	db	61	;'='
   175   000E22  25                 	db	37
   176   000E23  64                 	db	100	;'d'
   177   000E24  2C                 	db	44
   178   000E25  20                 	db	32
   179   000E26  0A                 	db	10
   180   000E27  0D                 	db	13
   181   000E28  00                 	db	0
   182   000E29                     
   183                           ; BSR set to: 15
   184   000E29  43                 	db	67	;'C'
   185   000E2A  6C                 	db	108	;'l'
   186   000E2B  65                 	db	101	;'e'
   187   000E2C  61                 	db	97	;'a'
   188   000E2D  72                 	db	114	;'r'
   189   000E2E  3D                 	db	61	;'='
   190   000E2F  25                 	db	37
   191   000E30  30                 	db	48	;'0'
   192   000E31  35                 	db	53	;'5'
   193   000E32  64                 	db	100	;'d'
   194   000E33  2C                 	db	44
   195   000E34  20                 	db	32
   196   000E35  20                 	db	32
   197   000E36  0A                 	db	10
   198   000E37  0A                 	db	10
   199   000E38  0D                 	db	13
   200   000E39  00                 	db	0
   201   000E3A                     
   202                           ; BSR set to: 15
   203   000E3A  52                 	db	82	;'R'
   204   000E3B  65                 	db	101	;'e'
   205   000E3C  64                 	db	100	;'d'
   206   000E3D  5F                 	db	95	;'_'
   207   000E3E  6C                 	db	108	;'l'
   208   000E3F  69                 	db	105	;'i'
   209   000E40  67                 	db	103	;'g'
   210   000E41  68                 	db	104	;'h'
   211   000E42  74                 	db	116	;'t'
   212   000E43  3D                 	db	61	;'='
   213   000E44  25                 	db	37
   214   000E45  64                 	db	100	;'d'
   215   000E46  2C                 	db	44
   216   000E47  20                 	db	32
   217   000E48  0A                 	db	10
   218   000E49  0D                 	db	13
   219   000E4A  00                 	db	0
   220   000E4B                     
   221                           ; BSR set to: 15
   222   000E4B  41                 	db	65	;'A'
   223   000E4C  6C                 	db	108	;'l'
   224   000E4D  6C                 	db	108	;'l'
   225   000E4E  5F                 	db	95	;'_'
   226   000E4F  6C                 	db	108	;'l'
   227   000E50  69                 	db	105	;'i'
   228   000E51  67                 	db	103	;'g'
   229   000E52  68                 	db	104	;'h'
   230   000E53  74                 	db	116	;'t'
   231   000E54  73                 	db	115	;'s'
   232   000E55  3D                 	db	61	;'='
   233   000E56  25                 	db	37
   234   000E57  64                 	db	100	;'d'
   235   000E58  20                 	db	32
   236   000E59  0A                 	db	10
   237   000E5A  0D                 	db	13
   238   000E5B  00                 	db	0
   239   000E5C                     
   240                           ; BSR set to: 15
   241   000E5C  42                 	db	66	;'B'
   242   000E5D  6C                 	db	108	;'l'
   243   000E5E  75                 	db	117	;'u'
   244   000E5F  65                 	db	101	;'e'
   245   000E60  5F                 	db	95	;'_'
   246   000E61  6C                 	db	108	;'l'
   247   000E62  69                 	db	105	;'i'
   248   000E63  67                 	db	103	;'g'
   249   000E64  68                 	db	104	;'h'
   250   000E65  74                 	db	116	;'t'
   251   000E66  3D                 	db	61	;'='
   252   000E67  25                 	db	37
   253   000E68  64                 	db	100	;'d'
   254   000E69  20                 	db	32
   255   000E6A  0A                 	db	10
   256   000E6B  0D                 	db	13
   257   000E6C  00                 	db	0
   258   000E6D                     
   259                           ; BSR set to: 15
   260   000E6D  47                 	db	71	;'G'
   261   000E6E  72                 	db	114	;'r'
   262   000E6F  65                 	db	101	;'e'
   263   000E70  65                 	db	101	;'e'
   264   000E71  6E                 	db	110	;'n'
   265   000E72  3D                 	db	61	;'='
   266   000E73  25                 	db	37
   267   000E74  30                 	db	48	;'0'
   268   000E75  35                 	db	53	;'5'
   269   000E76  64                 	db	100	;'d'
   270   000E77  2C                 	db	44
   271   000E78  20                 	db	32
   272   000E79  20                 	db	32
   273   000E7A  00                 	db	0
   274   000E7B                     
   275                           ; BSR set to: 15
   276   000E7B  42                 	db	66	;'B'
   277   000E7C  6C                 	db	108	;'l'
   278   000E7D  75                 	db	117	;'u'
   279   000E7E  65                 	db	101	;'e'
   280   000E7F  3D                 	db	61	;'='
   281   000E80  25                 	db	37
   282   000E81  30                 	db	48	;'0'
   283   000E82  35                 	db	53	;'5'
   284   000E83  64                 	db	100	;'d'
   285   000E84  2C                 	db	44
   286   000E85  20                 	db	32
   287   000E86  20                 	db	32
   288   000E87  00                 	db	0
   289   000E88                     
   290                           ; BSR set to: 15
   291   000E88  52                 	db	82	;'R'
   292   000E89  65                 	db	101	;'e'
   293   000E8A  64                 	db	100	;'d'
   294   000E8B  3D                 	db	61	;'='
   295   000E8C  25                 	db	37
   296   000E8D  30                 	db	48	;'0'
   297   000E8E  35                 	db	53	;'5'
   298   000E8F  64                 	db	100	;'d'
   299   000E90  2C                 	db	44
   300   000E91  20                 	db	32
   301   000E92  20                 	db	32
   302   000E93  00                 	db	0
   303   000E94  00                 	db	0	; dummy byte at the end
   304   000000                     
   305                           ; #config settings
   306                           
   307                           	psect	cinit
   308   001320                     __pcinit:
   309                           	callstack 0
   310   001320                     start_initialization:
   311                           	callstack 0
   312   001320                     __initialization:
   313                           	callstack 0
   314                           
   315                           ; Initialize objects allocated to COMRAM (1 bytes)
   316                           ; load TBLPTR registers with __pidataCOMRAM
   317   001320  0E12               	movlw	low __pidataCOMRAM
   318   001322  6EF6               	movwf	tblptrl,c
   319   001324  0E15               	movlw	high __pidataCOMRAM
   320   001326  6EF7               	movwf	tblptrh,c
   321   001328  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   322   00132A  6EF8               	movwf	tblptru,c
   323   00132C  0009               	tblrd		*+	;fetch initializer
   324   00132E  CFF5 F04D          	movff	tablat,__pdataCOMRAM
   325                           
   326                           ; Clear objects allocated to BANK0 (80 bytes)
   327   001332  EE00  F060         	lfsr	0,__pbssBANK0
   328   001336  0E50               	movlw	80
   329   001338                     clear_0:
   330   001338  6AEE               	clrf	postinc0,c
   331   00133A  06E8               	decf	wreg,f,c
   332   00133C  E1FD               	bnz	clear_0
   333                           
   334                           ; Clear objects allocated to COMRAM (43 bytes)
   335   00133E  EE00  F001         	lfsr	0,__pbssCOMRAM
   336   001342  0E2B               	movlw	43
   337   001344                     clear_1:
   338   001344  6AEE               	clrf	postinc0,c
   339   001346  06E8               	decf	wreg,f,c
   340   001348  E1FD               	bnz	clear_1
   341   00134A                     end_of_initialization:
   342                           	callstack 0
   343   00134A                     __end_of__initialization:
   344                           	callstack 0
   345   00134A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   346   00134C  6EF8               	movwf	tblptru,c
   347   00134E  0E0E               	movlw	high __Lsmallconst
   348   001350  6EF7               	movwf	tblptrh,c
   349   001352  0100               	movlb	0
   350   001354  EFF5  F007         	goto	_main	;jump to C main() function
   351                           
   352                           	psect	bssCOMRAM
   353   000001                     __pbssCOMRAM:
   354                           	callstack 0
   355   000001                     _EUSART4RXbuf:
   356                           	callstack 0
   357   000001                     	ds	20
   358   000015                     _readingIndex:
   359                           	callstack 0
   360   000015                     	ds	1
   361   000016                     _TxBufReadCnt:
   362                           	callstack 0
   363   000016                     	ds	1
   364   000017                     _TxBufWriteCnt:
   365                           	callstack 0
   366   000017                     	ds	1
   367   000018                     _RxBufReadCnt:
   368                           	callstack 0
   369   000018                     	ds	1
   370   000019                     _RxBufWriteCnt:
   371                           	callstack 0
   372   000019                     	ds	1
   373   00001A                     _motorR:
   374                           	callstack 0
   375   00001A                     	ds	9
   376   000023                     _motorL:
   377                           	callstack 0
   378   000023                     	ds	9
   379                           
   380                           	psect	dataCOMRAM
   381   00004D                     __pdataCOMRAM:
   382                           	callstack 0
   383   00004D                     _dataFlag:
   384                           	callstack 0
   385   00004D                     	ds	1
   386                           
   387                           	psect	bssBANK0
   388   000060                     __pbssBANK0:
   389                           	callstack 0
   390   000060                     _EUSART4TXbuf:
   391                           	callstack 0
   392   000060                     	ds	60
   393   00009C                     _ldrReadings:
   394                           	callstack 0
   395   00009C                     	ds	20
   396                           
   397                           	psect	cstackCOMRAM
   398   00002C                     __pcstackCOMRAM:
   399                           	callstack 0
   400   00002C                     ??_I2C_2_Master_Idle:
   401   00002C                     ?___wmul:
   402                           	callstack 0
   403   00002C                     initDCmotorsPWM@PWMperiod:
   404                           	callstack 0
   405   00002C                     ___wmul@multiplier:
   406                           	callstack 0
   407                           
   408                           ; 2 bytes @ 0x0
   409   00002C                     	ds	1
   410   00002D                     I2C_2_Master_Write@data_byte:
   411                           	callstack 0
   412                           
   413                           ; 1 bytes @ 0x1
   414   00002D                     	ds	1
   415   00002E                     color_writetoaddr@value:
   416                           	callstack 0
   417   00002E                     ___wmul@multiplicand:
   418                           	callstack 0
   419                           
   420                           ; 2 bytes @ 0x2
   421   00002E                     	ds	1
   422   00002F                     color_writetoaddr@address:
   423                           	callstack 0
   424                           
   425                           ; 1 bytes @ 0x3
   426   00002F                     	ds	1
   427   000030                     ??_color_click_init:
   428   000030                     ___wmul@product:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0x4
   432   000030                     	ds	2
   433   000032                     ?___lwdiv:
   434                           	callstack 0
   435   000032                     ___lwdiv@dividend:
   436                           	callstack 0
   437                           
   438                           ; 2 bytes @ 0x6
   439   000032                     	ds	2
   440   000034                     ___lwdiv@divisor:
   441                           	callstack 0
   442                           
   443                           ; 2 bytes @ 0x8
   444   000034                     	ds	2
   445   000036                     ___lwdiv@quotient:
   446                           	callstack 0
   447                           
   448                           ; 2 bytes @ 0xA
   449   000036                     	ds	2
   450   000038                     ___lwdiv@counter:
   451                           	callstack 0
   452                           
   453                           ; 1 bytes @ 0xC
   454   000038                     	ds	1
   455   000039                     setMotorPWM@m:
   456                           	callstack 0
   457                           
   458                           ; 1 bytes @ 0xD
   459   000039                     	ds	1
   460   00003A                     ??_setMotorPWM:
   461                           
   462                           ; 1 bytes @ 0xE
   463   00003A                     	ds	2
   464   00003C                     setMotorPWM@posDuty:
   465                           	callstack 0
   466                           
   467                           ; 1 bytes @ 0x10
   468   00003C                     	ds	1
   469   00003D                     setMotorPWM@negDuty:
   470                           	callstack 0
   471                           
   472                           ; 1 bytes @ 0x11
   473   00003D                     	ds	1
   474   00003E                     stop@mL:
   475                           	callstack 0
   476   00003E                     turnRight@mL:
   477                           	callstack 0
   478   00003E                     fullSpeedBack@mL:
   479                           	callstack 0
   480                           
   481                           ; 1 bytes @ 0x12
   482   00003E                     	ds	1
   483   00003F                     stop@mR:
   484                           	callstack 0
   485   00003F                     turnRight@mR:
   486                           	callstack 0
   487   00003F                     fullSpeedBack@mR:
   488                           	callstack 0
   489                           
   490                           ; 1 bytes @ 0x13
   491   00003F                     	ds	1
   492   000040                     ??_stop:
   493   000040                     ??_turnRight:
   494   000040                     ??_fullSpeedBack:
   495                           
   496                           ; 1 bytes @ 0x14
   497   000040                     	ds	1
   498   000041                     turnRight@i:
   499                           	callstack 0
   500   000041                     fullSpeedBack@power:
   501                           	callstack 0
   502                           
   503                           ; 2 bytes @ 0x15
   504   000041                     	ds	2
   505   000043                     right90@mL:
   506                           	callstack 0
   507   000043                     backHalf@mL:
   508                           	callstack 0
   509                           
   510                           ; 1 bytes @ 0x17
   511   000043                     	ds	1
   512   000044                     right90@mR:
   513                           	callstack 0
   514   000044                     backHalf@mR:
   515                           	callstack 0
   516                           
   517                           ; 1 bytes @ 0x18
   518   000044                     	ds	1
   519   000045                     ??_right90:
   520   000045                     ??_backHalf:
   521                           
   522                           ; 1 bytes @ 0x19
   523   000045                     	ds	2
   524   000047                     moveRed@mL:
   525                           	callstack 0
   526                           
   527                           ; 1 bytes @ 0x1B
   528   000047                     	ds	1
   529   000048                     moveRed@mR:
   530                           	callstack 0
   531                           
   532                           ; 1 bytes @ 0x1C
   533   000048                     	ds	1
   534   000049                     ??_moveRed:
   535                           
   536                           ; 1 bytes @ 0x1D
   537   000049                     	ds	2
   538   00004B                     ??_main:
   539                           
   540                           ; 1 bytes @ 0x1F
   541   00004B                     	ds	2
   542                           
   543 ;;
   544 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   545 ;;
   546 ;; *************** function _main *****************
   547 ;; Defined at:
   548 ;;		line 28 in file "main.c"
   549 ;; Parameters:    Size  Location     Type
   550 ;;		None
   551 ;; Auto vars:     Size  Location     Type
   552 ;;  PWMcycle        2    0        unsigned int 
   553 ;;  clear           2    0        unsigned int 
   554 ;;  green           2    0        unsigned int 
   555 ;;  blue            2    0        unsigned int 
   556 ;;  red             2    0        unsigned int 
   557 ;;  battery_leve    2    0        unsigned int 
   558 ;; Return value:  Size  Location     Type
   559 ;;                  1    wreg      void 
   560 ;; Registers used:
   561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   562 ;; Tracked objects:
   563 ;;		On entry : 0/0
   564 ;;		On exit  : 0/0
   565 ;;		Unchanged: 0/0
   566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   569 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   570 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   571 ;;Total ram usage:        2 bytes
   572 ;; Hardware stack levels required when called: 5
   573 ;; This function calls:
   574 ;;		_ADC_init
   575 ;;		_color_click_init
   576 ;;		_initDCmotorsPWM
   577 ;;		_initUSART4
   578 ;;		_moveRed
   579 ;; This function is called by:
   580 ;;		Startup code after reset
   581 ;; This function uses a non-reentrant model
   582 ;;
   583                           
   584                           	psect	text0
   585   000FEA                     __ptext0:
   586                           	callstack 0
   587   000FEA                     _main:
   588                           	callstack 26
   589   000FEA                     
   590                           ;main.c: 30:     ADC_init();
   591   000FEA  EC6C  F00A         	call	_ADC_init	;wreg free
   592   000FEE                     
   593                           ;main.c: 31:     color_click_init();
   594   000FEE  ECAC  F009         	call	_color_click_init	;wreg free
   595   000FF2                     
   596                           ;main.c: 32:     initUSART4();
   597   000FF2  EC5D  F00A         	call	_initUSART4	;wreg free
   598   000FF6                     
   599                           ;main.c: 36:     initDCmotorsPWM(PWMcycle);
   600   000FF6  0E00               	movlw	0
   601   000FF8  6E2D               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   602   000FFA  0E63               	movlw	99
   603   000FFC  6E2C               	movwf	initDCmotorsPWM@PWMperiod^0,c
   604   000FFE  EC4D  F008         	call	_initDCmotorsPWM	;wreg free
   605   001002                     
   606                           ;main.c: 39:     motorL.power = 0;
   607   001002  0E00               	movlw	0
   608   001004  6E23               	movwf	_motorL^0,c
   609   001006                     
   610                           ;main.c: 40:     motorL.direction = 1;
   611   001006  0E01               	movlw	1
   612   001008  6E24               	movwf	(_motorL+1)^0,c
   613   00100A                     
   614                           ;main.c: 41:     motorL.brakemode = 1;
   615   00100A  0E01               	movlw	1
   616   00100C  6E25               	movwf	(_motorL+2)^0,c
   617   00100E                     
   618                           ;main.c: 42:     motorL.PWMperiod = PWMcycle;
   619   00100E  0E00               	movlw	0
   620   001010  6E27               	movwf	(_motorL+4)^0,c
   621   001012  0E63               	movlw	99
   622   001014  6E26               	movwf	(_motorL+3)^0,c
   623   001016                     
   624                           ;main.c: 43:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   625   001016  0EAA               	movlw	170
   626   001018  6E28               	movwf	(_motorL+5)^0,c
   627   00101A  0E0F               	movlw	15
   628   00101C  6E29               	movwf	(_motorL+6)^0,c
   629   00101E                     
   630                           ;main.c: 44:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   631   00101E  0EA6               	movlw	166
   632   001020  6E2A               	movwf	(_motorL+7)^0,c
   633   001022  0E0F               	movlw	15
   634   001024  6E2B               	movwf	(_motorL+8)^0,c
   635   001026                     
   636                           ;main.c: 46:     motorR.power = 0;
   637   001026  0E00               	movlw	0
   638   001028  6E1A               	movwf	_motorR^0,c
   639   00102A                     
   640                           ;main.c: 47:     motorR.direction = 1;
   641   00102A  0E01               	movlw	1
   642   00102C  6E1B               	movwf	(_motorR+1)^0,c
   643   00102E                     
   644                           ;main.c: 48:     motorR.brakemode = 1;
   645   00102E  0E01               	movlw	1
   646   001030  6E1C               	movwf	(_motorR+2)^0,c
   647   001032                     
   648                           ;main.c: 49:     motorR.PWMperiod = PWMcycle;
   649   001032  0E00               	movlw	0
   650   001034  6E1E               	movwf	(_motorR+4)^0,c
   651   001036  0E63               	movlw	99
   652   001038  6E1D               	movwf	(_motorR+3)^0,c
   653                           
   654                           ;main.c: 50:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   655   00103A  0E25               	movlw	37
   656   00103C  6E1F               	movwf	(_motorR+5)^0,c
   657   00103E  0E0F               	movlw	15
   658   001040  6E20               	movwf	(_motorR+6)^0,c
   659                           
   660                           ;main.c: 51:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   661   001042  0E21               	movlw	33
   662   001044  6E21               	movwf	(_motorR+7)^0,c
   663   001046  0E0F               	movlw	15
   664   001048  6E22               	movwf	(_motorR+8)^0,c
   665   00104A                     
   666                           ;main.c: 54:     LATDbits.LATD7=0;
   667   00104A  9E7C               	bcf	124,7,c	;volatile
   668   00104C                     
   669                           ;main.c: 55:     TRISDbits.TRISD7=0;
   670   00104C  9E84               	bcf	132,7,c	;volatile
   671   00104E                     
   672                           ;main.c: 59:     TRISGbits.TRISG0 = 0;
   673   00104E  9087               	bcf	135,0,c	;volatile
   674   001050                     
   675                           ;main.c: 60:     LATGbits.LATG0 = 0;
   676   001050  907F               	bcf	127,0,c	;volatile
   677   001052                     
   678                           ;main.c: 61:     TRISEbits.TRISE7 = 0;
   679   001052  9E85               	bcf	133,7,c	;volatile
   680   001054                     
   681                           ;main.c: 62:     LATEbits.LATE7 = 0;
   682   001054  9E7D               	bcf	125,7,c	;volatile
   683   001056                     
   684                           ;main.c: 63:     TRISAbits.TRISA3 = 0;
   685   001056  9681               	bcf	129,3,c	;volatile
   686   001058                     
   687                           ;main.c: 64:     LATAbits.LATA3 = 0;
   688   001058  9679               	bcf	121,3,c	;volatile
   689   00105A                     
   690                           ;main.c: 69:     TRISFbits.TRISF3=1;
   691   00105A  8686               	bsf	134,3,c	;volatile
   692   00105C                     
   693                           ;main.c: 70:     ANSELFbits.ANSELF3=0;
   694   00105C  010E               	movlb	14	; () banked
   695   00105E  97B4               	bcf	180,3,b	;volatile
   696   001060                     l2110:
   697                           
   698                           ;main.c: 83:         if (!PORTFbits.RF3) {
   699   001060  B68E               	btfsc	142,3,c	;volatile
   700   001062  EF35  F008         	goto	u631
   701   001066  EF37  F008         	goto	u630
   702   00106A                     u631:
   703   00106A  EF30  F008         	goto	l2110
   704   00106E                     u630:
   705   00106E                     
   706                           ;main.c: 92:             _delay((unsigned long)((500)*(64000000/4000.0)));
   707   00106E  0E29               	movlw	41
   708   001070  6E4C               	movwf	(??_main+1)^0,c
   709   001072  0E96               	movlw	150
   710   001074  6E4B               	movwf	??_main^0,c
   711   001076  0E7F               	movlw	127
   712   001078                     u687:
   713   001078  2EE8               	decfsz	wreg,f,c
   714   00107A  D7FE               	bra	u687
   715   00107C  2E4B               	decfsz	??_main^0,f,c
   716   00107E  D7FC               	bra	u687
   717   001080  2E4C               	decfsz	(??_main+1)^0,f,c
   718   001082  D7FA               	bra	u687
   719   001084  0000               	nop	
   720   001086                     
   721                           ;main.c: 93:             moveRed(&motorL, &motorR);
   722   001086  0E23               	movlw	low _motorL
   723   001088  6E47               	movwf	moveRed@mL^0,c
   724   00108A  0E1A               	movlw	low _motorR
   725   00108C  6E48               	movwf	moveRed@mR^0,c
   726   00108E  ECC6  F009         	call	_moveRed	;wreg free
   727   001092  EF30  F008         	goto	l2110
   728   001096  EF00  F000         	goto	start
   729   00109A                     __end_of_main:
   730                           	callstack 0
   731                           
   732 ;; *************** function _moveRed *****************
   733 ;; Defined at:
   734 ;;		line 254 in file "dc_motor.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;  mL              1   27[COMRAM] PTR struct DC_motor
   737 ;;		 -> motorL(9), 
   738 ;;  mR              1   28[COMRAM] PTR struct DC_motor
   739 ;;		 -> motorR(9), 
   740 ;; Auto vars:     Size  Location     Type
   741 ;;		None
   742 ;; Return value:  Size  Location     Type
   743 ;;                  1    wreg      void 
   744 ;; Registers used:
   745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   751 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   753 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   754 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   755 ;;Total ram usage:        4 bytes
   756 ;; Hardware stack levels used: 1
   757 ;; Hardware stack levels required when called: 4
   758 ;; This function calls:
   759 ;;		_backHalf
   760 ;;		_right90
   761 ;; This function is called by:
   762 ;;		_main
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766                           	psect	text1
   767   00138C                     __ptext1:
   768                           	callstack 0
   769   00138C                     _moveRed:
   770                           	callstack 26
   771   00138C                     
   772                           ;dc_motor.c: 254: void moveRed(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 255
      +                          : {;dc_motor.c: 257:     backHalf(mL,mR);
   773   00138C  C047  F043         	movff	moveRed@mL,backHalf@mL
   774   001390  C048  F044         	movff	moveRed@mR,backHalf@mR
   775   001394  ECF8  F009         	call	_backHalf	;wreg free
   776   001398                     
   777                           ;dc_motor.c: 258:     _delay((unsigned long)((500)*(64000000/4000.0)));
   778   001398  0E29               	movlw	41
   779   00139A  6E4A               	movwf	(??_moveRed+1)^0,c
   780   00139C  0E96               	movlw	150
   781   00139E  6E49               	movwf	??_moveRed^0,c
   782   0013A0  0E7F               	movlw	127
   783   0013A2                     u697:
   784   0013A2  2EE8               	decfsz	wreg,f,c
   785   0013A4  D7FE               	bra	u697
   786   0013A6  2E49               	decfsz	??_moveRed^0,f,c
   787   0013A8  D7FC               	bra	u697
   788   0013AA  2E4A               	decfsz	(??_moveRed+1)^0,f,c
   789   0013AC  D7FA               	bra	u697
   790   0013AE  0000               	nop	
   791   0013B0                     
   792                           ;dc_motor.c: 259:     right90(mL,mR);
   793   0013B0  C047  F043         	movff	moveRed@mL,right90@mL
   794   0013B4  C048  F044         	movff	moveRed@mR,right90@mR
   795   0013B8  ECDF  F009         	call	_right90	;wreg free
   796   0013BC  0012               	return		;funcret
   797   0013BE                     __end_of_moveRed:
   798                           	callstack 0
   799                           
   800 ;; *************** function _right90 *****************
   801 ;; Defined at:
   802 ;;		line 193 in file "dc_motor.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;  mL              1   23[COMRAM] PTR struct DC_motor
   805 ;;		 -> motorL(9), 
   806 ;;  mR              1   24[COMRAM] PTR struct DC_motor
   807 ;;		 -> motorR(9), 
   808 ;; Auto vars:     Size  Location     Type
   809 ;;		None
   810 ;; Return value:  Size  Location     Type
   811 ;;                  1    wreg      void 
   812 ;; Registers used:
   813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   814 ;; Tracked objects:
   815 ;;		On entry : 0/0
   816 ;;		On exit  : 0/0
   817 ;;		Unchanged: 0/0
   818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   819 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   821 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   822 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   823 ;;Total ram usage:        4 bytes
   824 ;; Hardware stack levels used: 1
   825 ;; Hardware stack levels required when called: 3
   826 ;; This function calls:
   827 ;;		_stop
   828 ;;		_turnRight
   829 ;; This function is called by:
   830 ;;		_moveRed
   831 ;;		_moveYellow
   832 ;; This function uses a non-reentrant model
   833 ;;
   834                           
   835                           	psect	text2
   836   0013BE                     __ptext2:
   837                           	callstack 0
   838   0013BE                     _right90:
   839                           	callstack 26
   840   0013BE                     
   841                           ;dc_motor.c: 193: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     turnRight(mL,mR);
   842   0013BE  C043  F03E         	movff	right90@mL,turnRight@mL
   843   0013C2  C044  F03F         	movff	right90@mR,turnRight@mR
   844   0013C6  ECDC  F008         	call	_turnRight	;wreg free
   845   0013CA                     
   846                           ;dc_motor.c: 196:     _delay((unsigned long)((235)*(64000000/4000.0)));
   847   0013CA  0E14               	movlw	20
   848   0013CC  6E46               	movwf	(??_right90+1)^0,c
   849   0013CE  0E14               	movlw	20
   850   0013D0  6E45               	movwf	??_right90^0,c
   851   0013D2  0E0E               	movlw	14
   852   0013D4                     u707:
   853   0013D4  2EE8               	decfsz	wreg,f,c
   854   0013D6  D7FE               	bra	u707
   855   0013D8  2E45               	decfsz	??_right90^0,f,c
   856   0013DA  D7FC               	bra	u707
   857   0013DC  2E46               	decfsz	(??_right90+1)^0,f,c
   858   0013DE  D7FA               	bra	u707
   859   0013E0  D000               	nop2	
   860   0013E2                     
   861                           ;dc_motor.c: 197:     stop(mL,mR);
   862   0013E2  C043  F03E         	movff	right90@mL,stop@mL
   863   0013E6  C044  F03F         	movff	right90@mR,stop@mR
   864   0013EA  EC95  F008         	call	_stop	;wreg free
   865   0013EE  0012               	return		;funcret
   866   0013F0                     __end_of_right90:
   867                           	callstack 0
   868                           
   869 ;; *************** function _turnRight *****************
   870 ;; Defined at:
   871 ;;		line 125 in file "dc_motor.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   874 ;;		 -> motorL(9), 
   875 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   876 ;;		 -> motorR(9), 
   877 ;; Auto vars:     Size  Location     Type
   878 ;;  i               2   21[COMRAM] unsigned int 
   879 ;; Return value:  Size  Location     Type
   880 ;;                  1    wreg      void 
   881 ;; Registers used:
   882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   883 ;; Tracked objects:
   884 ;;		On entry : 0/0
   885 ;;		On exit  : 0/0
   886 ;;		Unchanged: 0/0
   887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   888 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   889 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   890 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   891 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   892 ;;Total ram usage:        5 bytes
   893 ;; Hardware stack levels used: 1
   894 ;; Hardware stack levels required when called: 2
   895 ;; This function calls:
   896 ;;		_setMotorPWM
   897 ;; This function is called by:
   898 ;;		_right90
   899 ;;		_right135
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           	psect	text3
   904   0011B8                     __ptext3:
   905                           	callstack 0
   906   0011B8                     _turnRight:
   907                           	callstack 26
   908   0011B8                     
   909                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
   910   0011B8  503E               	movf	turnRight@mL^0,w,c
   911   0011BA  6ED9               	movwf	fsr2l,c
   912   0011BC  6ADA               	clrf	fsr2h,c
   913   0011BE  0E01               	movlw	1
   914   0011C0  26D9               	addwf	fsr2l,f,c
   915   0011C2  0E01               	movlw	1
   916   0011C4  6EDF               	movwf	indf2,c
   917                           
   918                           ;dc_motor.c: 129:     mR->direction = 0;
   919   0011C6  503F               	movf	turnRight@mR^0,w,c
   920   0011C8  6ED9               	movwf	fsr2l,c
   921   0011CA  6ADA               	clrf	fsr2h,c
   922   0011CC  0E01               	movlw	1
   923   0011CE  26D9               	addwf	fsr2l,f,c
   924   0011D0  6ADF               	clrf	indf2,c
   925   0011D2                     
   926                           ;dc_motor.c: 131:     setMotorPWM(mL);
   927   0011D2  C03E  F039         	movff	turnRight@mL,setMotorPWM@m
   928   0011D6  EC4B  F007         	call	_setMotorPWM	;wreg free
   929   0011DA                     
   930                           ;dc_motor.c: 132:     setMotorPWM(mR);
   931   0011DA  C03F  F039         	movff	turnRight@mR,setMotorPWM@m
   932   0011DE  EC4B  F007         	call	_setMotorPWM	;wreg free
   933   0011E2                     
   934                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
   935   0011E2  0E00               	movlw	0
   936   0011E4  6E42               	movwf	(turnRight@i+1)^0,c
   937   0011E6  0E00               	movlw	0
   938   0011E8  6E41               	movwf	turnRight@i^0,c
   939   0011EA                     l1820:
   940                           
   941                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
   942   0011EA  503E               	movf	turnRight@mL^0,w,c
   943   0011EC  6ED9               	movwf	fsr2l,c
   944   0011EE  6ADA               	clrf	fsr2h,c
   945   0011F0  2ADF               	incf	indf2,f,c
   946                           
   947                           ;dc_motor.c: 136:         mR->power++;
   948   0011F2  503F               	movf	turnRight@mR^0,w,c
   949   0011F4  6ED9               	movwf	fsr2l,c
   950   0011F6  6ADA               	clrf	fsr2h,c
   951   0011F8  2ADF               	incf	indf2,f,c
   952   0011FA                     
   953                           ;dc_motor.c: 137:         setMotorPWM(mL);
   954   0011FA  C03E  F039         	movff	turnRight@mL,setMotorPWM@m
   955   0011FE  EC4B  F007         	call	_setMotorPWM	;wreg free
   956   001202                     
   957                           ;dc_motor.c: 138:         setMotorPWM(mR);
   958   001202  C03F  F039         	movff	turnRight@mR,setMotorPWM@m
   959   001206  EC4B  F007         	call	_setMotorPWM	;wreg free
   960   00120A                     
   961                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
   962   00120A  0E0B               	movlw	11
   963   00120C  6E40               	movwf	??_turnRight^0,c
   964   00120E  0E62               	movlw	98
   965   001210                     u717:
   966   001210  2EE8               	decfsz	wreg,f,c
   967   001212  D7FE               	bra	u717
   968   001214  2E40               	decfsz	??_turnRight^0,f,c
   969   001216  D7FC               	bra	u717
   970   001218  D000               	nop2	
   971   00121A                     
   972                           ;dc_motor.c: 140:     }
   973   00121A  4A41               	infsnz	turnRight@i^0,f,c
   974   00121C  2A42               	incf	(turnRight@i+1)^0,f,c
   975   00121E  5042               	movf	(turnRight@i+1)^0,w,c
   976   001220  E109               	bnz	u490
   977   001222  0E32               	movlw	50
   978   001224  5C41               	subwf	turnRight@i^0,w,c
   979   001226  A0D8               	btfss	status,0,c
   980   001228  EF18  F009         	goto	u491
   981   00122C  EF1A  F009         	goto	u490
   982   001230                     u491:
   983   001230  EFF5  F008         	goto	l1820
   984   001234                     u490:
   985   001234  0012               	return		;funcret
   986   001236                     __end_of_turnRight:
   987                           	callstack 0
   988                           
   989 ;; *************** function _backHalf *****************
   990 ;; Defined at:
   991 ;;		line 233 in file "dc_motor.c"
   992 ;; Parameters:    Size  Location     Type
   993 ;;  mL              1   23[COMRAM] PTR struct DC_motor
   994 ;;		 -> motorL(9), 
   995 ;;  mR              1   24[COMRAM] PTR struct DC_motor
   996 ;;		 -> motorR(9), 
   997 ;; Auto vars:     Size  Location     Type
   998 ;;		None
   999 ;; Return value:  Size  Location     Type
  1000 ;;                  1    wreg      void 
  1001 ;; Registers used:
  1002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1003 ;; Tracked objects:
  1004 ;;		On entry : 0/0
  1005 ;;		On exit  : 0/0
  1006 ;;		Unchanged: 0/0
  1007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1008 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1010 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1011 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1012 ;;Total ram usage:        4 bytes
  1013 ;; Hardware stack levels used: 1
  1014 ;; Hardware stack levels required when called: 3
  1015 ;; This function calls:
  1016 ;;		_fullSpeedBack
  1017 ;;		_stop
  1018 ;; This function is called by:
  1019 ;;		_moveRed
  1020 ;;		_moveGreen
  1021 ;;		_moveBlue
  1022 ;;		_moveOrange
  1023 ;;		_moveLightBlue
  1024 ;; This function uses a non-reentrant model
  1025 ;;
  1026                           
  1027                           	psect	text4
  1028   0013F0                     __ptext4:
  1029                           	callstack 0
  1030   0013F0                     _backHalf:
  1031                           	callstack 26
  1032   0013F0                     
  1033                           ;dc_motor.c: 233: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 23
      +                          4: {;dc_motor.c: 235:     fullSpeedBack(mL,mR);
  1034   0013F0  C043  F03E         	movff	backHalf@mL,fullSpeedBack@mL
  1035   0013F4  C044  F03F         	movff	backHalf@mR,fullSpeedBack@mR
  1036   0013F8  EC1B  F009         	call	_fullSpeedBack	;wreg free
  1037   0013FC                     
  1038                           ;dc_motor.c: 236:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1039   0013FC  0E29               	movlw	41
  1040   0013FE  6E46               	movwf	(??_backHalf+1)^0,c
  1041   001400  0E96               	movlw	150
  1042   001402  6E45               	movwf	??_backHalf^0,c
  1043   001404  0E7F               	movlw	127
  1044   001406                     u727:
  1045   001406  2EE8               	decfsz	wreg,f,c
  1046   001408  D7FE               	bra	u727
  1047   00140A  2E45               	decfsz	??_backHalf^0,f,c
  1048   00140C  D7FC               	bra	u727
  1049   00140E  2E46               	decfsz	(??_backHalf+1)^0,f,c
  1050   001410  D7FA               	bra	u727
  1051   001412  0000               	nop	
  1052   001414                     
  1053                           ;dc_motor.c: 237:     stop(mL,mR);
  1054   001414  C043  F03E         	movff	backHalf@mL,stop@mL
  1055   001418  C044  F03F         	movff	backHalf@mR,stop@mR
  1056   00141C  EC95  F008         	call	_stop	;wreg free
  1057   001420  0012               	return		;funcret
  1058   001422                     __end_of_backHalf:
  1059                           	callstack 0
  1060                           
  1061 ;; *************** function _stop *****************
  1062 ;; Defined at:
  1063 ;;		line 88 in file "dc_motor.c"
  1064 ;; Parameters:    Size  Location     Type
  1065 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1066 ;;		 -> motorL(9), 
  1067 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1068 ;;		 -> motorR(9), 
  1069 ;; Auto vars:     Size  Location     Type
  1070 ;;		None
  1071 ;; Return value:  Size  Location     Type
  1072 ;;                  1    wreg      void 
  1073 ;; Registers used:
  1074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1075 ;; Tracked objects:
  1076 ;;		On entry : 0/0
  1077 ;;		On exit  : 0/0
  1078 ;;		Unchanged: 0/0
  1079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1080 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1082 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1083 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1084 ;;Total ram usage:        3 bytes
  1085 ;; Hardware stack levels used: 1
  1086 ;; Hardware stack levels required when called: 2
  1087 ;; This function calls:
  1088 ;;		_setMotorPWM
  1089 ;; This function is called by:
  1090 ;;		_right90
  1091 ;;		_backHalf
  1092 ;;		_left90
  1093 ;;		_turn180
  1094 ;;		_right135
  1095 ;;		_left135
  1096 ;;		_backOneAndHalf
  1097 ;; This function uses a non-reentrant model
  1098 ;;
  1099                           
  1100                           	psect	text5
  1101   00112A                     __ptext5:
  1102                           	callstack 0
  1103   00112A                     _stop:
  1104                           	callstack 26
  1105   00112A                     
  1106                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  1107   00112A  EFC5  F008         	goto	l1804
  1108   00112E                     l1790:
  1109                           
  1110                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  1111   00112E  503E               	movf	stop@mL^0,w,c
  1112   001130  6ED9               	movwf	fsr2l,c
  1113   001132  6ADA               	clrf	fsr2h,c
  1114   001134  50DF               	movf	indf2,w,c
  1115   001136  B4D8               	btfsc	status,2,c
  1116   001138  EFA0  F008         	goto	u451
  1117   00113C  EFA2  F008         	goto	u450
  1118   001140                     u451:
  1119   001140  EFA6  F008         	goto	l1794
  1120   001144                     u450:
  1121   001144  503E               	movf	stop@mL^0,w,c
  1122   001146  6ED9               	movwf	fsr2l,c
  1123   001148  6ADA               	clrf	fsr2h,c
  1124   00114A  06DF               	decf	indf2,f,c
  1125   00114C                     l1794:
  1126                           
  1127                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  1128   00114C  503F               	movf	stop@mR^0,w,c
  1129   00114E  6ED9               	movwf	fsr2l,c
  1130   001150  6ADA               	clrf	fsr2h,c
  1131   001152  50DF               	movf	indf2,w,c
  1132   001154  B4D8               	btfsc	status,2,c
  1133   001156  EFAF  F008         	goto	u461
  1134   00115A  EFB1  F008         	goto	u460
  1135   00115E                     u461:
  1136   00115E  EFB5  F008         	goto	l1798
  1137   001162                     u460:
  1138   001162  503F               	movf	stop@mR^0,w,c
  1139   001164  6ED9               	movwf	fsr2l,c
  1140   001166  6ADA               	clrf	fsr2h,c
  1141   001168  06DF               	decf	indf2,f,c
  1142   00116A                     l1798:
  1143                           
  1144                           ;dc_motor.c: 96:         setMotorPWM(mL);
  1145   00116A  C03E  F039         	movff	stop@mL,setMotorPWM@m
  1146   00116E  EC4B  F007         	call	_setMotorPWM	;wreg free
  1147   001172                     
  1148                           ;dc_motor.c: 97:         setMotorPWM(mR);
  1149   001172  C03F  F039         	movff	stop@mR,setMotorPWM@m
  1150   001176  EC4B  F007         	call	_setMotorPWM	;wreg free
  1151   00117A                     
  1152                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  1153   00117A  0E0B               	movlw	11
  1154   00117C  6E40               	movwf	??_stop^0,c
  1155   00117E  0E62               	movlw	98
  1156   001180                     u737:
  1157   001180  2EE8               	decfsz	wreg,f,c
  1158   001182  D7FE               	bra	u737
  1159   001184  2E40               	decfsz	??_stop^0,f,c
  1160   001186  D7FC               	bra	u737
  1161   001188  D000               	nop2	
  1162   00118A                     l1804:
  1163                           
  1164                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  1165   00118A  503E               	movf	stop@mL^0,w,c
  1166   00118C  6ED9               	movwf	fsr2l,c
  1167   00118E  6ADA               	clrf	fsr2h,c
  1168   001190  50DF               	movf	indf2,w,c
  1169   001192  A4D8               	btfss	status,2,c
  1170   001194  EFCE  F008         	goto	u471
  1171   001198  EFD0  F008         	goto	u470
  1172   00119C                     u471:
  1173   00119C  EF97  F008         	goto	l1790
  1174   0011A0                     u470:
  1175   0011A0  503F               	movf	stop@mR^0,w,c
  1176   0011A2  6ED9               	movwf	fsr2l,c
  1177   0011A4  6ADA               	clrf	fsr2h,c
  1178   0011A6  50DF               	movf	indf2,w,c
  1179   0011A8  A4D8               	btfss	status,2,c
  1180   0011AA  EFD9  F008         	goto	u481
  1181   0011AE  EFDB  F008         	goto	u480
  1182   0011B2                     u481:
  1183   0011B2  EF97  F008         	goto	l1790
  1184   0011B6                     u480:
  1185   0011B6  0012               	return		;funcret
  1186   0011B8                     __end_of_stop:
  1187                           	callstack 0
  1188                           
  1189 ;; *************** function _fullSpeedBack *****************
  1190 ;; Defined at:
  1191 ;;		line 165 in file "dc_motor.c"
  1192 ;; Parameters:    Size  Location     Type
  1193 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1194 ;;		 -> motorL(9), 
  1195 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1196 ;;		 -> motorR(9), 
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;  power           2   21[COMRAM] int 
  1199 ;; Return value:  Size  Location     Type
  1200 ;;                  1    wreg      void 
  1201 ;; Registers used:
  1202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1208 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1209 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1210 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1211 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1212 ;;Total ram usage:        5 bytes
  1213 ;; Hardware stack levels used: 1
  1214 ;; Hardware stack levels required when called: 2
  1215 ;; This function calls:
  1216 ;;		_setMotorPWM
  1217 ;; This function is called by:
  1218 ;;		_backHalf
  1219 ;;		_backOneAndHalf
  1220 ;; This function uses a non-reentrant model
  1221 ;;
  1222                           
  1223                           	psect	text6
  1224   001236                     __ptext6:
  1225                           	callstack 0
  1226   001236                     _fullSpeedBack:
  1227                           	callstack 26
  1228   001236                     
  1229                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  1230   001236  503E               	movf	fullSpeedBack@mL^0,w,c
  1231   001238  6ED9               	movwf	fsr2l,c
  1232   00123A  6ADA               	clrf	fsr2h,c
  1233   00123C  0E01               	movlw	1
  1234   00123E  26D9               	addwf	fsr2l,f,c
  1235   001240  6ADF               	clrf	indf2,c
  1236                           
  1237                           ;dc_motor.c: 169:     mR->direction = 0;
  1238   001242  503F               	movf	fullSpeedBack@mR^0,w,c
  1239   001244  6ED9               	movwf	fsr2l,c
  1240   001246  6ADA               	clrf	fsr2h,c
  1241   001248  0E01               	movlw	1
  1242   00124A  26D9               	addwf	fsr2l,f,c
  1243   00124C  6ADF               	clrf	indf2,c
  1244   00124E                     
  1245                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  1246   00124E  0E00               	movlw	0
  1247   001250  6E42               	movwf	(fullSpeedBack@power+1)^0,c
  1248   001252  0E00               	movlw	0
  1249   001254  6E41               	movwf	fullSpeedBack@power^0,c
  1250   001256                     l1840:
  1251                           
  1252                           ;dc_motor.c: 172:         mL->power = power;
  1253   001256  503E               	movf	fullSpeedBack@mL^0,w,c
  1254   001258  6ED9               	movwf	fsr2l,c
  1255   00125A  6ADA               	clrf	fsr2h,c
  1256   00125C  C041  FFDF         	movff	fullSpeedBack@power,indf2
  1257                           
  1258                           ;dc_motor.c: 173:         mR->power = power;
  1259   001260  503F               	movf	fullSpeedBack@mR^0,w,c
  1260   001262  6ED9               	movwf	fsr2l,c
  1261   001264  6ADA               	clrf	fsr2h,c
  1262   001266  C041  FFDF         	movff	fullSpeedBack@power,indf2
  1263   00126A                     
  1264                           ;dc_motor.c: 176:         setMotorPWM(mL);
  1265   00126A  C03E  F039         	movff	fullSpeedBack@mL,setMotorPWM@m
  1266   00126E  EC4B  F007         	call	_setMotorPWM	;wreg free
  1267   001272                     
  1268                           ;dc_motor.c: 177:         setMotorPWM(mR);
  1269   001272  C03F  F039         	movff	fullSpeedBack@mR,setMotorPWM@m
  1270   001276  EC4B  F007         	call	_setMotorPWM	;wreg free
  1271   00127A                     
  1272                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  1273   00127A  0E0B               	movlw	11
  1274   00127C  6E40               	movwf	??_fullSpeedBack^0,c
  1275   00127E  0E62               	movlw	98
  1276   001280                     u747:
  1277   001280  2EE8               	decfsz	wreg,f,c
  1278   001282  D7FE               	bra	u747
  1279   001284  2E40               	decfsz	??_fullSpeedBack^0,f,c
  1280   001286  D7FC               	bra	u747
  1281   001288  D000               	nop2	
  1282   00128A                     
  1283                           ;dc_motor.c: 181:     }
  1284   00128A  4A41               	infsnz	fullSpeedBack@power^0,f,c
  1285   00128C  2A42               	incf	(fullSpeedBack@power+1)^0,f,c
  1286   00128E  BE42               	btfsc	(fullSpeedBack@power+1)^0,7,c
  1287   001290  EF53  F009         	goto	u501
  1288   001294  5042               	movf	(fullSpeedBack@power+1)^0,w,c
  1289   001296  E109               	bnz	u500
  1290   001298  0E33               	movlw	51
  1291   00129A  5C41               	subwf	fullSpeedBack@power^0,w,c
  1292   00129C  A0D8               	btfss	status,0,c
  1293   00129E  EF53  F009         	goto	u501
  1294   0012A2  EF55  F009         	goto	u500
  1295   0012A6                     u501:
  1296   0012A6  EF2B  F009         	goto	l1840
  1297   0012AA                     u500:
  1298   0012AA  0012               	return		;funcret
  1299   0012AC                     __end_of_fullSpeedBack:
  1300                           	callstack 0
  1301                           
  1302 ;; *************** function _setMotorPWM *****************
  1303 ;; Defined at:
  1304 ;;		line 65 in file "dc_motor.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;  m               1   13[COMRAM] PTR struct DC_motor
  1307 ;;		 -> motorR(9), motorL(9), 
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;  negDuty         1   17[COMRAM] unsigned char 
  1310 ;;  posDuty         1   16[COMRAM] unsigned char 
  1311 ;; Return value:  Size  Location     Type
  1312 ;;                  1    wreg      void 
  1313 ;; Registers used:
  1314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1315 ;; Tracked objects:
  1316 ;;		On entry : 0/0
  1317 ;;		On exit  : 0/0
  1318 ;;		Unchanged: 0/0
  1319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1320 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1321 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1322 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1323 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1324 ;;Total ram usage:        5 bytes
  1325 ;; Hardware stack levels used: 1
  1326 ;; Hardware stack levels required when called: 1
  1327 ;; This function calls:
  1328 ;;		___lwdiv
  1329 ;;		___wmul
  1330 ;; This function is called by:
  1331 ;;		_stop
  1332 ;;		_turnRight
  1333 ;;		_fullSpeedBack
  1334 ;;		_turnLeft
  1335 ;;		_fullSpeedAhead
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           	psect	text7
  1340   000E96                     __ptext7:
  1341                           	callstack 0
  1342   000E96                     _setMotorPWM:
  1343                           	callstack 26
  1344   000E96                     
  1345                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  1346   000E96  5039               	movf	setMotorPWM@m^0,w,c
  1347   000E98  6ED9               	movwf	fsr2l,c
  1348   000E9A  6ADA               	clrf	fsr2h,c
  1349   000E9C  0E02               	movlw	2
  1350   000E9E  26D9               	addwf	fsr2l,f,c
  1351   000EA0  50DF               	movf	indf2,w,c
  1352   000EA2  B4D8               	btfsc	status,2,c
  1353   000EA4  EF56  F007         	goto	u431
  1354   000EA8  EF58  F007         	goto	u430
  1355   000EAC                     u431:
  1356   000EAC  EF88  F007         	goto	l1778
  1357   000EB0                     u430:
  1358   000EB0                     
  1359                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  1360   000EB0  5039               	movf	setMotorPWM@m^0,w,c
  1361   000EB2  6ED9               	movwf	fsr2l,c
  1362   000EB4  6ADA               	clrf	fsr2h,c
  1363   000EB6  50DF               	movf	indf2,w,c
  1364   000EB8  6E3A               	movwf	??_setMotorPWM^0,c
  1365   000EBA  503A               	movf	??_setMotorPWM^0,w,c
  1366   000EBC  6E2C               	movwf	___wmul@multiplier^0,c
  1367   000EBE  6A2D               	clrf	(___wmul@multiplier+1)^0,c
  1368   000EC0  5039               	movf	setMotorPWM@m^0,w,c
  1369   000EC2  6ED9               	movwf	fsr2l,c
  1370   000EC4  6ADA               	clrf	fsr2h,c
  1371   000EC6  0E03               	movlw	3
  1372   000EC8  26D9               	addwf	fsr2l,f,c
  1373   000ECA  CFDE F02E          	movff	postinc2,___wmul@multiplicand
  1374   000ECE  CFDD F02F          	movff	postdec2,___wmul@multiplicand+1
  1375   000ED2  EC3A  F00A         	call	___wmul	;wreg free
  1376   000ED6  C02C  F032         	movff	?___wmul,___lwdiv@dividend
  1377   000EDA  C02D  F033         	movff	?___wmul+1,___lwdiv@dividend+1
  1378   000EDE  0E00               	movlw	0
  1379   000EE0  6E35               	movwf	(___lwdiv@divisor+1)^0,c
  1380   000EE2  0E64               	movlw	100
  1381   000EE4  6E34               	movwf	___lwdiv@divisor^0,c
  1382   000EE6  EC56  F009         	call	___lwdiv	;wreg free
  1383   000EEA  5039               	movf	setMotorPWM@m^0,w,c
  1384   000EEC  6ED9               	movwf	fsr2l,c
  1385   000EEE  6ADA               	clrf	fsr2h,c
  1386   000EF0  0E03               	movlw	3
  1387   000EF2  26D9               	addwf	fsr2l,f,c
  1388   000EF4  50DF               	movf	indf2,w,c
  1389   000EF6  6E3B               	movwf	(??_setMotorPWM+1)^0,c
  1390   000EF8  5032               	movf	?___lwdiv^0,w,c
  1391   000EFA  5C3B               	subwf	(??_setMotorPWM+1)^0,w,c
  1392   000EFC  6E3C               	movwf	setMotorPWM@posDuty^0,c
  1393   000EFE                     
  1394                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  1395   000EFE  5039               	movf	setMotorPWM@m^0,w,c
  1396   000F00  6ED9               	movwf	fsr2l,c
  1397   000F02  6ADA               	clrf	fsr2h,c
  1398   000F04  0E03               	movlw	3
  1399   000F06  26D9               	addwf	fsr2l,f,c
  1400   000F08  50DF               	movf	indf2,w,c
  1401   000F0A  6E3D               	movwf	setMotorPWM@negDuty^0,c
  1402                           
  1403                           ;dc_motor.c: 72:     }
  1404   000F0C  EFA9  F007         	goto	l1782
  1405   000F10                     l1778:
  1406                           
  1407                           ;dc_motor.c: 74:         posDuty=0;
  1408   000F10  0E00               	movlw	0
  1409   000F12  6E3C               	movwf	setMotorPWM@posDuty^0,c
  1410   000F14                     
  1411                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1412   000F14  5039               	movf	setMotorPWM@m^0,w,c
  1413   000F16  6ED9               	movwf	fsr2l,c
  1414   000F18  6ADA               	clrf	fsr2h,c
  1415   000F1A  50DF               	movf	indf2,w,c
  1416   000F1C  6E3A               	movwf	??_setMotorPWM^0,c
  1417   000F1E  503A               	movf	??_setMotorPWM^0,w,c
  1418   000F20  6E2C               	movwf	___wmul@multiplier^0,c
  1419   000F22  6A2D               	clrf	(___wmul@multiplier+1)^0,c
  1420   000F24  5039               	movf	setMotorPWM@m^0,w,c
  1421   000F26  6ED9               	movwf	fsr2l,c
  1422   000F28  6ADA               	clrf	fsr2h,c
  1423   000F2A  0E03               	movlw	3
  1424   000F2C  26D9               	addwf	fsr2l,f,c
  1425   000F2E  CFDE F02E          	movff	postinc2,___wmul@multiplicand
  1426   000F32  CFDD F02F          	movff	postdec2,___wmul@multiplicand+1
  1427   000F36  EC3A  F00A         	call	___wmul	;wreg free
  1428   000F3A  C02C  F032         	movff	?___wmul,___lwdiv@dividend
  1429   000F3E  C02D  F033         	movff	?___wmul+1,___lwdiv@dividend+1
  1430   000F42  0E00               	movlw	0
  1431   000F44  6E35               	movwf	(___lwdiv@divisor+1)^0,c
  1432   000F46  0E64               	movlw	100
  1433   000F48  6E34               	movwf	___lwdiv@divisor^0,c
  1434   000F4A  EC56  F009         	call	___lwdiv	;wreg free
  1435   000F4E  5032               	movf	?___lwdiv^0,w,c
  1436   000F50  6E3D               	movwf	setMotorPWM@negDuty^0,c
  1437   000F52                     l1782:
  1438                           
  1439                           ;dc_motor.c: 78:     if (m->direction) {
  1440   000F52  5039               	movf	setMotorPWM@m^0,w,c
  1441   000F54  6ED9               	movwf	fsr2l,c
  1442   000F56  6ADA               	clrf	fsr2h,c
  1443   000F58  0E01               	movlw	1
  1444   000F5A  26D9               	addwf	fsr2l,f,c
  1445   000F5C  50DF               	movf	indf2,w,c
  1446   000F5E  B4D8               	btfsc	status,2,c
  1447   000F60  EFB4  F007         	goto	u441
  1448   000F64  EFB6  F007         	goto	u440
  1449   000F68                     u441:
  1450   000F68  EFD6  F007         	goto	l1786
  1451   000F6C                     u440:
  1452   000F6C                     
  1453                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  1454   000F6C  5039               	movf	setMotorPWM@m^0,w,c
  1455   000F6E  6ED9               	movwf	fsr2l,c
  1456   000F70  6ADA               	clrf	fsr2h,c
  1457   000F72  0E05               	movlw	5
  1458   000F74  26D9               	addwf	fsr2l,f,c
  1459   000F76  CFDE F03A          	movff	postinc2,??_setMotorPWM
  1460   000F7A  CFDD F03B          	movff	postdec2,??_setMotorPWM+1
  1461   000F7E  C03A  FFD9         	movff	??_setMotorPWM,fsr2l
  1462   000F82  C03B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1463   000F86  C03C  FFDF         	movff	setMotorPWM@posDuty,indf2
  1464                           
  1465                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  1466   000F8A  5039               	movf	setMotorPWM@m^0,w,c
  1467   000F8C  6ED9               	movwf	fsr2l,c
  1468   000F8E  6ADA               	clrf	fsr2h,c
  1469   000F90  0E07               	movlw	7
  1470   000F92  26D9               	addwf	fsr2l,f,c
  1471   000F94  CFDE F03A          	movff	postinc2,??_setMotorPWM
  1472   000F98  CFDD F03B          	movff	postdec2,??_setMotorPWM+1
  1473   000F9C  C03A  FFD9         	movff	??_setMotorPWM,fsr2l
  1474   000FA0  C03B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1475   000FA4  C03D  FFDF         	movff	setMotorPWM@negDuty,indf2
  1476                           
  1477                           ;dc_motor.c: 81:     } else {
  1478   000FA8  EFF4  F007         	goto	l269
  1479   000FAC                     l1786:
  1480                           
  1481                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  1482   000FAC  5039               	movf	setMotorPWM@m^0,w,c
  1483   000FAE  6ED9               	movwf	fsr2l,c
  1484   000FB0  6ADA               	clrf	fsr2h,c
  1485   000FB2  0E05               	movlw	5
  1486   000FB4  26D9               	addwf	fsr2l,f,c
  1487   000FB6  CFDE F03A          	movff	postinc2,??_setMotorPWM
  1488   000FBA  CFDD F03B          	movff	postdec2,??_setMotorPWM+1
  1489   000FBE  C03A  FFD9         	movff	??_setMotorPWM,fsr2l
  1490   000FC2  C03B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1491   000FC6  C03D  FFDF         	movff	setMotorPWM@negDuty,indf2
  1492                           
  1493                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  1494   000FCA  5039               	movf	setMotorPWM@m^0,w,c
  1495   000FCC  6ED9               	movwf	fsr2l,c
  1496   000FCE  6ADA               	clrf	fsr2h,c
  1497   000FD0  0E07               	movlw	7
  1498   000FD2  26D9               	addwf	fsr2l,f,c
  1499   000FD4  CFDE F03A          	movff	postinc2,??_setMotorPWM
  1500   000FD8  CFDD F03B          	movff	postdec2,??_setMotorPWM+1
  1501   000FDC  C03A  FFD9         	movff	??_setMotorPWM,fsr2l
  1502   000FE0  C03B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1503   000FE4  C03C  FFDF         	movff	setMotorPWM@posDuty,indf2
  1504   000FE8                     l269:
  1505   000FE8  0012               	return		;funcret
  1506   000FEA                     __end_of_setMotorPWM:
  1507                           	callstack 0
  1508                           
  1509 ;; *************** function ___wmul *****************
  1510 ;; Defined at:
  1511 ;;		line 15 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/Umul16.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;  multiplier      2    0[COMRAM] unsigned int 
  1514 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;  product         2    4[COMRAM] unsigned int 
  1517 ;; Return value:  Size  Location     Type
  1518 ;;                  2    0[COMRAM] unsigned int 
  1519 ;; Registers used:
  1520 ;;		wreg, status,2, status,0, prodl, prodh
  1521 ;; Tracked objects:
  1522 ;;		On entry : 0/0
  1523 ;;		On exit  : 0/0
  1524 ;;		Unchanged: 0/0
  1525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1526 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1527 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1529 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1530 ;;Total ram usage:        6 bytes
  1531 ;; Hardware stack levels used: 1
  1532 ;; This function calls:
  1533 ;;		Nothing
  1534 ;; This function is called by:
  1535 ;;		_setMotorPWM
  1536 ;;		_ADC2String
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           	psect	text8
  1541   001474                     __ptext8:
  1542                           	callstack 0
  1543   001474                     ___wmul:
  1544                           	callstack 26
  1545   001474  502C               	movf	___wmul@multiplier^0,w,c
  1546   001476  022E               	mulwf	___wmul@multiplicand^0,c
  1547   001478  CFF3 F030          	movff	prodl,___wmul@product
  1548   00147C  CFF4 F031          	movff	prodh,___wmul@product+1
  1549   001480  502C               	movf	___wmul@multiplier^0,w,c
  1550   001482  022F               	mulwf	(___wmul@multiplicand+1)^0,c
  1551   001484  50F3               	movf	243,w,c
  1552   001486  2631               	addwf	(___wmul@product+1)^0,f,c
  1553   001488  502D               	movf	(___wmul@multiplier+1)^0,w,c
  1554   00148A  022E               	mulwf	___wmul@multiplicand^0,c
  1555   00148C  50F3               	movf	243,w,c
  1556   00148E  2631               	addwf	(___wmul@product+1)^0,f,c
  1557   001490  C030  F02C         	movff	___wmul@product,?___wmul
  1558   001494  C031  F02D         	movff	___wmul@product+1,?___wmul+1
  1559   001498  0012               	return		;funcret
  1560   00149A                     __end_of___wmul:
  1561                           	callstack 0
  1562                           
  1563 ;; *************** function ___lwdiv *****************
  1564 ;; Defined at:
  1565 ;;		line 7 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/lwdiv.c"
  1566 ;; Parameters:    Size  Location     Type
  1567 ;;  dividend        2    6[COMRAM] unsigned int 
  1568 ;;  divisor         2    8[COMRAM] unsigned int 
  1569 ;; Auto vars:     Size  Location     Type
  1570 ;;  quotient        2   10[COMRAM] unsigned int 
  1571 ;;  counter         1   12[COMRAM] unsigned char 
  1572 ;; Return value:  Size  Location     Type
  1573 ;;                  2    6[COMRAM] unsigned int 
  1574 ;; Registers used:
  1575 ;;		wreg, status,2, status,0
  1576 ;; Tracked objects:
  1577 ;;		On entry : 0/0
  1578 ;;		On exit  : 0/0
  1579 ;;		Unchanged: 0/0
  1580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1581 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1582 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1584 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1585 ;;Total ram usage:        7 bytes
  1586 ;; Hardware stack levels used: 1
  1587 ;; This function calls:
  1588 ;;		Nothing
  1589 ;; This function is called by:
  1590 ;;		_setMotorPWM
  1591 ;;		_ADC2String
  1592 ;; This function uses a non-reentrant model
  1593 ;;
  1594                           
  1595                           	psect	text9
  1596   0012AC                     __ptext9:
  1597                           	callstack 0
  1598   0012AC                     ___lwdiv:
  1599                           	callstack 26
  1600   0012AC  0E00               	movlw	0
  1601   0012AE  6E37               	movwf	(___lwdiv@quotient+1)^0,c
  1602   0012B0  0E00               	movlw	0
  1603   0012B2  6E36               	movwf	___lwdiv@quotient^0,c
  1604   0012B4  5034               	movf	___lwdiv@divisor^0,w,c
  1605   0012B6  1035               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1606   0012B8  B4D8               	btfsc	status,2,c
  1607   0012BA  EF61  F009         	goto	u401
  1608   0012BE  EF63  F009         	goto	u400
  1609   0012C2                     u401:
  1610   0012C2  EF8B  F009         	goto	l947
  1611   0012C6                     u400:
  1612   0012C6  0E01               	movlw	1
  1613   0012C8  6E38               	movwf	___lwdiv@counter^0,c
  1614   0012CA  EF6B  F009         	goto	l1758
  1615   0012CE                     l1756:
  1616   0012CE  90D8               	bcf	status,0,c
  1617   0012D0  3634               	rlcf	___lwdiv@divisor^0,f,c
  1618   0012D2  3635               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1619   0012D4  2A38               	incf	___lwdiv@counter^0,f,c
  1620   0012D6                     l1758:
  1621   0012D6  AE35               	btfss	(___lwdiv@divisor+1)^0,7,c
  1622   0012D8  EF70  F009         	goto	u411
  1623   0012DC  EF72  F009         	goto	u410
  1624   0012E0                     u411:
  1625   0012E0  EF67  F009         	goto	l1756
  1626   0012E4                     u410:
  1627   0012E4                     l1760:
  1628   0012E4  90D8               	bcf	status,0,c
  1629   0012E6  3636               	rlcf	___lwdiv@quotient^0,f,c
  1630   0012E8  3637               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1631   0012EA  5034               	movf	___lwdiv@divisor^0,w,c
  1632   0012EC  5C32               	subwf	___lwdiv@dividend^0,w,c
  1633   0012EE  5035               	movf	(___lwdiv@divisor+1)^0,w,c
  1634   0012F0  5833               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1635   0012F2  A0D8               	btfss	status,0,c
  1636   0012F4  EF7E  F009         	goto	u421
  1637   0012F8  EF80  F009         	goto	u420
  1638   0012FC                     u421:
  1639   0012FC  EF85  F009         	goto	l1768
  1640   001300                     u420:
  1641   001300  5034               	movf	___lwdiv@divisor^0,w,c
  1642   001302  5E32               	subwf	___lwdiv@dividend^0,f,c
  1643   001304  5035               	movf	(___lwdiv@divisor+1)^0,w,c
  1644   001306  5A33               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1645   001308  8036               	bsf	___lwdiv@quotient^0,0,c
  1646   00130A                     l1768:
  1647   00130A  90D8               	bcf	status,0,c
  1648   00130C  3235               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1649   00130E  3234               	rrcf	___lwdiv@divisor^0,f,c
  1650   001310  2E38               	decfsz	___lwdiv@counter^0,f,c
  1651   001312  EF72  F009         	goto	l1760
  1652   001316                     l947:
  1653   001316  C036  F032         	movff	___lwdiv@quotient,?___lwdiv
  1654   00131A  C037  F033         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1655   00131E  0012               	return		;funcret
  1656   001320                     __end_of___lwdiv:
  1657                           	callstack 0
  1658                           
  1659 ;; *************** function _initUSART4 *****************
  1660 ;; Defined at:
  1661 ;;		line 14 in file "serial.c"
  1662 ;; Parameters:    Size  Location     Type
  1663 ;;		None
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;		None
  1666 ;; Return value:  Size  Location     Type
  1667 ;;                  1    wreg      void 
  1668 ;; Registers used:
  1669 ;;		wreg, status,2
  1670 ;; Tracked objects:
  1671 ;;		On entry : 0/0
  1672 ;;		On exit  : 0/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1679 ;;Total ram usage:        0 bytes
  1680 ;; Hardware stack levels used: 1
  1681 ;; This function calls:
  1682 ;;		Nothing
  1683 ;; This function is called by:
  1684 ;;		_main
  1685 ;; This function uses a non-reentrant model
  1686 ;;
  1687                           
  1688                           	psect	text10
  1689   0014BA                     __ptext10:
  1690                           	callstack 0
  1691   0014BA                     _initUSART4:
  1692                           	callstack 30
  1693   0014BA                     
  1694                           ;serial.c: 15:     RC0PPS = 0x12;
  1695   0014BA  0E12               	movlw	18
  1696   0014BC  010E               	movlb	14	; () banked
  1697   0014BE  6F62               	movwf	98,b	;volatile
  1698                           
  1699                           ;serial.c: 16:     RX4PPS = 0x11;
  1700   0014C0  0E11               	movlw	17
  1701   0014C2  6F15               	movwf	21,b	;volatile
  1702   0014C4                     
  1703                           ; BSR set to: 14
  1704                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  1705   0014C4  97E9               	bcf	233,3,b	;volatile
  1706   0014C6                     
  1707                           ; BSR set to: 14
  1708                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  1709   0014C6  95E8               	bcf	232,2,b	;volatile
  1710                           
  1711                           ;serial.c: 19:     SP4BRGL = 51;
  1712   0014C8  0E33               	movlw	51
  1713   0014CA  6FE5               	movwf	229,b	;volatile
  1714                           
  1715                           ;serial.c: 20:     SP4BRGH = 0;
  1716   0014CC  0E00               	movlw	0
  1717   0014CE  6FE6               	movwf	230,b	;volatile
  1718   0014D0                     
  1719                           ; BSR set to: 14
  1720                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  1721   0014D0  89E7               	bsf	231,4,b	;volatile
  1722   0014D2                     
  1723                           ; BSR set to: 14
  1724                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  1725   0014D2  8BE8               	bsf	232,5,b	;volatile
  1726   0014D4                     
  1727                           ; BSR set to: 14
  1728                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  1729   0014D4  8FE7               	bsf	231,7,b	;volatile
  1730   0014D6                     
  1731                           ; BSR set to: 14
  1732   0014D6  0012               	return		;funcret
  1733   0014D8                     __end_of_initUSART4:
  1734                           	callstack 0
  1735                           
  1736 ;; *************** function _initDCmotorsPWM *****************
  1737 ;; Defined at:
  1738 ;;		line 5 in file "dc_motor.c"
  1739 ;; Parameters:    Size  Location     Type
  1740 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;		None
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  1    wreg      void 
  1745 ;; Registers used:
  1746 ;;		wreg, status,2
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1752 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1755 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1756 ;;Total ram usage:        2 bytes
  1757 ;; Hardware stack levels used: 1
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_main
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           	psect	text11
  1766   00109A                     __ptext11:
  1767                           	callstack 0
  1768   00109A                     _initDCmotorsPWM:
  1769                           	callstack 30
  1770   00109A                     
  1771                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  1772   00109A  9485               	bcf	133,2,c	;volatile
  1773                           
  1774                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  1775   00109C  9E83               	bcf	131,7,c	;volatile
  1776                           
  1777                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1778   00109E  9885               	bcf	133,4,c	;volatile
  1779                           
  1780                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  1781   0010A0  9C87               	bcf	135,6,c	;volatile
  1782                           
  1783                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  1784   0010A2  947D               	bcf	125,2,c	;volatile
  1785                           
  1786                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  1787   0010A4  9E7B               	bcf	123,7,c	;volatile
  1788                           
  1789                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  1790   0010A6  987D               	bcf	125,4,c	;volatile
  1791                           
  1792                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  1793   0010A8  9C7F               	bcf	127,6,c	;volatile
  1794   0010AA                     
  1795                           ;dc_motor.c: 18:     RE2PPS=0x05;
  1796   0010AA  0E05               	movlw	5
  1797   0010AC  010E               	movlb	14	; () banked
  1798   0010AE  6F74               	movwf	116,b	;volatile
  1799                           
  1800                           ;dc_motor.c: 19:     RE4PPS=0x06;
  1801   0010B0  0E06               	movlw	6
  1802   0010B2  6F76               	movwf	118,b	;volatile
  1803                           
  1804                           ;dc_motor.c: 20:     RC7PPS=0x07;
  1805   0010B4  0E07               	movlw	7
  1806   0010B6  6F69               	movwf	105,b	;volatile
  1807                           
  1808                           ;dc_motor.c: 21:     RG6PPS=0x08;
  1809   0010B8  0E08               	movlw	8
  1810   0010BA  6F88               	movwf	136,b	;volatile
  1811                           
  1812                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  1813   0010BC  50BD               	movf	189,w,c	;volatile
  1814   0010BE  0B8F               	andlw	-113
  1815   0010C0  0940               	iorlw	64
  1816   0010C2  6EBD               	movwf	189,c	;volatile
  1817                           
  1818                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  1819   0010C4  0EE0               	movlw	-32
  1820   0010C6  16BE               	andwf	190,f,c	;volatile
  1821                           
  1822                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  1823   0010C8  50BF               	movf	191,w,c	;volatile
  1824   0010CA  0BF0               	andlw	-16
  1825   0010CC  0901               	iorlw	1
  1826   0010CE  6EBF               	movwf	191,c	;volatile
  1827   0010D0                     
  1828                           ; BSR set to: 14
  1829                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  1830   0010D0  C02C  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1831   0010D4                     
  1832                           ; BSR set to: 14
  1833                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  1834   0010D4  8EBD               	bsf	189,7,c	;volatile
  1835                           
  1836                           ;dc_motor.c: 35:     CCPR1H=0;
  1837   0010D6  0E00               	movlw	0
  1838   0010D8  6EAA               	movwf	170,c	;volatile
  1839                           
  1840                           ;dc_motor.c: 36:     CCPR2H=0;
  1841   0010DA  0E00               	movlw	0
  1842   0010DC  6EA6               	movwf	166,c	;volatile
  1843                           
  1844                           ;dc_motor.c: 37:     CCPR3H=0;
  1845   0010DE  0E00               	movlw	0
  1846   0010E0  010F               	movlb	15	; () banked
  1847   0010E2  6F25               	movwf	37,b	;volatile
  1848                           
  1849                           ;dc_motor.c: 38:     CCPR4H=0;
  1850   0010E4  0E00               	movlw	0
  1851   0010E6  6F21               	movwf	33,b	;volatile
  1852                           
  1853                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1854   0010E8  0EFC               	movlw	-4
  1855   0010EA  16AD               	andwf	173,f,c	;volatile
  1856                           
  1857                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1858   0010EC  0EF3               	movlw	-13
  1859   0010EE  16AD               	andwf	173,f,c	;volatile
  1860                           
  1861                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1862   0010F0  0ECF               	movlw	-49
  1863   0010F2  16AD               	andwf	173,f,c	;volatile
  1864                           
  1865                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1866   0010F4  0E3F               	movlw	-193
  1867   0010F6  16AD               	andwf	173,f,c	;volatile
  1868   0010F8                     
  1869                           ; BSR set to: 15
  1870                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  1871   0010F8  88AB               	bsf	171,4,c	;volatile
  1872                           
  1873                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  1874   0010FA  50AB               	movf	171,w,c	;volatile
  1875   0010FC  0BF0               	andlw	-16
  1876   0010FE  090C               	iorlw	12
  1877   001100  6EAB               	movwf	171,c	;volatile
  1878   001102                     
  1879                           ; BSR set to: 15
  1880                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  1881   001102  8EAB               	bsf	171,7,c	;volatile
  1882   001104                     
  1883                           ; BSR set to: 15
  1884                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  1885   001104  88A7               	bsf	167,4,c	;volatile
  1886                           
  1887                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  1888   001106  50A7               	movf	167,w,c	;volatile
  1889   001108  0BF0               	andlw	-16
  1890   00110A  090C               	iorlw	12
  1891   00110C  6EA7               	movwf	167,c	;volatile
  1892   00110E                     
  1893                           ; BSR set to: 15
  1894                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  1895   00110E  8EA7               	bsf	167,7,c	;volatile
  1896   001110                     
  1897                           ; BSR set to: 15
  1898                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  1899   001110  8926               	bsf	38,4,b	;volatile
  1900                           
  1901                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  1902   001112  5126               	movf	38,w,b	;volatile
  1903   001114  0BF0               	andlw	-16
  1904   001116  090C               	iorlw	12
  1905   001118  6F26               	movwf	38,b	;volatile
  1906   00111A                     
  1907                           ; BSR set to: 15
  1908                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  1909   00111A  8F26               	bsf	38,7,b	;volatile
  1910   00111C                     
  1911                           ; BSR set to: 15
  1912                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  1913   00111C  8922               	bsf	34,4,b	;volatile
  1914                           
  1915                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  1916   00111E  5122               	movf	34,w,b	;volatile
  1917   001120  0BF0               	andlw	-16
  1918   001122  090C               	iorlw	12
  1919   001124  6F22               	movwf	34,b	;volatile
  1920   001126                     
  1921                           ; BSR set to: 15
  1922                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  1923   001126  8F22               	bsf	34,7,b	;volatile
  1924   001128                     
  1925                           ; BSR set to: 15
  1926   001128  0012               	return		;funcret
  1927   00112A                     __end_of_initDCmotorsPWM:
  1928                           	callstack 0
  1929                           
  1930 ;; *************** function _color_click_init *****************
  1931 ;; Defined at:
  1932 ;;		line 6 in file "color.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;		None
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;		None
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, status,2, status,0, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1948 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1949 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1950 ;;Total ram usage:        1 bytes
  1951 ;; Hardware stack levels used: 1
  1952 ;; Hardware stack levels required when called: 3
  1953 ;; This function calls:
  1954 ;;		_I2C_2_Master_Init
  1955 ;;		_color_writetoaddr
  1956 ;; This function is called by:
  1957 ;;		_main
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           	psect	text12
  1962   001358                     __ptext12:
  1963                           	callstack 0
  1964   001358                     _color_click_init:
  1965                           	callstack 27
  1966   001358                     
  1967                           ;color.c: 9:     I2C_2_Master_Init();
  1968   001358  EC11  F00A         	call	_I2C_2_Master_Init	;wreg free
  1969   00135C                     
  1970                           ;color.c: 12:   color_writetoaddr(0x00, 0x01);
  1971   00135C  0E01               	movlw	1
  1972   00135E  6E2E               	movwf	color_writetoaddr@value^0,c
  1973   001360  0E00               	movlw	0
  1974   001362  EC4D  F00A         	call	_color_writetoaddr
  1975   001366                     
  1976                           ;color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1977   001366  0E3F               	movlw	63
  1978   001368  6E30               	movwf	??_color_click_init^0,c
  1979   00136A  0E55               	movlw	85
  1980   00136C                     u757:
  1981   00136C  2EE8               	decfsz	wreg,f,c
  1982   00136E  D7FE               	bra	u757
  1983   001370  2E30               	decfsz	??_color_click_init^0,f,c
  1984   001372  D7FC               	bra	u757
  1985   001374  0000               	nop	
  1986   001376                     
  1987                           ;color.c: 16:  color_writetoaddr(0x00, 0x03);
  1988   001376  0E03               	movlw	3
  1989   001378  6E2E               	movwf	color_writetoaddr@value^0,c
  1990   00137A  0E00               	movlw	0
  1991   00137C  EC4D  F00A         	call	_color_writetoaddr
  1992   001380                     
  1993                           ;color.c: 19:  color_writetoaddr(0x01, 0xD5);
  1994   001380  0ED5               	movlw	213
  1995   001382  6E2E               	movwf	color_writetoaddr@value^0,c
  1996   001384  0E01               	movlw	1
  1997   001386  EC4D  F00A         	call	_color_writetoaddr
  1998   00138A  0012               	return		;funcret
  1999   00138C                     __end_of_color_click_init:
  2000                           	callstack 0
  2001                           
  2002 ;; *************** function _color_writetoaddr *****************
  2003 ;; Defined at:
  2004 ;;		line 22 in file "color.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  address         1    wreg     unsigned char 
  2007 ;;  value           1    2[COMRAM] unsigned char 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  address         1    3[COMRAM] unsigned char 
  2010 ;; Return value:  Size  Location     Type
  2011 ;;                  1    wreg      void 
  2012 ;; Registers used:
  2013 ;;		wreg, status,2, status,0, cstack
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2019 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2020 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2022 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2023 ;;Total ram usage:        2 bytes
  2024 ;; Hardware stack levels used: 1
  2025 ;; Hardware stack levels required when called: 2
  2026 ;; This function calls:
  2027 ;;		_I2C_2_Master_Start
  2028 ;;		_I2C_2_Master_Stop
  2029 ;;		_I2C_2_Master_Write
  2030 ;; This function is called by:
  2031 ;;		_color_click_init
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           	psect	text13
  2036   00149A                     __ptext13:
  2037                           	callstack 0
  2038   00149A                     _color_writetoaddr:
  2039                           	callstack 27
  2040                           
  2041                           ;incstack = 0
  2042                           ;color_writetoaddr@address stored from wreg
  2043   00149A  6E2F               	movwf	color_writetoaddr@address^0,c
  2044   00149C                     
  2045                           ;color.c: 23:     I2C_2_Master_Start();
  2046   00149C  EC84  F00A         	call	_I2C_2_Master_Start	;wreg free
  2047                           
  2048                           ;color.c: 24:     I2C_2_Master_Write(0x52 | 0x00);
  2049   0014A0  0E52               	movlw	82
  2050   0014A2  EC79  F00A         	call	_I2C_2_Master_Write
  2051                           
  2052                           ;color.c: 25:     I2C_2_Master_Write(0x80 | address);
  2053   0014A6  502F               	movf	color_writetoaddr@address^0,w,c
  2054   0014A8  0980               	iorlw	128
  2055   0014AA  EC79  F00A         	call	_I2C_2_Master_Write
  2056                           
  2057                           ;color.c: 26:     I2C_2_Master_Write(value);
  2058   0014AE  502E               	movf	color_writetoaddr@value^0,w,c
  2059   0014B0  EC79  F00A         	call	_I2C_2_Master_Write
  2060                           
  2061                           ;color.c: 27:     I2C_2_Master_Stop();
  2062   0014B4  EC7F  F00A         	call	_I2C_2_Master_Stop	;wreg free
  2063   0014B8  0012               	return		;funcret
  2064   0014BA                     __end_of_color_writetoaddr:
  2065                           	callstack 0
  2066                           
  2067 ;; *************** function _I2C_2_Master_Write *****************
  2068 ;; Defined at:
  2069 ;;		line 45 in file "i2c.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;  data_byte       1    wreg     unsigned char 
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;  data_byte       1    1[COMRAM] unsigned char 
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  1    wreg      void 
  2076 ;; Registers used:
  2077 ;;		wreg, status,2, status,0, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2084 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2086 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2087 ;;Total ram usage:        1 bytes
  2088 ;; Hardware stack levels used: 1
  2089 ;; Hardware stack levels required when called: 1
  2090 ;; This function calls:
  2091 ;;		_I2C_2_Master_Idle
  2092 ;; This function is called by:
  2093 ;;		_color_writetoaddr
  2094 ;;		_color_read_Red
  2095 ;;		_color_read_Green
  2096 ;;		_color_read_Blue
  2097 ;;		_color_read_Clear
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text14
  2102   0014F2                     __ptext14:
  2103                           	callstack 0
  2104   0014F2                     _I2C_2_Master_Write:
  2105                           	callstack 27
  2106                           
  2107                           ;incstack = 0
  2108                           ;I2C_2_Master_Write@data_byte stored from wreg
  2109   0014F2  6E2D               	movwf	I2C_2_Master_Write@data_byte^0,c
  2110   0014F4                     
  2111                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  2112   0014F4  EC26  F00A         	call	_I2C_2_Master_Idle	;wreg free
  2113   0014F8                     
  2114                           ;i2c.c: 48:   SSP2BUF = data_byte;
  2115   0014F8  C02D  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  2116   0014FC  0012               	return		;funcret
  2117   0014FE                     __end_of_I2C_2_Master_Write:
  2118                           	callstack 0
  2119                           
  2120 ;; *************** function _I2C_2_Master_Stop *****************
  2121 ;; Defined at:
  2122 ;;		line 39 in file "i2c.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;		None
  2125 ;; Auto vars:     Size  Location     Type
  2126 ;;		None
  2127 ;; Return value:  Size  Location     Type
  2128 ;;                  1    wreg      void 
  2129 ;; Registers used:
  2130 ;;		wreg, status,2, status,0, cstack
  2131 ;; Tracked objects:
  2132 ;;		On entry : 0/0
  2133 ;;		On exit  : 0/0
  2134 ;;		Unchanged: 0/0
  2135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2140 ;;Total ram usage:        0 bytes
  2141 ;; Hardware stack levels used: 1
  2142 ;; Hardware stack levels required when called: 1
  2143 ;; This function calls:
  2144 ;;		_I2C_2_Master_Idle
  2145 ;; This function is called by:
  2146 ;;		_color_writetoaddr
  2147 ;;		_color_read_Red
  2148 ;;		_color_read_Green
  2149 ;;		_color_read_Blue
  2150 ;;		_color_read_Clear
  2151 ;; This function uses a non-reentrant model
  2152 ;;
  2153                           
  2154                           	psect	text15
  2155   0014FE                     __ptext15:
  2156                           	callstack 0
  2157   0014FE                     _I2C_2_Master_Stop:
  2158                           	callstack 27
  2159   0014FE                     
  2160                           ;i2c.c: 41:   I2C_2_Master_Idle();
  2161   0014FE  EC26  F00A         	call	_I2C_2_Master_Idle	;wreg free
  2162   001502                     
  2163                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  2164   001502  010E               	movlb	14	; () banked
  2165   001504  85DA               	bsf	218,2,b	;volatile
  2166   001506                     
  2167                           ; BSR set to: 14
  2168   001506  0012               	return		;funcret
  2169   001508                     __end_of_I2C_2_Master_Stop:
  2170                           	callstack 0
  2171                           
  2172 ;; *************** function _I2C_2_Master_Start *****************
  2173 ;; Defined at:
  2174 ;;		line 27 in file "i2c.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;		None
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;		None
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  1    wreg      void 
  2181 ;; Registers used:
  2182 ;;		wreg, status,2, status,0, cstack
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2192 ;;Total ram usage:        0 bytes
  2193 ;; Hardware stack levels used: 1
  2194 ;; Hardware stack levels required when called: 1
  2195 ;; This function calls:
  2196 ;;		_I2C_2_Master_Idle
  2197 ;; This function is called by:
  2198 ;;		_color_writetoaddr
  2199 ;;		_color_read_Red
  2200 ;;		_color_read_Green
  2201 ;;		_color_read_Blue
  2202 ;;		_color_read_Clear
  2203 ;; This function uses a non-reentrant model
  2204 ;;
  2205                           
  2206                           	psect	text16
  2207   001508                     __ptext16:
  2208                           	callstack 0
  2209   001508                     _I2C_2_Master_Start:
  2210                           	callstack 27
  2211   001508                     
  2212                           ;i2c.c: 29:   I2C_2_Master_Idle();
  2213   001508  EC26  F00A         	call	_I2C_2_Master_Idle	;wreg free
  2214   00150C                     
  2215                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  2216   00150C  010E               	movlb	14	; () banked
  2217   00150E  81DA               	bsf	218,0,b	;volatile
  2218   001510                     
  2219                           ; BSR set to: 14
  2220   001510  0012               	return		;funcret
  2221   001512                     __end_of_I2C_2_Master_Start:
  2222                           	callstack 0
  2223                           
  2224 ;; *************** function _I2C_2_Master_Idle *****************
  2225 ;; Defined at:
  2226 ;;		line 22 in file "i2c.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;		None
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;		None
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  1    wreg      void 
  2233 ;; Registers used:
  2234 ;;		wreg, status,2, status,0
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2242 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2243 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2244 ;;Total ram usage:        1 bytes
  2245 ;; Hardware stack levels used: 1
  2246 ;; This function calls:
  2247 ;;		Nothing
  2248 ;; This function is called by:
  2249 ;;		_I2C_2_Master_Start
  2250 ;;		_I2C_2_Master_Stop
  2251 ;;		_I2C_2_Master_Write
  2252 ;;		_I2C_2_Master_RepStart
  2253 ;;		_I2C_2_Master_Read
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257                           	psect	text17
  2258   00144C                     __ptext17:
  2259                           	callstack 0
  2260   00144C                     _I2C_2_Master_Idle:
  2261                           	callstack 27
  2262   00144C                     l99:
  2263   00144C  010E               	movlb	14	; () banked
  2264   00144E  B5D8               	btfsc	216,2,b	;volatile
  2265   001450  EF2C  F00A         	goto	u41
  2266   001454  EF2E  F00A         	goto	u40
  2267   001458                     u41:
  2268   001458  EF26  F00A         	goto	l99
  2269   00145C                     u40:
  2270   00145C                     
  2271                           ; BSR set to: 14
  2272   00145C  CEDA F02C          	movff	3802,??_I2C_2_Master_Idle	;volatile
  2273   001460  0E1F               	movlw	31
  2274   001462  162C               	andwf	??_I2C_2_Master_Idle^0,f,c
  2275   001464  A4D8               	btfss	status,2,c
  2276   001466  EF37  F00A         	goto	u51
  2277   00146A  EF39  F00A         	goto	u50
  2278   00146E                     u51:
  2279   00146E  EF26  F00A         	goto	l99
  2280   001472                     u50:
  2281   001472                     
  2282                           ; BSR set to: 14
  2283   001472  0012               	return		;funcret
  2284   001474                     __end_of_I2C_2_Master_Idle:
  2285                           	callstack 0
  2286                           
  2287 ;; *************** function _I2C_2_Master_Init *****************
  2288 ;; Defined at:
  2289 ;;		line 4 in file "i2c.c"
  2290 ;; Parameters:    Size  Location     Type
  2291 ;;		None
  2292 ;; Auto vars:     Size  Location     Type
  2293 ;;		None
  2294 ;; Return value:  Size  Location     Type
  2295 ;;                  1    wreg      void 
  2296 ;; Registers used:
  2297 ;;		wreg, status,2
  2298 ;; Tracked objects:
  2299 ;;		On entry : 0/0
  2300 ;;		On exit  : 0/0
  2301 ;;		Unchanged: 0/0
  2302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2307 ;;Total ram usage:        0 bytes
  2308 ;; Hardware stack levels used: 1
  2309 ;; This function calls:
  2310 ;;		Nothing
  2311 ;; This function is called by:
  2312 ;;		_color_click_init
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           	psect	text18
  2317   001422                     __ptext18:
  2318                           	callstack 0
  2319   001422                     _I2C_2_Master_Init:
  2320                           	callstack 29
  2321   001422                     
  2322                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2323   001422  010E               	movlb	14	; () banked
  2324   001424  51D9               	movf	217,w,b	;volatile
  2325   001426  0BF0               	andlw	-16
  2326   001428  0908               	iorlw	8
  2327   00142A  6FD9               	movwf	217,b	;volatile
  2328   00142C                     
  2329                           ; BSR set to: 14
  2330                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2331   00142C  8BD9               	bsf	217,5,b	;volatile
  2332                           
  2333                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2334   00142E  0E9F               	movlw	159
  2335   001430  6FD6               	movwf	214,b	;volatile
  2336   001432                     
  2337                           ; BSR set to: 14
  2338                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2339   001432  8A84               	bsf	132,5,c	;volatile
  2340   001434                     
  2341                           ; BSR set to: 14
  2342                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2343   001434  8C84               	bsf	132,6,c	;volatile
  2344   001436                     
  2345                           ; BSR set to: 14
  2346                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2347   001436  9BA7               	bcf	167,5,b	;volatile
  2348   001438                     
  2349                           ; BSR set to: 14
  2350                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2351   001438  9DA7               	bcf	167,6,b	;volatile
  2352                           
  2353                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2354   00143A  0E1D               	movlw	29
  2355   00143C  6F1D               	movwf	29,b	;volatile
  2356                           
  2357                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2358   00143E  0E1E               	movlw	30
  2359   001440  6F1C               	movwf	28,b	;volatile
  2360                           
  2361                           ;i2c.c: 18:   RD5PPS=0x1C;
  2362   001442  0E1C               	movlw	28
  2363   001444  6F6F               	movwf	111,b	;volatile
  2364                           
  2365                           ;i2c.c: 19:   RD6PPS=0x1B;
  2366   001446  0E1B               	movlw	27
  2367   001448  6F70               	movwf	112,b	;volatile
  2368   00144A                     
  2369                           ; BSR set to: 14
  2370   00144A  0012               	return		;funcret
  2371   00144C                     __end_of_I2C_2_Master_Init:
  2372                           	callstack 0
  2373                           
  2374 ;; *************** function _ADC_init *****************
  2375 ;; Defined at:
  2376 ;;		line 9 in file "ADC.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;		None
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;		None
  2381 ;; Return value:  Size  Location     Type
  2382 ;;                  1    wreg      void 
  2383 ;; Registers used:
  2384 ;;		wreg, status,2
  2385 ;; Tracked objects:
  2386 ;;		On entry : 0/0
  2387 ;;		On exit  : 0/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2394 ;;Total ram usage:        0 bytes
  2395 ;; Hardware stack levels used: 1
  2396 ;; This function calls:
  2397 ;;		Nothing
  2398 ;; This function is called by:
  2399 ;;		_main
  2400 ;; This function uses a non-reentrant model
  2401 ;;
  2402                           
  2403                           	psect	text19
  2404   0014D8                     __ptext19:
  2405                           	callstack 0
  2406   0014D8                     _ADC_init:
  2407                           	callstack 30
  2408   0014D8                     
  2409                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  2410   0014D8  8C86               	bsf	134,6,c	;volatile
  2411                           
  2412                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  2413   0014DA  010E               	movlb	14	; () banked
  2414   0014DC  8DB4               	bsf	180,6,b	;volatile
  2415                           
  2416                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  2417   0014DE  010F               	movlb	15	; () banked
  2418   0014E0  9958               	bcf	88,4,b	;volatile
  2419   0014E2                     
  2420                           ; BSR set to: 15
  2421                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  2422   0014E2  0EFC               	movlw	-4
  2423   0014E4  1758               	andwf	88,f,b	;volatile
  2424                           
  2425                           ;ADC.c: 17:     ADPCH=0b101110;
  2426   0014E6  0E2E               	movlw	46
  2427   0014E8  6F5F               	movwf	95,b	;volatile
  2428   0014EA                     
  2429                           ; BSR set to: 15
  2430                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  2431   0014EA  9460               	bcf	96,2,c	;volatile
  2432   0014EC                     
  2433                           ; BSR set to: 15
  2434                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  2435   0014EC  8860               	bsf	96,4,c	;volatile
  2436   0014EE                     
  2437                           ; BSR set to: 15
  2438                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  2439   0014EE  8E60               	bsf	96,7,c	;volatile
  2440   0014F0                     
  2441                           ; BSR set to: 15
  2442   0014F0  0012               	return		;funcret
  2443   0014F2                     __end_of_ADC_init:
  2444                           	callstack 0
  2445                           
  2446                           	psect	rparam
  2447   000000                     
  2448                           	psect	config
  2449                           
  2450                           ;Config register CONFIG1L @ 0x300000
  2451                           ;	External Oscillator mode Selection bits
  2452                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2453                           ;	Power-up default value for COSC bits
  2454                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2455   300000                     	org	3145728
  2456   300000  AA                 	db	170
  2457                           
  2458                           ;Config register CONFIG1H @ 0x300001
  2459                           ;	unspecified, using default values
  2460                           ;	Clock Out Enable bit
  2461                           ;	CLKOUTEN = 0x1, unprogrammed default
  2462                           ;	Clock Switch Enable bit
  2463                           ;	CSWEN = 0x1, unprogrammed default
  2464                           ;	Fail-Safe Clock Monitor Enable bit
  2465                           ;	FCMEN = 0x1, unprogrammed default
  2466   300001                     	org	3145729
  2467   300001  FF                 	db	255
  2468                           
  2469                           ;Config register CONFIG3L @ 0x300004
  2470                           ;	WDT Period Select bits
  2471                           ;	WDTCPS = 0x1F, unprogrammed default
  2472                           ;	WDT operating mode
  2473                           ;	WDTE = OFF, WDT Disabled
  2474   300004                     	org	3145732
  2475   300004  9F                 	db	159
  2476                           
  2477                           ;Config register CONFIG3H @ 0x300005
  2478                           ;	unspecified, using default values
  2479                           ;	WDT Window Select bits
  2480                           ;	WDTCWS = 0x7, unprogrammed default
  2481                           ;	WDT input clock selector
  2482                           ;	WDTCCS = 0x7, unprogrammed default
  2483   300005                     	org	3145733
  2484   300005  FF                 	db	255
  2485                           tosu	equ	0xFFF
  2486                           tosh	equ	0xFFE
  2487                           tosl	equ	0xFFD
  2488                           stkptr	equ	0xFFC
  2489                           pclatu	equ	0xFFB
  2490                           pclath	equ	0xFFA
  2491                           pcl	equ	0xFF9
  2492                           tblptru	equ	0xFF8
  2493                           tblptrh	equ	0xFF7
  2494                           tblptrl	equ	0xFF6
  2495                           tablat	equ	0xFF5
  2496                           prodh	equ	0xFF4
  2497                           prodl	equ	0xFF3
  2498                           indf0	equ	0xFEF
  2499                           postinc0	equ	0xFEE
  2500                           postdec0	equ	0xFED
  2501                           preinc0	equ	0xFEC
  2502                           plusw0	equ	0xFEB
  2503                           fsr0h	equ	0xFEA
  2504                           fsr0l	equ	0xFE9
  2505                           wreg	equ	0xFE8
  2506                           indf1	equ	0xFE7
  2507                           postinc1	equ	0xFE6
  2508                           postdec1	equ	0xFE5
  2509                           preinc1	equ	0xFE4
  2510                           plusw1	equ	0xFE3
  2511                           fsr1h	equ	0xFE2
  2512                           fsr1l	equ	0xFE1
  2513                           bsr	equ	0xFE0
  2514                           indf2	equ	0xFDF
  2515                           postinc2	equ	0xFDE
  2516                           postdec2	equ	0xFDD
  2517                           preinc2	equ	0xFDC
  2518                           plusw2	equ	0xFDB
  2519                           fsr2h	equ	0xFDA
  2520                           fsr2l	equ	0xFD9
  2521                           status	equ	0xFD8

Data Sizes:
    Strings     147
    Constant    0
    Data        1
    BSS         123
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     33      77
    BANK0           160      0      80
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    S2328$buffer	PTR unsigned char  size(2) Largest target is 0

    S2328$source	PTR const unsigned char  size(2) Largest target is 0

    S465DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S465DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), motorR(COMRAM[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[17]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[21]), STR_6(CODE[12]), STR_7(CODE[13]), STR_8(CODE[14]), 
		 -> STR_9(CODE[17]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_moveRed
    _moveRed->_backHalf
    _moveRed->_right90
    _right90->_turnRight
    _turnRight->_setMotorPWM
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0   16428
                                             31 COMRAM     2     2      0
                           _ADC_init
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                            _moveRed
 ---------------------------------------------------------------------------------
 (1) _moveRed                                              4     2      2   15976
                                             27 COMRAM     4     2      2
                           _backHalf
                            _right90
 ---------------------------------------------------------------------------------
 (2) _right90                                              4     2      2    7640
                                             23 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _turnRight                                            5     3      2    3267
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _backHalf                                             4     2      2    8096
                                             23 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (3) _stop                                                 3     1      2    3981
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _fullSpeedBack                                        5     3      2    3267
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _setMotorPWM                                          5     4      1    2741
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     659
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     662
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     287
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     287
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      15
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _initDCmotorsPWM
   _initUSART4
   _moveRed
     _backHalf
       _fullSpeedBack
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
     _right90
       _stop
       _turnRight
         _setMotorPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      64        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      50       5       50.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     21      4D       1       81.1%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      62        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhllhh     17      0       0      36        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRllllll      F      0       0      60        0.0%
BITBIGSFRhhhlh       E      0       0      33        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      59        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      61        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRhhllhl      6      0       0      37        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      35        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhlh         1      0       0      38        0.0%
BITBIGSFRhhhll       1      0       0      34        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BITBIGSFRlh          1      0       0      40        0.0%
BITBIGSFRhll         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9D      63        0.0%
DATA                 0      0      9D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Mar 11 20:13:32 2024

         fullSpeedBack@power 0041                           l45 138A                           l48 14B8  
                         l96 144A                           l99 144C                           u40 145C  
                         u41 1458                           u50 1472                           u51 146E  
        ___wmul@multiplicand 002E                          l102 1472                          l111 1506  
                        l201 14F0                          l105 1510                          l114 14FC  
                        l300 13EE                          l321 13BC                          l315 1420  
                        l262 1128                          l269 0FE8                          l277 11B6  
                        l390 14D6                          l287 1234                          l456 1498  
                        l297 12AA                          l954 131E                          l947 1316  
                        u400 12C6                          u401 12C2                          u410 12E4  
                        u411 12E0                          u420 1300                          u500 12AA  
                        u421 12FC                          u501 12A6                          u430 0EB0  
                        u431 0EAC                          u440 0F6C                          u441 0F68  
                        u450 1144                          u451 1140                          u460 1162  
                        u461 115E                          u470 11A0                          u630 106E  
                        u471 119C                          u631 106A                          u480 11B6  
                        u481 11B2                          u490 1234                          u491 1230  
                        u707 13D4                          u717 1210                          u727 1406  
                        u737 1180                          u747 1280                          u757 136C  
                        u687 1078                          u697 13A2                          wreg 0FE8  
                       l2100 1054                         l2110 1060                         l2102 1056  
                       l1400 14D2                         l2112 106E                         l2104 1058  
                       l1402 14D4                         l2114 1086                         l2106 105A  
                       l1260 1422                         l1164 144C                         l2108 105C  
                       l2060 0FEA                         l1270 1438                         l1262 142C  
                       l1166 145C                         l1190 14F8                         l2070 1002  
                       l2062 0FEE                         l1264 1432                         l1184 1508  
                       l1192 14FE                         l2080 101E                         l2072 1006  
                       l2064 0FF2                         l1266 1434                         l1186 150C  
                       l1194 1502                         l2090 104A                         l2082 1026  
                       l2074 100A                         l2066 0FF6                         l1268 1436  
                       l1188 14F4                         l2092 104C                         l2084 102A  
                       l2076 100E                         l2068 0FF6                         l1390 14EE  
                       l1382 14D8                         l2094 104E                         l2086 102E  
                       l2078 1016                         l1384 14E2                         l1392 14BA  
                       l1800 1172                         l2096 1050                         l2088 1032  
                       l1386 14EA                         l1394 14C4                         l1802 117A  
                       l1810 11D2                         l2098 1052                         l1388 14EC  
                       l1900 1376                         l1396 14C6                         l1804 118A  
                       l1820 11EA                         l1812 11DA                         l1902 1380  
                       l1398 14D0                         l1750 12AC                         l1806 11A0  
                       l1830 121E                         l1822 11FA                         l1814 11E2  
                       l1920 10D4                         l1760 12E4                         l1752 12B4  
                       l1744 1474                         l1840 1256                         l1832 1236  
                       l1824 1202                         l1808 11B8                         l1930 1110  
                       l1922 10F8                         l1914 109A                         l1770 1310  
                       l1762 12EA                         l1754 12C6                         l1746 1490  
                       l1850 128E                         l1842 126A                         l1834 124E  
                       l1826 120A                         l1852 149C                         l1932 111A  
                       l1924 1102                         l1916 10AA                         l1764 1300  
                       l1756 12CE                         l1780 0F14                         l1772 0E96  
                       l1844 1272                         l1828 121A                         l1940 1398  
                       l1934 111C                         l1926 1104                         l1918 10D0  
                       l1766 1308                         l1758 12D6                         l1782 0F52  
                       l1774 0EB0                         l1846 127A                         l1790 112E  
                       l1942 13B0                         l1936 1126                         l1928 110E  
                       l1768 130A                         l1784 0F6C                         l1776 0EFE  
                       l1848 128A                         l1792 1144                         l1880 13CA  
                       l1786 0FAC                         l1778 0F10                         l1794 114C  
                       l1882 13E2                         l1938 138C                         l1796 1162  
                       l1788 112A                         l1884 13F0                         l1894 1358  
                       l1798 116A                         l1886 13FC                         l1878 13BE  
                       l1896 135C                         l1888 1414                         l1898 1366  
                       STR_1 0E3A                         STR_2 0E16                         STR_3 0E5C  
                       STR_4 0E4B                         STR_5 0E01                         STR_6 0E88  
                       STR_7 0E7B                         STR_8 0E6D                         STR_9 0E29  
               _BAUD4CONbits 0EE9                         _T2PR 0FBC                         _main 0FEA  
                       fsr2h 0FDA                         indf2 0FDF                         fsr2l 0FD9  
                       _stop 112A                         prodh 0FF4                         prodl 0FF3  
                       start 0000             __end_of_ADC_init 14F2                 ___param_bank 0000  
                      ?_main 002C                        _ADPCH 0F5F                        ?_stop 003E  
            __end_of___lwdiv 1320   __end_of_I2C_2_Master_Start 1512   __end_of_I2C_2_Master_Write 14FE  
            __end_of_right90 13F0              __end_of_moveRed 13BE                        tablat 0FF5  
                      status 0FD8              __initialization 1320                 __end_of_main 109A  
               __end_of_stop 11B8                       ??_main 004B                       ??_stop 0040  
              __activetblptr 0001                 ?_setMotorPWM 0039                       _ADRESH 0F64  
                     _CCPR1H 0FAA                       _CCPR2H 0FA6                       _CCPR3H 0F25  
                     _CCPR4H 0F21             __end_of_backHalf 1422                       _RC0PPS 0E62  
                     _RC4REG 0EE3                       _RE2PPS 0E74                       _RD5PPS 0E6F  
                     _RC7PPS 0E69                       _RE4PPS 0E76                       _RD6PPS 0E70  
                     _RG6PPS 0E88     __end_of_color_click_init 138C                       _RX4PPS 0E15  
                     _TX4REG 0EE4                 _CCPTMRS0bits 0FAD                       ___wmul 1474  
                  ??___lwdiv 0036                       clear_0 1338                       clear_1 1344  
                     _motorL 0023                       _motorR 001A                       isa$std 0001  
               __pdataCOMRAM 004D                    ??_right90 0045                 __mediumconst 0000  
                  ??_moveRed 0049                       tblptrh 0FF7                       tblptrl 0FF6  
                     tblptru 0FF8                    ?_ADC_init 002C                       stop@mL 003E  
                     stop@mR 003F            ??_initDCmotorsPWM 002E              fullSpeedBack@mL 003E  
            fullSpeedBack@mR 003F                   __accesstop 0060      __end_of__initialization 134A  
              ___rparam_used 0001               __pcstackCOMRAM 002C                _fullSpeedBack 1236  
                 ??_ADC_init 002C                   backHalf@mL 0043                   backHalf@mR 0044  
                 __pbssBANK0 0060            _color_writetoaddr 149A                 _T2CLKCONbits 0FBF  
             ?_fullSpeedBack 003E           ?_color_writetoaddr 002E                      ?___wmul 002C  
                  ?_backHalf 0043          ??_color_writetoaddr 002F                      _SP4BRGH 0EE6  
                    _SP4BRGL 0EE5                      _SSP2ADD 0ED6                      _SSP2BUF 0ED5  
     color_writetoaddr@value 002E    __end_of_color_writetoaddr 14BA                    _ADREFbits 0F58  
         _I2C_2_Master_Start 1508                   _initUSART4 14BA           _I2C_2_Master_Write 14F2  
                    __Hparam 0000                      __Lparam 0000          ?_I2C_2_Master_Start 002C  
                    ___lwdiv 12AC          ?_I2C_2_Master_Write 002C                 __psmallconst 0E00  
                    __pcinit 1320                   ??_backHalf 0045                      __ramtop 0E00  
                    __ptext0 0FEA                      __ptext1 138C                      __ptext2 13BE  
                    __ptext3 11B8                      __ptext4 13F0                      __ptext5 112A  
                    __ptext6 1236                      __ptext7 0E96                      __ptext8 1474  
                    __ptext9 12AC                    _T2CONbits 0FBD                      _right90 13BE  
                  _T2HLTbits 0FBE                      _moveRed 138C                _RxBufWriteCnt 0019  
       ??_I2C_2_Master_Start 002D         ??_I2C_2_Master_Write 002D         end_of_initialization 134A  
          ?_color_click_init 002C              ??_fullSpeedBack 0040           ??_color_click_init 0030  
                    postdec2 0FDD                      postinc0 0FEE                      postinc2 0FDE  
            _initDCmotorsPWM 109A                    _PORTFbits 0F8E           setMotorPWM@negDuty 003D  
          __end_of_turnRight 1236                    _TRISAbits 0F81           setMotorPWM@posDuty 003C  
                  _TRISCbits 0F83                    _TRISDbits 0F84                    _TRISEbits 0F85  
                  _TRISFbits 0F86                    _TRISGbits 0F87     color_writetoaddr@address 002F  
                _CCP1CONbits 0FAB                 _EUSART4RXbuf 0001                 _EUSART4TXbuf 0060  
                _CCP2CONbits 0FA7                  _CCP3CONbits 0F26                  ?_initUSART4 002C  
                _CCP4CONbits 0F22               __end_of___wmul 149A                __pidataCOMRAM 1512  
        start_initialization 1320                _TxBufWriteCnt 0017      __end_of_initDCmotorsPWM 112A  
                   ??___wmul 0030                  __pbssCOMRAM 0001             ___lwdiv@dividend 0032  
                   ?___lwdiv 0032                 _readingIndex 0015                  __smallconst 0E00  
          _I2C_2_Master_Idle 144C            _I2C_2_Master_Init 1422                     ?_right90 0043  
          _I2C_2_Master_Stop 14FE                     ?_moveRed 0047                 _RxBufReadCnt 0018  
                   _ADC_init 14D8           ?_I2C_2_Master_Idle 002C           ?_I2C_2_Master_Init 002C  
              ??_setMotorPWM 003A           ?_I2C_2_Master_Stop 002C             ___lwdiv@quotient 0036  
   initDCmotorsPWM@PWMperiod 002C          ??_I2C_2_Master_Idle 002C          ??_I2C_2_Master_Init 002C  
             ___wmul@product 0030                     _LATAbits 0F79          ??_I2C_2_Master_Stop 002D  
                   _LATCbits 0F7B                     _LATDbits 0F7C                     _LATEbits 0F7D  
                   _LATGbits 0F7F                     _PIE4bits 0E2D                  turnRight@mL 003E  
                turnRight@mR 003F                     _PIR4bits 0E37             ?_initDCmotorsPWM 002C  
                   _SSP2CON2 0EDA                     _SSP2STAT 0ED8                   _ADCON0bits 0F60  
  __end_of_I2C_2_Master_Idle 1474    __end_of_I2C_2_Master_Init 144C            ___wmul@multiplier 002C  
  __end_of_I2C_2_Master_Stop 1508                 setMotorPWM@m 0039  I2C_2_Master_Write@data_byte 002D  
                _ldrReadings 009C                 _TxBufReadCnt 0016                    _turnRight 11B8  
        __end_of_setMotorPWM 0FEA                 ??_initUSART4 002C                     __Hrparam 0000  
                   __Lrparam 0000        __end_of_fullSpeedBack 12AC                 __Lsmallconst 0E00  
                   _backHalf 13F0                   _ANSELDbits 0EA7                   _ANSELFbits 0EB4  
                   _dataFlag 004D                    right90@mL 0043                    right90@mR 0044  
            ___lwdiv@divisor 0034           __end_of_initUSART4 14D8              ___lwdiv@counter 0038  
                 ?_turnRight 003E                     __ptext10 14BA                     __ptext11 109A  
                   __ptext12 1358                     __ptext13 149A                     __ptext14 14F2  
                   __ptext15 14FE                     __ptext16 1508                     __ptext17 144C  
                   __ptext18 1422                     __ptext19 14D8                    moveRed@mL 0047  
                  moveRed@mR 0048                 _SSP2CON1bits 0ED9                 _SSP2CON2bits 0EDA  
                 turnRight@i 0041                     isa$xinst 0000                   _RC4STAbits 0EE7  
                _setMotorPWM 0E96             _color_click_init 1358                   _SSP2DATPPS 0E1D  
                 _SSP2CLKPPS 0E1C                  ??_turnRight 0040                   _TX4STAbits 0EE8  
