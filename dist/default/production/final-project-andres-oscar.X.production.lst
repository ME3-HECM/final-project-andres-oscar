

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Mar 11 19:28:58 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    32   000000                     
    33                           ; Generated 21/07/2023 GMT
    34                           ; 
    35                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution. Publication is not required when
    49                           ;        this file is used in an embedded application.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F67K40 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67   000000                     
    68                           	psect	idataCOMRAM
    69   0014A4                     __pidataCOMRAM:
    70                           	callstack 0
    71                           
    72                           ;initializer for _dataFlag
    73   0014A4  01                 	db	1
    74   000000                     _TX4REG	set	3812
    75   000000                     _RC4STAbits	set	3815
    76   000000                     _SP4BRGH	set	3814
    77   000000                     _TRISFbits	set	3974
    78   000000                     _TRISEbits	set	3973
    79   000000                     _TRISGbits	set	3975
    80   000000                     _CCPR2H	set	4006
    81   000000                     _CCPR1H	set	4010
    82   000000                     _SSP2CON2bits	set	3802
    83   000000                     _RX4PPS	set	3605
    84   000000                     _SSP2CLKPPS	set	3612
    85   000000                     _SSP2DATPPS	set	3613
    86   000000                     _ANSELDbits	set	3751
    87   000000                     _SSP2ADD	set	3798
    88   000000                     _SSP2CON1bits	set	3801
    89   000000                     _LATAbits	set	3961
    90   000000                     _LATEbits	set	3965
    91   000000                     _LATGbits	set	3967
    92   000000                     _TRISAbits	set	3969
    93   000000                     _TRISDbits	set	3972
    94   000000                     _LATCbits	set	3963
    95   000000                     _LATDbits	set	3964
    96   000000                     _RC4REG	set	3811
    97   000000                     _SP4BRGL	set	3813
    98   000000                     _TX4STAbits	set	3816
    99   000000                     _BAUD4CONbits	set	3817
   100   000000                     _SSP2CON2	set	3802
   101   000000                     _CCPR4H	set	3873
   102   000000                     _CCPR3H	set	3877
   103   000000                     _SSP2STAT	set	3800
   104   000000                     _ANSELFbits	set	3764
   105   000000                     _SSP2BUF	set	3797
   106   000000                     _PIE4bits	set	3629
   107   000000                     _PIR4bits	set	3639
   108   000000                     _RC0PPS	set	3682
   109   000000                     _RC7PPS	set	3689
   110   000000                     _RD5PPS	set	3695
   111   000000                     _RE2PPS	set	3700
   112   000000                     _RD6PPS	set	3696
   113   000000                     _CCP1CONbits	set	4011
   114   000000                     _CCPTMRS0bits	set	4013
   115   000000                     _T2PR	set	4028
   116   000000                     _T2CONbits	set	4029
   117   000000                     _CCP2CONbits	set	4007
   118   000000                     _CCP3CONbits	set	3878
   119   000000                     _ADREFbits	set	3928
   120   000000                     _CCP4CONbits	set	3874
   121   000000                     _PORTFbits	set	3982
   122   000000                     _TRISCbits	set	3971
   123   000000                     _ADPCH	set	3935
   124   000000                     _ADRESH	set	3940
   125   000000                     _ADCON0bits	set	3936
   126   000000                     _RE4PPS	set	3702
   127   000000                     _RG6PPS	set	3720
   128   000000                     _T2CLKCONbits	set	4031
   129   000000                     _T2HLTbits	set	4030
   130                           
   131                           	psect	smallconst
   132   000E00                     __psmallconst:
   133                           	callstack 0
   134   000E00  00                 	db	0
   135   000E01                     
   136                           ; BSR set to: 15
   137   000E01  56                 	db	86	;'V'
   138   000E02  6F                 	db	111	;'o'
   139   000E03  6C                 	db	108	;'l'
   140   000E04  74                 	db	116	;'t'
   141   000E05  61                 	db	97	;'a'
   142   000E06  67                 	db	103	;'g'
   143   000E07  65                 	db	101	;'e'
   144   000E08  20                 	db	32
   145   000E09  3D                 	db	61	;'='
   146   000E0A  20                 	db	32
   147   000E0B  25                 	db	37
   148   000E0C  64                 	db	100	;'d'
   149   000E0D  2E                 	db	46
   150   000E0E  25                 	db	37
   151   000E0F  30                 	db	48	;'0'
   152   000E10  32                 	db	50	;'2'
   153   000E11  64                 	db	100	;'d'
   154   000E12  2C                 	db	44
   155   000E13  20                 	db	32
   156   000E14  20                 	db	32
   157   000E15  00                 	db	0
   158   000E16                     
   159                           ; BSR set to: 15
   160   000E16  47                 	db	71	;'G'
   161   000E17  72                 	db	114	;'r'
   162   000E18  65                 	db	101	;'e'
   163   000E19  65                 	db	101	;'e'
   164   000E1A  6E                 	db	110	;'n'
   165   000E1B  5F                 	db	95	;'_'
   166   000E1C  6C                 	db	108	;'l'
   167   000E1D  69                 	db	105	;'i'
   168   000E1E  67                 	db	103	;'g'
   169   000E1F  68                 	db	104	;'h'
   170   000E20  74                 	db	116	;'t'
   171   000E21  3D                 	db	61	;'='
   172   000E22  25                 	db	37
   173   000E23  64                 	db	100	;'d'
   174   000E24  2C                 	db	44
   175   000E25  20                 	db	32
   176   000E26  0A                 	db	10
   177   000E27  0D                 	db	13
   178   000E28  00                 	db	0
   179   000E29                     
   180                           ; BSR set to: 15
   181   000E29  43                 	db	67	;'C'
   182   000E2A  6C                 	db	108	;'l'
   183   000E2B  65                 	db	101	;'e'
   184   000E2C  61                 	db	97	;'a'
   185   000E2D  72                 	db	114	;'r'
   186   000E2E  3D                 	db	61	;'='
   187   000E2F  25                 	db	37
   188   000E30  30                 	db	48	;'0'
   189   000E31  35                 	db	53	;'5'
   190   000E32  64                 	db	100	;'d'
   191   000E33  2C                 	db	44
   192   000E34  20                 	db	32
   193   000E35  20                 	db	32
   194   000E36  0A                 	db	10
   195   000E37  0A                 	db	10
   196   000E38  0D                 	db	13
   197   000E39  00                 	db	0
   198   000E3A                     
   199                           ; BSR set to: 15
   200   000E3A  52                 	db	82	;'R'
   201   000E3B  65                 	db	101	;'e'
   202   000E3C  64                 	db	100	;'d'
   203   000E3D  5F                 	db	95	;'_'
   204   000E3E  6C                 	db	108	;'l'
   205   000E3F  69                 	db	105	;'i'
   206   000E40  67                 	db	103	;'g'
   207   000E41  68                 	db	104	;'h'
   208   000E42  74                 	db	116	;'t'
   209   000E43  3D                 	db	61	;'='
   210   000E44  25                 	db	37
   211   000E45  64                 	db	100	;'d'
   212   000E46  2C                 	db	44
   213   000E47  20                 	db	32
   214   000E48  0A                 	db	10
   215   000E49  0D                 	db	13
   216   000E4A  00                 	db	0
   217   000E4B                     
   218                           ; BSR set to: 15
   219   000E4B  41                 	db	65	;'A'
   220   000E4C  6C                 	db	108	;'l'
   221   000E4D  6C                 	db	108	;'l'
   222   000E4E  5F                 	db	95	;'_'
   223   000E4F  6C                 	db	108	;'l'
   224   000E50  69                 	db	105	;'i'
   225   000E51  67                 	db	103	;'g'
   226   000E52  68                 	db	104	;'h'
   227   000E53  74                 	db	116	;'t'
   228   000E54  73                 	db	115	;'s'
   229   000E55  3D                 	db	61	;'='
   230   000E56  25                 	db	37
   231   000E57  64                 	db	100	;'d'
   232   000E58  20                 	db	32
   233   000E59  0A                 	db	10
   234   000E5A  0D                 	db	13
   235   000E5B  00                 	db	0
   236   000E5C                     
   237                           ; BSR set to: 15
   238   000E5C  42                 	db	66	;'B'
   239   000E5D  6C                 	db	108	;'l'
   240   000E5E  75                 	db	117	;'u'
   241   000E5F  65                 	db	101	;'e'
   242   000E60  5F                 	db	95	;'_'
   243   000E61  6C                 	db	108	;'l'
   244   000E62  69                 	db	105	;'i'
   245   000E63  67                 	db	103	;'g'
   246   000E64  68                 	db	104	;'h'
   247   000E65  74                 	db	116	;'t'
   248   000E66  3D                 	db	61	;'='
   249   000E67  25                 	db	37
   250   000E68  64                 	db	100	;'d'
   251   000E69  20                 	db	32
   252   000E6A  0A                 	db	10
   253   000E6B  0D                 	db	13
   254   000E6C  00                 	db	0
   255   000E6D                     
   256                           ; BSR set to: 15
   257   000E6D  47                 	db	71	;'G'
   258   000E6E  72                 	db	114	;'r'
   259   000E6F  65                 	db	101	;'e'
   260   000E70  65                 	db	101	;'e'
   261   000E71  6E                 	db	110	;'n'
   262   000E72  3D                 	db	61	;'='
   263   000E73  25                 	db	37
   264   000E74  30                 	db	48	;'0'
   265   000E75  35                 	db	53	;'5'
   266   000E76  64                 	db	100	;'d'
   267   000E77  2C                 	db	44
   268   000E78  20                 	db	32
   269   000E79  20                 	db	32
   270   000E7A  00                 	db	0
   271   000E7B                     
   272                           ; BSR set to: 15
   273   000E7B  42                 	db	66	;'B'
   274   000E7C  6C                 	db	108	;'l'
   275   000E7D  75                 	db	117	;'u'
   276   000E7E  65                 	db	101	;'e'
   277   000E7F  3D                 	db	61	;'='
   278   000E80  25                 	db	37
   279   000E81  30                 	db	48	;'0'
   280   000E82  35                 	db	53	;'5'
   281   000E83  64                 	db	100	;'d'
   282   000E84  2C                 	db	44
   283   000E85  20                 	db	32
   284   000E86  20                 	db	32
   285   000E87  00                 	db	0
   286   000E88                     
   287                           ; BSR set to: 15
   288   000E88  52                 	db	82	;'R'
   289   000E89  65                 	db	101	;'e'
   290   000E8A  64                 	db	100	;'d'
   291   000E8B  3D                 	db	61	;'='
   292   000E8C  25                 	db	37
   293   000E8D  30                 	db	48	;'0'
   294   000E8E  35                 	db	53	;'5'
   295   000E8F  64                 	db	100	;'d'
   296   000E90  2C                 	db	44
   297   000E91  20                 	db	32
   298   000E92  20                 	db	32
   299   000E93  00                 	db	0
   300   000E94  00                 	db	0	; dummy byte at the end
   301   000000                     
   302                           ; #config settings
   303                           
   304                           	psect	cinit
   305   001316                     __pcinit:
   306                           	callstack 0
   307   001316                     start_initialization:
   308                           	callstack 0
   309   001316                     __initialization:
   310                           	callstack 0
   311                           
   312                           ; Initialize objects allocated to COMRAM (1 bytes)
   313                           ; load TBLPTR registers with __pidataCOMRAM
   314   001316  0EA4               	movlw	low __pidataCOMRAM
   315   001318  6EF6               	movwf	tblptrl,c
   316   00131A  0E14               	movlw	high __pidataCOMRAM
   317   00131C  6EF7               	movwf	tblptrh,c
   318   00131E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   319   001320  6EF8               	movwf	tblptru,c
   320   001322  0009               	tblrd		*+	;fetch initializer
   321   001324  CFF5 F05D          	movff	tablat,__pdataCOMRAM
   322                           
   323                           ; Clear objects allocated to BANK0 (60 bytes)
   324   001328  EE00  F060         	lfsr	0,__pbssBANK0
   325   00132C  0E3C               	movlw	60
   326   00132E                     clear_0:
   327   00132E  6AEE               	clrf	postinc0,c
   328   001330  06E8               	decf	wreg,f,c
   329   001332  E1FD               	bnz	clear_0
   330                           
   331                           ; Clear objects allocated to COMRAM (63 bytes)
   332   001334  EE00  F001         	lfsr	0,__pbssCOMRAM
   333   001338  0E3F               	movlw	63
   334   00133A                     clear_1:
   335   00133A  6AEE               	clrf	postinc0,c
   336   00133C  06E8               	decf	wreg,f,c
   337   00133E  E1FD               	bnz	clear_1
   338   001340                     end_of_initialization:
   339                           	callstack 0
   340   001340                     __end_of__initialization:
   341                           	callstack 0
   342   001340  0E00               	movlw	low (__Lsmallconst shr (0+16))
   343   001342  6EF8               	movwf	tblptru,c
   344   001344  0E0E               	movlw	high __Lsmallconst
   345   001346  6EF7               	movwf	tblptrh,c
   346   001348  0100               	movlb	0
   347   00134A  EFF5  F007         	goto	_main	;jump to C main() function
   348                           
   349                           	psect	bssCOMRAM
   350   000001                     __pbssCOMRAM:
   351                           	callstack 0
   352   000001                     _ldrReadings:
   353                           	callstack 0
   354   000001                     	ds	20
   355   000015                     _EUSART4RXbuf:
   356                           	callstack 0
   357   000015                     	ds	20
   358   000029                     _readingIndex:
   359                           	callstack 0
   360   000029                     	ds	1
   361   00002A                     _TxBufReadCnt:
   362                           	callstack 0
   363   00002A                     	ds	1
   364   00002B                     _TxBufWriteCnt:
   365                           	callstack 0
   366   00002B                     	ds	1
   367   00002C                     _RxBufReadCnt:
   368                           	callstack 0
   369   00002C                     	ds	1
   370   00002D                     _RxBufWriteCnt:
   371                           	callstack 0
   372   00002D                     	ds	1
   373   00002E                     _motorR:
   374                           	callstack 0
   375   00002E                     	ds	9
   376   000037                     _motorL:
   377                           	callstack 0
   378   000037                     	ds	9
   379                           
   380                           	psect	dataCOMRAM
   381   00005D                     __pdataCOMRAM:
   382                           	callstack 0
   383   00005D                     _dataFlag:
   384                           	callstack 0
   385   00005D                     	ds	1
   386                           
   387                           	psect	bssBANK0
   388   000060                     __pbssBANK0:
   389                           	callstack 0
   390   000060                     _EUSART4TXbuf:
   391                           	callstack 0
   392   000060                     	ds	60
   393                           
   394                           	psect	cstackCOMRAM
   395   000040                     __pcstackCOMRAM:
   396                           	callstack 0
   397   000040                     ??_I2C_2_Master_Idle:
   398   000040                     ?___wmul:
   399                           	callstack 0
   400   000040                     initDCmotorsPWM@PWMperiod:
   401                           	callstack 0
   402   000040                     ___wmul@multiplier:
   403                           	callstack 0
   404                           
   405                           ; 2 bytes @ 0x0
   406   000040                     	ds	1
   407   000041                     I2C_2_Master_Write@data_byte:
   408                           	callstack 0
   409                           
   410                           ; 1 bytes @ 0x1
   411   000041                     	ds	1
   412   000042                     color_writetoaddr@value:
   413                           	callstack 0
   414   000042                     ___wmul@multiplicand:
   415                           	callstack 0
   416                           
   417                           ; 2 bytes @ 0x2
   418   000042                     	ds	1
   419   000043                     color_writetoaddr@address:
   420                           	callstack 0
   421                           
   422                           ; 1 bytes @ 0x3
   423   000043                     	ds	1
   424   000044                     ??_color_click_init:
   425   000044                     ___wmul@product:
   426                           	callstack 0
   427                           
   428                           ; 2 bytes @ 0x4
   429   000044                     	ds	2
   430   000046                     ?___lwdiv:
   431                           	callstack 0
   432   000046                     ___lwdiv@dividend:
   433                           	callstack 0
   434                           
   435                           ; 2 bytes @ 0x6
   436   000046                     	ds	2
   437   000048                     ___lwdiv@divisor:
   438                           	callstack 0
   439                           
   440                           ; 2 bytes @ 0x8
   441   000048                     	ds	2
   442   00004A                     ___lwdiv@quotient:
   443                           	callstack 0
   444                           
   445                           ; 2 bytes @ 0xA
   446   00004A                     	ds	2
   447   00004C                     ___lwdiv@counter:
   448                           	callstack 0
   449                           
   450                           ; 1 bytes @ 0xC
   451   00004C                     	ds	1
   452   00004D                     setMotorPWM@m:
   453                           	callstack 0
   454                           
   455                           ; 1 bytes @ 0xD
   456   00004D                     	ds	1
   457   00004E                     ??_setMotorPWM:
   458                           
   459                           ; 1 bytes @ 0xE
   460   00004E                     	ds	2
   461   000050                     setMotorPWM@posDuty:
   462                           	callstack 0
   463                           
   464                           ; 1 bytes @ 0x10
   465   000050                     	ds	1
   466   000051                     setMotorPWM@negDuty:
   467                           	callstack 0
   468                           
   469                           ; 1 bytes @ 0x11
   470   000051                     	ds	1
   471   000052                     stop@mL:
   472                           	callstack 0
   473   000052                     turnRight@mL:
   474                           	callstack 0
   475                           
   476                           ; 1 bytes @ 0x12
   477   000052                     	ds	1
   478   000053                     stop@mR:
   479                           	callstack 0
   480   000053                     turnRight@mR:
   481                           	callstack 0
   482                           
   483                           ; 1 bytes @ 0x13
   484   000053                     	ds	1
   485   000054                     ??_stop:
   486   000054                     ??_turnRight:
   487                           
   488                           ; 1 bytes @ 0x14
   489   000054                     	ds	1
   490   000055                     turnRight@i:
   491                           	callstack 0
   492                           
   493                           ; 2 bytes @ 0x15
   494   000055                     	ds	2
   495   000057                     right90@mL:
   496                           	callstack 0
   497                           
   498                           ; 1 bytes @ 0x17
   499   000057                     	ds	1
   500   000058                     right90@mR:
   501                           	callstack 0
   502                           
   503                           ; 1 bytes @ 0x18
   504   000058                     	ds	1
   505   000059                     ??_right90:
   506                           
   507                           ; 1 bytes @ 0x19
   508   000059                     	ds	2
   509   00005B                     ??_main:
   510                           
   511                           ; 1 bytes @ 0x1B
   512   00005B                     	ds	2
   513                           
   514 ;;
   515 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   516 ;;
   517 ;; *************** function _main *****************
   518 ;; Defined at:
   519 ;;		line 28 in file "main.c"
   520 ;; Parameters:    Size  Location     Type
   521 ;;		None
   522 ;; Auto vars:     Size  Location     Type
   523 ;;  PWMcycle        2    0        unsigned int 
   524 ;;  clear           2    0        unsigned int 
   525 ;;  green           2    0        unsigned int 
   526 ;;  blue            2    0        unsigned int 
   527 ;;  red             2    0        unsigned int 
   528 ;;  battery_leve    2    0        unsigned int 
   529 ;; Return value:  Size  Location     Type
   530 ;;                  1    wreg      void 
   531 ;; Registers used:
   532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   533 ;; Tracked objects:
   534 ;;		On entry : 0/0
   535 ;;		On exit  : 0/0
   536 ;;		Unchanged: 0/0
   537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   540 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   541 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   542 ;;Total ram usage:        2 bytes
   543 ;; Hardware stack levels required when called: 4
   544 ;; This function calls:
   545 ;;		_ADC_init
   546 ;;		_color_click_init
   547 ;;		_initDCmotorsPWM
   548 ;;		_initUSART4
   549 ;;		_right90
   550 ;; This function is called by:
   551 ;;		Startup code after reset
   552 ;; This function uses a non-reentrant model
   553 ;;
   554                           
   555                           	psect	text0
   556   000FEA                     __ptext0:
   557                           	callstack 0
   558   000FEA                     _main:
   559                           	callstack 27
   560   000FEA                     
   561                           ;main.c: 30:     ADC_init();
   562   000FEA  EC35  F00A         	call	_ADC_init	;wreg free
   563   000FEE                     
   564                           ;main.c: 31:     color_click_init();
   565   000FEE  ECA7  F009         	call	_color_click_init	;wreg free
   566   000FF2                     
   567                           ;main.c: 32:     initUSART4();
   568   000FF2  EC26  F00A         	call	_initUSART4	;wreg free
   569   000FF6                     
   570                           ;main.c: 36:     initDCmotorsPWM(PWMcycle);
   571   000FF6  0E00               	movlw	0
   572   000FF8  6E41               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   573   000FFA  0E63               	movlw	99
   574   000FFC  6E40               	movwf	initDCmotorsPWM@PWMperiod^0,c
   575   000FFE  EC83  F008         	call	_initDCmotorsPWM	;wreg free
   576   001002                     
   577                           ;main.c: 39:     motorL.power = 0;
   578   001002  0E00               	movlw	0
   579   001004  6E37               	movwf	_motorL^0,c
   580   001006                     
   581                           ;main.c: 40:     motorL.direction = 1;
   582   001006  0E01               	movlw	1
   583   001008  6E38               	movwf	(_motorL+1)^0,c
   584   00100A                     
   585                           ;main.c: 41:     motorL.brakemode = 1;
   586   00100A  0E01               	movlw	1
   587   00100C  6E39               	movwf	(_motorL+2)^0,c
   588   00100E                     
   589                           ;main.c: 42:     motorL.PWMperiod = PWMcycle;
   590   00100E  0E00               	movlw	0
   591   001010  6E3B               	movwf	(_motorL+4)^0,c
   592   001012  0E63               	movlw	99
   593   001014  6E3A               	movwf	(_motorL+3)^0,c
   594   001016                     
   595                           ;main.c: 43:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   596   001016  0EAA               	movlw	170
   597   001018  6E3C               	movwf	(_motorL+5)^0,c
   598   00101A  0E0F               	movlw	15
   599   00101C  6E3D               	movwf	(_motorL+6)^0,c
   600   00101E                     
   601                           ;main.c: 44:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   602   00101E  0EA6               	movlw	166
   603   001020  6E3E               	movwf	(_motorL+7)^0,c
   604   001022  0E0F               	movlw	15
   605   001024  6E3F               	movwf	(_motorL+8)^0,c
   606   001026                     
   607                           ;main.c: 46:     motorR.power = 0;
   608   001026  0E00               	movlw	0
   609   001028  6E2E               	movwf	_motorR^0,c
   610   00102A                     
   611                           ;main.c: 47:     motorR.direction = 1;
   612   00102A  0E01               	movlw	1
   613   00102C  6E2F               	movwf	(_motorR+1)^0,c
   614   00102E                     
   615                           ;main.c: 48:     motorR.brakemode = 1;
   616   00102E  0E01               	movlw	1
   617   001030  6E30               	movwf	(_motorR+2)^0,c
   618   001032                     
   619                           ;main.c: 49:     motorR.PWMperiod = PWMcycle;
   620   001032  0E00               	movlw	0
   621   001034  6E32               	movwf	(_motorR+4)^0,c
   622   001036  0E63               	movlw	99
   623   001038  6E31               	movwf	(_motorR+3)^0,c
   624                           
   625                           ;main.c: 50:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   626   00103A  0E25               	movlw	37
   627   00103C  6E33               	movwf	(_motorR+5)^0,c
   628   00103E  0E0F               	movlw	15
   629   001040  6E34               	movwf	(_motorR+6)^0,c
   630                           
   631                           ;main.c: 51:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   632   001042  0E21               	movlw	33
   633   001044  6E35               	movwf	(_motorR+7)^0,c
   634   001046  0E0F               	movlw	15
   635   001048  6E36               	movwf	(_motorR+8)^0,c
   636   00104A                     
   637                           ;main.c: 54:     LATDbits.LATD7=0;
   638   00104A  9E7C               	bcf	124,7,c	;volatile
   639   00104C                     
   640                           ;main.c: 55:     TRISDbits.TRISD7=0;
   641   00104C  9E84               	bcf	132,7,c	;volatile
   642   00104E                     
   643                           ;main.c: 59:     TRISGbits.TRISG0 = 0;
   644   00104E  9087               	bcf	135,0,c	;volatile
   645   001050                     
   646                           ;main.c: 60:     LATGbits.LATG0 = 0;
   647   001050  907F               	bcf	127,0,c	;volatile
   648   001052                     
   649                           ;main.c: 61:     TRISEbits.TRISE7 = 0;
   650   001052  9E85               	bcf	133,7,c	;volatile
   651   001054                     
   652                           ;main.c: 62:     LATEbits.LATE7 = 0;
   653   001054  9E7D               	bcf	125,7,c	;volatile
   654   001056                     
   655                           ;main.c: 63:     TRISAbits.TRISA3 = 0;
   656   001056  9681               	bcf	129,3,c	;volatile
   657   001058                     
   658                           ;main.c: 64:     LATAbits.LATA3 = 0;
   659   001058  9679               	bcf	121,3,c	;volatile
   660   00105A                     
   661                           ;main.c: 69:     TRISFbits.TRISF3=1;
   662   00105A  8686               	bsf	134,3,c	;volatile
   663   00105C                     
   664                           ;main.c: 70:     ANSELFbits.ANSELF3=0;
   665   00105C  010E               	movlb	14	; () banked
   666   00105E  97B4               	bcf	180,3,b	;volatile
   667   001060                     l2058:
   668                           
   669                           ;main.c: 83:         if (!PORTFbits.RF3) {
   670   001060  B68E               	btfsc	142,3,c	;volatile
   671   001062  EF35  F008         	goto	u611
   672   001066  EF37  F008         	goto	u610
   673   00106A                     u611:
   674   00106A  EF30  F008         	goto	l2058
   675   00106E                     u610:
   676   00106E                     
   677                           ;main.c: 84:             _delay((unsigned long)((500)*(64000000/4000.0)));
   678   00106E  0E29               	movlw	41
   679   001070  6E5C               	movwf	(??_main+1)^0,c
   680   001072  0E96               	movlw	150
   681   001074  6E5B               	movwf	??_main^0,c
   682   001076  0E7F               	movlw	127
   683   001078                     u667:
   684   001078  2EE8               	decfsz	wreg,f,c
   685   00107A  D7FE               	bra	u667
   686   00107C  2E5B               	decfsz	??_main^0,f,c
   687   00107E  D7FC               	bra	u667
   688   001080  2E5C               	decfsz	(??_main+1)^0,f,c
   689   001082  D7FA               	bra	u667
   690   001084  0000               	nop	
   691   001086                     
   692                           ;main.c: 85:             right90(&motorL, &motorR);
   693   001086  0E37               	movlw	low _motorL
   694   001088  6E57               	movwf	right90@mL^0,c
   695   00108A  0E2E               	movlw	low _motorR
   696   00108C  6E58               	movwf	right90@mR^0,c
   697   00108E  ECC1  F009         	call	_right90	;wreg free
   698   001092                     
   699                           ;main.c: 86:             _delay((unsigned long)((100)*(64000000/4000.0)));
   700   001092  0E09               	movlw	9
   701   001094  6E5C               	movwf	(??_main+1)^0,c
   702   001096  0E1E               	movlw	30
   703   001098  6E5B               	movwf	??_main^0,c
   704   00109A  0EE4               	movlw	228
   705   00109C                     u677:
   706   00109C  2EE8               	decfsz	wreg,f,c
   707   00109E  D7FE               	bra	u677
   708   0010A0  2E5B               	decfsz	??_main^0,f,c
   709   0010A2  D7FC               	bra	u677
   710   0010A4  2E5C               	decfsz	(??_main+1)^0,f,c
   711   0010A6  D7FA               	bra	u677
   712   0010A8  D000               	nop2	
   713                           
   714                           ;main.c: 87:             right90(&motorL, &motorR);
   715   0010AA  0E37               	movlw	low _motorL
   716   0010AC  6E57               	movwf	right90@mL^0,c
   717   0010AE  0E2E               	movlw	low _motorR
   718   0010B0  6E58               	movwf	right90@mR^0,c
   719   0010B2  ECC1  F009         	call	_right90	;wreg free
   720   0010B6                     
   721                           ;main.c: 88:             _delay((unsigned long)((100)*(64000000/4000.0)));
   722   0010B6  0E09               	movlw	9
   723   0010B8  6E5C               	movwf	(??_main+1)^0,c
   724   0010BA  0E1E               	movlw	30
   725   0010BC  6E5B               	movwf	??_main^0,c
   726   0010BE  0EE4               	movlw	228
   727   0010C0                     u687:
   728   0010C0  2EE8               	decfsz	wreg,f,c
   729   0010C2  D7FE               	bra	u687
   730   0010C4  2E5B               	decfsz	??_main^0,f,c
   731   0010C6  D7FC               	bra	u687
   732   0010C8  2E5C               	decfsz	(??_main+1)^0,f,c
   733   0010CA  D7FA               	bra	u687
   734   0010CC  D000               	nop2	
   735   0010CE                     
   736                           ;main.c: 89:             right90(&motorL, &motorR);
   737   0010CE  0E37               	movlw	low _motorL
   738   0010D0  6E57               	movwf	right90@mL^0,c
   739   0010D2  0E2E               	movlw	low _motorR
   740   0010D4  6E58               	movwf	right90@mR^0,c
   741   0010D6  ECC1  F009         	call	_right90	;wreg free
   742                           
   743                           ;main.c: 90:             _delay((unsigned long)((100)*(64000000/4000.0)));
   744   0010DA  0E09               	movlw	9
   745   0010DC  6E5C               	movwf	(??_main+1)^0,c
   746   0010DE  0E1E               	movlw	30
   747   0010E0  6E5B               	movwf	??_main^0,c
   748   0010E2  0EE4               	movlw	228
   749   0010E4                     u697:
   750   0010E4  2EE8               	decfsz	wreg,f,c
   751   0010E6  D7FE               	bra	u697
   752   0010E8  2E5B               	decfsz	??_main^0,f,c
   753   0010EA  D7FC               	bra	u697
   754   0010EC  2E5C               	decfsz	(??_main+1)^0,f,c
   755   0010EE  D7FA               	bra	u697
   756   0010F0  D000               	nop2	
   757   0010F2                     
   758                           ;main.c: 91:             right90(&motorL, &motorR);
   759   0010F2  0E37               	movlw	low _motorL
   760   0010F4  6E57               	movwf	right90@mL^0,c
   761   0010F6  0E2E               	movlw	low _motorR
   762   0010F8  6E58               	movwf	right90@mR^0,c
   763   0010FA  ECC1  F009         	call	_right90	;wreg free
   764   0010FE  EF30  F008         	goto	l2058
   765   001102  EF00  F000         	goto	start
   766   001106                     __end_of_main:
   767                           	callstack 0
   768                           
   769 ;; *************** function _right90 *****************
   770 ;; Defined at:
   771 ;;		line 193 in file "dc_motor.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;  mL              1   23[COMRAM] PTR struct DC_motor
   774 ;;		 -> motorL(9), 
   775 ;;  mR              1   24[COMRAM] PTR struct DC_motor
   776 ;;		 -> motorR(9), 
   777 ;; Auto vars:     Size  Location     Type
   778 ;;		None
   779 ;; Return value:  Size  Location     Type
   780 ;;                  1    wreg      void 
   781 ;; Registers used:
   782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   783 ;; Tracked objects:
   784 ;;		On entry : 0/0
   785 ;;		On exit  : 0/0
   786 ;;		Unchanged: 0/0
   787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   788 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   790 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   791 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   792 ;;Total ram usage:        4 bytes
   793 ;; Hardware stack levels used: 1
   794 ;; Hardware stack levels required when called: 3
   795 ;; This function calls:
   796 ;;		_stop
   797 ;;		_turnRight
   798 ;; This function is called by:
   799 ;;		_main
   800 ;;		_moveRed
   801 ;;		_moveYellow
   802 ;; This function uses a non-reentrant model
   803 ;;
   804                           
   805                           	psect	text1
   806   001382                     __ptext1:
   807                           	callstack 0
   808   001382                     _right90:
   809                           	callstack 27
   810   001382                     
   811                           ;dc_motor.c: 193: void right90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     turnRight(mL,mR);
   812   001382  C057  F052         	movff	right90@mL,turnRight@mL
   813   001386  C058  F053         	movff	right90@mR,turnRight@mR
   814   00138A  EC12  F009         	call	_turnRight	;wreg free
   815   00138E                     
   816                           ;dc_motor.c: 196:     _delay((unsigned long)((235)*(64000000/4000.0)));
   817   00138E  0E14               	movlw	20
   818   001390  6E5A               	movwf	(??_right90+1)^0,c
   819   001392  0E14               	movlw	20
   820   001394  6E59               	movwf	??_right90^0,c
   821   001396  0E0E               	movlw	14
   822   001398                     u707:
   823   001398  2EE8               	decfsz	wreg,f,c
   824   00139A  D7FE               	bra	u707
   825   00139C  2E59               	decfsz	??_right90^0,f,c
   826   00139E  D7FC               	bra	u707
   827   0013A0  2E5A               	decfsz	(??_right90+1)^0,f,c
   828   0013A2  D7FA               	bra	u707
   829   0013A4  D000               	nop2	
   830   0013A6                     
   831                           ;dc_motor.c: 197:     stop(mL,mR);
   832   0013A6  C057  F052         	movff	right90@mL,stop@mL
   833   0013AA  C058  F053         	movff	right90@mR,stop@mR
   834   0013AE  ECCB  F008         	call	_stop	;wreg free
   835   0013B2  0012               	return		;funcret
   836   0013B4                     __end_of_right90:
   837                           	callstack 0
   838                           
   839 ;; *************** function _turnRight *****************
   840 ;; Defined at:
   841 ;;		line 125 in file "dc_motor.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   844 ;;		 -> motorL(9), 
   845 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   846 ;;		 -> motorR(9), 
   847 ;; Auto vars:     Size  Location     Type
   848 ;;  i               2   21[COMRAM] unsigned int 
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      void 
   851 ;; Registers used:
   852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   858 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   859 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   860 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   861 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   862 ;;Total ram usage:        5 bytes
   863 ;; Hardware stack levels used: 1
   864 ;; Hardware stack levels required when called: 2
   865 ;; This function calls:
   866 ;;		_setMotorPWM
   867 ;; This function is called by:
   868 ;;		_right90
   869 ;;		_right135
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           	psect	text2
   874   001224                     __ptext2:
   875                           	callstack 0
   876   001224                     _turnRight:
   877                           	callstack 27
   878   001224                     
   879                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
   880   001224  5052               	movf	turnRight@mL^0,w,c
   881   001226  6ED9               	movwf	fsr2l,c
   882   001228  6ADA               	clrf	fsr2h,c
   883   00122A  0E01               	movlw	1
   884   00122C  26D9               	addwf	fsr2l,f,c
   885   00122E  0E01               	movlw	1
   886   001230  6EDF               	movwf	indf2,c
   887                           
   888                           ;dc_motor.c: 129:     mR->direction = 0;
   889   001232  5053               	movf	turnRight@mR^0,w,c
   890   001234  6ED9               	movwf	fsr2l,c
   891   001236  6ADA               	clrf	fsr2h,c
   892   001238  0E01               	movlw	1
   893   00123A  26D9               	addwf	fsr2l,f,c
   894   00123C  6ADF               	clrf	indf2,c
   895   00123E                     
   896                           ;dc_motor.c: 131:     setMotorPWM(mL);
   897   00123E  C052  F04D         	movff	turnRight@mL,setMotorPWM@m
   898   001242  EC4B  F007         	call	_setMotorPWM	;wreg free
   899   001246                     
   900                           ;dc_motor.c: 132:     setMotorPWM(mR);
   901   001246  C053  F04D         	movff	turnRight@mR,setMotorPWM@m
   902   00124A  EC4B  F007         	call	_setMotorPWM	;wreg free
   903   00124E                     
   904                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
   905   00124E  0E00               	movlw	0
   906   001250  6E56               	movwf	(turnRight@i+1)^0,c
   907   001252  0E00               	movlw	0
   908   001254  6E55               	movwf	turnRight@i^0,c
   909   001256                     l1826:
   910                           
   911                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
   912   001256  5052               	movf	turnRight@mL^0,w,c
   913   001258  6ED9               	movwf	fsr2l,c
   914   00125A  6ADA               	clrf	fsr2h,c
   915   00125C  2ADF               	incf	indf2,f,c
   916                           
   917                           ;dc_motor.c: 136:         mR->power++;
   918   00125E  5053               	movf	turnRight@mR^0,w,c
   919   001260  6ED9               	movwf	fsr2l,c
   920   001262  6ADA               	clrf	fsr2h,c
   921   001264  2ADF               	incf	indf2,f,c
   922   001266                     
   923                           ;dc_motor.c: 137:         setMotorPWM(mL);
   924   001266  C052  F04D         	movff	turnRight@mL,setMotorPWM@m
   925   00126A  EC4B  F007         	call	_setMotorPWM	;wreg free
   926   00126E                     
   927                           ;dc_motor.c: 138:         setMotorPWM(mR);
   928   00126E  C053  F04D         	movff	turnRight@mR,setMotorPWM@m
   929   001272  EC4B  F007         	call	_setMotorPWM	;wreg free
   930   001276                     
   931                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
   932   001276  0E0B               	movlw	11
   933   001278  6E54               	movwf	??_turnRight^0,c
   934   00127A  0E62               	movlw	98
   935   00127C                     u717:
   936   00127C  2EE8               	decfsz	wreg,f,c
   937   00127E  D7FE               	bra	u717
   938   001280  2E54               	decfsz	??_turnRight^0,f,c
   939   001282  D7FC               	bra	u717
   940   001284  D000               	nop2	
   941   001286                     
   942                           ;dc_motor.c: 140:     }
   943   001286  4A55               	infsnz	turnRight@i^0,f,c
   944   001288  2A56               	incf	(turnRight@i+1)^0,f,c
   945   00128A  5056               	movf	(turnRight@i+1)^0,w,c
   946   00128C  E109               	bnz	u500
   947   00128E  0E32               	movlw	50
   948   001290  5C55               	subwf	turnRight@i^0,w,c
   949   001292  A0D8               	btfss	status,0,c
   950   001294  EF4E  F009         	goto	u501
   951   001298  EF50  F009         	goto	u500
   952   00129C                     u501:
   953   00129C  EF2B  F009         	goto	l1826
   954   0012A0                     u500:
   955   0012A0  0012               	return		;funcret
   956   0012A2                     __end_of_turnRight:
   957                           	callstack 0
   958                           
   959 ;; *************** function _stop *****************
   960 ;; Defined at:
   961 ;;		line 88 in file "dc_motor.c"
   962 ;; Parameters:    Size  Location     Type
   963 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   964 ;;		 -> motorL(9), 
   965 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   966 ;;		 -> motorR(9), 
   967 ;; Auto vars:     Size  Location     Type
   968 ;;		None
   969 ;; Return value:  Size  Location     Type
   970 ;;                  1    wreg      void 
   971 ;; Registers used:
   972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   973 ;; Tracked objects:
   974 ;;		On entry : 0/0
   975 ;;		On exit  : 0/0
   976 ;;		Unchanged: 0/0
   977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   978 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   980 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   981 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   982 ;;Total ram usage:        3 bytes
   983 ;; Hardware stack levels used: 1
   984 ;; Hardware stack levels required when called: 2
   985 ;; This function calls:
   986 ;;		_setMotorPWM
   987 ;; This function is called by:
   988 ;;		_right90
   989 ;;		_left90
   990 ;;		_turn180
   991 ;;		_right135
   992 ;;		_left135
   993 ;;		_backHalf
   994 ;;		_backOneAndHalf
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998                           	psect	text3
   999   001196                     __ptext3:
  1000                           	callstack 0
  1001   001196                     _stop:
  1002                           	callstack 27
  1003   001196                     
  1004                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  1005   001196  EFFB  F008         	goto	l1786
  1006   00119A                     l1772:
  1007                           
  1008                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  1009   00119A  5052               	movf	stop@mL^0,w,c
  1010   00119C  6ED9               	movwf	fsr2l,c
  1011   00119E  6ADA               	clrf	fsr2h,c
  1012   0011A0  50DF               	movf	indf2,w,c
  1013   0011A2  B4D8               	btfsc	status,2,c
  1014   0011A4  EFD6  F008         	goto	u451
  1015   0011A8  EFD8  F008         	goto	u450
  1016   0011AC                     u451:
  1017   0011AC  EFDC  F008         	goto	l1776
  1018   0011B0                     u450:
  1019   0011B0  5052               	movf	stop@mL^0,w,c
  1020   0011B2  6ED9               	movwf	fsr2l,c
  1021   0011B4  6ADA               	clrf	fsr2h,c
  1022   0011B6  06DF               	decf	indf2,f,c
  1023   0011B8                     l1776:
  1024                           
  1025                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  1026   0011B8  5053               	movf	stop@mR^0,w,c
  1027   0011BA  6ED9               	movwf	fsr2l,c
  1028   0011BC  6ADA               	clrf	fsr2h,c
  1029   0011BE  50DF               	movf	indf2,w,c
  1030   0011C0  B4D8               	btfsc	status,2,c
  1031   0011C2  EFE5  F008         	goto	u461
  1032   0011C6  EFE7  F008         	goto	u460
  1033   0011CA                     u461:
  1034   0011CA  EFEB  F008         	goto	l1780
  1035   0011CE                     u460:
  1036   0011CE  5053               	movf	stop@mR^0,w,c
  1037   0011D0  6ED9               	movwf	fsr2l,c
  1038   0011D2  6ADA               	clrf	fsr2h,c
  1039   0011D4  06DF               	decf	indf2,f,c
  1040   0011D6                     l1780:
  1041                           
  1042                           ;dc_motor.c: 96:         setMotorPWM(mL);
  1043   0011D6  C052  F04D         	movff	stop@mL,setMotorPWM@m
  1044   0011DA  EC4B  F007         	call	_setMotorPWM	;wreg free
  1045   0011DE                     
  1046                           ;dc_motor.c: 97:         setMotorPWM(mR);
  1047   0011DE  C053  F04D         	movff	stop@mR,setMotorPWM@m
  1048   0011E2  EC4B  F007         	call	_setMotorPWM	;wreg free
  1049   0011E6                     
  1050                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  1051   0011E6  0E0B               	movlw	11
  1052   0011E8  6E54               	movwf	??_stop^0,c
  1053   0011EA  0E62               	movlw	98
  1054   0011EC                     u727:
  1055   0011EC  2EE8               	decfsz	wreg,f,c
  1056   0011EE  D7FE               	bra	u727
  1057   0011F0  2E54               	decfsz	??_stop^0,f,c
  1058   0011F2  D7FC               	bra	u727
  1059   0011F4  D000               	nop2	
  1060   0011F6                     l1786:
  1061                           
  1062                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  1063   0011F6  5052               	movf	stop@mL^0,w,c
  1064   0011F8  6ED9               	movwf	fsr2l,c
  1065   0011FA  6ADA               	clrf	fsr2h,c
  1066   0011FC  50DF               	movf	indf2,w,c
  1067   0011FE  A4D8               	btfss	status,2,c
  1068   001200  EF04  F009         	goto	u471
  1069   001204  EF06  F009         	goto	u470
  1070   001208                     u471:
  1071   001208  EFCD  F008         	goto	l1772
  1072   00120C                     u470:
  1073   00120C  5053               	movf	stop@mR^0,w,c
  1074   00120E  6ED9               	movwf	fsr2l,c
  1075   001210  6ADA               	clrf	fsr2h,c
  1076   001212  50DF               	movf	indf2,w,c
  1077   001214  A4D8               	btfss	status,2,c
  1078   001216  EF0F  F009         	goto	u481
  1079   00121A  EF11  F009         	goto	u480
  1080   00121E                     u481:
  1081   00121E  EFCD  F008         	goto	l1772
  1082   001222                     u480:
  1083   001222  0012               	return		;funcret
  1084   001224                     __end_of_stop:
  1085                           	callstack 0
  1086                           
  1087 ;; *************** function _setMotorPWM *****************
  1088 ;; Defined at:
  1089 ;;		line 65 in file "dc_motor.c"
  1090 ;; Parameters:    Size  Location     Type
  1091 ;;  m               1   13[COMRAM] PTR struct DC_motor
  1092 ;;		 -> motorR(9), motorL(9), 
  1093 ;; Auto vars:     Size  Location     Type
  1094 ;;  negDuty         1   17[COMRAM] unsigned char 
  1095 ;;  posDuty         1   16[COMRAM] unsigned char 
  1096 ;; Return value:  Size  Location     Type
  1097 ;;                  1    wreg      void 
  1098 ;; Registers used:
  1099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1100 ;; Tracked objects:
  1101 ;;		On entry : 0/0
  1102 ;;		On exit  : 0/0
  1103 ;;		Unchanged: 0/0
  1104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1105 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1106 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1107 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1108 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1109 ;;Total ram usage:        5 bytes
  1110 ;; Hardware stack levels used: 1
  1111 ;; Hardware stack levels required when called: 1
  1112 ;; This function calls:
  1113 ;;		___lwdiv
  1114 ;;		___wmul
  1115 ;; This function is called by:
  1116 ;;		_stop
  1117 ;;		_turnRight
  1118 ;;		_turnLeft
  1119 ;;		_fullSpeedAhead
  1120 ;;		_fullSpeedBack
  1121 ;; This function uses a non-reentrant model
  1122 ;;
  1123                           
  1124                           	psect	text4
  1125   000E96                     __ptext4:
  1126                           	callstack 0
  1127   000E96                     _setMotorPWM:
  1128                           	callstack 27
  1129   000E96                     
  1130                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  1131   000E96  504D               	movf	setMotorPWM@m^0,w,c
  1132   000E98  6ED9               	movwf	fsr2l,c
  1133   000E9A  6ADA               	clrf	fsr2h,c
  1134   000E9C  0E02               	movlw	2
  1135   000E9E  26D9               	addwf	fsr2l,f,c
  1136   000EA0  50DF               	movf	indf2,w,c
  1137   000EA2  B4D8               	btfsc	status,2,c
  1138   000EA4  EF56  F007         	goto	u431
  1139   000EA8  EF58  F007         	goto	u430
  1140   000EAC                     u431:
  1141   000EAC  EF88  F007         	goto	l1758
  1142   000EB0                     u430:
  1143   000EB0                     
  1144                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  1145   000EB0  504D               	movf	setMotorPWM@m^0,w,c
  1146   000EB2  6ED9               	movwf	fsr2l,c
  1147   000EB4  6ADA               	clrf	fsr2h,c
  1148   000EB6  50DF               	movf	indf2,w,c
  1149   000EB8  6E4E               	movwf	??_setMotorPWM^0,c
  1150   000EBA  504E               	movf	??_setMotorPWM^0,w,c
  1151   000EBC  6E40               	movwf	___wmul@multiplier^0,c
  1152   000EBE  6A41               	clrf	(___wmul@multiplier+1)^0,c
  1153   000EC0  504D               	movf	setMotorPWM@m^0,w,c
  1154   000EC2  6ED9               	movwf	fsr2l,c
  1155   000EC4  6ADA               	clrf	fsr2h,c
  1156   000EC6  0E03               	movlw	3
  1157   000EC8  26D9               	addwf	fsr2l,f,c
  1158   000ECA  CFDE F042          	movff	postinc2,___wmul@multiplicand
  1159   000ECE  CFDD F043          	movff	postdec2,___wmul@multiplicand+1
  1160   000ED2  EC03  F00A         	call	___wmul	;wreg free
  1161   000ED6  C040  F046         	movff	?___wmul,___lwdiv@dividend
  1162   000EDA  C041  F047         	movff	?___wmul+1,___lwdiv@dividend+1
  1163   000EDE  0E00               	movlw	0
  1164   000EE0  6E49               	movwf	(___lwdiv@divisor+1)^0,c
  1165   000EE2  0E64               	movlw	100
  1166   000EE4  6E48               	movwf	___lwdiv@divisor^0,c
  1167   000EE6  EC51  F009         	call	___lwdiv	;wreg free
  1168   000EEA  504D               	movf	setMotorPWM@m^0,w,c
  1169   000EEC  6ED9               	movwf	fsr2l,c
  1170   000EEE  6ADA               	clrf	fsr2h,c
  1171   000EF0  0E03               	movlw	3
  1172   000EF2  26D9               	addwf	fsr2l,f,c
  1173   000EF4  50DF               	movf	indf2,w,c
  1174   000EF6  6E4F               	movwf	(??_setMotorPWM+1)^0,c
  1175   000EF8  5046               	movf	?___lwdiv^0,w,c
  1176   000EFA  5C4F               	subwf	(??_setMotorPWM+1)^0,w,c
  1177   000EFC  6E50               	movwf	setMotorPWM@posDuty^0,c
  1178   000EFE                     
  1179                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  1180   000EFE  504D               	movf	setMotorPWM@m^0,w,c
  1181   000F00  6ED9               	movwf	fsr2l,c
  1182   000F02  6ADA               	clrf	fsr2h,c
  1183   000F04  0E03               	movlw	3
  1184   000F06  26D9               	addwf	fsr2l,f,c
  1185   000F08  50DF               	movf	indf2,w,c
  1186   000F0A  6E51               	movwf	setMotorPWM@negDuty^0,c
  1187                           
  1188                           ;dc_motor.c: 72:     }
  1189   000F0C  EFA9  F007         	goto	l1762
  1190   000F10                     l1758:
  1191                           
  1192                           ;dc_motor.c: 74:         posDuty=0;
  1193   000F10  0E00               	movlw	0
  1194   000F12  6E50               	movwf	setMotorPWM@posDuty^0,c
  1195   000F14                     
  1196                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1197   000F14  504D               	movf	setMotorPWM@m^0,w,c
  1198   000F16  6ED9               	movwf	fsr2l,c
  1199   000F18  6ADA               	clrf	fsr2h,c
  1200   000F1A  50DF               	movf	indf2,w,c
  1201   000F1C  6E4E               	movwf	??_setMotorPWM^0,c
  1202   000F1E  504E               	movf	??_setMotorPWM^0,w,c
  1203   000F20  6E40               	movwf	___wmul@multiplier^0,c
  1204   000F22  6A41               	clrf	(___wmul@multiplier+1)^0,c
  1205   000F24  504D               	movf	setMotorPWM@m^0,w,c
  1206   000F26  6ED9               	movwf	fsr2l,c
  1207   000F28  6ADA               	clrf	fsr2h,c
  1208   000F2A  0E03               	movlw	3
  1209   000F2C  26D9               	addwf	fsr2l,f,c
  1210   000F2E  CFDE F042          	movff	postinc2,___wmul@multiplicand
  1211   000F32  CFDD F043          	movff	postdec2,___wmul@multiplicand+1
  1212   000F36  EC03  F00A         	call	___wmul	;wreg free
  1213   000F3A  C040  F046         	movff	?___wmul,___lwdiv@dividend
  1214   000F3E  C041  F047         	movff	?___wmul+1,___lwdiv@dividend+1
  1215   000F42  0E00               	movlw	0
  1216   000F44  6E49               	movwf	(___lwdiv@divisor+1)^0,c
  1217   000F46  0E64               	movlw	100
  1218   000F48  6E48               	movwf	___lwdiv@divisor^0,c
  1219   000F4A  EC51  F009         	call	___lwdiv	;wreg free
  1220   000F4E  5046               	movf	?___lwdiv^0,w,c
  1221   000F50  6E51               	movwf	setMotorPWM@negDuty^0,c
  1222   000F52                     l1762:
  1223                           
  1224                           ;dc_motor.c: 78:     if (m->direction) {
  1225   000F52  504D               	movf	setMotorPWM@m^0,w,c
  1226   000F54  6ED9               	movwf	fsr2l,c
  1227   000F56  6ADA               	clrf	fsr2h,c
  1228   000F58  0E01               	movlw	1
  1229   000F5A  26D9               	addwf	fsr2l,f,c
  1230   000F5C  50DF               	movf	indf2,w,c
  1231   000F5E  B4D8               	btfsc	status,2,c
  1232   000F60  EFB4  F007         	goto	u441
  1233   000F64  EFB6  F007         	goto	u440
  1234   000F68                     u441:
  1235   000F68  EFD6  F007         	goto	l1766
  1236   000F6C                     u440:
  1237   000F6C                     
  1238                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  1239   000F6C  504D               	movf	setMotorPWM@m^0,w,c
  1240   000F6E  6ED9               	movwf	fsr2l,c
  1241   000F70  6ADA               	clrf	fsr2h,c
  1242   000F72  0E05               	movlw	5
  1243   000F74  26D9               	addwf	fsr2l,f,c
  1244   000F76  CFDE F04E          	movff	postinc2,??_setMotorPWM
  1245   000F7A  CFDD F04F          	movff	postdec2,??_setMotorPWM+1
  1246   000F7E  C04E  FFD9         	movff	??_setMotorPWM,fsr2l
  1247   000F82  C04F  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1248   000F86  C050  FFDF         	movff	setMotorPWM@posDuty,indf2
  1249                           
  1250                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  1251   000F8A  504D               	movf	setMotorPWM@m^0,w,c
  1252   000F8C  6ED9               	movwf	fsr2l,c
  1253   000F8E  6ADA               	clrf	fsr2h,c
  1254   000F90  0E07               	movlw	7
  1255   000F92  26D9               	addwf	fsr2l,f,c
  1256   000F94  CFDE F04E          	movff	postinc2,??_setMotorPWM
  1257   000F98  CFDD F04F          	movff	postdec2,??_setMotorPWM+1
  1258   000F9C  C04E  FFD9         	movff	??_setMotorPWM,fsr2l
  1259   000FA0  C04F  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1260   000FA4  C051  FFDF         	movff	setMotorPWM@negDuty,indf2
  1261                           
  1262                           ;dc_motor.c: 81:     } else {
  1263   000FA8  EFF4  F007         	goto	l269
  1264   000FAC                     l1766:
  1265                           
  1266                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  1267   000FAC  504D               	movf	setMotorPWM@m^0,w,c
  1268   000FAE  6ED9               	movwf	fsr2l,c
  1269   000FB0  6ADA               	clrf	fsr2h,c
  1270   000FB2  0E05               	movlw	5
  1271   000FB4  26D9               	addwf	fsr2l,f,c
  1272   000FB6  CFDE F04E          	movff	postinc2,??_setMotorPWM
  1273   000FBA  CFDD F04F          	movff	postdec2,??_setMotorPWM+1
  1274   000FBE  C04E  FFD9         	movff	??_setMotorPWM,fsr2l
  1275   000FC2  C04F  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1276   000FC6  C051  FFDF         	movff	setMotorPWM@negDuty,indf2
  1277                           
  1278                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  1279   000FCA  504D               	movf	setMotorPWM@m^0,w,c
  1280   000FCC  6ED9               	movwf	fsr2l,c
  1281   000FCE  6ADA               	clrf	fsr2h,c
  1282   000FD0  0E07               	movlw	7
  1283   000FD2  26D9               	addwf	fsr2l,f,c
  1284   000FD4  CFDE F04E          	movff	postinc2,??_setMotorPWM
  1285   000FD8  CFDD F04F          	movff	postdec2,??_setMotorPWM+1
  1286   000FDC  C04E  FFD9         	movff	??_setMotorPWM,fsr2l
  1287   000FE0  C04F  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1288   000FE4  C050  FFDF         	movff	setMotorPWM@posDuty,indf2
  1289   000FE8                     l269:
  1290   000FE8  0012               	return		;funcret
  1291   000FEA                     __end_of_setMotorPWM:
  1292                           	callstack 0
  1293                           
  1294 ;; *************** function ___wmul *****************
  1295 ;; Defined at:
  1296 ;;		line 15 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/Umul16.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;  multiplier      2    0[COMRAM] unsigned int 
  1299 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;  product         2    4[COMRAM] unsigned int 
  1302 ;; Return value:  Size  Location     Type
  1303 ;;                  2    0[COMRAM] unsigned int 
  1304 ;; Registers used:
  1305 ;;		wreg, status,2, status,0, prodl, prodh
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1311 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1312 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1314 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1315 ;;Total ram usage:        6 bytes
  1316 ;; Hardware stack levels used: 1
  1317 ;; This function calls:
  1318 ;;		Nothing
  1319 ;; This function is called by:
  1320 ;;		_setMotorPWM
  1321 ;;		_ADC2String
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           	psect	text5
  1326   001406                     __ptext5:
  1327                           	callstack 0
  1328   001406                     ___wmul:
  1329                           	callstack 27
  1330   001406  5040               	movf	___wmul@multiplier^0,w,c
  1331   001408  0242               	mulwf	___wmul@multiplicand^0,c
  1332   00140A  CFF3 F044          	movff	prodl,___wmul@product
  1333   00140E  CFF4 F045          	movff	prodh,___wmul@product+1
  1334   001412  5040               	movf	___wmul@multiplier^0,w,c
  1335   001414  0243               	mulwf	(___wmul@multiplicand+1)^0,c
  1336   001416  50F3               	movf	243,w,c
  1337   001418  2645               	addwf	(___wmul@product+1)^0,f,c
  1338   00141A  5041               	movf	(___wmul@multiplier+1)^0,w,c
  1339   00141C  0242               	mulwf	___wmul@multiplicand^0,c
  1340   00141E  50F3               	movf	243,w,c
  1341   001420  2645               	addwf	(___wmul@product+1)^0,f,c
  1342   001422  C044  F040         	movff	___wmul@product,?___wmul
  1343   001426  C045  F041         	movff	___wmul@product+1,?___wmul+1
  1344   00142A  0012               	return		;funcret
  1345   00142C                     __end_of___wmul:
  1346                           	callstack 0
  1347                           
  1348 ;; *************** function ___lwdiv *****************
  1349 ;; Defined at:
  1350 ;;		line 7 in file "/Applications/microchip/xc8/v2.45/pic/sources/c99/common/lwdiv.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;  dividend        2    6[COMRAM] unsigned int 
  1353 ;;  divisor         2    8[COMRAM] unsigned int 
  1354 ;; Auto vars:     Size  Location     Type
  1355 ;;  quotient        2   10[COMRAM] unsigned int 
  1356 ;;  counter         1   12[COMRAM] unsigned char 
  1357 ;; Return value:  Size  Location     Type
  1358 ;;                  2    6[COMRAM] unsigned int 
  1359 ;; Registers used:
  1360 ;;		wreg, status,2, status,0
  1361 ;; Tracked objects:
  1362 ;;		On entry : 0/0
  1363 ;;		On exit  : 0/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1366 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1367 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1369 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1370 ;;Total ram usage:        7 bytes
  1371 ;; Hardware stack levels used: 1
  1372 ;; This function calls:
  1373 ;;		Nothing
  1374 ;; This function is called by:
  1375 ;;		_setMotorPWM
  1376 ;;		_ADC2String
  1377 ;; This function uses a non-reentrant model
  1378 ;;
  1379                           
  1380                           	psect	text6
  1381   0012A2                     __ptext6:
  1382                           	callstack 0
  1383   0012A2                     ___lwdiv:
  1384                           	callstack 27
  1385   0012A2  0E00               	movlw	0
  1386   0012A4  6E4B               	movwf	(___lwdiv@quotient+1)^0,c
  1387   0012A6  0E00               	movlw	0
  1388   0012A8  6E4A               	movwf	___lwdiv@quotient^0,c
  1389   0012AA  5048               	movf	___lwdiv@divisor^0,w,c
  1390   0012AC  1049               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1391   0012AE  B4D8               	btfsc	status,2,c
  1392   0012B0  EF5C  F009         	goto	u401
  1393   0012B4  EF5E  F009         	goto	u400
  1394   0012B8                     u401:
  1395   0012B8  EF86  F009         	goto	l947
  1396   0012BC                     u400:
  1397   0012BC  0E01               	movlw	1
  1398   0012BE  6E4C               	movwf	___lwdiv@counter^0,c
  1399   0012C0  EF66  F009         	goto	l1738
  1400   0012C4                     l1736:
  1401   0012C4  90D8               	bcf	status,0,c
  1402   0012C6  3648               	rlcf	___lwdiv@divisor^0,f,c
  1403   0012C8  3649               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1404   0012CA  2A4C               	incf	___lwdiv@counter^0,f,c
  1405   0012CC                     l1738:
  1406   0012CC  AE49               	btfss	(___lwdiv@divisor+1)^0,7,c
  1407   0012CE  EF6B  F009         	goto	u411
  1408   0012D2  EF6D  F009         	goto	u410
  1409   0012D6                     u411:
  1410   0012D6  EF62  F009         	goto	l1736
  1411   0012DA                     u410:
  1412   0012DA                     l1740:
  1413   0012DA  90D8               	bcf	status,0,c
  1414   0012DC  364A               	rlcf	___lwdiv@quotient^0,f,c
  1415   0012DE  364B               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1416   0012E0  5048               	movf	___lwdiv@divisor^0,w,c
  1417   0012E2  5C46               	subwf	___lwdiv@dividend^0,w,c
  1418   0012E4  5049               	movf	(___lwdiv@divisor+1)^0,w,c
  1419   0012E6  5847               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1420   0012E8  A0D8               	btfss	status,0,c
  1421   0012EA  EF79  F009         	goto	u421
  1422   0012EE  EF7B  F009         	goto	u420
  1423   0012F2                     u421:
  1424   0012F2  EF80  F009         	goto	l1748
  1425   0012F6                     u420:
  1426   0012F6  5048               	movf	___lwdiv@divisor^0,w,c
  1427   0012F8  5E46               	subwf	___lwdiv@dividend^0,f,c
  1428   0012FA  5049               	movf	(___lwdiv@divisor+1)^0,w,c
  1429   0012FC  5A47               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1430   0012FE  804A               	bsf	___lwdiv@quotient^0,0,c
  1431   001300                     l1748:
  1432   001300  90D8               	bcf	status,0,c
  1433   001302  3249               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1434   001304  3248               	rrcf	___lwdiv@divisor^0,f,c
  1435   001306  2E4C               	decfsz	___lwdiv@counter^0,f,c
  1436   001308  EF6D  F009         	goto	l1740
  1437   00130C                     l947:
  1438   00130C  C04A  F046         	movff	___lwdiv@quotient,?___lwdiv
  1439   001310  C04B  F047         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1440   001314  0012               	return		;funcret
  1441   001316                     __end_of___lwdiv:
  1442                           	callstack 0
  1443                           
  1444 ;; *************** function _initUSART4 *****************
  1445 ;; Defined at:
  1446 ;;		line 14 in file "serial.c"
  1447 ;; Parameters:    Size  Location     Type
  1448 ;;		None
  1449 ;; Auto vars:     Size  Location     Type
  1450 ;;		None
  1451 ;; Return value:  Size  Location     Type
  1452 ;;                  1    wreg      void 
  1453 ;; Registers used:
  1454 ;;		wreg, status,2
  1455 ;; Tracked objects:
  1456 ;;		On entry : 0/0
  1457 ;;		On exit  : 0/0
  1458 ;;		Unchanged: 0/0
  1459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1464 ;;Total ram usage:        0 bytes
  1465 ;; Hardware stack levels used: 1
  1466 ;; This function calls:
  1467 ;;		Nothing
  1468 ;; This function is called by:
  1469 ;;		_main
  1470 ;; This function uses a non-reentrant model
  1471 ;;
  1472                           
  1473                           	psect	text7
  1474   00144C                     __ptext7:
  1475                           	callstack 0
  1476   00144C                     _initUSART4:
  1477                           	callstack 30
  1478   00144C                     
  1479                           ;serial.c: 15:     RC0PPS = 0x12;
  1480   00144C  0E12               	movlw	18
  1481   00144E  010E               	movlb	14	; () banked
  1482   001450  6F62               	movwf	98,b	;volatile
  1483                           
  1484                           ;serial.c: 16:     RX4PPS = 0x11;
  1485   001452  0E11               	movlw	17
  1486   001454  6F15               	movwf	21,b	;volatile
  1487   001456                     
  1488                           ; BSR set to: 14
  1489                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  1490   001456  97E9               	bcf	233,3,b	;volatile
  1491   001458                     
  1492                           ; BSR set to: 14
  1493                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  1494   001458  95E8               	bcf	232,2,b	;volatile
  1495                           
  1496                           ;serial.c: 19:     SP4BRGL = 51;
  1497   00145A  0E33               	movlw	51
  1498   00145C  6FE5               	movwf	229,b	;volatile
  1499                           
  1500                           ;serial.c: 20:     SP4BRGH = 0;
  1501   00145E  0E00               	movlw	0
  1502   001460  6FE6               	movwf	230,b	;volatile
  1503   001462                     
  1504                           ; BSR set to: 14
  1505                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  1506   001462  89E7               	bsf	231,4,b	;volatile
  1507   001464                     
  1508                           ; BSR set to: 14
  1509                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  1510   001464  8BE8               	bsf	232,5,b	;volatile
  1511   001466                     
  1512                           ; BSR set to: 14
  1513                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  1514   001466  8FE7               	bsf	231,7,b	;volatile
  1515   001468                     
  1516                           ; BSR set to: 14
  1517   001468  0012               	return		;funcret
  1518   00146A                     __end_of_initUSART4:
  1519                           	callstack 0
  1520                           
  1521 ;; *************** function _initDCmotorsPWM *****************
  1522 ;; Defined at:
  1523 ;;		line 5 in file "dc_motor.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;		None
  1528 ;; Return value:  Size  Location     Type
  1529 ;;                  1    wreg      void 
  1530 ;; Registers used:
  1531 ;;		wreg, status,2
  1532 ;; Tracked objects:
  1533 ;;		On entry : 0/0
  1534 ;;		On exit  : 0/0
  1535 ;;		Unchanged: 0/0
  1536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1537 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1540 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1541 ;;Total ram usage:        2 bytes
  1542 ;; Hardware stack levels used: 1
  1543 ;; This function calls:
  1544 ;;		Nothing
  1545 ;; This function is called by:
  1546 ;;		_main
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550                           	psect	text8
  1551   001106                     __ptext8:
  1552                           	callstack 0
  1553   001106                     _initDCmotorsPWM:
  1554                           	callstack 30
  1555   001106                     
  1556                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  1557   001106  9485               	bcf	133,2,c	;volatile
  1558                           
  1559                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  1560   001108  9E83               	bcf	131,7,c	;volatile
  1561                           
  1562                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1563   00110A  9885               	bcf	133,4,c	;volatile
  1564                           
  1565                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  1566   00110C  9C87               	bcf	135,6,c	;volatile
  1567                           
  1568                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  1569   00110E  947D               	bcf	125,2,c	;volatile
  1570                           
  1571                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  1572   001110  9E7B               	bcf	123,7,c	;volatile
  1573                           
  1574                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  1575   001112  987D               	bcf	125,4,c	;volatile
  1576                           
  1577                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  1578   001114  9C7F               	bcf	127,6,c	;volatile
  1579   001116                     
  1580                           ;dc_motor.c: 18:     RE2PPS=0x05;
  1581   001116  0E05               	movlw	5
  1582   001118  010E               	movlb	14	; () banked
  1583   00111A  6F74               	movwf	116,b	;volatile
  1584                           
  1585                           ;dc_motor.c: 19:     RE4PPS=0x06;
  1586   00111C  0E06               	movlw	6
  1587   00111E  6F76               	movwf	118,b	;volatile
  1588                           
  1589                           ;dc_motor.c: 20:     RC7PPS=0x07;
  1590   001120  0E07               	movlw	7
  1591   001122  6F69               	movwf	105,b	;volatile
  1592                           
  1593                           ;dc_motor.c: 21:     RG6PPS=0x08;
  1594   001124  0E08               	movlw	8
  1595   001126  6F88               	movwf	136,b	;volatile
  1596                           
  1597                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  1598   001128  50BD               	movf	189,w,c	;volatile
  1599   00112A  0B8F               	andlw	-113
  1600   00112C  0940               	iorlw	64
  1601   00112E  6EBD               	movwf	189,c	;volatile
  1602                           
  1603                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  1604   001130  0EE0               	movlw	-32
  1605   001132  16BE               	andwf	190,f,c	;volatile
  1606                           
  1607                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  1608   001134  50BF               	movf	191,w,c	;volatile
  1609   001136  0BF0               	andlw	-16
  1610   001138  0901               	iorlw	1
  1611   00113A  6EBF               	movwf	191,c	;volatile
  1612   00113C                     
  1613                           ; BSR set to: 14
  1614                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  1615   00113C  C040  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1616   001140                     
  1617                           ; BSR set to: 14
  1618                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  1619   001140  8EBD               	bsf	189,7,c	;volatile
  1620                           
  1621                           ;dc_motor.c: 35:     CCPR1H=0;
  1622   001142  0E00               	movlw	0
  1623   001144  6EAA               	movwf	170,c	;volatile
  1624                           
  1625                           ;dc_motor.c: 36:     CCPR2H=0;
  1626   001146  0E00               	movlw	0
  1627   001148  6EA6               	movwf	166,c	;volatile
  1628                           
  1629                           ;dc_motor.c: 37:     CCPR3H=0;
  1630   00114A  0E00               	movlw	0
  1631   00114C  010F               	movlb	15	; () banked
  1632   00114E  6F25               	movwf	37,b	;volatile
  1633                           
  1634                           ;dc_motor.c: 38:     CCPR4H=0;
  1635   001150  0E00               	movlw	0
  1636   001152  6F21               	movwf	33,b	;volatile
  1637                           
  1638                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1639   001154  0EFC               	movlw	-4
  1640   001156  16AD               	andwf	173,f,c	;volatile
  1641                           
  1642                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1643   001158  0EF3               	movlw	-13
  1644   00115A  16AD               	andwf	173,f,c	;volatile
  1645                           
  1646                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1647   00115C  0ECF               	movlw	-49
  1648   00115E  16AD               	andwf	173,f,c	;volatile
  1649                           
  1650                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1651   001160  0E3F               	movlw	-193
  1652   001162  16AD               	andwf	173,f,c	;volatile
  1653   001164                     
  1654                           ; BSR set to: 15
  1655                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  1656   001164  88AB               	bsf	171,4,c	;volatile
  1657                           
  1658                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  1659   001166  50AB               	movf	171,w,c	;volatile
  1660   001168  0BF0               	andlw	-16
  1661   00116A  090C               	iorlw	12
  1662   00116C  6EAB               	movwf	171,c	;volatile
  1663   00116E                     
  1664                           ; BSR set to: 15
  1665                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  1666   00116E  8EAB               	bsf	171,7,c	;volatile
  1667   001170                     
  1668                           ; BSR set to: 15
  1669                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  1670   001170  88A7               	bsf	167,4,c	;volatile
  1671                           
  1672                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  1673   001172  50A7               	movf	167,w,c	;volatile
  1674   001174  0BF0               	andlw	-16
  1675   001176  090C               	iorlw	12
  1676   001178  6EA7               	movwf	167,c	;volatile
  1677   00117A                     
  1678                           ; BSR set to: 15
  1679                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  1680   00117A  8EA7               	bsf	167,7,c	;volatile
  1681   00117C                     
  1682                           ; BSR set to: 15
  1683                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  1684   00117C  8926               	bsf	38,4,b	;volatile
  1685                           
  1686                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  1687   00117E  5126               	movf	38,w,b	;volatile
  1688   001180  0BF0               	andlw	-16
  1689   001182  090C               	iorlw	12
  1690   001184  6F26               	movwf	38,b	;volatile
  1691   001186                     
  1692                           ; BSR set to: 15
  1693                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  1694   001186  8F26               	bsf	38,7,b	;volatile
  1695   001188                     
  1696                           ; BSR set to: 15
  1697                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  1698   001188  8922               	bsf	34,4,b	;volatile
  1699                           
  1700                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  1701   00118A  5122               	movf	34,w,b	;volatile
  1702   00118C  0BF0               	andlw	-16
  1703   00118E  090C               	iorlw	12
  1704   001190  6F22               	movwf	34,b	;volatile
  1705   001192                     
  1706                           ; BSR set to: 15
  1707                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  1708   001192  8F22               	bsf	34,7,b	;volatile
  1709   001194                     
  1710                           ; BSR set to: 15
  1711   001194  0012               	return		;funcret
  1712   001196                     __end_of_initDCmotorsPWM:
  1713                           	callstack 0
  1714                           
  1715 ;; *************** function _color_click_init *****************
  1716 ;; Defined at:
  1717 ;;		line 6 in file "color.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;		None
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;		None
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  1    wreg      void 
  1724 ;; Registers used:
  1725 ;;		wreg, status,2, status,0, cstack
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1733 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1734 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1735 ;;Total ram usage:        1 bytes
  1736 ;; Hardware stack levels used: 1
  1737 ;; Hardware stack levels required when called: 3
  1738 ;; This function calls:
  1739 ;;		_I2C_2_Master_Init
  1740 ;;		_color_writetoaddr
  1741 ;; This function is called by:
  1742 ;;		_main
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746                           	psect	text9
  1747   00134E                     __ptext9:
  1748                           	callstack 0
  1749   00134E                     _color_click_init:
  1750                           	callstack 27
  1751   00134E                     
  1752                           ;color.c: 9:     I2C_2_Master_Init();
  1753   00134E  ECDA  F009         	call	_I2C_2_Master_Init	;wreg free
  1754   001352                     
  1755                           ;color.c: 12:   color_writetoaddr(0x00, 0x01);
  1756   001352  0E01               	movlw	1
  1757   001354  6E42               	movwf	color_writetoaddr@value^0,c
  1758   001356  0E00               	movlw	0
  1759   001358  EC16  F00A         	call	_color_writetoaddr
  1760   00135C                     
  1761                           ;color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1762   00135C  0E3F               	movlw	63
  1763   00135E  6E44               	movwf	??_color_click_init^0,c
  1764   001360  0E55               	movlw	85
  1765   001362                     u737:
  1766   001362  2EE8               	decfsz	wreg,f,c
  1767   001364  D7FE               	bra	u737
  1768   001366  2E44               	decfsz	??_color_click_init^0,f,c
  1769   001368  D7FC               	bra	u737
  1770   00136A  0000               	nop	
  1771   00136C                     
  1772                           ;color.c: 16:  color_writetoaddr(0x00, 0x03);
  1773   00136C  0E03               	movlw	3
  1774   00136E  6E42               	movwf	color_writetoaddr@value^0,c
  1775   001370  0E00               	movlw	0
  1776   001372  EC16  F00A         	call	_color_writetoaddr
  1777   001376                     
  1778                           ;color.c: 19:  color_writetoaddr(0x01, 0xD5);
  1779   001376  0ED5               	movlw	213
  1780   001378  6E42               	movwf	color_writetoaddr@value^0,c
  1781   00137A  0E01               	movlw	1
  1782   00137C  EC16  F00A         	call	_color_writetoaddr
  1783   001380  0012               	return		;funcret
  1784   001382                     __end_of_color_click_init:
  1785                           	callstack 0
  1786                           
  1787 ;; *************** function _color_writetoaddr *****************
  1788 ;; Defined at:
  1789 ;;		line 22 in file "color.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;  address         1    wreg     unsigned char 
  1792 ;;  value           1    2[COMRAM] unsigned char 
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;  address         1    3[COMRAM] unsigned char 
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  1    wreg      void 
  1797 ;; Registers used:
  1798 ;;		wreg, status,2, status,0, cstack
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1804 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1805 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1807 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1808 ;;Total ram usage:        2 bytes
  1809 ;; Hardware stack levels used: 1
  1810 ;; Hardware stack levels required when called: 2
  1811 ;; This function calls:
  1812 ;;		_I2C_2_Master_Start
  1813 ;;		_I2C_2_Master_Stop
  1814 ;;		_I2C_2_Master_Write
  1815 ;; This function is called by:
  1816 ;;		_color_click_init
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           	psect	text10
  1821   00142C                     __ptext10:
  1822                           	callstack 0
  1823   00142C                     _color_writetoaddr:
  1824                           	callstack 27
  1825                           
  1826                           ;incstack = 0
  1827                           ;color_writetoaddr@address stored from wreg
  1828   00142C  6E43               	movwf	color_writetoaddr@address^0,c
  1829   00142E                     
  1830                           ;color.c: 23:     I2C_2_Master_Start();
  1831   00142E  EC4D  F00A         	call	_I2C_2_Master_Start	;wreg free
  1832                           
  1833                           ;color.c: 24:     I2C_2_Master_Write(0x52 | 0x00);
  1834   001432  0E52               	movlw	82
  1835   001434  EC42  F00A         	call	_I2C_2_Master_Write
  1836                           
  1837                           ;color.c: 25:     I2C_2_Master_Write(0x80 | address);
  1838   001438  5043               	movf	color_writetoaddr@address^0,w,c
  1839   00143A  0980               	iorlw	128
  1840   00143C  EC42  F00A         	call	_I2C_2_Master_Write
  1841                           
  1842                           ;color.c: 26:     I2C_2_Master_Write(value);
  1843   001440  5042               	movf	color_writetoaddr@value^0,w,c
  1844   001442  EC42  F00A         	call	_I2C_2_Master_Write
  1845                           
  1846                           ;color.c: 27:     I2C_2_Master_Stop();
  1847   001446  EC48  F00A         	call	_I2C_2_Master_Stop	;wreg free
  1848   00144A  0012               	return		;funcret
  1849   00144C                     __end_of_color_writetoaddr:
  1850                           	callstack 0
  1851                           
  1852 ;; *************** function _I2C_2_Master_Write *****************
  1853 ;; Defined at:
  1854 ;;		line 45 in file "i2c.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;  data_byte       1    wreg     unsigned char 
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;  data_byte       1    1[COMRAM] unsigned char 
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  1    wreg      void 
  1861 ;; Registers used:
  1862 ;;		wreg, status,2, status,0, cstack
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1869 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1871 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1872 ;;Total ram usage:        1 bytes
  1873 ;; Hardware stack levels used: 1
  1874 ;; Hardware stack levels required when called: 1
  1875 ;; This function calls:
  1876 ;;		_I2C_2_Master_Idle
  1877 ;; This function is called by:
  1878 ;;		_color_writetoaddr
  1879 ;;		_color_read_Red
  1880 ;;		_color_read_Green
  1881 ;;		_color_read_Blue
  1882 ;;		_color_read_Clear
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text11
  1887   001484                     __ptext11:
  1888                           	callstack 0
  1889   001484                     _I2C_2_Master_Write:
  1890                           	callstack 27
  1891                           
  1892                           ;incstack = 0
  1893                           ;I2C_2_Master_Write@data_byte stored from wreg
  1894   001484  6E41               	movwf	I2C_2_Master_Write@data_byte^0,c
  1895   001486                     
  1896                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  1897   001486  ECEF  F009         	call	_I2C_2_Master_Idle	;wreg free
  1898   00148A                     
  1899                           ;i2c.c: 48:   SSP2BUF = data_byte;
  1900   00148A  C041  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  1901   00148E  0012               	return		;funcret
  1902   001490                     __end_of_I2C_2_Master_Write:
  1903                           	callstack 0
  1904                           
  1905 ;; *************** function _I2C_2_Master_Stop *****************
  1906 ;; Defined at:
  1907 ;;		line 39 in file "i2c.c"
  1908 ;; Parameters:    Size  Location     Type
  1909 ;;		None
  1910 ;; Auto vars:     Size  Location     Type
  1911 ;;		None
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  1    wreg      void 
  1914 ;; Registers used:
  1915 ;;		wreg, status,2, status,0, cstack
  1916 ;; Tracked objects:
  1917 ;;		On entry : 0/0
  1918 ;;		On exit  : 0/0
  1919 ;;		Unchanged: 0/0
  1920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1925 ;;Total ram usage:        0 bytes
  1926 ;; Hardware stack levels used: 1
  1927 ;; Hardware stack levels required when called: 1
  1928 ;; This function calls:
  1929 ;;		_I2C_2_Master_Idle
  1930 ;; This function is called by:
  1931 ;;		_color_writetoaddr
  1932 ;;		_color_read_Red
  1933 ;;		_color_read_Green
  1934 ;;		_color_read_Blue
  1935 ;;		_color_read_Clear
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939                           	psect	text12
  1940   001490                     __ptext12:
  1941                           	callstack 0
  1942   001490                     _I2C_2_Master_Stop:
  1943                           	callstack 27
  1944   001490                     
  1945                           ;i2c.c: 41:   I2C_2_Master_Idle();
  1946   001490  ECEF  F009         	call	_I2C_2_Master_Idle	;wreg free
  1947   001494                     
  1948                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  1949   001494  010E               	movlb	14	; () banked
  1950   001496  85DA               	bsf	218,2,b	;volatile
  1951   001498                     
  1952                           ; BSR set to: 14
  1953   001498  0012               	return		;funcret
  1954   00149A                     __end_of_I2C_2_Master_Stop:
  1955                           	callstack 0
  1956                           
  1957 ;; *************** function _I2C_2_Master_Start *****************
  1958 ;; Defined at:
  1959 ;;		line 27 in file "i2c.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;		None
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;		None
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  1    wreg      void 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0, cstack
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1977 ;;Total ram usage:        0 bytes
  1978 ;; Hardware stack levels used: 1
  1979 ;; Hardware stack levels required when called: 1
  1980 ;; This function calls:
  1981 ;;		_I2C_2_Master_Idle
  1982 ;; This function is called by:
  1983 ;;		_color_writetoaddr
  1984 ;;		_color_read_Red
  1985 ;;		_color_read_Green
  1986 ;;		_color_read_Blue
  1987 ;;		_color_read_Clear
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           	psect	text13
  1992   00149A                     __ptext13:
  1993                           	callstack 0
  1994   00149A                     _I2C_2_Master_Start:
  1995                           	callstack 27
  1996   00149A                     
  1997                           ;i2c.c: 29:   I2C_2_Master_Idle();
  1998   00149A  ECEF  F009         	call	_I2C_2_Master_Idle	;wreg free
  1999   00149E                     
  2000                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  2001   00149E  010E               	movlb	14	; () banked
  2002   0014A0  81DA               	bsf	218,0,b	;volatile
  2003   0014A2                     
  2004                           ; BSR set to: 14
  2005   0014A2  0012               	return		;funcret
  2006   0014A4                     __end_of_I2C_2_Master_Start:
  2007                           	callstack 0
  2008                           
  2009 ;; *************** function _I2C_2_Master_Idle *****************
  2010 ;; Defined at:
  2011 ;;		line 22 in file "i2c.c"
  2012 ;; Parameters:    Size  Location     Type
  2013 ;;		None
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;		None
  2016 ;; Return value:  Size  Location     Type
  2017 ;;                  1    wreg      void 
  2018 ;; Registers used:
  2019 ;;		wreg, status,2, status,0
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2027 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2028 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2029 ;;Total ram usage:        1 bytes
  2030 ;; Hardware stack levels used: 1
  2031 ;; This function calls:
  2032 ;;		Nothing
  2033 ;; This function is called by:
  2034 ;;		_I2C_2_Master_Start
  2035 ;;		_I2C_2_Master_Stop
  2036 ;;		_I2C_2_Master_Write
  2037 ;;		_I2C_2_Master_RepStart
  2038 ;;		_I2C_2_Master_Read
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           	psect	text14
  2043   0013DE                     __ptext14:
  2044                           	callstack 0
  2045   0013DE                     _I2C_2_Master_Idle:
  2046                           	callstack 27
  2047   0013DE                     l99:
  2048   0013DE  010E               	movlb	14	; () banked
  2049   0013E0  B5D8               	btfsc	216,2,b	;volatile
  2050   0013E2  EFF5  F009         	goto	u11
  2051   0013E6  EFF7  F009         	goto	u10
  2052   0013EA                     u11:
  2053   0013EA  EFEF  F009         	goto	l99
  2054   0013EE                     u10:
  2055   0013EE                     
  2056                           ; BSR set to: 14
  2057   0013EE  CEDA F040          	movff	3802,??_I2C_2_Master_Idle	;volatile
  2058   0013F2  0E1F               	movlw	31
  2059   0013F4  1640               	andwf	??_I2C_2_Master_Idle^0,f,c
  2060   0013F6  A4D8               	btfss	status,2,c
  2061   0013F8  EF00  F00A         	goto	u21
  2062   0013FC  EF02  F00A         	goto	u20
  2063   001400                     u21:
  2064   001400  EFEF  F009         	goto	l99
  2065   001404                     u20:
  2066   001404                     
  2067                           ; BSR set to: 14
  2068   001404  0012               	return		;funcret
  2069   001406                     __end_of_I2C_2_Master_Idle:
  2070                           	callstack 0
  2071                           
  2072 ;; *************** function _I2C_2_Master_Init *****************
  2073 ;; Defined at:
  2074 ;;		line 4 in file "i2c.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;		None
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;		None
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  1    wreg      void 
  2081 ;; Registers used:
  2082 ;;		wreg, status,2
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2092 ;;Total ram usage:        0 bytes
  2093 ;; Hardware stack levels used: 1
  2094 ;; This function calls:
  2095 ;;		Nothing
  2096 ;; This function is called by:
  2097 ;;		_color_click_init
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text15
  2102   0013B4                     __ptext15:
  2103                           	callstack 0
  2104   0013B4                     _I2C_2_Master_Init:
  2105                           	callstack 29
  2106   0013B4                     
  2107                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2108   0013B4  010E               	movlb	14	; () banked
  2109   0013B6  51D9               	movf	217,w,b	;volatile
  2110   0013B8  0BF0               	andlw	-16
  2111   0013BA  0908               	iorlw	8
  2112   0013BC  6FD9               	movwf	217,b	;volatile
  2113   0013BE                     
  2114                           ; BSR set to: 14
  2115                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2116   0013BE  8BD9               	bsf	217,5,b	;volatile
  2117                           
  2118                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2119   0013C0  0E9F               	movlw	159
  2120   0013C2  6FD6               	movwf	214,b	;volatile
  2121   0013C4                     
  2122                           ; BSR set to: 14
  2123                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2124   0013C4  8A84               	bsf	132,5,c	;volatile
  2125   0013C6                     
  2126                           ; BSR set to: 14
  2127                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2128   0013C6  8C84               	bsf	132,6,c	;volatile
  2129   0013C8                     
  2130                           ; BSR set to: 14
  2131                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2132   0013C8  9BA7               	bcf	167,5,b	;volatile
  2133   0013CA                     
  2134                           ; BSR set to: 14
  2135                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2136   0013CA  9DA7               	bcf	167,6,b	;volatile
  2137                           
  2138                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2139   0013CC  0E1D               	movlw	29
  2140   0013CE  6F1D               	movwf	29,b	;volatile
  2141                           
  2142                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2143   0013D0  0E1E               	movlw	30
  2144   0013D2  6F1C               	movwf	28,b	;volatile
  2145                           
  2146                           ;i2c.c: 18:   RD5PPS=0x1C;
  2147   0013D4  0E1C               	movlw	28
  2148   0013D6  6F6F               	movwf	111,b	;volatile
  2149                           
  2150                           ;i2c.c: 19:   RD6PPS=0x1B;
  2151   0013D8  0E1B               	movlw	27
  2152   0013DA  6F70               	movwf	112,b	;volatile
  2153   0013DC                     
  2154                           ; BSR set to: 14
  2155   0013DC  0012               	return		;funcret
  2156   0013DE                     __end_of_I2C_2_Master_Init:
  2157                           	callstack 0
  2158                           
  2159 ;; *************** function _ADC_init *****************
  2160 ;; Defined at:
  2161 ;;		line 9 in file "ADC.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;		None
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;		None
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  1    wreg      void 
  2168 ;; Registers used:
  2169 ;;		wreg, status,2
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2179 ;;Total ram usage:        0 bytes
  2180 ;; Hardware stack levels used: 1
  2181 ;; This function calls:
  2182 ;;		Nothing
  2183 ;; This function is called by:
  2184 ;;		_main
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           	psect	text16
  2189   00146A                     __ptext16:
  2190                           	callstack 0
  2191   00146A                     _ADC_init:
  2192                           	callstack 30
  2193   00146A                     
  2194                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  2195   00146A  8C86               	bsf	134,6,c	;volatile
  2196                           
  2197                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  2198   00146C  010E               	movlb	14	; () banked
  2199   00146E  8DB4               	bsf	180,6,b	;volatile
  2200                           
  2201                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  2202   001470  010F               	movlb	15	; () banked
  2203   001472  9958               	bcf	88,4,b	;volatile
  2204   001474                     
  2205                           ; BSR set to: 15
  2206                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  2207   001474  0EFC               	movlw	-4
  2208   001476  1758               	andwf	88,f,b	;volatile
  2209                           
  2210                           ;ADC.c: 17:     ADPCH=0b101110;
  2211   001478  0E2E               	movlw	46
  2212   00147A  6F5F               	movwf	95,b	;volatile
  2213   00147C                     
  2214                           ; BSR set to: 15
  2215                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  2216   00147C  9460               	bcf	96,2,c	;volatile
  2217   00147E                     
  2218                           ; BSR set to: 15
  2219                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  2220   00147E  8860               	bsf	96,4,c	;volatile
  2221   001480                     
  2222                           ; BSR set to: 15
  2223                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  2224   001480  8E60               	bsf	96,7,c	;volatile
  2225   001482                     
  2226                           ; BSR set to: 15
  2227   001482  0012               	return		;funcret
  2228   001484                     __end_of_ADC_init:
  2229                           	callstack 0
  2230                           
  2231                           	psect	rparam
  2232   000000                     
  2233                           	psect	config
  2234                           
  2235                           ;Config register CONFIG1L @ 0x300000
  2236                           ;	External Oscillator mode Selection bits
  2237                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2238                           ;	Power-up default value for COSC bits
  2239                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2240   300000                     	org	3145728
  2241   300000  AA                 	db	170
  2242                           
  2243                           ;Config register CONFIG1H @ 0x300001
  2244                           ;	unspecified, using default values
  2245                           ;	Clock Out Enable bit
  2246                           ;	CLKOUTEN = 0x1, unprogrammed default
  2247                           ;	Clock Switch Enable bit
  2248                           ;	CSWEN = 0x1, unprogrammed default
  2249                           ;	Fail-Safe Clock Monitor Enable bit
  2250                           ;	FCMEN = 0x1, unprogrammed default
  2251   300001                     	org	3145729
  2252   300001  FF                 	db	255
  2253                           
  2254                           ;Config register CONFIG3L @ 0x300004
  2255                           ;	WDT Period Select bits
  2256                           ;	WDTCPS = 0x1F, unprogrammed default
  2257                           ;	WDT operating mode
  2258                           ;	WDTE = OFF, WDT Disabled
  2259   300004                     	org	3145732
  2260   300004  9F                 	db	159
  2261                           
  2262                           ;Config register CONFIG3H @ 0x300005
  2263                           ;	unspecified, using default values
  2264                           ;	WDT Window Select bits
  2265                           ;	WDTCWS = 0x7, unprogrammed default
  2266                           ;	WDT input clock selector
  2267                           ;	WDTCCS = 0x7, unprogrammed default
  2268   300005                     	org	3145733
  2269   300005  FF                 	db	255
  2270                           tosu	equ	0xFFF
  2271                           tosh	equ	0xFFE
  2272                           tosl	equ	0xFFD
  2273                           stkptr	equ	0xFFC
  2274                           pclatu	equ	0xFFB
  2275                           pclath	equ	0xFFA
  2276                           pcl	equ	0xFF9
  2277                           tblptru	equ	0xFF8
  2278                           tblptrh	equ	0xFF7
  2279                           tblptrl	equ	0xFF6
  2280                           tablat	equ	0xFF5
  2281                           prodh	equ	0xFF4
  2282                           prodl	equ	0xFF3
  2283                           indf0	equ	0xFEF
  2284                           postinc0	equ	0xFEE
  2285                           postdec0	equ	0xFED
  2286                           preinc0	equ	0xFEC
  2287                           plusw0	equ	0xFEB
  2288                           fsr0h	equ	0xFEA
  2289                           fsr0l	equ	0xFE9
  2290                           wreg	equ	0xFE8
  2291                           indf1	equ	0xFE7
  2292                           postinc1	equ	0xFE6
  2293                           postdec1	equ	0xFE5
  2294                           preinc1	equ	0xFE4
  2295                           plusw1	equ	0xFE3
  2296                           fsr1h	equ	0xFE2
  2297                           fsr1l	equ	0xFE1
  2298                           bsr	equ	0xFE0
  2299                           indf2	equ	0xFDF
  2300                           postinc2	equ	0xFDE
  2301                           postdec2	equ	0xFDD
  2302                           preinc2	equ	0xFDC
  2303                           plusw2	equ	0xFDB
  2304                           fsr2h	equ	0xFDA
  2305                           fsr2l	equ	0xFD9
  2306                           status	equ	0xFD8

Data Sizes:
    Strings     147
    Constant    0
    Data        1
    BSS         123
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     29      93
    BANK0           160      0      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    S2327$buffer	PTR unsigned char  size(2) Largest target is 0

    S2327$source	PTR const unsigned char  size(2) Largest target is 0

    S465DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S465DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), motorR(COMRAM[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[17]), STR_2(CODE[19]), STR_3(CODE[17]), STR_4(CODE[17]), 
		 -> STR_5(CODE[21]), STR_6(CODE[12]), STR_7(CODE[13]), STR_8(CODE[14]), 
		 -> STR_9(CODE[17]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_right90
    _right90->_turnRight
    _turnRight->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0    8700
                                             27 COMRAM     2     2      0
                           _ADC_init
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                            _right90
 ---------------------------------------------------------------------------------
 (1) _right90                                              4     2      2    8248
                                             23 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            5     3      2    3267
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 3     1      2    3981
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          5     4      1    2741
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     659
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     662
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     287
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     287
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      15
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _initDCmotorsPWM
   _initUSART4
   _right90
     _stop
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      64        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      3C       5       37.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1D      5D       1       97.9%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRlllhll     37      0       0      47        0.0%
BITBIGSFRlllhhl     31      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      58        0.0%
BITBIGSFRllllll     26      0       0      62        0.0%
BITBIGSFRlllllh     20      0       0      50        0.0%
BITBIGSFRllllll     1E      0       0      52        0.0%
BITBIGSFRhhllhh     17      0       0      36        0.0%
BITBIGSFRlllhhh     14      0       0      42        0.0%
BITBIGSFRllllll     11      0       0      53        0.0%
BITBIGSFRllllll      F      0       0      60        0.0%
BITBIGSFRhhhlh       E      0       0      33        0.0%
BITBIGSFRlllllh      C      0       0      51        0.0%
BITBIGSFRllllll      9      0       0      59        0.0%
BITBIGSFRlllhll      8      0       0      48        0.0%
BITBIGSFRllllll      6      0       0      61        0.0%
BITBIGSFRllllll      6      0       0      57        0.0%
BITBIGSFRlllhhh      6      0       0      44        0.0%
BITBIGSFRhhllhl      6      0       0      37        0.0%
BITBIGSFRllllll      5      0       0      56        0.0%
BITBIGSFRlllhhh      3      0       0      43        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRlllhlh      2      0       0      46        0.0%
BITBIGSFRhhlh        2      0       0      35        0.0%
BITBIGSFRllllll      1      0       0      54        0.0%
BITBIGSFRhlh         1      0       0      38        0.0%
BITBIGSFRhhhll       1      0       0      34        0.0%
BITBIGSFRllllh       1      0       0      49        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BITBIGSFRlh          1      0       0      40        0.0%
BITBIGSFRhll         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      99      63        0.0%
DATA                 0      0      99       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Mar 11 19:28:58 2024

                         l45 1380                           l48 144A                           l96 13DC  
                         l99 13DE                           u10 13EE                           u11 13EA  
                         u20 1404                           u21 1400          ___wmul@multiplicand 0042  
                        l102 1404                          l111 1498                          l201 1482  
                        l105 14A2                          l114 148E                          l300 13B2  
                        l262 1194                          l269 0FE8                          l277 1222  
                        l390 1468                          l287 12A0                          l456 142A  
                        l954 1314                          l947 130C                          u400 12BC  
                        u401 12B8                          u410 12DA                          u411 12D6  
                        u420 12F6                          u500 12A0                          u421 12F2  
                        u501 129C                          u430 0EB0                          u431 0EAC  
                        u440 0F6C                          u441 0F68                          u450 11B0  
                        u610 106E                          u451 11AC                          u611 106A  
                        u460 11CE                          u461 11CA                          u470 120C  
                        u471 1208                          u480 1222                          u481 121E  
                        u707 1398                          u717 127C                          u727 11EC  
                        u737 1362                          u667 1078                          u677 109C  
                        u687 10C0                          u697 10E4                          wreg 0FE8  
                       l1200 13C4                         l1202 13C6                         l2010 0FEE  
                       l1204 13C8                         l2020 1006                         l2012 0FF2  
                       l1206 13CA                         l2030 1026                         l2022 100A  
                       l2014 0FF6                         l1136 13DE                         l2040 104C  
                       l2032 102A                         l2024 100E                         l2016 0FF6  
                       l2008 0FEA                         l1138 13EE                         l1170 149E  
                       l2050 1056                         l2042 104E                         l2034 102E  
                       l2026 1016                         l2018 1002                         l1172 1486  
                       l2060 106E                         l2052 1058                         l2044 1050  
                       l2036 1032                         l2028 101E                         l1174 148A  
                       l2070 10F2                         l2062 1086                         l2054 105A  
                       l2046 1052                         l2038 104A                         l1168 149A  
                       l1176 1490                         l2064 1092                         l2056 105C  
                       l2048 1054                         l1370 146A                         l1178 1494  
                       l2066 10B6                         l2058 1060                         l1372 1474  
                       l1196 13B4                         l1380 144C                         l2068 10CE  
                       l1374 147C                         l1198 13BE                         l1390 1466  
                       l1382 1456                         l1376 147E                         l1384 1458  
                       l1378 1480                         l1386 1462                         l1730 12A2  
                       l1388 1464                         l1740 12DA                         l1732 12AA  
                       l1724 1406                         l1820 124E                         l1750 1306  
                       l1742 12E0                         l1734 12BC                         l1726 1422  
                       l1830 126E                         l1814 1224                         l1744 12F6  
                       l1736 12C4                         l1760 0F14                         l1752 0E96  
                       l1832 1276                         l1816 123E                         l1746 12FE  
                       l1738 12CC                         l1762 0F52                         l1754 0EB0  
                       l1770 1196                         l1834 1286                         l1826 1256  
                       l1818 1246                         l1860 1352                         l1748 1300  
                       l1764 0F6C                         l1756 0EFE                         l1780 11D6  
                       l1772 119A                         l1836 128A                         l1828 1266  
                       l1862 135C                         l1870 1116                         l1766 0FAC  
                       l1758 0F10                         l1782 11DE                         l1774 11B0  
                       l1768 142E                         l1864 136C                         l1880 1170  
                       l1872 113C                         l1784 11E6                         l1776 11B8  
                       l1866 1376                         l1858 134E                         l1890 1192  
                       l1882 117A                         l1874 1140                         l1778 11CE  
                       l1786 11F6                         l1884 117C                         l1876 1164  
                       l1868 1106                         l1788 120C                         l1892 1382  
                       l1886 1186                         l1878 116E                         l1894 138E  
                       l1888 1188                         l1896 13A6                         STR_1 0E3A  
                       STR_2 0E16                         STR_3 0E5C                         STR_4 0E4B  
                       STR_5 0E01                         STR_6 0E88                         STR_7 0E7B  
                       STR_8 0E6D                         STR_9 0E29                 _BAUD4CONbits 0EE9  
                       _T2PR 0FBC                         _main 0FEA                         fsr2h 0FDA  
                       indf2 0FDF                         fsr2l 0FD9                         _stop 1196  
                       prodh 0FF4                         prodl 0FF3                         start 0000  
           __end_of_ADC_init 1484                 ___param_bank 0000                        ?_main 0040  
                      _ADPCH 0F5F                        ?_stop 0052              __end_of___lwdiv 1316  
 __end_of_I2C_2_Master_Start 14A4   __end_of_I2C_2_Master_Write 1490              __end_of_right90 13B4  
                      tablat 0FF5                        status 0FD8              __initialization 1316  
               __end_of_main 1106                 __end_of_stop 1224                       ??_main 005B  
                     ??_stop 0054                __activetblptr 0001                 ?_setMotorPWM 004D  
                     _ADRESH 0F64                       _CCPR1H 0FAA                       _CCPR2H 0FA6  
                     _CCPR3H 0F25                       _CCPR4H 0F21                       _RC0PPS 0E62  
                     _RC4REG 0EE3                       _RE2PPS 0E74                       _RD5PPS 0E6F  
                     _RC7PPS 0E69                       _RE4PPS 0E76                       _RD6PPS 0E70  
                     _RG6PPS 0E88     __end_of_color_click_init 1382                       _RX4PPS 0E15  
                     _TX4REG 0EE4                 _CCPTMRS0bits 0FAD                       ___wmul 1406  
                  ??___lwdiv 004A                       clear_0 132E                       clear_1 133A  
                     _motorL 0037                       _motorR 002E                       isa$std 0001  
               __pdataCOMRAM 005D                    ??_right90 0059                 __mediumconst 0000  
                     tblptrh 0FF7                       tblptrl 0FF6                       tblptru 0FF8  
                  ?_ADC_init 0040                       stop@mL 0052                       stop@mR 0053  
          ??_initDCmotorsPWM 0042                   __accesstop 0060      __end_of__initialization 1340  
              ___rparam_used 0001               __pcstackCOMRAM 0040                   ??_ADC_init 0040  
                 __pbssBANK0 0060            _color_writetoaddr 142C                 _T2CLKCONbits 0FBF  
         ?_color_writetoaddr 0042                      ?___wmul 0040          ??_color_writetoaddr 0043  
                    _SP4BRGH 0EE6                      _SP4BRGL 0EE5                      _SSP2ADD 0ED6  
                    _SSP2BUF 0ED5       color_writetoaddr@value 0042    __end_of_color_writetoaddr 144C  
                  _ADREFbits 0F58           _I2C_2_Master_Start 149A                   _initUSART4 144C  
         _I2C_2_Master_Write 1484                      __Hparam 0000                      __Lparam 0000  
        ?_I2C_2_Master_Start 0040                      ___lwdiv 12A2          ?_I2C_2_Master_Write 0040  
               __psmallconst 0E00                      __pcinit 1316                      __ramtop 0E00  
                    __ptext0 0FEA                      __ptext1 1382                      __ptext2 1224  
                    __ptext3 1196                      __ptext4 0E96                      __ptext5 1406  
                    __ptext6 12A2                      __ptext7 144C                      __ptext8 1106  
                    __ptext9 134E                    _T2CONbits 0FBD                      _right90 1382  
                  _T2HLTbits 0FBE                _RxBufWriteCnt 002D         ??_I2C_2_Master_Start 0041  
       ??_I2C_2_Master_Write 0041         end_of_initialization 1340            ?_color_click_init 0040  
         ??_color_click_init 0044                      postdec2 0FDD                      postinc0 0FEE  
                    postinc2 0FDE              _initDCmotorsPWM 1106                    _PORTFbits 0F8E  
         setMotorPWM@negDuty 0051            __end_of_turnRight 12A2                    _TRISAbits 0F81  
         setMotorPWM@posDuty 0050                    _TRISCbits 0F83                    _TRISDbits 0F84  
                  _TRISEbits 0F85                    _TRISFbits 0F86                    _TRISGbits 0F87  
   color_writetoaddr@address 0043                  _CCP1CONbits 0FAB                 _EUSART4RXbuf 0015  
               _EUSART4TXbuf 0060                  _CCP2CONbits 0FA7                  _CCP3CONbits 0F26  
                ?_initUSART4 0040                  _CCP4CONbits 0F22               __end_of___wmul 142C  
              __pidataCOMRAM 14A4          start_initialization 1316                _TxBufWriteCnt 002B  
    __end_of_initDCmotorsPWM 1196                     ??___wmul 0044                  __pbssCOMRAM 0001  
           ___lwdiv@dividend 0046                     ?___lwdiv 0046                 _readingIndex 0029  
                __smallconst 0E00            _I2C_2_Master_Idle 13DE            _I2C_2_Master_Init 13B4  
                   ?_right90 0057            _I2C_2_Master_Stop 1490                 _RxBufReadCnt 002C  
                   _ADC_init 146A           ?_I2C_2_Master_Idle 0040           ?_I2C_2_Master_Init 0040  
              ??_setMotorPWM 004E           ?_I2C_2_Master_Stop 0040             ___lwdiv@quotient 004A  
   initDCmotorsPWM@PWMperiod 0040          ??_I2C_2_Master_Idle 0040          ??_I2C_2_Master_Init 0040  
             ___wmul@product 0044                     _LATAbits 0F79          ??_I2C_2_Master_Stop 0041  
                   _LATCbits 0F7B                     _LATDbits 0F7C                     _LATEbits 0F7D  
                   _LATGbits 0F7F                     _PIE4bits 0E2D                  turnRight@mL 0052  
                turnRight@mR 0053                     _PIR4bits 0E37             ?_initDCmotorsPWM 0040  
                   _SSP2CON2 0EDA                     _SSP2STAT 0ED8                   _ADCON0bits 0F60  
  __end_of_I2C_2_Master_Idle 1406    __end_of_I2C_2_Master_Init 13DE            ___wmul@multiplier 0040  
  __end_of_I2C_2_Master_Stop 149A                 setMotorPWM@m 004D  I2C_2_Master_Write@data_byte 0041  
                _ldrReadings 0001                 _TxBufReadCnt 002A                    _turnRight 1224  
        __end_of_setMotorPWM 0FEA                 ??_initUSART4 0040                     __Hrparam 0000  
                   __Lrparam 0000                 __Lsmallconst 0E00                   _ANSELDbits 0EA7  
                 _ANSELFbits 0EB4                     _dataFlag 005D                    right90@mL 0057  
                  right90@mR 0058              ___lwdiv@divisor 0048           __end_of_initUSART4 146A  
            ___lwdiv@counter 004C                   ?_turnRight 0052                     __ptext10 142C  
                   __ptext11 1484                     __ptext12 1490                     __ptext13 149A  
                   __ptext14 13DE                     __ptext15 13B4                     __ptext16 146A  
               _SSP2CON1bits 0ED9                 _SSP2CON2bits 0EDA                   turnRight@i 0055  
                   isa$xinst 0000                   _RC4STAbits 0EE7                  _setMotorPWM 0E96  
           _color_click_init 134E                   _SSP2DATPPS 0E1D                   _SSP2CLKPPS 0E1C  
                ??_turnRight 0054                   _TX4STAbits 0EE8  
