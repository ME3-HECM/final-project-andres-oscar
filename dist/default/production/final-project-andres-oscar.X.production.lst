

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Mar 15 05:58:06 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=3
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=2
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=3
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=3
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=2
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    92                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    93                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    94                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    95                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    96   000000                     
    97                           ; Generated 21/07/2023 GMT
    98                           ; 
    99                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution. Publication is not required when
   113                           ;        this file is used in an embedded application.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC18F67K40 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131   000000                     
   132                           	psect	idataBANK0
   133   004BDA                     __pidataBANK0:
   134                           	callstack 0
   135                           
   136                           ;initializer for _dataFlag
   137   004BDA  01                 	db	1
   138   000000                     _TMR0H	set	4052
   139   000000                     _TX4REG	set	3812
   140   000000                     _RC4STAbits	set	3815
   141   000000                     _SP4BRGH	set	3814
   142   000000                     _LATHbits	set	3968
   143   000000                     _TRISFbits	set	3974
   144   000000                     _TRISAbits	set	3969
   145   000000                     _TRISEbits	set	3973
   146   000000                     _TRISGbits	set	3975
   147   000000                     _TRISDbits	set	3972
   148   000000                     _CCPR2H	set	4006
   149   000000                     _CCPR1H	set	4010
   150   000000                     _SSP2CON2bits	set	3802
   151   000000                     _RX4PPS	set	3605
   152   000000                     _SSP2CLKPPS	set	3612
   153   000000                     _SSP2DATPPS	set	3613
   154   000000                     _ANSELDbits	set	3751
   155   000000                     _SSP2ADD	set	3798
   156   000000                     _SSP2CON1bits	set	3801
   157   000000                     _LATAbits	set	3961
   158   000000                     _LATEbits	set	3965
   159   000000                     _LATGbits	set	3967
   160   000000                     _LATCbits	set	3963
   161   000000                     _RC4REG	set	3811
   162   000000                     _SP4BRGL	set	3813
   163   000000                     _TX4STAbits	set	3816
   164   000000                     _BAUD4CONbits	set	3817
   165   000000                     _SSP2CON2	set	3802
   166   000000                     _CCPR4H	set	3873
   167   000000                     _CCPR3H	set	3877
   168   000000                     _SSP2STAT	set	3800
   169   000000                     _ANSELFbits	set	3764
   170   000000                     _SSP2BUF	set	3797
   171   000000                     _IPR0bits	set	3615
   172   000000                     _PIE0bits	set	3625
   173   000000                     _PIE4bits	set	3629
   174   000000                     _PIR4bits	set	3639
   175   000000                     _RC0PPS	set	3682
   176   000000                     _RC7PPS	set	3689
   177   000000                     _RD5PPS	set	3695
   178   000000                     _RE2PPS	set	3700
   179   000000                     _RD6PPS	set	3696
   180   000000                     _CCP1CONbits	set	4011
   181   000000                     _CCPTMRS0bits	set	4013
   182   000000                     _T2PR	set	4028
   183   000000                     _T2CONbits	set	4029
   184   000000                     _T0CON0bits	set	4053
   185   000000                     _CCP2CONbits	set	4007
   186   000000                     _CCP3CONbits	set	3878
   187   000000                     _ADREFbits	set	3928
   188   000000                     _CCP4CONbits	set	3874
   189   000000                     _PORTFbits	set	3982
   190   000000                     _TRISHbits	set	3976
   191   000000                     _TRISCbits	set	3971
   192   000000                     _INTCONbits	set	4082
   193   000000                     _T0CON1bits	set	4054
   194   000000                     _ADPCH	set	3935
   195   000000                     _ADRESH	set	3940
   196   000000                     _ADCON0bits	set	3936
   197   000000                     _RE4PPS	set	3702
   198   000000                     _RG6PPS	set	3720
   199   000000                     _TMR0L	set	4051
   200   000000                     _T2CLKCONbits	set	4031
   201   000000                     _T2HLTbits	set	4030
   202   000000                     _PIR0bits	set	3635
   203                           
   204                           	psect	smallconst
   205   000E00                     __psmallconst:
   206                           	callstack 0
   207   000E00  00                 	db	0
   208   000E01                     STR_5:
   209                           
   210                           ; BSR set to: 14
   211   000E01  43                 	db	67	;'C'
   212   000E02  61                 	db	97	;'a'
   213   000E03  6C                 	db	108	;'l'
   214   000E04  69                 	db	105	;'i'
   215   000E05  62                 	db	98	;'b'
   216   000E06  72                 	db	114	;'r'
   217   000E07  61                 	db	97	;'a'
   218   000E08  74                 	db	116	;'t'
   219   000E09  69                 	db	105	;'i'
   220   000E0A  6F                 	db	111	;'o'
   221   000E0B  6E                 	db	110	;'n'
   222   000E0C  20                 	db	32
   223   000E0D  73                 	db	115	;'s'
   224   000E0E  74                 	db	116	;'t'
   225   000E0F  61                 	db	97	;'a'
   226   000E10  74                 	db	116	;'t'
   227   000E11  65                 	db	101	;'e'
   228   000E12  20                 	db	32
   229   000E13  3D                 	db	61	;'='
   230   000E14  20                 	db	32
   231   000E15  67                 	db	103	;'g'
   232   000E16  72                 	db	114	;'r'
   233   000E17  65                 	db	101	;'e'
   234   000E18  65                 	db	101	;'e'
   235   000E19  6E                 	db	110	;'n'
   236   000E1A  20                 	db	32
   237   000E1B  0A                 	db	10
   238   000E1C  0D                 	db	13
   239   000E1D  00                 	db	0
   240   000E1E                     STR_11:
   241                           
   242                           ; BSR set to: 14
   243   000E1E  43                 	db	67	;'C'
   244   000E1F  61                 	db	97	;'a'
   245   000E20  6C                 	db	108	;'l'
   246   000E21  69                 	db	105	;'i'
   247   000E22  62                 	db	98	;'b'
   248   000E23  72                 	db	114	;'r'
   249   000E24  61                 	db	97	;'a'
   250   000E25  74                 	db	116	;'t'
   251   000E26  69                 	db	105	;'i'
   252   000E27  6F                 	db	111	;'o'
   253   000E28  6E                 	db	110	;'n'
   254   000E29  20                 	db	32
   255   000E2A  73                 	db	115	;'s'
   256   000E2B  74                 	db	116	;'t'
   257   000E2C  61                 	db	97	;'a'
   258   000E2D  74                 	db	116	;'t'
   259   000E2E  65                 	db	101	;'e'
   260   000E2F  20                 	db	32
   261   000E30  3D                 	db	61	;'='
   262   000E31  20                 	db	32
   263   000E32  20                 	db	32
   264   000E33  61                 	db	97	;'a'
   265   000E34  6D                 	db	109	;'m'
   266   000E35  62                 	db	98	;'b'
   267   000E36  69                 	db	105	;'i'
   268   000E37  65                 	db	101	;'e'
   269   000E38  6E                 	db	110	;'n'
   270   000E39  74                 	db	116	;'t'
   271   000E3A  00                 	db	0
   272   000E3B                     STR_7:
   273                           
   274                           ; BSR set to: 14
   275   000E3B  43                 	db	67	;'C'
   276   000E3C  61                 	db	97	;'a'
   277   000E3D  6C                 	db	108	;'l'
   278   000E3E  69                 	db	105	;'i'
   279   000E3F  62                 	db	98	;'b'
   280   000E40  72                 	db	114	;'r'
   281   000E41  61                 	db	97	;'a'
   282   000E42  74                 	db	116	;'t'
   283   000E43  69                 	db	105	;'i'
   284   000E44  6F                 	db	111	;'o'
   285   000E45  6E                 	db	110	;'n'
   286   000E46  20                 	db	32
   287   000E47  73                 	db	115	;'s'
   288   000E48  74                 	db	116	;'t'
   289   000E49  61                 	db	97	;'a'
   290   000E4A  74                 	db	116	;'t'
   291   000E4B  65                 	db	101	;'e'
   292   000E4C  3D                 	db	61	;'='
   293   000E4D  20                 	db	32
   294   000E4E  62                 	db	98	;'b'
   295   000E4F  6C                 	db	108	;'l'
   296   000E50  75                 	db	117	;'u'
   297   000E51  65                 	db	101	;'e'
   298   000E52  20                 	db	32
   299   000E53  0A                 	db	10
   300   000E54  0D                 	db	13
   301   000E55  00                 	db	0
   302   000E56                     STR_9:
   303                           
   304                           ; BSR set to: 14
   305   000E56  43                 	db	67	;'C'
   306   000E57  61                 	db	97	;'a'
   307   000E58  6C                 	db	108	;'l'
   308   000E59  69                 	db	105	;'i'
   309   000E5A  62                 	db	98	;'b'
   310   000E5B  72                 	db	114	;'r'
   311   000E5C  61                 	db	97	;'a'
   312   000E5D  74                 	db	116	;'t'
   313   000E5E  69                 	db	105	;'i'
   314   000E5F  6F                 	db	111	;'o'
   315   000E60  6E                 	db	110	;'n'
   316   000E61  20                 	db	32
   317   000E62  73                 	db	115	;'s'
   318   000E63  74                 	db	116	;'t'
   319   000E64  61                 	db	97	;'a'
   320   000E65  74                 	db	116	;'t'
   321   000E66  65                 	db	101	;'e'
   322   000E67  20                 	db	32
   323   000E68  3D                 	db	61	;'='
   324   000E69  20                 	db	32
   325   000E6A  20                 	db	32
   326   000E6B  77                 	db	119	;'w'
   327   000E6C  68                 	db	104	;'h'
   328   000E6D  69                 	db	105	;'i'
   329   000E6E  74                 	db	116	;'t'
   330   000E6F  65                 	db	101	;'e'
   331   000E70  00                 	db	0
   332   000E71                     STR_13:
   333                           
   334                           ; BSR set to: 14
   335   000E71  43                 	db	67	;'C'
   336   000E72  41                 	db	65	;'A'
   337   000E73  4C                 	db	76	;'L'
   338   000E74  49                 	db	73	;'I'
   339   000E75  42                 	db	66	;'B'
   340   000E76  52                 	db	82	;'R'
   341   000E77  41                 	db	65	;'A'
   342   000E78  54                 	db	84	;'T'
   343   000E79  49                 	db	73	;'I'
   344   000E7A  4F                 	db	79	;'O'
   345   000E7B  4E                 	db	78	;'N'
   346   000E7C  20                 	db	32
   347   000E7D  43                 	db	67	;'C'
   348   000E7E  4F                 	db	79	;'O'
   349   000E7F  4D                 	db	77	;'M'
   350   000E80  50                 	db	80	;'P'
   351   000E81  4C                 	db	76	;'L'
   352   000E82  45                 	db	69	;'E'
   353   000E83  54                 	db	84	;'T'
   354   000E84  45                 	db	69	;'E'
   355   000E85  44                 	db	68	;'D'
   356   000E86  20                 	db	32
   357   000E87  0A                 	db	10
   358   000E88  0D                 	db	13
   359   000E89  00                 	db	0
   360   000E8A                     STR_3:
   361                           
   362                           ; BSR set to: 14
   363   000E8A  43                 	db	67	;'C'
   364   000E8B  61                 	db	97	;'a'
   365   000E8C  6C                 	db	108	;'l'
   366   000E8D  69                 	db	105	;'i'
   367   000E8E  62                 	db	98	;'b'
   368   000E8F  72                 	db	114	;'r'
   369   000E90  61                 	db	97	;'a'
   370   000E91  74                 	db	116	;'t'
   371   000E92  69                 	db	105	;'i'
   372   000E93  6F                 	db	111	;'o'
   373   000E94  6E                 	db	110	;'n'
   374   000E95  20                 	db	32
   375   000E96  73                 	db	115	;'s'
   376   000E97  74                 	db	116	;'t'
   377   000E98  61                 	db	97	;'a'
   378   000E99  74                 	db	116	;'t'
   379   000E9A  65                 	db	101	;'e'
   380   000E9B  20                 	db	32
   381   000E9C  3D                 	db	61	;'='
   382   000E9D  20                 	db	32
   383   000E9E  72                 	db	114	;'r'
   384   000E9F  65                 	db	101	;'e'
   385   000EA0  64                 	db	100	;'d'
   386   000EA1  00                 	db	0
   387   000EA2                     
   388                           ; BSR set to: 14
   389   000EA2  56                 	db	86	;'V'
   390   000EA3  6F                 	db	111	;'o'
   391   000EA4  6C                 	db	108	;'l'
   392   000EA5  74                 	db	116	;'t'
   393   000EA6  61                 	db	97	;'a'
   394   000EA7  67                 	db	103	;'g'
   395   000EA8  65                 	db	101	;'e'
   396   000EA9  20                 	db	32
   397   000EAA  3D                 	db	61	;'='
   398   000EAB  20                 	db	32
   399   000EAC  25                 	db	37
   400   000EAD  64                 	db	100	;'d'
   401   000EAE  2E                 	db	46
   402   000EAF  25                 	db	37
   403   000EB0  30                 	db	48	;'0'
   404   000EB1  32                 	db	50	;'2'
   405   000EB2  64                 	db	100	;'d'
   406   000EB3  2C                 	db	44
   407   000EB4  20                 	db	32
   408   000EB5  20                 	db	32
   409   000EB6  00                 	db	0
   410   000EB7                     STR_2:
   411                           
   412                           ; BSR set to: 14
   413   000EB7  68                 	db	104	;'h'
   414   000EB8  75                 	db	117	;'u'
   415   000EB9  65                 	db	101	;'e'
   416   000EBA  3D                 	db	61	;'='
   417   000EBB  25                 	db	37
   418   000EBC  30                 	db	48	;'0'
   419   000EBD  33                 	db	51	;'3'
   420   000EBE  64                 	db	100	;'d'
   421   000EBF  2C                 	db	44
   422   000EC0  20                 	db	32
   423   000EC1  20                 	db	32
   424   000EC2  00                 	db	0
   425   000EC3                     STR_4:
   426                           
   427                           ; BSR set to: 14
   428   000EC3  2E                 	db	46
   429   000EC4  00                 	db	0
   430   000EC5  00                 	db	0	; dummy byte at the end
   431   000000                     
   432                           ; #config settings
   433                           
   434                           	psect	cinit
   435   0044EE                     __pcinit:
   436                           	callstack 0
   437   0044EE                     start_initialization:
   438                           	callstack 0
   439   0044EE                     __initialization:
   440                           	callstack 0
   441                           
   442                           ; Initialize objects allocated to BANK0 (1 bytes)
   443                           ; load TBLPTR registers with __pidataBANK0
   444   0044EE  0EDA               	movlw	low __pidataBANK0
   445   0044F0  6EF6               	movwf	tblptrl,c
   446   0044F2  0E4B               	movlw	high __pidataBANK0
   447   0044F4  6EF7               	movwf	tblptrh,c
   448   0044F6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   449   0044F8  6EF8               	movwf	tblptru,c
   450   0044FA  0009               	tblrd		*+	;fetch initializer
   451   0044FC  CFF5 F0F0          	movff	tablat,__pdataBANK0
   452                           
   453                           ; Clear objects allocated to BANK2 (200 bytes)
   454   004500  EE02  F000         	lfsr	0,__pbssBANK2
   455   004504  0EC8               	movlw	200
   456   004506                     clear_0:
   457   004506  6AEE               	clrf	postinc0,c
   458   004508  06E8               	decf	wreg,f,c
   459   00450A  E1FD               	bnz	clear_0
   460                           
   461                           ; Clear objects allocated to BANK1 (182 bytes)
   462   00450C  EE01  F000         	lfsr	0,__pbssBANK1
   463   004510  0EB6               	movlw	182
   464   004512                     clear_1:
   465   004512  6AEE               	clrf	postinc0,c
   466   004514  06E8               	decf	wreg,f,c
   467   004516  E1FD               	bnz	clear_1
   468                           
   469                           ; Clear objects allocated to BANK0 (46 bytes)
   470   004518  EE00  F0C2         	lfsr	0,__pbssBANK0
   471   00451C  0E2E               	movlw	46
   472   00451E                     clear_2:
   473   00451E  6AEE               	clrf	postinc0,c
   474   004520  06E8               	decf	wreg,f,c
   475   004522  E1FD               	bnz	clear_2
   476                           
   477                           ; Clear objects allocated to COMRAM (2 bytes)
   478   004524  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   479   004526  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   480   004528                     end_of_initialization:
   481                           	callstack 0
   482   004528                     __end_of__initialization:
   483                           	callstack 0
   484   004528  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   485   00452A  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   486   00452C  0100               	movlb	0
   487   00452E  EF2C  F00B         	goto	_main	;jump to C main() function
   488                           
   489                           	psect	bssCOMRAM
   490   00005B                     __pbssCOMRAM:
   491                           	callstack 0
   492   00005B                     _TxBufReadCnt:
   493                           	callstack 0
   494   00005B                     	ds	1
   495   00005C                     _TxBufWriteCnt:
   496                           	callstack 0
   497   00005C                     	ds	1
   498                           
   499                           	psect	bssBANK0
   500   0000C2                     __pbssBANK0:
   501                           	callstack 0
   502   0000C2                     _width:
   503                           	callstack 0
   504   0000C2                     	ds	2
   505   0000C4                     _prec:
   506                           	callstack 0
   507   0000C4                     	ds	2
   508   0000C6                     _flags:
   509                           	callstack 0
   510   0000C6                     	ds	1
   511   0000C7                     _readingIndex:
   512                           	callstack 0
   513   0000C7                     	ds	1
   514   0000C8                     _RxBufReadCnt:
   515                           	callstack 0
   516   0000C8                     	ds	1
   517   0000C9                     _RxBufWriteCnt:
   518                           	callstack 0
   519   0000C9                     	ds	1
   520   0000CA                     _colorCurrent:
   521                           	callstack 0
   522   0000CA                     	ds	10
   523   0000D4                     _colorCalibration:
   524                           	callstack 0
   525   0000D4                     	ds	10
   526   0000DE                     _motorR:
   527                           	callstack 0
   528   0000DE                     	ds	9
   529   0000E7                     _motorL:
   530                           	callstack 0
   531   0000E7                     	ds	9
   532                           
   533                           	psect	dataBANK0
   534   0000F0                     __pdataBANK0:
   535                           	callstack 0
   536   0000F0                     _dataFlag:
   537                           	callstack 0
   538   0000F0                     	ds	1
   539                           
   540                           	psect	bssBANK1
   541   000100                     __pbssBANK1:
   542                           	callstack 0
   543   000100                     _EUSART4TXbuf:
   544                           	callstack 0
   545   000100                     	ds	60
   546   00013C                     _action:
   547                           	callstack 0
   548   00013C                     	ds	50
   549   00016E                     _ldrReadings:
   550                           	callstack 0
   551   00016E                     	ds	20
   552   000182                     _EUSART4RXbuf:
   553                           	callstack 0
   554   000182                     	ds	20
   555   000196                     _dbuf:
   556                           	callstack 0
   557   000196                     	ds	32
   558                           
   559                           	psect	bssBANK2
   560   000200                     __pbssBANK2:
   561                           	callstack 0
   562   000200                     _time:
   563                           	callstack 0
   564   000200                     	ds	200
   565                           
   566                           	psect	cstackBANK0
   567   000060                     __pcstackBANK0:
   568                           	callstack 0
   569   000060                     returnHome@mL:
   570                           	callstack 0
   571   000060                     convert_rgb2hue@redcurrent:
   572                           	callstack 0
   573   000060                     send2USART@hue_char:
   574                           	callstack 0
   575                           
   576                           ; 50 bytes @ 0x0
   577   000060                     	ds	1
   578   000061                     returnHome@mR:
   579                           	callstack 0
   580                           
   581                           ; 1 bytes @ 0x1
   582   000061                     	ds	1
   583   000062                     returnHome@path_step:
   584                           	callstack 0
   585                           
   586                           ; 2 bytes @ 0x2
   587   000062                     	ds	2
   588   000064                     returnHome@factor:
   589                           	callstack 0
   590   000064                     convert_rgb2hue@redmax:
   591                           	callstack 0
   592                           
   593                           ; 4 bytes @ 0x4
   594   000064                     	ds	2
   595   000066                     ??_returnHome:
   596                           
   597                           ; 1 bytes @ 0x6
   598   000066                     	ds	2
   599   000068                     convert_rgb2hue@greencurrent:
   600                           	callstack 0
   601   000068                     returnHome@time_ms:
   602                           	callstack 0
   603                           
   604                           ; 4 bytes @ 0x8
   605   000068                     	ds	4
   606   00006C                     returnHome@action_turn:
   607                           	callstack 0
   608   00006C                     convert_rgb2hue@greenmax:
   609                           	callstack 0
   610                           
   611                           ; 4 bytes @ 0xC
   612   00006C                     	ds	1
   613   00006D                     returnHome@i:
   614                           	callstack 0
   615                           
   616                           ; 2 bytes @ 0xD
   617   00006D                     	ds	3
   618   000070                     convert_rgb2hue@bluecurrent:
   619                           	callstack 0
   620                           
   621                           ; 4 bytes @ 0x10
   622   000070                     	ds	4
   623   000074                     convert_rgb2hue@bluemax:
   624                           	callstack 0
   625                           
   626                           ; 4 bytes @ 0x14
   627   000074                     	ds	4
   628   000078                     convert_rgb2hue@clearcurrent:
   629                           	callstack 0
   630                           
   631                           ; 4 bytes @ 0x18
   632   000078                     	ds	4
   633   00007C                     convert_rgb2hue@clearmax:
   634                           	callstack 0
   635                           
   636                           ; 4 bytes @ 0x1C
   637   00007C                     	ds	4
   638   000080                     _convert_rgb2hue$367:
   639                           	callstack 0
   640                           
   641                           ; 4 bytes @ 0x20
   642   000080                     	ds	4
   643   000084                     _convert_rgb2hue$368:
   644                           	callstack 0
   645                           
   646                           ; 4 bytes @ 0x24
   647   000084                     	ds	4
   648   000088                     _convert_rgb2hue$369:
   649                           	callstack 0
   650                           
   651                           ; 4 bytes @ 0x28
   652   000088                     	ds	4
   653   00008C                     _convert_rgb2hue$370:
   654                           	callstack 0
   655                           
   656                           ; 4 bytes @ 0x2C
   657   00008C                     	ds	4
   658   000090                     convert_rgb2hue@min:
   659                           	callstack 0
   660                           
   661                           ; 4 bytes @ 0x30
   662   000090                     	ds	2
   663   000092                     calibration_colors@cal_state:
   664                           	callstack 0
   665                           
   666                           ; 20 bytes @ 0x32
   667   000092                     	ds	2
   668   000094                     convert_rgb2hue@diff:
   669                           	callstack 0
   670                           
   671                           ; 4 bytes @ 0x34
   672   000094                     	ds	4
   673   000098                     convert_rgb2hue@max:
   674                           	callstack 0
   675                           
   676                           ; 4 bytes @ 0x38
   677   000098                     	ds	4
   678   00009C                     convert_rgb2hue@hue:
   679                           	callstack 0
   680                           
   681                           ; 4 bytes @ 0x3C
   682   00009C                     	ds	4
   683   0000A0                     convert_rgb2hue@r:
   684                           	callstack 0
   685                           
   686                           ; 4 bytes @ 0x40
   687   0000A0                     	ds	4
   688   0000A4                     convert_rgb2hue@g:
   689                           	callstack 0
   690                           
   691                           ; 4 bytes @ 0x44
   692   0000A4                     	ds	4
   693   0000A8                     convert_rgb2hue@b:
   694                           	callstack 0
   695                           
   696                           ; 4 bytes @ 0x48
   697   0000A8                     	ds	4
   698   0000AC                     ??_main:
   699                           
   700                           ; 1 bytes @ 0x4C
   701   0000AC                     	ds	2
   702   0000AE                     main@ambient:
   703                           	callstack 0
   704                           
   705                           ; 2 bytes @ 0x4E
   706   0000AE                     	ds	2
   707   0000B0                     main@white:
   708                           	callstack 0
   709                           
   710                           ; 2 bytes @ 0x50
   711   0000B0                     	ds	2
   712   0000B2                     main@factor:
   713                           	callstack 0
   714                           
   715                           ; 2 bytes @ 0x52
   716   0000B2                     	ds	2
   717   0000B4                     main@hue:
   718                           	callstack 0
   719                           
   720                           ; 2 bytes @ 0x54
   721   0000B4                     	ds	2
   722   0000B6                     main@clear_max:
   723                           	callstack 0
   724                           
   725                           ; 4 bytes @ 0x56
   726   0000B6                     	ds	4
   727   0000BA                     main@path_step:
   728                           	callstack 0
   729                           
   730                           ; 2 bytes @ 0x5A
   731   0000BA                     	ds	2
   732   0000BC                     main@clear_current:
   733                           	callstack 0
   734                           
   735                           ; 4 bytes @ 0x5C
   736   0000BC                     	ds	4
   737   0000C0                     main@clear_norm:
   738                           	callstack 0
   739                           
   740                           ; 2 bytes @ 0x60
   741   0000C0                     	ds	2
   742                           
   743                           	psect	cstackCOMRAM
   744   000001                     __pcstackCOMRAM:
   745                           	callstack 0
   746   000001                     ??_LowISR:
   747   000001                     
   748                           ; 1 bytes @ 0x0
   749   000001                     	ds	1
   750   000002                     ??_I2C_2_Master_Idle:
   751   000002                     ?___wmul:
   752                           	callstack 0
   753   000002                     ?___awdiv:
   754                           	callstack 0
   755   000002                     ?___awmod:
   756                           	callstack 0
   757   000002                     ?___fladd:
   758                           	callstack 0
   759   000002                     ?___lmul:
   760                           	callstack 0
   761   000002                     ?___xxtofl:
   762                           	callstack 0
   763   000002                     sendCharSerial4@charToSend:
   764                           	callstack 0
   765   000002                     initDCmotorsPWM@PWMperiod:
   766                           	callstack 0
   767   000002                     customDelayMs@milliseconds:
   768                           	callstack 0
   769   000002                     ___wmul@multiplier:
   770                           	callstack 0
   771   000002                     ___awdiv@dividend:
   772                           	callstack 0
   773   000002                     ___awmod@dividend:
   774                           	callstack 0
   775   000002                     fputc@c:
   776                           	callstack 0
   777   000002                     logAction@newTime:
   778                           	callstack 0
   779   000002                     ___lmul@multiplier:
   780                           	callstack 0
   781   000002                     ___fleq@ff1:
   782                           	callstack 0
   783   000002                     ___flge@ff1:
   784                           	callstack 0
   785   000002                     ___fladd@b:
   786                           	callstack 0
   787   000002                     ___xxtofl@val:
   788                           	callstack 0
   789                           
   790                           ; 4 bytes @ 0x1
   791   000002                     	ds	1
   792   000003                     ??_I2C_2_Master_Read:
   793   000003                     I2C_2_Master_Write@data_byte:
   794                           	callstack 0
   795   000003                     sendStringSerial4@string:
   796                           	callstack 0
   797                           
   798                           ; 1 bytes @ 0x2
   799   000003                     	ds	1
   800   000004                     ??_customDelayMs:
   801   000004                     color_writetoaddr@value:
   802                           	callstack 0
   803   000004                     I2C_2_Master_Read@ack:
   804                           	callstack 0
   805   000004                     fputc@fp:
   806                           	callstack 0
   807   000004                     ___wmul@multiplicand:
   808                           	callstack 0
   809   000004                     ___awdiv@divisor:
   810                           	callstack 0
   811   000004                     ___awmod@divisor:
   812                           	callstack 0
   813                           
   814                           ; 2 bytes @ 0x3
   815   000004                     	ds	1
   816   000005                     ??_fputc:
   817   000005                     color_writetoaddr@address:
   818                           	callstack 0
   819   000005                     I2C_2_Master_Read@tmp:
   820                           	callstack 0
   821   000005                     customDelayMs@i:
   822                           	callstack 0
   823                           
   824                           ; 2 bytes @ 0x4
   825   000005                     	ds	1
   826   000006                     ??_color_click_init:
   827   000006                     ??___xxtofl:
   828   000006                     ?_color_read_Red:
   829                           	callstack 0
   830   000006                     ?_color_read_Green:
   831                           	callstack 0
   832   000006                     ?_color_read_Blue:
   833                           	callstack 0
   834   000006                     ?_color_read_Clear:
   835                           	callstack 0
   836   000006                     ___awdiv@counter:
   837                           	callstack 0
   838   000006                     ___awmod@counter:
   839                           	callstack 0
   840   000006                     logAction@path_step:
   841                           	callstack 0
   842   000006                     ___wmul@product:
   843                           	callstack 0
   844   000006                     ___lmul@multiplicand:
   845                           	callstack 0
   846   000006                     ___fleq@ff2:
   847                           	callstack 0
   848   000006                     ___flge@ff2:
   849                           	callstack 0
   850   000006                     ___fladd@a:
   851                           	callstack 0
   852                           
   853                           ; 4 bytes @ 0x5
   854   000006                     	ds	1
   855   000007                     ___awdiv@sign:
   856                           	callstack 0
   857   000007                     ___awmod@sign:
   858                           	callstack 0
   859                           
   860                           ; 1 bytes @ 0x6
   861   000007                     	ds	1
   862   000008                     ??_logAction:
   863   000008                     ??_color_read_Red:
   864   000008                     ??_color_read_Green:
   865   000008                     ??_color_read_Blue:
   866   000008                     ??_color_read_Clear:
   867   000008                     ?_abs:
   868                           	callstack 0
   869   000008                     ?___lwdiv:
   870                           	callstack 0
   871   000008                     ?_read_prec_or_width:
   872                           	callstack 0
   873   000008                     read_prec_or_width@fmt:
   874                           	callstack 0
   875   000008                     ___awdiv@quotient:
   876                           	callstack 0
   877   000008                     ___lwdiv@dividend:
   878                           	callstack 0
   879   000008                     abs@a:
   880                           	callstack 0
   881                           
   882                           ; 2 bytes @ 0x7
   883   000008                     	ds	1
   884   000009                     read_prec_or_width@ap:
   885                           	callstack 0
   886                           
   887                           ; 1 bytes @ 0x8
   888   000009                     	ds	1
   889   00000A                     ??___fladd:
   890   00000A                     ??_abs:
   891   00000A                     ??___fleq:
   892   00000A                     ??___flge:
   893   00000A                     logAction@newAction:
   894                           	callstack 0
   895   00000A                     ___xxtofl@sign:
   896                           	callstack 0
   897   00000A                     read_prec_or_width@c:
   898                           	callstack 0
   899   00000A                     ___lwdiv@divisor:
   900                           	callstack 0
   901   00000A                     fputs@s:
   902                           	callstack 0
   903   00000A                     ___lmul@product:
   904                           	callstack 0
   905                           
   906                           ; 4 bytes @ 0x9
   907   00000A                     	ds	1
   908   00000B                     ___xxtofl@exp:
   909                           	callstack 0
   910   00000B                     color_read_Red@tmp:
   911                           	callstack 0
   912   00000B                     color_read_Green@tmp:
   913                           	callstack 0
   914   00000B                     color_read_Blue@tmp:
   915                           	callstack 0
   916   00000B                     color_read_Clear@tmp:
   917                           	callstack 0
   918   00000B                     read_prec_or_width@n:
   919                           	callstack 0
   920                           
   921                           ; 2 bytes @ 0xA
   922   00000B                     	ds	1
   923   00000C                     fputs@fp:
   924                           	callstack 0
   925   00000C                     ___lwdiv@quotient:
   926                           	callstack 0
   927   00000C                     ___xxtofl@arg:
   928                           	callstack 0
   929                           
   930                           ; 4 bytes @ 0xB
   931   00000C                     	ds	1
   932   00000D                     fputs@c:
   933                           	callstack 0
   934                           
   935                           ; 1 bytes @ 0xC
   936   00000D                     	ds	1
   937   00000E                     ?___aldiv:
   938                           	callstack 0
   939   00000E                     ___lwdiv@counter:
   940                           	callstack 0
   941   00000E                     ___fladd@signs:
   942                           	callstack 0
   943   00000E                     fputs@i:
   944                           	callstack 0
   945   00000E                     ___aldiv@dividend:
   946                           	callstack 0
   947                           
   948                           ; 4 bytes @ 0xD
   949   00000E                     	ds	1
   950   00000F                     setMotorPWM@m:
   951                           	callstack 0
   952   00000F                     ___fladd@aexp:
   953                           	callstack 0
   954                           
   955                           ; 1 bytes @ 0xE
   956   00000F                     	ds	1
   957   000010                     ??_setMotorPWM:
   958   000010                     ?___flmul:
   959                           	callstack 0
   960   000010                     ___fladd@bexp:
   961                           	callstack 0
   962   000010                     pad@fp:
   963                           	callstack 0
   964   000010                     ___flmul@b:
   965                           	callstack 0
   966                           
   967                           ; 4 bytes @ 0xF
   968   000010                     	ds	1
   969   000011                     ___fladd@grs:
   970                           	callstack 0
   971   000011                     pad@buf:
   972                           	callstack 0
   973                           
   974                           ; 2 bytes @ 0x10
   975   000011                     	ds	1
   976   000012                     ?___flsub:
   977                           	callstack 0
   978   000012                     setMotorPWM@posDuty:
   979                           	callstack 0
   980   000012                     ___aldiv@divisor:
   981                           	callstack 0
   982   000012                     ___flsub@b:
   983                           	callstack 0
   984                           
   985                           ; 4 bytes @ 0x11
   986   000012                     	ds	1
   987   000013                     setMotorPWM@negDuty:
   988                           	callstack 0
   989   000013                     pad@p:
   990                           	callstack 0
   991                           
   992                           ; 2 bytes @ 0x12
   993   000013                     	ds	1
   994   000014                     stop@mL:
   995                           	callstack 0
   996   000014                     turnLeft@mL:
   997                           	callstack 0
   998   000014                     turnRight@mL:
   999                           	callstack 0
  1000   000014                     fullSpeedBack@mL:
  1001                           	callstack 0
  1002   000014                     ___flmul@a:
  1003                           	callstack 0
  1004                           
  1005                           ; 4 bytes @ 0x13
  1006   000014                     	ds	1
  1007   000015                     ??_pad:
  1008   000015                     stop@mR:
  1009                           	callstack 0
  1010   000015                     turnLeft@mR:
  1011                           	callstack 0
  1012   000015                     turnRight@mR:
  1013                           	callstack 0
  1014   000015                     fullSpeedBack@mR:
  1015                           	callstack 0
  1016                           
  1017                           ; 1 bytes @ 0x14
  1018   000015                     	ds	1
  1019   000016                     ??_stop:
  1020   000016                     ??_turnLeft:
  1021   000016                     ??_turnRight:
  1022   000016                     ??_fullSpeedBack:
  1023   000016                     ___aldiv@counter:
  1024                           	callstack 0
  1025   000016                     pad@i:
  1026                           	callstack 0
  1027   000016                     ___flsub@a:
  1028                           	callstack 0
  1029                           
  1030                           ; 4 bytes @ 0x15
  1031   000016                     	ds	1
  1032   000017                     ___aldiv@sign:
  1033                           	callstack 0
  1034   000017                     turnLeft@i:
  1035                           	callstack 0
  1036   000017                     turnRight@i:
  1037                           	callstack 0
  1038   000017                     fullSpeedBack@power:
  1039                           	callstack 0
  1040                           
  1041                           ; 2 bytes @ 0x16
  1042   000017                     	ds	1
  1043   000018                     ??___flmul:
  1044   000018                     dtoa@fp:
  1045                           	callstack 0
  1046   000018                     ___aldiv@quotient:
  1047                           	callstack 0
  1048                           
  1049                           ; 4 bytes @ 0x17
  1050   000018                     	ds	1
  1051   000019                     right90@mL:
  1052                           	callstack 0
  1053   000019                     left90@mL:
  1054                           	callstack 0
  1055   000019                     turn180@mL:
  1056                           	callstack 0
  1057   000019                     right135@mL:
  1058                           	callstack 0
  1059   000019                     left135@mL:
  1060                           	callstack 0
  1061   000019                     backHalf@mL:
  1062                           	callstack 0
  1063   000019                     backOneAndHalf@mL:
  1064                           	callstack 0
  1065   000019                     dtoa@d:
  1066                           	callstack 0
  1067                           
  1068                           ; 2 bytes @ 0x18
  1069   000019                     	ds	1
  1070   00001A                     right90@mR:
  1071                           	callstack 0
  1072   00001A                     left90@mR:
  1073                           	callstack 0
  1074   00001A                     turn180@mR:
  1075                           	callstack 0
  1076   00001A                     right135@mR:
  1077                           	callstack 0
  1078   00001A                     left135@mR:
  1079                           	callstack 0
  1080   00001A                     backHalf@mR:
  1081                           	callstack 0
  1082   00001A                     backOneAndHalf@mR:
  1083                           	callstack 0
  1084                           
  1085                           ; 1 bytes @ 0x19
  1086   00001A                     	ds	1
  1087   00001B                     ??_backHalf:
  1088   00001B                     ??_backOneAndHalf:
  1089   00001B                     right90@factor:
  1090                           	callstack 0
  1091   00001B                     left90@factor:
  1092                           	callstack 0
  1093   00001B                     turn180@factor:
  1094                           	callstack 0
  1095   00001B                     right135@factor:
  1096                           	callstack 0
  1097   00001B                     left135@factor:
  1098                           	callstack 0
  1099   00001B                     _dtoa$3143:
  1100                           	callstack 0
  1101                           
  1102                           ; 2 bytes @ 0x1A
  1103   00001B                     	ds	1
  1104   00001C                     ?_get16bitTMR0val:
  1105                           	callstack 0
  1106   00001C                     ___flmul@sign:
  1107                           	callstack 0
  1108   00001C                     get16bitTMR0val@path_step:
  1109                           	callstack 0
  1110                           
  1111                           ; 2 bytes @ 0x1B
  1112   00001C                     	ds	1
  1113   00001D                     dtoa@p:
  1114                           	callstack 0
  1115   00001D                     right90@delay_after_calibration:
  1116                           	callstack 0
  1117   00001D                     left90@delay_after_calibration:
  1118                           	callstack 0
  1119   00001D                     turn180@delay_after_calibration:
  1120                           	callstack 0
  1121   00001D                     right135@delay_after_calibration:
  1122                           	callstack 0
  1123   00001D                     left135@delay_after_calibration:
  1124                           	callstack 0
  1125   00001D                     ___flmul@grs:
  1126                           	callstack 0
  1127                           
  1128                           ; 4 bytes @ 0x1C
  1129   00001D                     	ds	1
  1130   00001E                     ??_get16bitTMR0val:
  1131   00001E                     dtoa@w:
  1132                           	callstack 0
  1133                           
  1134                           ; 2 bytes @ 0x1D
  1135   00001E                     	ds	1
  1136   00001F                     moveRed@mL:
  1137                           	callstack 0
  1138   00001F                     moveGreen@mL:
  1139                           	callstack 0
  1140   00001F                     moveBlue@mL:
  1141                           	callstack 0
  1142   00001F                     moveYellow@mL:
  1143                           	callstack 0
  1144   00001F                     movePink@mL:
  1145                           	callstack 0
  1146   00001F                     moveOrange@mL:
  1147                           	callstack 0
  1148   00001F                     moveLightBlue@mL:
  1149                           	callstack 0
  1150   00001F                     moveWhite@mL:
  1151                           	callstack 0
  1152   00001F                     reverseTurn@mL:
  1153                           	callstack 0
  1154                           
  1155                           ; 1 bytes @ 0x1E
  1156   00001F                     	ds	1
  1157   000020                     moveRed@mR:
  1158                           	callstack 0
  1159   000020                     moveGreen@mR:
  1160                           	callstack 0
  1161   000020                     moveBlue@mR:
  1162                           	callstack 0
  1163   000020                     moveYellow@mR:
  1164                           	callstack 0
  1165   000020                     movePink@mR:
  1166                           	callstack 0
  1167   000020                     moveOrange@mR:
  1168                           	callstack 0
  1169   000020                     moveLightBlue@mR:
  1170                           	callstack 0
  1171   000020                     moveWhite@mR:
  1172                           	callstack 0
  1173   000020                     reverseTurn@mR:
  1174                           	callstack 0
  1175   000020                     dtoa@s:
  1176                           	callstack 0
  1177                           
  1178                           ; 1 bytes @ 0x1F
  1179   000020                     	ds	1
  1180   000021                     reverseTurn@actionStep:
  1181                           	callstack 0
  1182   000021                     ___flmul@aexp:
  1183                           	callstack 0
  1184   000021                     moveRed@factor:
  1185                           	callstack 0
  1186   000021                     moveGreen@factor:
  1187                           	callstack 0
  1188   000021                     moveBlue@factor:
  1189                           	callstack 0
  1190   000021                     moveYellow@factor:
  1191                           	callstack 0
  1192   000021                     movePink@factor:
  1193                           	callstack 0
  1194   000021                     moveOrange@factor:
  1195                           	callstack 0
  1196   000021                     moveLightBlue@factor:
  1197                           	callstack 0
  1198   000021                     moveWhite@factor:
  1199                           	callstack 0
  1200   000021                     dtoa@i:
  1201                           	callstack 0
  1202                           
  1203                           ; 2 bytes @ 0x20
  1204   000021                     	ds	1
  1205   000022                     ___flmul@bexp:
  1206                           	callstack 0
  1207   000022                     get16bitTMR0val@time_ms:
  1208                           	callstack 0
  1209   000022                     reverseTurn@time_ms:
  1210                           	callstack 0
  1211                           
  1212                           ; 4 bytes @ 0x21
  1213   000022                     	ds	1
  1214   000023                     ??_moveRed:
  1215   000023                     ??_moveGreen:
  1216   000023                     ??_moveBlue:
  1217   000023                     ??_moveLightBlue:
  1218   000023                     ??_moveYellow:
  1219   000023                     ??_moveOrange:
  1220   000023                     ??_movePink:
  1221   000023                     ??_moveWhite:
  1222   000023                     vfpfcnvrt@fp:
  1223                           	callstack 0
  1224   000023                     ___flmul@prod:
  1225                           	callstack 0
  1226                           
  1227                           ; 4 bytes @ 0x22
  1228   000023                     	ds	1
  1229   000024                     vfpfcnvrt@fmt:
  1230                           	callstack 0
  1231                           
  1232                           ; 1 bytes @ 0x23
  1233   000024                     	ds	1
  1234   000025                     ?_decision:
  1235                           	callstack 0
  1236   000025                     vfpfcnvrt@ap:
  1237                           	callstack 0
  1238   000025                     decision@hue:
  1239                           	callstack 0
  1240                           
  1241                           ; 2 bytes @ 0x24
  1242   000025                     	ds	1
  1243   000026                     ??_vfpfcnvrt:
  1244   000026                     get16bitTMR0val@combined_value:
  1245                           	callstack 0
  1246   000026                     reverseTurn@factor:
  1247                           	callstack 0
  1248                           
  1249                           ; 2 bytes @ 0x25
  1250   000026                     	ds	1
  1251   000027                     decision@path_step:
  1252                           	callstack 0
  1253   000027                     ___flmul@temp:
  1254                           	callstack 0
  1255                           
  1256                           ; 2 bytes @ 0x26
  1257   000027                     	ds	1
  1258   000028                     ??_reverseTurn:
  1259   000028                     vfpfcnvrt@convarg:
  1260                           	callstack 0
  1261                           
  1262                           ; 4 bytes @ 0x27
  1263   000028                     	ds	1
  1264   000029                     ?___fldiv:
  1265                           	callstack 0
  1266   000029                     decision@factor:
  1267                           	callstack 0
  1268   000029                     ___fldiv@b:
  1269                           	callstack 0
  1270                           
  1271                           ; 4 bytes @ 0x28
  1272   000029                     	ds	2
  1273   00002B                     
  1274                           ; 1 bytes @ 0x2A
  1275   00002B                     	ds	1
  1276   00002C                     vfpfcnvrt@done:
  1277                           	callstack 0
  1278                           
  1279                           ; 1 bytes @ 0x2B
  1280   00002C                     	ds	1
  1281   00002D                     vfpfcnvrt@cp:
  1282                           	callstack 0
  1283   00002D                     ___fldiv@a:
  1284                           	callstack 0
  1285                           
  1286                           ; 4 bytes @ 0x2C
  1287   00002D                     	ds	1
  1288   00002E                     ?_vfprintf:
  1289                           	callstack 0
  1290   00002E                     vfprintf@fp:
  1291                           	callstack 0
  1292                           
  1293                           ; 1 bytes @ 0x2D
  1294   00002E                     	ds	1
  1295   00002F                     vfprintf@fmt:
  1296                           	callstack 0
  1297                           
  1298                           ; 1 bytes @ 0x2E
  1299   00002F                     	ds	1
  1300   000030                     vfprintf@ap:
  1301                           	callstack 0
  1302                           
  1303                           ; 1 bytes @ 0x2F
  1304   000030                     	ds	1
  1305   000031                     ??___fldiv:
  1306   000031                     vfprintf@cfmt:
  1307                           	callstack 0
  1308                           
  1309                           ; 1 bytes @ 0x30
  1310   000031                     	ds	1
  1311   000032                     ?_sprintf:
  1312                           	callstack 0
  1313   000032                     sprintf@s:
  1314                           	callstack 0
  1315                           
  1316                           ; 1 bytes @ 0x31
  1317   000032                     	ds	1
  1318   000033                     sprintf@fmt:
  1319                           	callstack 0
  1320                           
  1321                           ; 1 bytes @ 0x32
  1322   000033                     	ds	2
  1323   000035                     ___fldiv@rem:
  1324                           	callstack 0
  1325                           
  1326                           ; 4 bytes @ 0x34
  1327   000035                     	ds	3
  1328   000038                     sprintf@ap:
  1329                           	callstack 0
  1330                           
  1331                           ; 1 bytes @ 0x37
  1332   000038                     	ds	1
  1333   000039                     ___fldiv@sign:
  1334                           	callstack 0
  1335   000039                     sprintf@f:
  1336                           	callstack 0
  1337                           
  1338                           ; 12 bytes @ 0x38
  1339   000039                     	ds	1
  1340   00003A                     ___fldiv@new_exp:
  1341                           	callstack 0
  1342                           
  1343                           ; 2 bytes @ 0x39
  1344   00003A                     	ds	2
  1345   00003C                     ___fldiv@grs:
  1346                           	callstack 0
  1347                           
  1348                           ; 4 bytes @ 0x3B
  1349   00003C                     	ds	4
  1350   000040                     ___fldiv@bexp:
  1351                           	callstack 0
  1352                           
  1353                           ; 1 bytes @ 0x3F
  1354   000040                     	ds	1
  1355   000041                     ___fldiv@aexp:
  1356                           	callstack 0
  1357                           
  1358                           ; 1 bytes @ 0x40
  1359   000041                     	ds	1
  1360   000042                     ?___fltol:
  1361                           	callstack 0
  1362   000042                     ___fltol@f1:
  1363                           	callstack 0
  1364                           
  1365                           ; 4 bytes @ 0x41
  1366   000042                     	ds	4
  1367   000046                     ??___fltol:
  1368                           
  1369                           ; 1 bytes @ 0x45
  1370   000046                     	ds	4
  1371   00004A                     ___fltol@sign1:
  1372                           	callstack 0
  1373                           
  1374                           ; 1 bytes @ 0x49
  1375   00004A                     	ds	1
  1376   00004B                     ___fltol@exp1:
  1377                           	callstack 0
  1378                           
  1379                           ; 1 bytes @ 0x4A
  1380   00004B                     	ds	1
  1381   00004C                     ?_convert_rgb2hue:
  1382                           	callstack 0
  1383   00004C                     convert_rgb2hue@cMax:
  1384                           	callstack 0
  1385   00004C                     fullSpeedAhead@mL:
  1386                           	callstack 0
  1387   00004C                     send2USART@hue:
  1388                           	callstack 0
  1389                           
  1390                           ; 2 bytes @ 0x4B
  1391   00004C                     	ds	1
  1392   00004D                     convert_rgb2hue@cCurr:
  1393                           	callstack 0
  1394   00004D                     fullSpeedAhead@mR:
  1395                           	callstack 0
  1396                           
  1397                           ; 1 bytes @ 0x4C
  1398   00004D                     	ds	1
  1399   00004E                     ??_convert_rgb2hue:
  1400   00004E                     ??_fullSpeedAhead:
  1401   00004E                     calibration_colors@cCal:
  1402                           	callstack 0
  1403                           
  1404                           ; 1 bytes @ 0x4D
  1405   00004E                     	ds	1
  1406   00004F                     ??_calibration_colors:
  1407   00004F                     fullSpeedAhead@power:
  1408                           	callstack 0
  1409                           
  1410                           ; 2 bytes @ 0x4E
  1411   00004F                     	ds	1
  1412   000050                     ?_reading_hue:
  1413                           	callstack 0
  1414   000050                     reading_hue@cCurr:
  1415                           	callstack 0
  1416                           
  1417                           ; 1 bytes @ 0x4F
  1418   000050                     	ds	1
  1419   000051                     reverseStraight@mL:
  1420                           	callstack 0
  1421                           
  1422                           ; 1 bytes @ 0x50
  1423   000051                     	ds	1
  1424   000052                     ??_reading_hue:
  1425   000052                     reverseStraight@mR:
  1426                           	callstack 0
  1427                           
  1428                           ; 1 bytes @ 0x51
  1429   000052                     	ds	1
  1430   000053                     reverseStraight@time_ms:
  1431                           	callstack 0
  1432                           
  1433                           ; 4 bytes @ 0x52
  1434   000053                     	ds	1
  1435   000054                     reading_hue@hue:
  1436                           	callstack 0
  1437                           
  1438                           ; 2 bytes @ 0x53
  1439   000054                     	ds	3
  1440   000057                     ??_reverseStraight:
  1441                           
  1442                           ; 1 bytes @ 0x56
  1443   000057                     	ds	2
  1444   000059                     reverseStraight@delayMs:
  1445                           	callstack 0
  1446                           
  1447                           ; 2 bytes @ 0x58
  1448   000059                     	ds	2
  1449                           
  1450 ;;
  1451 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1452 ;;
  1453 ;; *************** function _main *****************
  1454 ;; Defined at:
  1455 ;;		line 30 in file "main.c"
  1456 ;; Parameters:    Size  Location     Type
  1457 ;;		None
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;  white           2   80[BANK0 ] unsigned int 
  1460 ;;  clear_curren    4   92[BANK0 ] float 
  1461 ;;  clear_max       4   86[BANK0 ] float 
  1462 ;;  clear_norm      2   96[BANK0 ] unsigned int 
  1463 ;;  path_step       2   90[BANK0 ] unsigned int 
  1464 ;;  hue             2   84[BANK0 ] unsigned int 
  1465 ;;  PWMcycle        2    0        unsigned int 
  1466 ;;  factor          2   82[BANK0 ] unsigned int 
  1467 ;;  ambient         2   78[BANK0 ] unsigned int 
  1468 ;; Return value:  Size  Location     Type
  1469 ;;                  1    wreg      void 
  1470 ;; Registers used:
  1471 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1472 ;; Tracked objects:
  1473 ;;		On entry : 0/0
  1474 ;;		On exit  : 0/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1478 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1479 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1480 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1481 ;;Total ram usage:       22 bytes
  1482 ;; Hardware stack levels required when called: 11
  1483 ;; This function calls:
  1484 ;;		_ADC_init
  1485 ;;		_Timer0_init
  1486 ;;		___fldiv
  1487 ;;		___flmul
  1488 ;;		___fltol
  1489 ;;		___xxtofl
  1490 ;;		_calibration_colors
  1491 ;;		_color_click_init
  1492 ;;		_color_read_Clear
  1493 ;;		_decision
  1494 ;;		_fullSpeedAhead
  1495 ;;		_get16bitTMR0val
  1496 ;;		_initDCmotorsPWM
  1497 ;;		_initUSART4
  1498 ;;		_reading_hue
  1499 ;;		_returnHome
  1500 ;;		_send2USART
  1501 ;;		_stop
  1502 ;; This function is called by:
  1503 ;;		Startup code after reset
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           	psect	text0
  1508   001658                     __ptext0:
  1509                           	callstack 0
  1510   001658                     _main:
  1511                           	callstack 20
  1512   001658                     
  1513                           ;main.c: 32:     ADC_init();
  1514   001658  ECBE  F025         	call	_ADC_init	;wreg free
  1515   00165C                     
  1516                           ;main.c: 33:     color_click_init();
  1517   00165C  ECA4  F024         	call	_color_click_init	;wreg free
  1518   001660                     
  1519                           ;main.c: 34:     initUSART4();
  1520   001660  ECA0  F025         	call	_initUSART4	;wreg free
  1521   001664                     
  1522                           ;main.c: 35:     Timer0_init();
  1523   001664  EC3C  F025         	call	_Timer0_init	;wreg free
  1524   001668                     
  1525                           ;main.c: 39:     initDCmotorsPWM(PWMcycle);
  1526   001668  0E00               	movlw	0
  1527   00166A  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1528   00166C  0E63               	movlw	99
  1529   00166E  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1530   001670  ECD0  F01F         	call	_initDCmotorsPWM	;wreg free
  1531   001674                     
  1532                           ;main.c: 42:     motorL.power = 0;
  1533   001674  0E00               	movlw	0
  1534   001676  0100               	movlb	0	; () banked
  1535   001678  6FE7               	movwf	_motorL& (0+255),b
  1536   00167A                     
  1537                           ; BSR set to: 0
  1538                           ;main.c: 43:     motorL.direction = 1;
  1539   00167A  0E01               	movlw	1
  1540   00167C  6FE8               	movwf	(_motorL+1)& (0+255),b
  1541   00167E                     
  1542                           ; BSR set to: 0
  1543                           ;main.c: 44:     motorL.brakemode = 1;
  1544   00167E  0E01               	movlw	1
  1545   001680  6FE9               	movwf	(_motorL+2)& (0+255),b
  1546   001682                     
  1547                           ; BSR set to: 0
  1548                           ;main.c: 45:     motorL.PWMperiod = PWMcycle;
  1549   001682  0E00               	movlw	0
  1550   001684  6FEB               	movwf	(_motorL+4)& (0+255),b
  1551   001686  0E63               	movlw	99
  1552   001688  6FEA               	movwf	(_motorL+3)& (0+255),b
  1553   00168A                     
  1554                           ; BSR set to: 0
  1555                           ;main.c: 46:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1556   00168A  0EAA               	movlw	170
  1557   00168C  6FEC               	movwf	(_motorL+5)& (0+255),b
  1558   00168E  0E0F               	movlw	15
  1559   001690  6FED               	movwf	(_motorL+6)& (0+255),b
  1560   001692                     
  1561                           ; BSR set to: 0
  1562                           ;main.c: 47:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1563   001692  0EA6               	movlw	166
  1564   001694  6FEE               	movwf	(_motorL+7)& (0+255),b
  1565   001696  0E0F               	movlw	15
  1566   001698  6FEF               	movwf	(_motorL+8)& (0+255),b
  1567   00169A                     
  1568                           ; BSR set to: 0
  1569                           ;main.c: 49:     motorR.power = 0;
  1570   00169A  0E00               	movlw	0
  1571   00169C  6FDE               	movwf	_motorR& (0+255),b
  1572   00169E                     
  1573                           ; BSR set to: 0
  1574                           ;main.c: 50:     motorR.direction = 1;
  1575   00169E  0E01               	movlw	1
  1576   0016A0  6FDF               	movwf	(_motorR+1)& (0+255),b
  1577   0016A2                     
  1578                           ; BSR set to: 0
  1579                           ;main.c: 51:     motorR.brakemode = 1;
  1580   0016A2  0E01               	movlw	1
  1581   0016A4  6FE0               	movwf	(_motorR+2)& (0+255),b
  1582   0016A6                     
  1583                           ; BSR set to: 0
  1584                           ;main.c: 52:     motorR.PWMperiod = PWMcycle;
  1585   0016A6  0E00               	movlw	0
  1586   0016A8  6FE2               	movwf	(_motorR+4)& (0+255),b
  1587   0016AA  0E63               	movlw	99
  1588   0016AC  6FE1               	movwf	(_motorR+3)& (0+255),b
  1589   0016AE                     
  1590                           ; BSR set to: 0
  1591                           ;main.c: 53:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1592   0016AE  0E25               	movlw	37
  1593   0016B0  6FE3               	movwf	(_motorR+5)& (0+255),b
  1594   0016B2  0E0F               	movlw	15
  1595   0016B4  6FE4               	movwf	(_motorR+6)& (0+255),b
  1596   0016B6                     
  1597                           ; BSR set to: 0
  1598                           ;main.c: 54:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1599   0016B6  0E21               	movlw	33
  1600   0016B8  6FE5               	movwf	(_motorR+7)& (0+255),b
  1601   0016BA  0E0F               	movlw	15
  1602   0016BC  6FE6               	movwf	(_motorR+8)& (0+255),b
  1603   0016BE                     
  1604                           ; BSR set to: 0
  1605                           ;main.c: 61:     TRISGbits.TRISG0 = 0;
  1606   0016BE  9087               	bcf	135,0,c	;volatile
  1607   0016C0                     
  1608                           ; BSR set to: 0
  1609                           ;main.c: 62:     LATGbits.LATG0 = 0;
  1610   0016C0  907F               	bcf	127,0,c	;volatile
  1611   0016C2                     
  1612                           ; BSR set to: 0
  1613                           ;main.c: 63:     TRISEbits.TRISE7 = 0;
  1614   0016C2  9E85               	bcf	133,7,c	;volatile
  1615   0016C4                     
  1616                           ; BSR set to: 0
  1617                           ;main.c: 64:     LATEbits.LATE7 = 0;
  1618   0016C4  9E7D               	bcf	125,7,c	;volatile
  1619   0016C6                     
  1620                           ; BSR set to: 0
  1621                           ;main.c: 65:     TRISAbits.TRISA3 = 0;
  1622   0016C6  9681               	bcf	129,3,c	;volatile
  1623   0016C8                     
  1624                           ; BSR set to: 0
  1625                           ;main.c: 66:     LATAbits.LATA3 = 0;
  1626   0016C8  9679               	bcf	121,3,c	;volatile
  1627   0016CA                     
  1628                           ; BSR set to: 0
  1629                           ;main.c: 71:     TRISFbits.TRISF2=1;
  1630   0016CA  8486               	bsf	134,2,c	;volatile
  1631   0016CC                     
  1632                           ; BSR set to: 0
  1633                           ;main.c: 72:     ANSELFbits.ANSELF2=0;
  1634   0016CC  010E               	movlb	14	; () banked
  1635   0016CE  95B4               	bcf	180,2,b	;volatile
  1636   0016D0                     
  1637                           ; BSR set to: 14
  1638                           ;main.c: 73:     TRISFbits.TRISF3=1;
  1639   0016D0  8686               	bsf	134,3,c	;volatile
  1640   0016D2                     
  1641                           ; BSR set to: 14
  1642                           ;main.c: 74:     ANSELFbits.ANSELF3=0;
  1643   0016D2  97B4               	bcf	180,3,b	;volatile
  1644   0016D4                     
  1645                           ; BSR set to: 14
  1646                           ;main.c: 77:     TRISGbits.TRISG1 = 0;
  1647   0016D4  9287               	bcf	135,1,c	;volatile
  1648   0016D6                     
  1649                           ; BSR set to: 14
  1650                           ;main.c: 78:     LATGbits.LATG1 = 0;
  1651   0016D6  927F               	bcf	127,1,c	;volatile
  1652   0016D8                     
  1653                           ; BSR set to: 14
  1654                           ;main.c: 84:     TRISHbits.TRISH3 = 0;
  1655   0016D8  9688               	bcf	136,3,c	;volatile
  1656   0016DA                     
  1657                           ; BSR set to: 14
  1658                           ;main.c: 85:     LATHbits.LATH3 = 1;
  1659   0016DA  8680               	bsf	128,3,c	;volatile
  1660   0016DC                     
  1661                           ; BSR set to: 14
  1662                           ;main.c: 86:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1663   0016DC  0E19               	movlw	25
  1664   0016DE  0100               	movlb	0	; () banked
  1665   0016E0  6FAD               	movwf	(??_main+1)& (0+255),b
  1666   0016E2  0E5A               	movlw	90
  1667   0016E4  6FAC               	movwf	??_main& (0+255),b
  1668   0016E6  0EB1               	movlw	177
  1669   0016E8                     u5317:
  1670   0016E8  2EE8               	decfsz	wreg,f,c
  1671   0016EA  D7FE               	bra	u5317
  1672   0016EC  2FAC               	decfsz	??_main& (0+255),f,b
  1673   0016EE  D7FC               	bra	u5317
  1674   0016F0  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1675   0016F2  D7FA               	bra	u5317
  1676   0016F4  D000               	nop2	
  1677   0016F6                     
  1678                           ;main.c: 87:     LATHbits.LATH3 = 0;
  1679   0016F6  9680               	bcf	128,3,c	;volatile
  1680   0016F8                     
  1681                           ;main.c: 91:     calibration_colors(&colorCalibration);
  1682   0016F8  0ED4               	movlw	low _colorCalibration
  1683   0016FA  6E4E               	movwf	calibration_colors@cCal^0,c
  1684   0016FC  EC30  F015         	call	_calibration_colors	;wreg free
  1685   001700                     
  1686                           ;main.c: 93:     unsigned int clear_norm;;main.c: 94:     unsigned int path_step = 0;
  1687   001700  0E00               	movlw	0
  1688   001702  0100               	movlb	0	; () banked
  1689   001704  6FBB               	movwf	(main@path_step+1)& (0+255),b
  1690   001706  0E00               	movlw	0
  1691   001708  6FBA               	movwf	main@path_step& (0+255),b
  1692   00170A                     
  1693                           ; BSR set to: 0
  1694                           ;main.c: 95:     unsigned int hue;;main.c: 96:     unsigned int ambient;;main.c: 97:    
      +                           float clear_current;;main.c: 98:     float clear_max;;main.c: 99:     unsigned int fact
      +                          or;;main.c: 103:     ambient = colorCalibration.ambient;
  1695   00170A  C0DC  F0AE         	movff	_colorCalibration+8,main@ambient
  1696   00170E  C0DD  F0AF         	movff	_colorCalibration+9,main@ambient+1
  1697   001712                     
  1698                           ; BSR set to: 0
  1699                           ;main.c: 105:     send2USART(ambient);
  1700   001712  C0AE  F04C         	movff	main@ambient,send2USART@hue
  1701   001716  C0AF  F04D         	movff	main@ambient+1,send2USART@hue+1
  1702   00171A  ECAF  F025         	call	_send2USART	;wreg free
  1703   00171E                     l6011:
  1704                           
  1705                           ;main.c: 109:         LATGbits.LATG0 = 1;
  1706   00171E  807F               	bsf	127,0,c	;volatile
  1707   001720                     
  1708                           ;main.c: 110:         LATEbits.LATE7 = 1;
  1709   001720  8E7D               	bsf	125,7,c	;volatile
  1710   001722                     
  1711                           ;main.c: 111:         LATAbits.LATA3 = 1;
  1712   001722  8679               	bsf	121,3,c	;volatile
  1713   001724                     
  1714                           ;main.c: 114:         fullSpeedAhead(&motorL,&motorR);
  1715   001724  0EE7               	movlw	low _motorL
  1716   001726  6E4C               	movwf	fullSpeedAhead@mL^0,c
  1717   001728  0EDE               	movlw	low _motorR
  1718   00172A  6E4D               	movwf	fullSpeedAhead@mR^0,c
  1719   00172C  EC16  F01D         	call	_fullSpeedAhead	;wreg free
  1720   001730                     
  1721                           ;main.c: 115:         T0CON0bits.T0EN=1;
  1722   001730  8ED5               	bsf	213,7,c	;volatile
  1723   001732                     
  1724                           ;main.c: 117:         colorCurrent.clear = color_read_Clear();
  1725   001732  EC04  F022         	call	_color_read_Clear	;wreg free
  1726   001736  C006  F0D0         	movff	?_color_read_Clear,_colorCurrent+6
  1727   00173A  C007  F0D1         	movff	?_color_read_Clear+1,_colorCurrent+7
  1728   00173E                     
  1729                           ;main.c: 119:         clear_current = colorCurrent.clear;
  1730   00173E  C0D0  F002         	movff	_colorCurrent+6,___xxtofl@val
  1731   001742  C0D1  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1732   001746  6A04               	clrf	(___xxtofl@val+2)^0,c
  1733   001748  6A05               	clrf	(___xxtofl@val+3)^0,c
  1734   00174A  0E00               	movlw	0
  1735   00174C  EC53  F016         	call	___xxtofl
  1736   001750  C002  F0BC         	movff	?___xxtofl,main@clear_current
  1737   001754  C003  F0BD         	movff	?___xxtofl+1,main@clear_current+1
  1738   001758  C004  F0BE         	movff	?___xxtofl+2,main@clear_current+2
  1739   00175C  C005  F0BF         	movff	?___xxtofl+3,main@clear_current+3
  1740   001760                     
  1741                           ;main.c: 120:         send2USART(clear_current);
  1742   001760  C0BC  F042         	movff	main@clear_current,___fltol@f1
  1743   001764  C0BD  F043         	movff	main@clear_current+1,___fltol@f1+1
  1744   001768  C0BE  F044         	movff	main@clear_current+2,___fltol@f1+2
  1745   00176C  C0BF  F045         	movff	main@clear_current+3,___fltol@f1+3
  1746   001770  EC26  F01B         	call	___fltol	;wreg free
  1747   001774  C042  F04C         	movff	?___fltol,send2USART@hue
  1748   001778  C043  F04D         	movff	?___fltol+1,send2USART@hue+1
  1749   00177C  ECAF  F025         	call	_send2USART	;wreg free
  1750   001780                     
  1751                           ;main.c: 121:         clear_max = colorCalibration.clear;
  1752   001780  C0DA  F002         	movff	_colorCalibration+6,___xxtofl@val
  1753   001784  C0DB  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1754   001788  6A04               	clrf	(___xxtofl@val+2)^0,c
  1755   00178A  6A05               	clrf	(___xxtofl@val+3)^0,c
  1756   00178C  0E00               	movlw	0
  1757   00178E  EC53  F016         	call	___xxtofl
  1758   001792  C002  F0B6         	movff	?___xxtofl,main@clear_max
  1759   001796  C003  F0B7         	movff	?___xxtofl+1,main@clear_max+1
  1760   00179A  C004  F0B8         	movff	?___xxtofl+2,main@clear_max+2
  1761   00179E  C005  F0B9         	movff	?___xxtofl+3,main@clear_max+3
  1762   0017A2                     
  1763                           ;main.c: 123:         clear_norm = (clear_current)*100/clear_max;
  1764   0017A2  C0B6  F02D         	movff	main@clear_max,___fldiv@a
  1765   0017A6  C0B7  F02E         	movff	main@clear_max+1,___fldiv@a+1
  1766   0017AA  C0B8  F02F         	movff	main@clear_max+2,___fldiv@a+2
  1767   0017AE  C0B9  F030         	movff	main@clear_max+3,___fldiv@a+3
  1768   0017B2  0E00               	movlw	0
  1769   0017B4  6E14               	movwf	___flmul@a^0,c
  1770   0017B6  0E00               	movlw	0
  1771   0017B8  6E15               	movwf	(___flmul@a+1)^0,c
  1772   0017BA  0EC8               	movlw	200
  1773   0017BC  6E16               	movwf	(___flmul@a+2)^0,c
  1774   0017BE  0E42               	movlw	66
  1775   0017C0  6E17               	movwf	(___flmul@a+3)^0,c
  1776   0017C2  C0BC  F010         	movff	main@clear_current,___flmul@b
  1777   0017C6  C0BD  F011         	movff	main@clear_current+1,___flmul@b+1
  1778   0017CA  C0BE  F012         	movff	main@clear_current+2,___flmul@b+2
  1779   0017CE  C0BF  F013         	movff	main@clear_current+3,___flmul@b+3
  1780   0017D2  ECF0  F00F         	call	___flmul	;wreg free
  1781   0017D6  C010  F029         	movff	?___flmul,___fldiv@b
  1782   0017DA  C011  F02A         	movff	?___flmul+1,___fldiv@b+1
  1783   0017DE  C012  F02B         	movff	?___flmul+2,___fldiv@b+2
  1784   0017E2  C013  F02C         	movff	?___flmul+3,___fldiv@b+3
  1785   0017E6  EC05  F012         	call	___fldiv	;wreg free
  1786   0017EA  C029  F042         	movff	?___fldiv,___fltol@f1
  1787   0017EE  C02A  F043         	movff	?___fldiv+1,___fltol@f1+1
  1788   0017F2  C02B  F044         	movff	?___fldiv+2,___fltol@f1+2
  1789   0017F6  C02C  F045         	movff	?___fldiv+3,___fltol@f1+3
  1790   0017FA  EC26  F01B         	call	___fltol	;wreg free
  1791   0017FE  C042  F0C0         	movff	?___fltol,main@clear_norm
  1792   001802  C043  F0C1         	movff	?___fltol+1,main@clear_norm+1
  1793   001806                     l6031:
  1794                           
  1795                           ;main.c: 126:         send2USART(clear_norm);
  1796   001806  C0C0  F04C         	movff	main@clear_norm,send2USART@hue
  1797   00180A  C0C1  F04D         	movff	main@clear_norm+1,send2USART@hue+1
  1798   00180E  ECAF  F025         	call	_send2USART	;wreg free
  1799                           
  1800                           ;main.c: 128:         while(clear_norm<7){
  1801   001812  EF67  F00C         	goto	l6039
  1802   001816                     l6033:
  1803                           
  1804                           ; BSR set to: 0
  1805                           ;main.c: 129:             (colorCurrent.clear) = color_read_Clear();
  1806   001816  EC04  F022         	call	_color_read_Clear	;wreg free
  1807   00181A  C006  F0D0         	movff	?_color_read_Clear,_colorCurrent+6
  1808   00181E  C007  F0D1         	movff	?_color_read_Clear+1,_colorCurrent+7
  1809                           
  1810                           ;main.c: 130:             clear_current = colorCurrent.clear;
  1811   001822  C0D0  F002         	movff	_colorCurrent+6,___xxtofl@val
  1812   001826  C0D1  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1813   00182A  6A04               	clrf	(___xxtofl@val+2)^0,c
  1814   00182C  6A05               	clrf	(___xxtofl@val+3)^0,c
  1815   00182E  0E00               	movlw	0
  1816   001830  EC53  F016         	call	___xxtofl
  1817   001834  C002  F0BC         	movff	?___xxtofl,main@clear_current
  1818   001838  C003  F0BD         	movff	?___xxtofl+1,main@clear_current+1
  1819   00183C  C004  F0BE         	movff	?___xxtofl+2,main@clear_current+2
  1820   001840  C005  F0BF         	movff	?___xxtofl+3,main@clear_current+3
  1821                           
  1822                           ;main.c: 131:             clear_max = colorCalibration.clear;
  1823   001844  C0DA  F002         	movff	_colorCalibration+6,___xxtofl@val
  1824   001848  C0DB  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1825   00184C  6A04               	clrf	(___xxtofl@val+2)^0,c
  1826   00184E  6A05               	clrf	(___xxtofl@val+3)^0,c
  1827   001850  0E00               	movlw	0
  1828   001852  EC53  F016         	call	___xxtofl
  1829   001856  C002  F0B6         	movff	?___xxtofl,main@clear_max
  1830   00185A  C003  F0B7         	movff	?___xxtofl+1,main@clear_max+1
  1831   00185E  C004  F0B8         	movff	?___xxtofl+2,main@clear_max+2
  1832   001862  C005  F0B9         	movff	?___xxtofl+3,main@clear_max+3
  1833   001866                     
  1834                           ;main.c: 132:             clear_norm = clear_current*100/clear_max;
  1835   001866  C0B6  F02D         	movff	main@clear_max,___fldiv@a
  1836   00186A  C0B7  F02E         	movff	main@clear_max+1,___fldiv@a+1
  1837   00186E  C0B8  F02F         	movff	main@clear_max+2,___fldiv@a+2
  1838   001872  C0B9  F030         	movff	main@clear_max+3,___fldiv@a+3
  1839   001876  0E00               	movlw	0
  1840   001878  6E14               	movwf	___flmul@a^0,c
  1841   00187A  0E00               	movlw	0
  1842   00187C  6E15               	movwf	(___flmul@a+1)^0,c
  1843   00187E  0EC8               	movlw	200
  1844   001880  6E16               	movwf	(___flmul@a+2)^0,c
  1845   001882  0E42               	movlw	66
  1846   001884  6E17               	movwf	(___flmul@a+3)^0,c
  1847   001886  C0BC  F010         	movff	main@clear_current,___flmul@b
  1848   00188A  C0BD  F011         	movff	main@clear_current+1,___flmul@b+1
  1849   00188E  C0BE  F012         	movff	main@clear_current+2,___flmul@b+2
  1850   001892  C0BF  F013         	movff	main@clear_current+3,___flmul@b+3
  1851   001896  ECF0  F00F         	call	___flmul	;wreg free
  1852   00189A  C010  F029         	movff	?___flmul,___fldiv@b
  1853   00189E  C011  F02A         	movff	?___flmul+1,___fldiv@b+1
  1854   0018A2  C012  F02B         	movff	?___flmul+2,___fldiv@b+2
  1855   0018A6  C013  F02C         	movff	?___flmul+3,___fldiv@b+3
  1856   0018AA  EC05  F012         	call	___fldiv	;wreg free
  1857   0018AE  C029  F042         	movff	?___fldiv,___fltol@f1
  1858   0018B2  C02A  F043         	movff	?___fldiv+1,___fltol@f1+1
  1859   0018B6  C02B  F044         	movff	?___fldiv+2,___fltol@f1+2
  1860   0018BA  C02C  F045         	movff	?___fldiv+3,___fltol@f1+3
  1861   0018BE  EC26  F01B         	call	___fltol	;wreg free
  1862   0018C2  C042  F0C0         	movff	?___fltol,main@clear_norm
  1863   0018C6  C043  F0C1         	movff	?___fltol+1,main@clear_norm+1
  1864   0018CA  EF03  F00C         	goto	l6031
  1865   0018CE                     l6039:
  1866                           
  1867                           ;main.c: 128:         while(clear_norm<7){
  1868   0018CE  0100               	movlb	0	; () banked
  1869   0018D0  51C1               	movf	(main@clear_norm+1)& (0+255),w,b
  1870   0018D2  E109               	bnz	u5240
  1871   0018D4  0E07               	movlw	7
  1872   0018D6  5DC0               	subwf	main@clear_norm& (0+255),w,b
  1873   0018D8  A0D8               	btfss	status,0,c
  1874   0018DA  EF71  F00C         	goto	u5241
  1875   0018DE  EF73  F00C         	goto	u5240
  1876   0018E2                     u5241:
  1877   0018E2  EF0B  F00C         	goto	l6033
  1878   0018E6                     u5240:
  1879   0018E6                     
  1880                           ; BSR set to: 0
  1881                           ;main.c: 137:         T0CON0bits.T0EN=0;
  1882   0018E6  9ED5               	bcf	213,7,c	;volatile
  1883   0018E8                     
  1884                           ; BSR set to: 0
  1885                           ;main.c: 139:         stop(&motorL,&motorR);
  1886   0018E8  0EE7               	movlw	low _motorL
  1887   0018EA  6E14               	movwf	stop@mL^0,c
  1888   0018EC  0EDE               	movlw	low _motorR
  1889   0018EE  6E15               	movwf	stop@mR^0,c
  1890   0018F0  EC18  F020         	call	_stop	;wreg free
  1891   0018F4                     
  1892                           ;main.c: 142:         path_step = get16bitTMR0val(path_step);
  1893   0018F4  C0BA  F01C         	movff	main@path_step,get16bitTMR0val@path_step
  1894   0018F8  C0BB  F01D         	movff	main@path_step+1,get16bitTMR0val@path_step+1
  1895   0018FC  EC36  F01F         	call	_get16bitTMR0val	;wreg free
  1896   001900  C01C  F0BA         	movff	?_get16bitTMR0val,main@path_step
  1897   001904  C01D  F0BB         	movff	?_get16bitTMR0val+1,main@path_step+1
  1898   001908                     
  1899                           ;main.c: 144:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1900   001908  0E11               	movlw	17
  1901   00190A  0100               	movlb	0	; () banked
  1902   00190C  6FAD               	movwf	(??_main+1)& (0+255),b
  1903   00190E  0E3C               	movlw	60
  1904   001910  6FAC               	movwf	??_main& (0+255),b
  1905   001912  0ECB               	movlw	203
  1906   001914                     u5327:
  1907   001914  2EE8               	decfsz	wreg,f,c
  1908   001916  D7FE               	bra	u5327
  1909   001918  2FAC               	decfsz	??_main& (0+255),f,b
  1910   00191A  D7FC               	bra	u5327
  1911   00191C  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1912   00191E  D7FA               	bra	u5327
  1913   001920                     
  1914                           ;main.c: 147:         fullSpeedAhead(&motorL,&motorR);
  1915   001920  0EE7               	movlw	low _motorL
  1916   001922  6E4C               	movwf	fullSpeedAhead@mL^0,c
  1917   001924  0EDE               	movlw	low _motorR
  1918   001926  6E4D               	movwf	fullSpeedAhead@mR^0,c
  1919   001928  EC16  F01D         	call	_fullSpeedAhead	;wreg free
  1920   00192C                     
  1921                           ;main.c: 148:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1922   00192C  0E19               	movlw	25
  1923   00192E  0100               	movlb	0	; () banked
  1924   001930  6FAD               	movwf	(??_main+1)& (0+255),b
  1925   001932  0E5A               	movlw	90
  1926   001934  6FAC               	movwf	??_main& (0+255),b
  1927   001936  0EB1               	movlw	177
  1928   001938                     u5337:
  1929   001938  2EE8               	decfsz	wreg,f,c
  1930   00193A  D7FE               	bra	u5337
  1931   00193C  2FAC               	decfsz	??_main& (0+255),f,b
  1932   00193E  D7FC               	bra	u5337
  1933   001940  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1934   001942  D7FA               	bra	u5337
  1935   001944  D000               	nop2	
  1936   001946                     
  1937                           ;main.c: 149:         stop(&motorL,&motorR);
  1938   001946  0EE7               	movlw	low _motorL
  1939   001948  6E14               	movwf	stop@mL^0,c
  1940   00194A  0EDE               	movlw	low _motorR
  1941   00194C  6E15               	movwf	stop@mR^0,c
  1942   00194E  EC18  F020         	call	_stop	;wreg free
  1943   001952                     
  1944                           ;main.c: 150:         _delay((unsigned long)((300)*(64000000/4000.0)));
  1945   001952  0E19               	movlw	25
  1946   001954  0100               	movlb	0	; () banked
  1947   001956  6FAD               	movwf	(??_main+1)& (0+255),b
  1948   001958  0E5A               	movlw	90
  1949   00195A  6FAC               	movwf	??_main& (0+255),b
  1950   00195C  0EB1               	movlw	177
  1951   00195E                     u5347:
  1952   00195E  2EE8               	decfsz	wreg,f,c
  1953   001960  D7FE               	bra	u5347
  1954   001962  2FAC               	decfsz	??_main& (0+255),f,b
  1955   001964  D7FC               	bra	u5347
  1956   001966  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  1957   001968  D7FA               	bra	u5347
  1958   00196A  D000               	nop2	
  1959   00196C                     
  1960                           ;main.c: 152:         hue = reading_hue(&colorCurrent);
  1961   00196C  0ECA               	movlw	low _colorCurrent
  1962   00196E  6E50               	movwf	reading_hue@cCurr^0,c
  1963   001970  ECA1  F01C         	call	_reading_hue	;wreg free
  1964   001974  C050  F0B4         	movff	?_reading_hue,main@hue
  1965   001978  C051  F0B5         	movff	?_reading_hue+1,main@hue+1
  1966   00197C                     
  1967                           ;main.c: 154:         clear_current = colorCurrent.clear;
  1968   00197C  C0D0  F002         	movff	_colorCurrent+6,___xxtofl@val
  1969   001980  C0D1  F003         	movff	_colorCurrent+7,___xxtofl@val+1
  1970   001984  6A04               	clrf	(___xxtofl@val+2)^0,c
  1971   001986  6A05               	clrf	(___xxtofl@val+3)^0,c
  1972   001988  0E00               	movlw	0
  1973   00198A  EC53  F016         	call	___xxtofl
  1974   00198E  C002  F0BC         	movff	?___xxtofl,main@clear_current
  1975   001992  C003  F0BD         	movff	?___xxtofl+1,main@clear_current+1
  1976   001996  C004  F0BE         	movff	?___xxtofl+2,main@clear_current+2
  1977   00199A  C005  F0BF         	movff	?___xxtofl+3,main@clear_current+3
  1978   00199E                     
  1979                           ;main.c: 155:         clear_max = colorCalibration.clear;
  1980   00199E  C0DA  F002         	movff	_colorCalibration+6,___xxtofl@val
  1981   0019A2  C0DB  F003         	movff	_colorCalibration+7,___xxtofl@val+1
  1982   0019A6  6A04               	clrf	(___xxtofl@val+2)^0,c
  1983   0019A8  6A05               	clrf	(___xxtofl@val+3)^0,c
  1984   0019AA  0E00               	movlw	0
  1985   0019AC  EC53  F016         	call	___xxtofl
  1986   0019B0  C002  F0B6         	movff	?___xxtofl,main@clear_max
  1987   0019B4  C003  F0B7         	movff	?___xxtofl+1,main@clear_max+1
  1988   0019B8  C004  F0B8         	movff	?___xxtofl+2,main@clear_max+2
  1989   0019BC  C005  F0B9         	movff	?___xxtofl+3,main@clear_max+3
  1990   0019C0                     
  1991                           ;main.c: 156:         clear_norm = clear_current*100/clear_max;
  1992   0019C0  C0B6  F02D         	movff	main@clear_max,___fldiv@a
  1993   0019C4  C0B7  F02E         	movff	main@clear_max+1,___fldiv@a+1
  1994   0019C8  C0B8  F02F         	movff	main@clear_max+2,___fldiv@a+2
  1995   0019CC  C0B9  F030         	movff	main@clear_max+3,___fldiv@a+3
  1996   0019D0  0E00               	movlw	0
  1997   0019D2  6E14               	movwf	___flmul@a^0,c
  1998   0019D4  0E00               	movlw	0
  1999   0019D6  6E15               	movwf	(___flmul@a+1)^0,c
  2000   0019D8  0EC8               	movlw	200
  2001   0019DA  6E16               	movwf	(___flmul@a+2)^0,c
  2002   0019DC  0E42               	movlw	66
  2003   0019DE  6E17               	movwf	(___flmul@a+3)^0,c
  2004   0019E0  C0BC  F010         	movff	main@clear_current,___flmul@b
  2005   0019E4  C0BD  F011         	movff	main@clear_current+1,___flmul@b+1
  2006   0019E8  C0BE  F012         	movff	main@clear_current+2,___flmul@b+2
  2007   0019EC  C0BF  F013         	movff	main@clear_current+3,___flmul@b+3
  2008   0019F0  ECF0  F00F         	call	___flmul	;wreg free
  2009   0019F4  C010  F029         	movff	?___flmul,___fldiv@b
  2010   0019F8  C011  F02A         	movff	?___flmul+1,___fldiv@b+1
  2011   0019FC  C012  F02B         	movff	?___flmul+2,___fldiv@b+2
  2012   001A00  C013  F02C         	movff	?___flmul+3,___fldiv@b+3
  2013   001A04  EC05  F012         	call	___fldiv	;wreg free
  2014   001A08  C029  F042         	movff	?___fldiv,___fltol@f1
  2015   001A0C  C02A  F043         	movff	?___fldiv+1,___fltol@f1+1
  2016   001A10  C02B  F044         	movff	?___fldiv+2,___fltol@f1+2
  2017   001A14  C02C  F045         	movff	?___fldiv+3,___fltol@f1+3
  2018   001A18  EC26  F01B         	call	___fltol	;wreg free
  2019   001A1C  C042  F0C0         	movff	?___fltol,main@clear_norm
  2020   001A20  C043  F0C1         	movff	?___fltol+1,main@clear_norm+1
  2021   001A24                     
  2022                           ;main.c: 158:         if (clear_norm > 20){
  2023   001A24  0100               	movlb	0	; () banked
  2024   001A26  51C1               	movf	(main@clear_norm+1)& (0+255),w,b
  2025   001A28  E109               	bnz	u5250
  2026   001A2A  0E15               	movlw	21
  2027   001A2C  5DC0               	subwf	main@clear_norm& (0+255),w,b
  2028   001A2E  A0D8               	btfss	status,0,c
  2029   001A30  EF1C  F00D         	goto	u5251
  2030   001A34  EF1E  F00D         	goto	u5250
  2031   001A38                     u5251:
  2032   001A38  EF37  F00D         	goto	l6071
  2033   001A3C                     u5250:
  2034   001A3C                     
  2035                           ; BSR set to: 0
  2036                           ;main.c: 159:             fullSpeedAhead(&motorL,&motorR);
  2037   001A3C  0EE7               	movlw	low _motorL
  2038   001A3E  6E4C               	movwf	fullSpeedAhead@mL^0,c
  2039   001A40  0EDE               	movlw	low _motorR
  2040   001A42  6E4D               	movwf	fullSpeedAhead@mR^0,c
  2041   001A44  EC16  F01D         	call	_fullSpeedAhead	;wreg free
  2042   001A48                     
  2043                           ;main.c: 160:             _delay((unsigned long)((100)*(64000000/4000.0)));
  2044   001A48  0E09               	movlw	9
  2045   001A4A  0100               	movlb	0	; () banked
  2046   001A4C  6FAD               	movwf	(??_main+1)& (0+255),b
  2047   001A4E  0E1E               	movlw	30
  2048   001A50  6FAC               	movwf	??_main& (0+255),b
  2049   001A52  0EE4               	movlw	228
  2050   001A54                     u5357:
  2051   001A54  2EE8               	decfsz	wreg,f,c
  2052   001A56  D7FE               	bra	u5357
  2053   001A58  2FAC               	decfsz	??_main& (0+255),f,b
  2054   001A5A  D7FC               	bra	u5357
  2055   001A5C  2FAD               	decfsz	(??_main+1)& (0+255),f,b
  2056   001A5E  D7FA               	bra	u5357
  2057   001A60  0000               	nop	
  2058   001A62                     
  2059                           ;main.c: 161:             stop(&motorL,&motorR);
  2060   001A62  0EE7               	movlw	low _motorL
  2061   001A64  6E14               	movwf	stop@mL^0,c
  2062   001A66  0EDE               	movlw	low _motorR
  2063   001A68  6E15               	movwf	stop@mR^0,c
  2064   001A6A  EC18  F020         	call	_stop	;wreg free
  2065   001A6E                     l6071:
  2066                           
  2067                           ;main.c: 163:         if ((clear_norm > 60 && !(hue >= 302 && hue <= 346)) || LATGbits.L
      +                          ATG1 == 1) {
  2068   001A6E  0100               	movlb	0	; () banked
  2069   001A70  51C1               	movf	(main@clear_norm+1)& (0+255),w,b
  2070   001A72  E109               	bnz	u5260
  2071   001A74  0E3D               	movlw	61
  2072   001A76  5DC0               	subwf	main@clear_norm& (0+255),w,b
  2073   001A78  A0D8               	btfss	status,0,c
  2074   001A7A  EF41  F00D         	goto	u5261
  2075   001A7E  EF43  F00D         	goto	u5260
  2076   001A82                     u5261:
  2077   001A82  EF59  F00D         	goto	l296
  2078   001A86                     u5260:
  2079   001A86                     
  2080                           ; BSR set to: 0
  2081   001A86  0E2E               	movlw	46
  2082   001A88  5DB4               	subwf	main@hue& (0+255),w,b
  2083   001A8A  0E01               	movlw	1
  2084   001A8C  59B5               	subwfb	(main@hue+1)& (0+255),w,b
  2085   001A8E  A0D8               	btfss	status,0,c
  2086   001A90  EF4C  F00D         	goto	u5271
  2087   001A94  EF4E  F00D         	goto	u5270
  2088   001A98                     u5271:
  2089   001A98  EF60  F00D         	goto	l6077
  2090   001A9C                     u5270:
  2091   001A9C                     
  2092                           ; BSR set to: 0
  2093   001A9C  0E5B               	movlw	91
  2094   001A9E  5DB4               	subwf	main@hue& (0+255),w,b
  2095   001AA0  0E01               	movlw	1
  2096   001AA2  59B5               	subwfb	(main@hue+1)& (0+255),w,b
  2097   001AA4  B0D8               	btfsc	status,0,c
  2098   001AA6  EF57  F00D         	goto	u5281
  2099   001AAA  EF59  F00D         	goto	u5280
  2100   001AAE                     u5281:
  2101   001AAE  EF60  F00D         	goto	l6077
  2102   001AB2                     u5280:
  2103   001AB2                     l296:
  2104                           
  2105                           ; BSR set to: 0
  2106   001AB2  A27F               	btfss	127,1,c	;volatile
  2107   001AB4  EF5E  F00D         	goto	u5291
  2108   001AB8  EF60  F00D         	goto	u5290
  2109   001ABC                     u5291:
  2110   001ABC  EF7A  F00D         	goto	l6085
  2111   001AC0                     u5290:
  2112   001AC0                     l6077:
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;main.c: 165:             unsigned int white = 8;
  2116   001AC0  0E00               	movlw	0
  2117   001AC2  6FB1               	movwf	(main@white+1)& (0+255),b
  2118   001AC4  0E08               	movlw	8
  2119   001AC6  6FB0               	movwf	main@white& (0+255),b
  2120   001AC8                     
  2121                           ; BSR set to: 0
  2122                           ;main.c: 166:             send2USART(white);
  2123   001AC8  C0B0  F04C         	movff	main@white,send2USART@hue
  2124   001ACC  C0B1  F04D         	movff	main@white+1,send2USART@hue+1
  2125   001AD0  ECAF  F025         	call	_send2USART	;wreg free
  2126   001AD4                     
  2127                           ;main.c: 167:             returnHome(&motorL, &motorR, path_step, factor);
  2128   001AD4  0EE7               	movlw	low _motorL
  2129   001AD6  0100               	movlb	0	; () banked
  2130   001AD8  6F60               	movwf	returnHome@mL& (0+255),b
  2131   001ADA  0EDE               	movlw	low _motorR
  2132   001ADC  6F61               	movwf	returnHome@mR& (0+255),b
  2133   001ADE  C0BA  F062         	movff	main@path_step,returnHome@path_step
  2134   001AE2  C0BB  F063         	movff	main@path_step+1,returnHome@path_step+1
  2135   001AE6  C0B2  F064         	movff	main@factor,returnHome@factor
  2136   001AEA  C0B3  F065         	movff	main@factor+1,returnHome@factor+1
  2137   001AEE  ECAD  F018         	call	_returnHome	;wreg free
  2138   001AF2                     
  2139                           ;main.c: 168:             LATGbits.LATG1 = 0;
  2140   001AF2  927F               	bcf	127,1,c	;volatile
  2141   001AF4                     l6085:
  2142                           
  2143                           ;main.c: 171:         path_step = decision(hue, path_step, factor);
  2144   001AF4  C0B4  F025         	movff	main@hue,decision@hue
  2145   001AF8  C0B5  F026         	movff	main@hue+1,decision@hue+1
  2146   001AFC  C0BA  F027         	movff	main@path_step,decision@path_step
  2147   001B00  C0BB  F028         	movff	main@path_step+1,decision@path_step+1
  2148   001B04  C0B2  F029         	movff	main@factor,decision@factor
  2149   001B08  C0B3  F02A         	movff	main@factor+1,decision@factor+1
  2150   001B0C  ECD2  F013         	call	_decision	;wreg free
  2151   001B10  C025  F0BA         	movff	?_decision,main@path_step
  2152   001B14  C026  F0BB         	movff	?_decision+1,main@path_step+1
  2153   001B18  EF8F  F00B         	goto	l6011
  2154   001B1C  EF1D  F000         	goto	start
  2155   001B20                     __end_of_main:
  2156                           	callstack 0
  2157                           
  2158 ;; *************** function _returnHome *****************
  2159 ;; Defined at:
  2160 ;;		line 97 in file "return_func.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;  mL              1    0[BANK0 ] PTR struct DC_motor
  2163 ;;		 -> motorL(9), 
  2164 ;;  mR              1    1[BANK0 ] PTR struct DC_motor
  2165 ;;		 -> motorR(9), 
  2166 ;;  path_step       2    2[BANK0 ] unsigned int 
  2167 ;;  factor          2    4[BANK0 ] unsigned int 
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  action_turn     1   12[BANK0 ] unsigned char 
  2170 ;;  i               2   13[BANK0 ] unsigned int 
  2171 ;;  time_ms         4    8[BANK0 ] long 
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  1    wreg      void 
  2174 ;; Registers used:
  2175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2176 ;; Tracked objects:
  2177 ;;		On entry : 0/0
  2178 ;;		On exit  : 0/0
  2179 ;;		Unchanged: 0/0
  2180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2181 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2182 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2183 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2184 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2185 ;;Total ram usage:       15 bytes
  2186 ;; Hardware stack levels used: 1
  2187 ;; Hardware stack levels required when called: 6
  2188 ;; This function calls:
  2189 ;;		_moveWhite
  2190 ;;		_reverseStraight
  2191 ;;		_reverseTurn
  2192 ;; This function is called by:
  2193 ;;		_main
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           	psect	text1
  2198   00315A                     __ptext1:
  2199                           	callstack 0
  2200   00315A                     _returnHome:
  2201                           	callstack 24
  2202   00315A                     
  2203                           ;return_func.c: 97: void returnHome(struct DC_motor *mL, struct DC_motor *mR, unsigned i
      +                          nt path_step, unsigned int factor);return_func.c: 98: {;return_func.c: 100:     long tim
      +                          e_ms;;return_func.c: 103:     LATGbits.LATG0 = 0;
  2204   00315A  907F               	bcf	127,0,c	;volatile
  2205                           
  2206                           ;return_func.c: 104:     LATEbits.LATE7 = 0;
  2207   00315C  9E7D               	bcf	125,7,c	;volatile
  2208                           
  2209                           ;return_func.c: 105:     LATAbits.LATA3 = 0;
  2210   00315E  9679               	bcf	121,3,c	;volatile
  2211   003160                     
  2212                           ;return_func.c: 107:     moveWhite(&motorL,&motorR,factor);
  2213   003160  0EE7               	movlw	low _motorL
  2214   003162  6E1F               	movwf	moveWhite@mL^0,c
  2215   003164  0EDE               	movlw	low _motorR
  2216   003166  6E20               	movwf	moveWhite@mR^0,c
  2217   003168  C064  F021         	movff	returnHome@factor,moveWhite@factor
  2218   00316C  C065  F022         	movff	returnHome@factor+1,moveWhite@factor+1
  2219   003170  ECA0  F023         	call	_moveWhite	;wreg free
  2220   003174                     
  2221                           ;return_func.c: 109:     if (path_step > 0) {
  2222   003174  0100               	movlb	0	; () banked
  2223   003176  5162               	movf	returnHome@path_step& (0+255),w,b
  2224   003178  1163               	iorwf	(returnHome@path_step+1)& (0+255),w,b
  2225   00317A  B4D8               	btfsc	status,2,c
  2226   00317C  EFC2  F018         	goto	u5191
  2227   003180  EFC4  F018         	goto	u5190
  2228   003184                     u5191:
  2229   003184  EF63  F019         	goto	l700
  2230   003188                     u5190:
  2231   003188                     
  2232                           ; BSR set to: 0
  2233                           ;return_func.c: 110:         for (unsigned int i = path_step - 1; ; i--) {
  2234   003188  0EFF               	movlw	255
  2235   00318A  2562               	addwf	returnHome@path_step& (0+255),w,b
  2236   00318C  6F6D               	movwf	returnHome@i& (0+255),b
  2237   00318E  0EFF               	movlw	255
  2238   003190  2163               	addwfc	(returnHome@path_step+1)& (0+255),w,b
  2239   003192  6F6E               	movwf	(returnHome@i+1)& (0+255),b
  2240   003194                     l5913:
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;return_func.c: 112:             char action_turn = action[i];
  2244   003194  0E3C               	movlw	low _action
  2245   003196  256D               	addwf	returnHome@i& (0+255),w,b
  2246   003198  6ED9               	movwf	fsr2l,c
  2247   00319A  0E01               	movlw	high _action
  2248   00319C  216E               	addwfc	(returnHome@i+1)& (0+255),w,b
  2249   00319E  6EDA               	movwf	fsr2h,c
  2250   0031A0  50DF               	movf	indf2,w,c
  2251   0031A2  6F6C               	movwf	returnHome@action_turn& (0+255),b
  2252   0031A4                     
  2253                           ; BSR set to: 0
  2254                           ;return_func.c: 113:             if (action[i+1]== 5 || action[i+1]==7){
  2255   0031A4  0E3D               	movlw	low (_action+1)
  2256   0031A6  256D               	addwf	returnHome@i& (0+255),w,b
  2257   0031A8  6ED9               	movwf	fsr2l,c
  2258   0031AA  0E01               	movlw	high (_action+1)
  2259   0031AC  216E               	addwfc	(returnHome@i+1)& (0+255),w,b
  2260   0031AE  6EDA               	movwf	fsr2h,c
  2261   0031B0  0E05               	movlw	5
  2262   0031B2  18DE               	xorwf	postinc2,w,c
  2263   0031B4  B4D8               	btfsc	status,2,c
  2264   0031B6  EFDF  F018         	goto	u5201
  2265   0031BA  EFE1  F018         	goto	u5200
  2266   0031BE                     u5201:
  2267   0031BE  EFF0  F018         	goto	l5919
  2268   0031C2                     u5200:
  2269   0031C2                     
  2270                           ; BSR set to: 0
  2271   0031C2  0E3D               	movlw	low (_action+1)
  2272   0031C4  256D               	addwf	returnHome@i& (0+255),w,b
  2273   0031C6  6ED9               	movwf	fsr2l,c
  2274   0031C8  0E01               	movlw	high (_action+1)
  2275   0031CA  216E               	addwfc	(returnHome@i+1)& (0+255),w,b
  2276   0031CC  6EDA               	movwf	fsr2h,c
  2277   0031CE  0E07               	movlw	7
  2278   0031D0  18DE               	xorwf	postinc2,w,c
  2279   0031D2  A4D8               	btfss	status,2,c
  2280   0031D4  EFEE  F018         	goto	u5211
  2281   0031D8  EFF0  F018         	goto	u5210
  2282   0031DC                     u5211:
  2283   0031DC  EF0E  F019         	goto	l5921
  2284   0031E0                     u5210:
  2285   0031E0                     l5919:
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;return_func.c: 114:                 time_ms = time[i]-2250;
  2289   0031E0  0E00               	movlw	low _time
  2290   0031E2  6F66               	movwf	??_returnHome& (0+255),b
  2291   0031E4  0E02               	movlw	high _time
  2292   0031E6  6F67               	movwf	(??_returnHome+1)& (0+255),b
  2293   0031E8  90D8               	bcf	status,0,c
  2294   0031EA  356D               	rlcf	returnHome@i& (0+255),w,b
  2295   0031EC  6ED9               	movwf	fsr2l,c
  2296   0031EE  356E               	rlcf	(returnHome@i+1)& (0+255),w,b
  2297   0031F0  6EDA               	movwf	fsr2h,c
  2298   0031F2  90D8               	bcf	status,0,c
  2299   0031F4  36D9               	rlcf	fsr2l,f,c
  2300   0031F6  36DA               	rlcf	fsr2h,f,c
  2301   0031F8  5166               	movf	??_returnHome& (0+255),w,b
  2302   0031FA  26D9               	addwf	fsr2l,f,c
  2303   0031FC  5167               	movf	(??_returnHome+1)& (0+255),w,b
  2304   0031FE  22DA               	addwfc	fsr2h,f,c
  2305   003200  0E36               	movlw	54
  2306   003202  24DE               	addwf	postinc2,w,c
  2307   003204  6F68               	movwf	returnHome@time_ms& (0+255),b
  2308   003206  0EF7               	movlw	247
  2309   003208  20DE               	addwfc	postinc2,w,c
  2310   00320A  6F69               	movwf	(returnHome@time_ms+1)& (0+255),b
  2311   00320C  0EFF               	movlw	255
  2312   00320E  20DE               	addwfc	postinc2,w,c
  2313   003210  6F6A               	movwf	(returnHome@time_ms+2)& (0+255),b
  2314   003212  0EFF               	movlw	255
  2315   003214  20DE               	addwfc	postinc2,w,c
  2316   003216  6F6B               	movwf	(returnHome@time_ms+3)& (0+255),b
  2317                           
  2318                           ;return_func.c: 115:             }else{
  2319   003218  EF26  F019         	goto	l5923
  2320   00321C                     l5921:
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;return_func.c: 116:                 time_ms = time[i];
  2324   00321C  0E00               	movlw	low _time
  2325   00321E  6F66               	movwf	??_returnHome& (0+255),b
  2326   003220  0E02               	movlw	high _time
  2327   003222  6F67               	movwf	(??_returnHome+1)& (0+255),b
  2328   003224  90D8               	bcf	status,0,c
  2329   003226  356D               	rlcf	returnHome@i& (0+255),w,b
  2330   003228  6ED9               	movwf	fsr2l,c
  2331   00322A  356E               	rlcf	(returnHome@i+1)& (0+255),w,b
  2332   00322C  6EDA               	movwf	fsr2h,c
  2333   00322E  90D8               	bcf	status,0,c
  2334   003230  36D9               	rlcf	fsr2l,f,c
  2335   003232  36DA               	rlcf	fsr2h,f,c
  2336   003234  5166               	movf	??_returnHome& (0+255),w,b
  2337   003236  26D9               	addwf	fsr2l,f,c
  2338   003238  5167               	movf	(??_returnHome+1)& (0+255),w,b
  2339   00323A  22DA               	addwfc	fsr2h,f,c
  2340   00323C  CFDE F068          	movff	postinc2,returnHome@time_ms
  2341   003240  CFDE F069          	movff	postinc2,returnHome@time_ms+1
  2342   003244  CFDE F06A          	movff	postinc2,returnHome@time_ms+2
  2343   003248  CFDE F06B          	movff	postinc2,returnHome@time_ms+3
  2344   00324C                     l5923:
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;return_func.c: 118:             if (action_turn == 0) {
  2348   00324C  516C               	movf	returnHome@action_turn& (0+255),w,b
  2349   00324E  A4D8               	btfss	status,2,c
  2350   003250  EF2C  F019         	goto	u5221
  2351   003254  EF2E  F019         	goto	u5220
  2352   003258                     u5221:
  2353   003258  EF3E  F019         	goto	l5927
  2354   00325C                     u5220:
  2355   00325C                     
  2356                           ; BSR set to: 0
  2357                           ;return_func.c: 119:                 reverseStraight(mL, mR, time_ms);
  2358   00325C  C060  F051         	movff	returnHome@mL,reverseStraight@mL
  2359   003260  C061  F052         	movff	returnHome@mR,reverseStraight@mR
  2360   003264  C068  F053         	movff	returnHome@time_ms,reverseStraight@time_ms
  2361   003268  C069  F054         	movff	returnHome@time_ms+1,reverseStraight@time_ms+1
  2362   00326C  C06A  F055         	movff	returnHome@time_ms+2,reverseStraight@time_ms+2
  2363   003270  C06B  F056         	movff	returnHome@time_ms+3,reverseStraight@time_ms+3
  2364   003274  EC2B  F01C         	call	_reverseStraight	;wreg free
  2365                           
  2366                           ;return_func.c: 120:             } else {
  2367   003278  EF52  F019         	goto	l5929
  2368   00327C                     l5927:
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;return_func.c: 121:                 reverseTurn(mL, mR, action_turn, time_ms, factor);
  2372   00327C  C060  F01F         	movff	returnHome@mL,reverseTurn@mL
  2373   003280  C061  F020         	movff	returnHome@mR,reverseTurn@mR
  2374   003284  C06C  F021         	movff	returnHome@action_turn,reverseTurn@actionStep
  2375   003288  C068  F022         	movff	returnHome@time_ms,reverseTurn@time_ms
  2376   00328C  C069  F023         	movff	returnHome@time_ms+1,reverseTurn@time_ms+1
  2377   003290  C06A  F024         	movff	returnHome@time_ms+2,reverseTurn@time_ms+2
  2378   003294  C06B  F025         	movff	returnHome@time_ms+3,reverseTurn@time_ms+3
  2379   003298  C064  F026         	movff	returnHome@factor,reverseTurn@factor
  2380   00329C  C065  F027         	movff	returnHome@factor+1,reverseTurn@factor+1
  2381   0032A0  EC0F  F01A         	call	_reverseTurn	;wreg free
  2382   0032A4                     l5929:
  2383                           
  2384                           ;return_func.c: 124:             if (i == 0) break;
  2385   0032A4  0100               	movlb	0	; () banked
  2386   0032A6  516D               	movf	returnHome@i& (0+255),w,b
  2387   0032A8  116E               	iorwf	(returnHome@i+1)& (0+255),w,b
  2388   0032AA  A4D8               	btfss	status,2,c
  2389   0032AC  EF5A  F019         	goto	u5231
  2390   0032B0  EF5C  F019         	goto	u5230
  2391   0032B4                     u5231:
  2392   0032B4  EF5E  F019         	goto	l5933
  2393   0032B8                     u5230:
  2394   0032B8  EF63  F019         	goto	l700
  2395   0032BC                     l5933:
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;return_func.c: 125:         }
  2399   0032BC  076D               	decf	returnHome@i& (0+255),f,b
  2400   0032BE  A0D8               	btfss	status,0,c
  2401   0032C0  076E               	decf	(returnHome@i+1)& (0+255),f,b
  2402   0032C2  EFCA  F018         	goto	l5913
  2403   0032C6                     l700:
  2404                           
  2405                           ; BSR set to: 0
  2406   0032C6  0003               	sleep		;# 
  2407   0032C8  0012               	return		;funcret
  2408   0032CA                     __end_of_returnHome:
  2409                           	callstack 0
  2410                           
  2411 ;; *************** function _reverseTurn *****************
  2412 ;; Defined at:
  2413 ;;		line 24 in file "return_func.c"
  2414 ;; Parameters:    Size  Location     Type
  2415 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  2416 ;;		 -> motorL(9), 
  2417 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  2418 ;;		 -> motorR(9), 
  2419 ;;  actionStep      1   32[COMRAM] unsigned char 
  2420 ;;  time_ms         4   33[COMRAM] long 
  2421 ;;  factor          2   37[COMRAM] unsigned int 
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;		None
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      void 
  2426 ;; Registers used:
  2427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2433 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2435 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2436 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2437 ;;Total ram usage:       11 bytes
  2438 ;; Hardware stack levels used: 1
  2439 ;; Hardware stack levels required when called: 5
  2440 ;; This function calls:
  2441 ;;		_backHalf
  2442 ;;		_left135
  2443 ;;		_left90
  2444 ;;		_right135
  2445 ;;		_right90
  2446 ;;		_turn180
  2447 ;; This function is called by:
  2448 ;;		_returnHome
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           	psect	text2
  2453   00341E                     __ptext2:
  2454                           	callstack 0
  2455   00341E                     _reverseTurn:
  2456                           	callstack 24
  2457   00341E                     
  2458                           ;return_func.c: 25:     if (actionStep == 1) {
  2459   00341E  0421               	decf	reverseTurn@actionStep^0,w,c
  2460   003420  A4D8               	btfss	status,2,c
  2461   003422  EF15  F01A         	goto	u4261
  2462   003426  EF17  F01A         	goto	u4260
  2463   00342A                     u4261:
  2464   00342A  EF35  F01A         	goto	l4957
  2465   00342E                     u4260:
  2466   00342E                     l4951:
  2467                           
  2468                           ;return_func.c: 28:         left90(mL,mR, factor);
  2469   00342E  C01F  F019         	movff	reverseTurn@mL,left90@mL
  2470   003432  C020  F01A         	movff	reverseTurn@mR,left90@mR
  2471   003436  C026  F01B         	movff	reverseTurn@factor,left90@factor
  2472   00343A  C027  F01C         	movff	reverseTurn@factor+1,left90@factor+1
  2473   00343E  ECFC  F022         	call	_left90	;wreg free
  2474   003442                     l4953:
  2475                           
  2476                           ;return_func.c: 29:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2477   003442  0E29               	movlw	41
  2478   003444  6E29               	movwf	(??_reverseTurn+1)^0,c
  2479   003446  0E96               	movlw	150
  2480   003448  6E28               	movwf	??_reverseTurn^0,c
  2481   00344A  0E7F               	movlw	127
  2482   00344C                     u5367:
  2483   00344C  2EE8               	decfsz	wreg,f,c
  2484   00344E  D7FE               	bra	u5367
  2485   003450  2E28               	decfsz	??_reverseTurn^0,f,c
  2486   003452  D7FC               	bra	u5367
  2487   003454  2E29               	decfsz	(??_reverseTurn+1)^0,f,c
  2488   003456  D7FA               	bra	u5367
  2489   003458  0000               	nop	
  2490   00345A                     
  2491                           ;return_func.c: 30:         backHalf(mL,mR);
  2492   00345A  C01F  F019         	movff	reverseTurn@mL,backHalf@mL
  2493   00345E  C020  F01A         	movff	reverseTurn@mR,backHalf@mR
  2494   003462  EC24  F025         	call	_backHalf	;wreg free
  2495                           
  2496                           ;return_func.c: 32:     } else if (actionStep == 2) {
  2497   003466  EF9F  F01A         	goto	l689
  2498   00346A                     l4957:
  2499   00346A  0E02               	movlw	2
  2500   00346C  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2501   00346E  A4D8               	btfss	status,2,c
  2502   003470  EF3C  F01A         	goto	u4271
  2503   003474  EF3E  F01A         	goto	u4270
  2504   003478                     u4271:
  2505   003478  EF4A  F01A         	goto	l4965
  2506   00347C                     u4270:
  2507   00347C                     l4959:
  2508                           
  2509                           ;return_func.c: 35:         right90(mL,mR, factor);
  2510   00347C  C01F  F019         	movff	reverseTurn@mL,right90@mL
  2511   003480  C020  F01A         	movff	reverseTurn@mR,right90@mR
  2512   003484  C026  F01B         	movff	reverseTurn@factor,right90@factor
  2513   003488  C027  F01C         	movff	reverseTurn@factor+1,right90@factor+1
  2514   00348C  EC99  F022         	call	_right90	;wreg free
  2515   003490  EF21  F01A         	goto	l4953
  2516   003494                     l4965:
  2517   003494  0E03               	movlw	3
  2518   003496  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2519   003498  A4D8               	btfss	status,2,c
  2520   00349A  EF51  F01A         	goto	u4281
  2521   00349E  EF53  F01A         	goto	u4280
  2522   0034A2                     u4281:
  2523   0034A2  EF5F  F01A         	goto	l4973
  2524   0034A6                     u4280:
  2525   0034A6                     
  2526                           ;return_func.c: 42:         turn180(mL,mR, factor);
  2527   0034A6  C01F  F019         	movff	reverseTurn@mL,turn180@mL
  2528   0034AA  C020  F01A         	movff	reverseTurn@mR,turn180@mR
  2529   0034AE  C026  F01B         	movff	reverseTurn@factor,turn180@factor
  2530   0034B2  C027  F01C         	movff	reverseTurn@factor+1,turn180@factor+1
  2531   0034B6  EC1D  F023         	call	_turn180	;wreg free
  2532   0034BA  EF21  F01A         	goto	l4953
  2533   0034BE                     l4973:
  2534   0034BE  0E04               	movlw	4
  2535   0034C0  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2536   0034C2  A4D8               	btfss	status,2,c
  2537   0034C4  EF66  F01A         	goto	u4291
  2538   0034C8  EF68  F01A         	goto	u4290
  2539   0034CC                     u4291:
  2540   0034CC  EF74  F01A         	goto	l4981
  2541   0034D0                     u4290:
  2542   0034D0                     
  2543                           ;return_func.c: 49:         right135(mL,mR, factor);
  2544   0034D0  C01F  F019         	movff	reverseTurn@mL,right135@mL
  2545   0034D4  C020  F01A         	movff	reverseTurn@mR,right135@mR
  2546   0034D8  C026  F01B         	movff	reverseTurn@factor,right135@factor
  2547   0034DC  C027  F01C         	movff	reverseTurn@factor+1,right135@factor+1
  2548   0034E0  ECBA  F022         	call	_right135	;wreg free
  2549   0034E4  EF21  F01A         	goto	l4953
  2550   0034E8                     l4981:
  2551   0034E8  0E05               	movlw	5
  2552   0034EA  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2553   0034EC  A4D8               	btfss	status,2,c
  2554   0034EE  EF7B  F01A         	goto	u4301
  2555   0034F2  EF7D  F01A         	goto	u4300
  2556   0034F6                     u4301:
  2557   0034F6  EF7F  F01A         	goto	l4989
  2558   0034FA                     u4300:
  2559   0034FA  EF17  F01A         	goto	l4951
  2560   0034FE                     l4989:
  2561   0034FE  0E06               	movlw	6
  2562   003500  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2563   003502  A4D8               	btfss	status,2,c
  2564   003504  EF86  F01A         	goto	u4311
  2565   003508  EF88  F01A         	goto	u4310
  2566   00350C                     u4311:
  2567   00350C  EF94  F01A         	goto	l4997
  2568   003510                     u4310:
  2569   003510                     
  2570                           ;return_func.c: 63:         left135(mL,mR, factor);
  2571   003510  C01F  F019         	movff	reverseTurn@mL,left135@mL
  2572   003514  C020  F01A         	movff	reverseTurn@mR,left135@mR
  2573   003518  C026  F01B         	movff	reverseTurn@factor,left135@factor
  2574   00351C  C027  F01C         	movff	reverseTurn@factor+1,left135@factor+1
  2575   003520  ECDB  F022         	call	_left135	;wreg free
  2576   003524  EF21  F01A         	goto	l4953
  2577   003528                     l4997:
  2578   003528  0E07               	movlw	7
  2579   00352A  1821               	xorwf	reverseTurn@actionStep^0,w,c
  2580   00352C  A4D8               	btfss	status,2,c
  2581   00352E  EF9B  F01A         	goto	u4321
  2582   003532  EF9D  F01A         	goto	u4320
  2583   003536                     u4321:
  2584   003536  EF9F  F01A         	goto	l683
  2585   00353A                     u4320:
  2586   00353A  EF3E  F01A         	goto	l4959
  2587   00353E                     l683:
  2588   00353E                     l689:
  2589   00353E  0012               	return		;funcret
  2590   003540                     __end_of_reverseTurn:
  2591                           	callstack 0
  2592                           
  2593 ;; *************** function _reverseStraight *****************
  2594 ;; Defined at:
  2595 ;;		line 80 in file "return_func.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;  mL              1   80[COMRAM] PTR struct DC_motor
  2598 ;;		 -> motorL(9), 
  2599 ;;  mR              1   81[COMRAM] PTR struct DC_motor
  2600 ;;		 -> motorR(9), 
  2601 ;;  time_ms         4   82[COMRAM] long 
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;  delayMs         2   88[COMRAM] unsigned int 
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  1    wreg      void 
  2606 ;; Registers used:
  2607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2613 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2614 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2615 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2616 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2617 ;;Total ram usage:       10 bytes
  2618 ;; Hardware stack levels used: 1
  2619 ;; Hardware stack levels required when called: 4
  2620 ;; This function calls:
  2621 ;;		_customDelayMs
  2622 ;;		_fullSpeedAhead
  2623 ;;		_stop
  2624 ;; This function is called by:
  2625 ;;		_returnHome
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           	psect	text3
  2630   003856                     __ptext3:
  2631                           	callstack 0
  2632   003856                     _reverseStraight:
  2633                           	callstack 25
  2634   003856                     
  2635                           ;return_func.c: 80: void reverseStraight(struct DC_motor *mL, struct DC_motor *mR, long 
      +                          time_ms);return_func.c: 81: {;return_func.c: 83:     unsigned int delayMs = 1000;
  2636   003856  0E03               	movlw	3
  2637   003858  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2638   00385A  0EE8               	movlw	232
  2639   00385C  6E59               	movwf	reverseStraight@delayMs^0,c
  2640   00385E                     
  2641                           ;return_func.c: 86:     if (time_ms>6500){delayMs = 7750; }
  2642   00385E  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2643   003860  EF3E  F01C         	goto	u4331
  2644   003864  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2645   003866  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2646   003868  E10B               	bnz	u4330
  2647   00386A  0E65               	movlw	101
  2648   00386C  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2649   00386E  0E19               	movlw	25
  2650   003870  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2651   003872  A0D8               	btfss	status,0,c
  2652   003874  EF3E  F01C         	goto	u4331
  2653   003878  EF40  F01C         	goto	u4330
  2654   00387C                     u4331:
  2655   00387C  EF46  F01C         	goto	l5011
  2656   003880                     u4330:
  2657   003880  0E1E               	movlw	30
  2658   003882  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2659   003884  0E46               	movlw	70
  2660   003886  6E59               	movwf	reverseStraight@delayMs^0,c
  2661   003888  EF83  F01C         	goto	l5021
  2662   00388C                     l5011:
  2663   00388C  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2664   00388E  EF55  F01C         	goto	u4341
  2665   003892  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2666   003894  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2667   003896  E10B               	bnz	u4340
  2668   003898  0EA1               	movlw	161
  2669   00389A  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2670   00389C  0E0F               	movlw	15
  2671   00389E  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2672   0038A0  A0D8               	btfss	status,0,c
  2673   0038A2  EF55  F01C         	goto	u4341
  2674   0038A6  EF57  F01C         	goto	u4340
  2675   0038AA                     u4341:
  2676   0038AA  EF6E  F01C         	goto	l5017
  2677   0038AE                     u4340:
  2678   0038AE  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2679   0038B0  EF68  F01C         	goto	u4350
  2680   0038B4  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2681   0038B6  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2682   0038B8  E109               	bnz	u4351
  2683   0038BA  0E64               	movlw	100
  2684   0038BC  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2685   0038BE  0E19               	movlw	25
  2686   0038C0  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2687   0038C2  B0D8               	btfsc	status,0,c
  2688   0038C4  EF66  F01C         	goto	u4351
  2689   0038C8  EF68  F01C         	goto	u4350
  2690   0038CC                     u4351:
  2691   0038CC  EF6E  F01C         	goto	l5017
  2692   0038D0                     u4350:
  2693   0038D0  0E15               	movlw	21
  2694   0038D2  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2695   0038D4  0E7C               	movlw	124
  2696   0038D6  6E59               	movwf	reverseStraight@delayMs^0,c
  2697   0038D8  EF83  F01C         	goto	l5021
  2698   0038DC                     l5017:
  2699   0038DC  BE56               	btfsc	(reverseStraight@time_ms+3)^0,7,c
  2700   0038DE  EF7F  F01C         	goto	u4360
  2701   0038E2  5056               	movf	(reverseStraight@time_ms+3)^0,w,c
  2702   0038E4  1055               	iorwf	(reverseStraight@time_ms+2)^0,w,c
  2703   0038E6  E109               	bnz	u4361
  2704   0038E8  0EA0               	movlw	160
  2705   0038EA  5C53               	subwf	reverseStraight@time_ms^0,w,c
  2706   0038EC  0E0F               	movlw	15
  2707   0038EE  5854               	subwfb	(reverseStraight@time_ms+1)^0,w,c
  2708   0038F0  B0D8               	btfsc	status,0,c
  2709   0038F2  EF7D  F01C         	goto	u4361
  2710   0038F6  EF7F  F01C         	goto	u4360
  2711   0038FA                     u4361:
  2712   0038FA  EF83  F01C         	goto	l5021
  2713   0038FE                     u4360:
  2714   0038FE  0E0A               	movlw	10
  2715   003900  6E5A               	movwf	(reverseStraight@delayMs+1)^0,c
  2716   003902  0EBE               	movlw	190
  2717   003904  6E59               	movwf	reverseStraight@delayMs^0,c
  2718   003906                     l5021:
  2719                           
  2720                           ;return_func.c: 90:     fullSpeedAhead(&motorL,&motorR);
  2721   003906  0EE7               	movlw	low _motorL
  2722   003908  6E4C               	movwf	fullSpeedAhead@mL^0,c
  2723   00390A  0EDE               	movlw	low _motorR
  2724   00390C  6E4D               	movwf	fullSpeedAhead@mR^0,c
  2725   00390E  EC16  F01D         	call	_fullSpeedAhead	;wreg free
  2726   003912                     
  2727                           ;return_func.c: 91:     customDelayMs(delayMs);
  2728   003912  C059  F002         	movff	reverseStraight@delayMs,customDelayMs@milliseconds
  2729   003916  C05A  F003         	movff	reverseStraight@delayMs+1,customDelayMs@milliseconds+1
  2730   00391A  EC88  F024         	call	_customDelayMs	;wreg free
  2731   00391E                     
  2732                           ;return_func.c: 92:     stop(&motorL,&motorR);
  2733   00391E  0EE7               	movlw	low _motorL
  2734   003920  6E14               	movwf	stop@mL^0,c
  2735   003922  0EDE               	movlw	low _motorR
  2736   003924  6E15               	movwf	stop@mR^0,c
  2737   003926  EC18  F020         	call	_stop	;wreg free
  2738   00392A                     
  2739                           ;return_func.c: 93:     _delay((unsigned long)((300)*(64000000/4000.0)));
  2740   00392A  0E19               	movlw	25
  2741   00392C  6E58               	movwf	(??_reverseStraight+1)^0,c
  2742   00392E  0E5A               	movlw	90
  2743   003930  6E57               	movwf	??_reverseStraight^0,c
  2744   003932  0EB2               	movlw	178
  2745   003934                     u5377:
  2746   003934  2EE8               	decfsz	wreg,f,c
  2747   003936  D7FE               	bra	u5377
  2748   003938  2E57               	decfsz	??_reverseStraight^0,f,c
  2749   00393A  D7FC               	bra	u5377
  2750   00393C  2E58               	decfsz	(??_reverseStraight+1)^0,f,c
  2751   00393E  D7FA               	bra	u5377
  2752   003940  0012               	return		;funcret
  2753   003942                     __end_of_reverseStraight:
  2754                           	callstack 0
  2755                           
  2756 ;; *************** function _fullSpeedAhead *****************
  2757 ;; Defined at:
  2758 ;;		line 144 in file "dc_motor.c"
  2759 ;; Parameters:    Size  Location     Type
  2760 ;;  mL              1   75[COMRAM] PTR struct DC_motor
  2761 ;;		 -> motorL(9), 
  2762 ;;  mR              1   76[COMRAM] PTR struct DC_motor
  2763 ;;		 -> motorR(9), 
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;  power           2   78[COMRAM] int 
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  1    wreg      void 
  2768 ;; Registers used:
  2769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2775 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2776 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2777 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2778 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2779 ;;Total ram usage:        5 bytes
  2780 ;; Hardware stack levels used: 1
  2781 ;; Hardware stack levels required when called: 3
  2782 ;; This function calls:
  2783 ;;		___flmul
  2784 ;;		___fltol
  2785 ;;		___xxtofl
  2786 ;;		_setMotorPWM
  2787 ;; This function is called by:
  2788 ;;		_main
  2789 ;;		_reverseStraight
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           	psect	text4
  2794   003A2C                     __ptext4:
  2795                           	callstack 0
  2796   003A2C                     _fullSpeedAhead:
  2797                           	callstack 25
  2798   003A2C                     
  2799                           ;dc_motor.c: 144: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_
      +                          motor.c: 147:     mL->direction = 1;
  2800   003A2C  504C               	movf	fullSpeedAhead@mL^0,w,c
  2801   003A2E  6ED9               	movwf	fsr2l,c
  2802   003A30  6ADA               	clrf	fsr2h,c
  2803   003A32  0E01               	movlw	1
  2804   003A34  26D9               	addwf	fsr2l,f,c
  2805   003A36  0E01               	movlw	1
  2806   003A38  6EDF               	movwf	indf2,c
  2807                           
  2808                           ;dc_motor.c: 148:     mR->direction = 1;
  2809   003A3A  504D               	movf	fullSpeedAhead@mR^0,w,c
  2810   003A3C  6ED9               	movwf	fsr2l,c
  2811   003A3E  6ADA               	clrf	fsr2h,c
  2812   003A40  0E01               	movlw	1
  2813   003A42  26D9               	addwf	fsr2l,f,c
  2814   003A44  0E01               	movlw	1
  2815   003A46  6EDF               	movwf	indf2,c
  2816   003A48                     
  2817                           ;dc_motor.c: 150:     for(int power = 0; power <= 50; power++) {
  2818   003A48  0E00               	movlw	0
  2819   003A4A  6E50               	movwf	(fullSpeedAhead@power+1)^0,c
  2820   003A4C  0E00               	movlw	0
  2821   003A4E  6E4F               	movwf	fullSpeedAhead@power^0,c
  2822   003A50                     l4505:
  2823                           
  2824                           ;dc_motor.c: 151:         mL->power = power;
  2825   003A50  504C               	movf	fullSpeedAhead@mL^0,w,c
  2826   003A52  6ED9               	movwf	fsr2l,c
  2827   003A54  6ADA               	clrf	fsr2h,c
  2828   003A56  C04F  FFDF         	movff	fullSpeedAhead@power,indf2
  2829   003A5A                     
  2830                           ;dc_motor.c: 152:         mR->power = power*1.05;
  2831   003A5A  504D               	movf	fullSpeedAhead@mR^0,w,c
  2832   003A5C  6ED9               	movwf	fsr2l,c
  2833   003A5E  6ADA               	clrf	fsr2h,c
  2834   003A60  0E66               	movlw	102
  2835   003A62  6E14               	movwf	___flmul@a^0,c
  2836   003A64  0E66               	movlw	102
  2837   003A66  6E15               	movwf	(___flmul@a+1)^0,c
  2838   003A68  0E86               	movlw	134
  2839   003A6A  6E16               	movwf	(___flmul@a+2)^0,c
  2840   003A6C  0E3F               	movlw	63
  2841   003A6E  6E17               	movwf	(___flmul@a+3)^0,c
  2842   003A70  C04F  F002         	movff	fullSpeedAhead@power,___xxtofl@val
  2843   003A74  C050  F003         	movff	fullSpeedAhead@power+1,___xxtofl@val+1
  2844   003A78  0E00               	movlw	0
  2845   003A7A  BE03               	btfsc	(___xxtofl@val+1)^0,7,c
  2846   003A7C  0EFF               	movlw	-1
  2847   003A7E  6E04               	movwf	(___xxtofl@val+2)^0,c
  2848   003A80  6E05               	movwf	(___xxtofl@val+3)^0,c
  2849   003A82  0E01               	movlw	1
  2850   003A84  EC53  F016         	call	___xxtofl
  2851   003A88  C002  F010         	movff	?___xxtofl,___flmul@b
  2852   003A8C  C003  F011         	movff	?___xxtofl+1,___flmul@b+1
  2853   003A90  C004  F012         	movff	?___xxtofl+2,___flmul@b+2
  2854   003A94  C005  F013         	movff	?___xxtofl+3,___flmul@b+3
  2855   003A98  ECF0  F00F         	call	___flmul	;wreg free
  2856   003A9C  C010  F042         	movff	?___flmul,___fltol@f1
  2857   003AA0  C011  F043         	movff	?___flmul+1,___fltol@f1+1
  2858   003AA4  C012  F044         	movff	?___flmul+2,___fltol@f1+2
  2859   003AA8  C013  F045         	movff	?___flmul+3,___fltol@f1+3
  2860   003AAC  EC26  F01B         	call	___fltol	;wreg free
  2861   003AB0  5042               	movf	?___fltol^0,w,c
  2862   003AB2  6EDF               	movwf	indf2,c
  2863   003AB4                     
  2864                           ;dc_motor.c: 155:         setMotorPWM(mL);
  2865   003AB4  C04C  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2866   003AB8  EC65  F019         	call	_setMotorPWM	;wreg free
  2867   003ABC                     
  2868                           ;dc_motor.c: 156:         setMotorPWM(mR);
  2869   003ABC  C04D  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2870   003AC0  EC65  F019         	call	_setMotorPWM	;wreg free
  2871   003AC4                     
  2872                           ;dc_motor.c: 159:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  2873   003AC4  0E0B               	movlw	11
  2874   003AC6  6E4E               	movwf	??_fullSpeedAhead^0,c
  2875   003AC8  0E62               	movlw	98
  2876   003ACA                     u5387:
  2877   003ACA  2EE8               	decfsz	wreg,f,c
  2878   003ACC  D7FE               	bra	u5387
  2879   003ACE  2E4E               	decfsz	??_fullSpeedAhead^0,f,c
  2880   003AD0  D7FC               	bra	u5387
  2881   003AD2  D000               	nop2	
  2882   003AD4                     
  2883                           ;dc_motor.c: 160:     }
  2884   003AD4  4A4F               	infsnz	fullSpeedAhead@power^0,f,c
  2885   003AD6  2A50               	incf	(fullSpeedAhead@power+1)^0,f,c
  2886   003AD8  BE50               	btfsc	(fullSpeedAhead@power+1)^0,7,c
  2887   003ADA  EF78  F01D         	goto	u3811
  2888   003ADE  5050               	movf	(fullSpeedAhead@power+1)^0,w,c
  2889   003AE0  E109               	bnz	u3810
  2890   003AE2  0E33               	movlw	51
  2891   003AE4  5C4F               	subwf	fullSpeedAhead@power^0,w,c
  2892   003AE6  A0D8               	btfss	status,0,c
  2893   003AE8  EF78  F01D         	goto	u3811
  2894   003AEC  EF7A  F01D         	goto	u3810
  2895   003AF0                     u3811:
  2896   003AF0  EF28  F01D         	goto	l4505
  2897   003AF4                     u3810:
  2898   003AF4  0012               	return		;funcret
  2899   003AF6                     __end_of_fullSpeedAhead:
  2900                           	callstack 0
  2901                           
  2902 ;; *************** function _moveWhite *****************
  2903 ;; Defined at:
  2904 ;;		line 331 in file "dc_motor.c"
  2905 ;; Parameters:    Size  Location     Type
  2906 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  2907 ;;		 -> motorL(9), 
  2908 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  2909 ;;		 -> motorR(9), 
  2910 ;;  factor          2   32[COMRAM] unsigned int 
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;		None
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      void 
  2915 ;; Registers used:
  2916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2922 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2924 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2925 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2926 ;;Total ram usage:        6 bytes
  2927 ;; Hardware stack levels used: 1
  2928 ;; Hardware stack levels required when called: 5
  2929 ;; This function calls:
  2930 ;;		_backHalf
  2931 ;;		_turn180
  2932 ;; This function is called by:
  2933 ;;		_returnHome
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           	psect	text5
  2938   004740                     __ptext5:
  2939                           	callstack 0
  2940   004740                     _moveWhite:
  2941                           	callstack 24
  2942   004740                     
  2943                           ;dc_motor.c: 331: void moveWhite(struct DC_motor *mL, struct DC_motor *mR, unsigned int 
      +                          factor);dc_motor.c: 332: {;dc_motor.c: 334:     backHalf(mL,mR);
  2944   004740  C01F  F019         	movff	moveWhite@mL,backHalf@mL
  2945   004744  C020  F01A         	movff	moveWhite@mR,backHalf@mR
  2946   004748  EC24  F025         	call	_backHalf	;wreg free
  2947   00474C                     
  2948                           ;dc_motor.c: 335:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2949   00474C  0E29               	movlw	41
  2950   00474E  6E24               	movwf	(??_moveWhite+1)^0,c
  2951   004750  0E96               	movlw	150
  2952   004752  6E23               	movwf	??_moveWhite^0,c
  2953   004754  0E7F               	movlw	127
  2954   004756                     u5397:
  2955   004756  2EE8               	decfsz	wreg,f,c
  2956   004758  D7FE               	bra	u5397
  2957   00475A  2E23               	decfsz	??_moveWhite^0,f,c
  2958   00475C  D7FC               	bra	u5397
  2959   00475E  2E24               	decfsz	(??_moveWhite+1)^0,f,c
  2960   004760  D7FA               	bra	u5397
  2961   004762  0000               	nop	
  2962   004764                     
  2963                           ;dc_motor.c: 336:     turn180(mL,mR,factor);
  2964   004764  C01F  F019         	movff	moveWhite@mL,turn180@mL
  2965   004768  C020  F01A         	movff	moveWhite@mR,turn180@mR
  2966   00476C  C021  F01B         	movff	moveWhite@factor,turn180@factor
  2967   004770  C022  F01C         	movff	moveWhite@factor+1,turn180@factor+1
  2968   004774  EC1D  F023         	call	_turn180	;wreg free
  2969   004778  0012               	return		;funcret
  2970   00477A                     __end_of_moveWhite:
  2971                           	callstack 0
  2972                           
  2973 ;; *************** function _reading_hue *****************
  2974 ;; Defined at:
  2975 ;;		line 91 in file "color.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;  cCurr           1   79[COMRAM] PTR struct colors
  2978 ;;		 -> colorCurrent(10), 
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;  led_state      50    0        unsigned char [50]
  2981 ;;  hue             2   83[COMRAM] unsigned int 
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  2   79[COMRAM] unsigned int 
  2984 ;; Registers used:
  2985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2991 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2992 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2993 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2994 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2995 ;;Total ram usage:        6 bytes
  2996 ;; Hardware stack levels used: 1
  2997 ;; Hardware stack levels required when called: 4
  2998 ;; This function calls:
  2999 ;;		_color_read_Blue
  3000 ;;		_color_read_Clear
  3001 ;;		_color_read_Green
  3002 ;;		_color_read_Red
  3003 ;;		_convert_rgb2hue
  3004 ;; This function is called by:
  3005 ;;		_main
  3006 ;; This function uses a non-reentrant model
  3007 ;;
  3008                           
  3009                           	psect	text6
  3010   003942                     __ptext6:
  3011                           	callstack 0
  3012   003942                     _reading_hue:
  3013                           	callstack 26
  3014   003942                     
  3015                           ;color.c: 91: unsigned int reading_hue(colors *cCurr);color.c: 92: {;color.c: 93:     un
      +                          signed int hue;;color.c: 95:     char led_state[50];;color.c: 98:     LATGbits.LATG0 = 1
      +                          ;
  3016   003942  807F               	bsf	127,0,c	;volatile
  3017                           
  3018                           ;color.c: 99:     LATEbits.LATE7 = 0;
  3019   003944  9E7D               	bcf	125,7,c	;volatile
  3020                           
  3021                           ;color.c: 100:     LATAbits.LATA3 = 0;
  3022   003946  9679               	bcf	121,3,c	;volatile
  3023   003948                     
  3024                           ;color.c: 101:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3025   003948  0E29               	movlw	41
  3026   00394A  6E53               	movwf	(??_reading_hue+1)^0,c
  3027   00394C  0E96               	movlw	150
  3028   00394E  6E52               	movwf	??_reading_hue^0,c
  3029   003950  0E7F               	movlw	127
  3030   003952                     u5407:
  3031   003952  2EE8               	decfsz	wreg,f,c
  3032   003954  D7FE               	bra	u5407
  3033   003956  2E52               	decfsz	??_reading_hue^0,f,c
  3034   003958  D7FC               	bra	u5407
  3035   00395A  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3036   00395C  D7FA               	bra	u5407
  3037   00395E  0000               	nop	
  3038   003960                     
  3039                           ;color.c: 102:     (cCurr->red)= color_read_Red();
  3040   003960  ECB4  F021         	call	_color_read_Red	;wreg free
  3041   003964  5050               	movf	reading_hue@cCurr^0,w,c
  3042   003966  6ED9               	movwf	fsr2l,c
  3043   003968  6ADA               	clrf	fsr2h,c
  3044   00396A  C006  FFDE         	movff	?_color_read_Red,postinc2
  3045   00396E  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  3046   003972                     
  3047                           ;color.c: 104:     LATGbits.LATG0 = 0;
  3048   003972  907F               	bcf	127,0,c	;volatile
  3049   003974                     
  3050                           ;color.c: 105:     LATEbits.LATE7 = 1;
  3051   003974  8E7D               	bsf	125,7,c	;volatile
  3052   003976                     
  3053                           ;color.c: 106:     LATAbits.LATA3 = 0;
  3054   003976  9679               	bcf	121,3,c	;volatile
  3055   003978                     
  3056                           ;color.c: 107:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3057   003978  0E29               	movlw	41
  3058   00397A  6E53               	movwf	(??_reading_hue+1)^0,c
  3059   00397C  0E96               	movlw	150
  3060   00397E  6E52               	movwf	??_reading_hue^0,c
  3061   003980  0E7F               	movlw	127
  3062   003982                     u5417:
  3063   003982  2EE8               	decfsz	wreg,f,c
  3064   003984  D7FE               	bra	u5417
  3065   003986  2E52               	decfsz	??_reading_hue^0,f,c
  3066   003988  D7FC               	bra	u5417
  3067   00398A  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3068   00398C  D7FA               	bra	u5417
  3069   00398E  0000               	nop	
  3070                           
  3071                           ;color.c: 108:     (cCurr->green) = color_read_Green();
  3072   003990  ECDC  F021         	call	_color_read_Green	;wreg free
  3073   003994  5050               	movf	reading_hue@cCurr^0,w,c
  3074   003996  6ED9               	movwf	fsr2l,c
  3075   003998  6ADA               	clrf	fsr2h,c
  3076   00399A  0E02               	movlw	2
  3077   00399C  26D9               	addwf	fsr2l,f,c
  3078   00399E  C006  FFDE         	movff	?_color_read_Green,postinc2
  3079   0039A2  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  3080   0039A6                     
  3081                           ;color.c: 110:     LATGbits.LATG0 = 0;
  3082   0039A6  907F               	bcf	127,0,c	;volatile
  3083   0039A8                     
  3084                           ;color.c: 111:     LATEbits.LATE7 = 0;
  3085   0039A8  9E7D               	bcf	125,7,c	;volatile
  3086   0039AA                     
  3087                           ;color.c: 112:     LATAbits.LATA3 = 1;
  3088   0039AA  8679               	bsf	121,3,c	;volatile
  3089   0039AC                     
  3090                           ;color.c: 113:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3091   0039AC  0E29               	movlw	41
  3092   0039AE  6E53               	movwf	(??_reading_hue+1)^0,c
  3093   0039B0  0E96               	movlw	150
  3094   0039B2  6E52               	movwf	??_reading_hue^0,c
  3095   0039B4  0E7F               	movlw	127
  3096   0039B6                     u5427:
  3097   0039B6  2EE8               	decfsz	wreg,f,c
  3098   0039B8  D7FE               	bra	u5427
  3099   0039BA  2E52               	decfsz	??_reading_hue^0,f,c
  3100   0039BC  D7FC               	bra	u5427
  3101   0039BE  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3102   0039C0  D7FA               	bra	u5427
  3103   0039C2  0000               	nop	
  3104   0039C4                     
  3105                           ;color.c: 114:     (cCurr->blue) = color_read_Blue();
  3106   0039C4  EC2C  F022         	call	_color_read_Blue	;wreg free
  3107   0039C8  5050               	movf	reading_hue@cCurr^0,w,c
  3108   0039CA  6ED9               	movwf	fsr2l,c
  3109   0039CC  6ADA               	clrf	fsr2h,c
  3110   0039CE  0E04               	movlw	4
  3111   0039D0  26D9               	addwf	fsr2l,f,c
  3112   0039D2  C006  FFDE         	movff	?_color_read_Blue,postinc2
  3113   0039D6  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  3114   0039DA                     
  3115                           ;color.c: 116:     LATGbits.LATG0 = 1;
  3116   0039DA  807F               	bsf	127,0,c	;volatile
  3117   0039DC                     
  3118                           ;color.c: 117:     LATEbits.LATE7 = 1;
  3119   0039DC  8E7D               	bsf	125,7,c	;volatile
  3120   0039DE                     
  3121                           ;color.c: 118:     LATAbits.LATA3 = 1;
  3122   0039DE  8679               	bsf	121,3,c	;volatile
  3123                           
  3124                           ;color.c: 119:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3125   0039E0  0E29               	movlw	41
  3126   0039E2  6E53               	movwf	(??_reading_hue+1)^0,c
  3127   0039E4  0E96               	movlw	150
  3128   0039E6  6E52               	movwf	??_reading_hue^0,c
  3129   0039E8  0E7F               	movlw	127
  3130   0039EA                     u5437:
  3131   0039EA  2EE8               	decfsz	wreg,f,c
  3132   0039EC  D7FE               	bra	u5437
  3133   0039EE  2E52               	decfsz	??_reading_hue^0,f,c
  3134   0039F0  D7FC               	bra	u5437
  3135   0039F2  2E53               	decfsz	(??_reading_hue+1)^0,f,c
  3136   0039F4  D7FA               	bra	u5437
  3137   0039F6  0000               	nop	
  3138   0039F8                     
  3139                           ;color.c: 120:     (cCurr->clear) = color_read_Clear();
  3140   0039F8  EC04  F022         	call	_color_read_Clear	;wreg free
  3141   0039FC  5050               	movf	reading_hue@cCurr^0,w,c
  3142   0039FE  6ED9               	movwf	fsr2l,c
  3143   003A00  6ADA               	clrf	fsr2h,c
  3144   003A02  0E06               	movlw	6
  3145   003A04  26D9               	addwf	fsr2l,f,c
  3146   003A06  C006  FFDE         	movff	?_color_read_Clear,postinc2
  3147   003A0A  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  3148   003A0E                     
  3149                           ;color.c: 123:     hue = convert_rgb2hue(&colorCalibration, &colorCurrent);
  3150   003A0E  0ED4               	movlw	low _colorCalibration
  3151   003A10  6E4C               	movwf	convert_rgb2hue@cMax^0,c
  3152   003A12  0ECA               	movlw	low _colorCurrent
  3153   003A14  6E4D               	movwf	convert_rgb2hue@cCurr^0,c
  3154   003A16  EC63  F007         	call	_convert_rgb2hue	;wreg free
  3155   003A1A  C04C  F054         	movff	?_convert_rgb2hue,reading_hue@hue
  3156   003A1E  C04D  F055         	movff	?_convert_rgb2hue+1,reading_hue@hue+1
  3157   003A22                     
  3158                           ;color.c: 127:     return hue;
  3159   003A22  C054  F050         	movff	reading_hue@hue,?_reading_hue
  3160   003A26  C055  F051         	movff	reading_hue@hue+1,?_reading_hue+1
  3161   003A2A  0012               	return		;funcret
  3162   003A2C                     __end_of_reading_hue:
  3163                           	callstack 0
  3164                           
  3165 ;; *************** function _convert_rgb2hue *****************
  3166 ;; Defined at:
  3167 ;;		line 133 in file "color.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;  cMax            1   75[COMRAM] PTR struct colors
  3170 ;;		 -> colorCalibration(10), 
  3171 ;;  cCurr           1   76[COMRAM] PTR struct colors
  3172 ;;		 -> colorCurrent(10), 
  3173 ;; Auto vars:     Size  Location     Type
  3174 ;;  c_char         20    0        unsigned char [20]
  3175 ;;  b               4   72[BANK0 ] float 
  3176 ;;  g               4   68[BANK0 ] float 
  3177 ;;  r               4   64[BANK0 ] float 
  3178 ;;  hue             4   60[BANK0 ] float 
  3179 ;;  max             4   56[BANK0 ] float 
  3180 ;;  diff            4   52[BANK0 ] float 
  3181 ;;  min             4   48[BANK0 ] float 
  3182 ;;  clearmax        4   28[BANK0 ] float 
  3183 ;;  clearcurrent    4   24[BANK0 ] float 
  3184 ;;  bluemax         4   20[BANK0 ] float 
  3185 ;;  bluecurrent     4   16[BANK0 ] float 
  3186 ;;  greenmax        4   12[BANK0 ] float 
  3187 ;;  greencurrent    4    8[BANK0 ] float 
  3188 ;;  redmax          4    4[BANK0 ] float 
  3189 ;;  redcurrent      4    0[BANK0 ] float 
  3190 ;;  c               4    0        float 
  3191 ;; Return value:  Size  Location     Type
  3192 ;;                  2   75[COMRAM] unsigned int 
  3193 ;; Registers used:
  3194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3195 ;; Tracked objects:
  3196 ;;		On entry : 0/0
  3197 ;;		On exit  : 0/0
  3198 ;;		Unchanged: 0/0
  3199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3200 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3201 ;;      Locals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3202 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3203 ;;      Totals:         4      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3204 ;;Total ram usage:       80 bytes
  3205 ;; Hardware stack levels used: 1
  3206 ;; Hardware stack levels required when called: 3
  3207 ;; This function calls:
  3208 ;;		___fladd
  3209 ;;		___fldiv
  3210 ;;		___fleq
  3211 ;;		___flge
  3212 ;;		___flmul
  3213 ;;		___flsub
  3214 ;;		___fltol
  3215 ;;		___xxtofl
  3216 ;; This function is called by:
  3217 ;;		_reading_hue
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           	psect	text7
  3222   000EC6                     __ptext7:
  3223                           	callstack 0
  3224   000EC6                     _convert_rgb2hue:
  3225                           	callstack 26
  3226   000EC6                     
  3227                           ;color.c: 133: unsigned int convert_rgb2hue(struct colors *cMax, struct colors *cCurr);c
      +                          olor.c: 134: {;color.c: 135:     float redcurrent, redmax, greencurrent, greenmax, bluec
      +                          urrent, bluemax, clearcurrent, clearmax;;color.c: 136:     float r, g, b, c, min, max, d
      +                          iff, hue = 0.0;
  3228   000EC6  0E00               	movlw	0
  3229   000EC8  0100               	movlb	0	; () banked
  3230   000ECA  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3231   000ECC  0E00               	movlw	0
  3232   000ECE  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3233   000ED0  0E00               	movlw	0
  3234   000ED2  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3235   000ED4  0E00               	movlw	0
  3236   000ED6  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3237   000ED8                     
  3238                           ; BSR set to: 0
  3239                           ;color.c: 138:     redcurrent = cCurr->red;
  3240   000ED8  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3241   000EDA  6ED9               	movwf	fsr2l,c
  3242   000EDC  6ADA               	clrf	fsr2h,c
  3243   000EDE  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3244   000EE2  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3245   000EE6  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3246   000EEA  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3247   000EEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3248   000EF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3249   000EF2  0E00               	movlw	0
  3250   000EF4  EC53  F016         	call	___xxtofl
  3251   000EF8  C002  F060         	movff	?___xxtofl,convert_rgb2hue@redcurrent
  3252   000EFC  C003  F061         	movff	?___xxtofl+1,convert_rgb2hue@redcurrent+1
  3253   000F00  C004  F062         	movff	?___xxtofl+2,convert_rgb2hue@redcurrent+2
  3254   000F04  C005  F063         	movff	?___xxtofl+3,convert_rgb2hue@redcurrent+3
  3255   000F08                     
  3256                           ;color.c: 139:     redmax = cMax->red;
  3257   000F08  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3258   000F0A  6ED9               	movwf	fsr2l,c
  3259   000F0C  6ADA               	clrf	fsr2h,c
  3260   000F0E  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3261   000F12  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3262   000F16  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3263   000F1A  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3264   000F1E  6A04               	clrf	(___xxtofl@val+2)^0,c
  3265   000F20  6A05               	clrf	(___xxtofl@val+3)^0,c
  3266   000F22  0E00               	movlw	0
  3267   000F24  EC53  F016         	call	___xxtofl
  3268   000F28  C002  F064         	movff	?___xxtofl,convert_rgb2hue@redmax
  3269   000F2C  C003  F065         	movff	?___xxtofl+1,convert_rgb2hue@redmax+1
  3270   000F30  C004  F066         	movff	?___xxtofl+2,convert_rgb2hue@redmax+2
  3271   000F34  C005  F067         	movff	?___xxtofl+3,convert_rgb2hue@redmax+3
  3272   000F38                     
  3273                           ;color.c: 140:     greencurrent = cCurr->green;
  3274   000F38  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3275   000F3A  6ED9               	movwf	fsr2l,c
  3276   000F3C  6ADA               	clrf	fsr2h,c
  3277   000F3E  0E02               	movlw	2
  3278   000F40  26D9               	addwf	fsr2l,f,c
  3279   000F42  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3280   000F46  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3281   000F4A  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3282   000F4E  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3283   000F52  6A04               	clrf	(___xxtofl@val+2)^0,c
  3284   000F54  6A05               	clrf	(___xxtofl@val+3)^0,c
  3285   000F56  0E00               	movlw	0
  3286   000F58  EC53  F016         	call	___xxtofl
  3287   000F5C  C002  F068         	movff	?___xxtofl,convert_rgb2hue@greencurrent
  3288   000F60  C003  F069         	movff	?___xxtofl+1,convert_rgb2hue@greencurrent+1
  3289   000F64  C004  F06A         	movff	?___xxtofl+2,convert_rgb2hue@greencurrent+2
  3290   000F68  C005  F06B         	movff	?___xxtofl+3,convert_rgb2hue@greencurrent+3
  3291   000F6C                     
  3292                           ;color.c: 141:     greenmax = cMax->green;
  3293   000F6C  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3294   000F6E  6ED9               	movwf	fsr2l,c
  3295   000F70  6ADA               	clrf	fsr2h,c
  3296   000F72  0E02               	movlw	2
  3297   000F74  26D9               	addwf	fsr2l,f,c
  3298   000F76  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3299   000F7A  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3300   000F7E  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3301   000F82  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3302   000F86  6A04               	clrf	(___xxtofl@val+2)^0,c
  3303   000F88  6A05               	clrf	(___xxtofl@val+3)^0,c
  3304   000F8A  0E00               	movlw	0
  3305   000F8C  EC53  F016         	call	___xxtofl
  3306   000F90  C002  F06C         	movff	?___xxtofl,convert_rgb2hue@greenmax
  3307   000F94  C003  F06D         	movff	?___xxtofl+1,convert_rgb2hue@greenmax+1
  3308   000F98  C004  F06E         	movff	?___xxtofl+2,convert_rgb2hue@greenmax+2
  3309   000F9C  C005  F06F         	movff	?___xxtofl+3,convert_rgb2hue@greenmax+3
  3310   000FA0                     
  3311                           ;color.c: 142:     bluecurrent = cCurr->blue;
  3312   000FA0  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3313   000FA2  6ED9               	movwf	fsr2l,c
  3314   000FA4  6ADA               	clrf	fsr2h,c
  3315   000FA6  0E04               	movlw	4
  3316   000FA8  26D9               	addwf	fsr2l,f,c
  3317   000FAA  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3318   000FAE  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3319   000FB2  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3320   000FB6  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3321   000FBA  6A04               	clrf	(___xxtofl@val+2)^0,c
  3322   000FBC  6A05               	clrf	(___xxtofl@val+3)^0,c
  3323   000FBE  0E00               	movlw	0
  3324   000FC0  EC53  F016         	call	___xxtofl
  3325   000FC4  C002  F070         	movff	?___xxtofl,convert_rgb2hue@bluecurrent
  3326   000FC8  C003  F071         	movff	?___xxtofl+1,convert_rgb2hue@bluecurrent+1
  3327   000FCC  C004  F072         	movff	?___xxtofl+2,convert_rgb2hue@bluecurrent+2
  3328   000FD0  C005  F073         	movff	?___xxtofl+3,convert_rgb2hue@bluecurrent+3
  3329   000FD4                     
  3330                           ;color.c: 143:     bluemax = cMax->blue;
  3331   000FD4  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3332   000FD6  6ED9               	movwf	fsr2l,c
  3333   000FD8  6ADA               	clrf	fsr2h,c
  3334   000FDA  0E04               	movlw	4
  3335   000FDC  26D9               	addwf	fsr2l,f,c
  3336   000FDE  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3337   000FE2  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3338   000FE6  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3339   000FEA  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3340   000FEE  6A04               	clrf	(___xxtofl@val+2)^0,c
  3341   000FF0  6A05               	clrf	(___xxtofl@val+3)^0,c
  3342   000FF2  0E00               	movlw	0
  3343   000FF4  EC53  F016         	call	___xxtofl
  3344   000FF8  C002  F074         	movff	?___xxtofl,convert_rgb2hue@bluemax
  3345   000FFC  C003  F075         	movff	?___xxtofl+1,convert_rgb2hue@bluemax+1
  3346   001000  C004  F076         	movff	?___xxtofl+2,convert_rgb2hue@bluemax+2
  3347   001004  C005  F077         	movff	?___xxtofl+3,convert_rgb2hue@bluemax+3
  3348   001008                     
  3349                           ;color.c: 144:     clearcurrent = cCurr->clear;
  3350   001008  504D               	movf	convert_rgb2hue@cCurr^0,w,c
  3351   00100A  6ED9               	movwf	fsr2l,c
  3352   00100C  6ADA               	clrf	fsr2h,c
  3353   00100E  0E06               	movlw	6
  3354   001010  26D9               	addwf	fsr2l,f,c
  3355   001012  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3356   001016  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3357   00101A  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3358   00101E  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3359   001022  6A04               	clrf	(___xxtofl@val+2)^0,c
  3360   001024  6A05               	clrf	(___xxtofl@val+3)^0,c
  3361   001026  0E00               	movlw	0
  3362   001028  EC53  F016         	call	___xxtofl
  3363   00102C  C002  F078         	movff	?___xxtofl,convert_rgb2hue@clearcurrent
  3364   001030  C003  F079         	movff	?___xxtofl+1,convert_rgb2hue@clearcurrent+1
  3365   001034  C004  F07A         	movff	?___xxtofl+2,convert_rgb2hue@clearcurrent+2
  3366   001038  C005  F07B         	movff	?___xxtofl+3,convert_rgb2hue@clearcurrent+3
  3367   00103C                     
  3368                           ;color.c: 145:     clearmax = cMax->clear;
  3369   00103C  504C               	movf	convert_rgb2hue@cMax^0,w,c
  3370   00103E  6ED9               	movwf	fsr2l,c
  3371   001040  6ADA               	clrf	fsr2h,c
  3372   001042  0E06               	movlw	6
  3373   001044  26D9               	addwf	fsr2l,f,c
  3374   001046  CFDE F04E          	movff	postinc2,??_convert_rgb2hue
  3375   00104A  CFDD F04F          	movff	postdec2,??_convert_rgb2hue+1
  3376   00104E  C04E  F002         	movff	??_convert_rgb2hue,___xxtofl@val
  3377   001052  C04F  F003         	movff	??_convert_rgb2hue+1,___xxtofl@val+1
  3378   001056  6A04               	clrf	(___xxtofl@val+2)^0,c
  3379   001058  6A05               	clrf	(___xxtofl@val+3)^0,c
  3380   00105A  0E00               	movlw	0
  3381   00105C  EC53  F016         	call	___xxtofl
  3382   001060  C002  F07C         	movff	?___xxtofl,convert_rgb2hue@clearmax
  3383   001064  C003  F07D         	movff	?___xxtofl+1,convert_rgb2hue@clearmax+1
  3384   001068  C004  F07E         	movff	?___xxtofl+2,convert_rgb2hue@clearmax+2
  3385   00106C  C005  F07F         	movff	?___xxtofl+3,convert_rgb2hue@clearmax+3
  3386   001070  C078  F029         	movff	convert_rgb2hue@clearcurrent,___fldiv@b
  3387   001074  C079  F02A         	movff	convert_rgb2hue@clearcurrent+1,___fldiv@b+1
  3388   001078  C07A  F02B         	movff	convert_rgb2hue@clearcurrent+2,___fldiv@b+2
  3389   00107C  C07B  F02C         	movff	convert_rgb2hue@clearcurrent+3,___fldiv@b+3
  3390   001080  C07C  F02D         	movff	convert_rgb2hue@clearmax,___fldiv@a
  3391   001084  C07D  F02E         	movff	convert_rgb2hue@clearmax+1,___fldiv@a+1
  3392   001088  C07E  F02F         	movff	convert_rgb2hue@clearmax+2,___fldiv@a+2
  3393   00108C  C07F  F030         	movff	convert_rgb2hue@clearmax+3,___fldiv@a+3
  3394   001090  EC05  F012         	call	___fldiv	;wreg free
  3395   001094                     
  3396                           ;color.c: 148:     char c_char[20];;color.c: 154:     r = redcurrent/redmax;
  3397   001094  C060  F029         	movff	convert_rgb2hue@redcurrent,___fldiv@b
  3398   001098  C061  F02A         	movff	convert_rgb2hue@redcurrent+1,___fldiv@b+1
  3399   00109C  C062  F02B         	movff	convert_rgb2hue@redcurrent+2,___fldiv@b+2
  3400   0010A0  C063  F02C         	movff	convert_rgb2hue@redcurrent+3,___fldiv@b+3
  3401   0010A4  C064  F02D         	movff	convert_rgb2hue@redmax,___fldiv@a
  3402   0010A8  C065  F02E         	movff	convert_rgb2hue@redmax+1,___fldiv@a+1
  3403   0010AC  C066  F02F         	movff	convert_rgb2hue@redmax+2,___fldiv@a+2
  3404   0010B0  C067  F030         	movff	convert_rgb2hue@redmax+3,___fldiv@a+3
  3405   0010B4  EC05  F012         	call	___fldiv	;wreg free
  3406   0010B8  C029  F0A0         	movff	?___fldiv,convert_rgb2hue@r
  3407   0010BC  C02A  F0A1         	movff	?___fldiv+1,convert_rgb2hue@r+1
  3408   0010C0  C02B  F0A2         	movff	?___fldiv+2,convert_rgb2hue@r+2
  3409   0010C4  C02C  F0A3         	movff	?___fldiv+3,convert_rgb2hue@r+3
  3410   0010C8                     
  3411                           ;color.c: 155:     g = greencurrent/greenmax;
  3412   0010C8  C068  F029         	movff	convert_rgb2hue@greencurrent,___fldiv@b
  3413   0010CC  C069  F02A         	movff	convert_rgb2hue@greencurrent+1,___fldiv@b+1
  3414   0010D0  C06A  F02B         	movff	convert_rgb2hue@greencurrent+2,___fldiv@b+2
  3415   0010D4  C06B  F02C         	movff	convert_rgb2hue@greencurrent+3,___fldiv@b+3
  3416   0010D8  C06C  F02D         	movff	convert_rgb2hue@greenmax,___fldiv@a
  3417   0010DC  C06D  F02E         	movff	convert_rgb2hue@greenmax+1,___fldiv@a+1
  3418   0010E0  C06E  F02F         	movff	convert_rgb2hue@greenmax+2,___fldiv@a+2
  3419   0010E4  C06F  F030         	movff	convert_rgb2hue@greenmax+3,___fldiv@a+3
  3420   0010E8  EC05  F012         	call	___fldiv	;wreg free
  3421   0010EC  C029  F0A4         	movff	?___fldiv,convert_rgb2hue@g
  3422   0010F0  C02A  F0A5         	movff	?___fldiv+1,convert_rgb2hue@g+1
  3423   0010F4  C02B  F0A6         	movff	?___fldiv+2,convert_rgb2hue@g+2
  3424   0010F8  C02C  F0A7         	movff	?___fldiv+3,convert_rgb2hue@g+3
  3425   0010FC                     
  3426                           ;color.c: 156:     b = bluecurrent/bluemax;
  3427   0010FC  C070  F029         	movff	convert_rgb2hue@bluecurrent,___fldiv@b
  3428   001100  C071  F02A         	movff	convert_rgb2hue@bluecurrent+1,___fldiv@b+1
  3429   001104  C072  F02B         	movff	convert_rgb2hue@bluecurrent+2,___fldiv@b+2
  3430   001108  C073  F02C         	movff	convert_rgb2hue@bluecurrent+3,___fldiv@b+3
  3431   00110C  C074  F02D         	movff	convert_rgb2hue@bluemax,___fldiv@a
  3432   001110  C075  F02E         	movff	convert_rgb2hue@bluemax+1,___fldiv@a+1
  3433   001114  C076  F02F         	movff	convert_rgb2hue@bluemax+2,___fldiv@a+2
  3434   001118  C077  F030         	movff	convert_rgb2hue@bluemax+3,___fldiv@a+3
  3435   00111C  EC05  F012         	call	___fldiv	;wreg free
  3436   001120  C029  F0A8         	movff	?___fldiv,convert_rgb2hue@b
  3437   001124  C02A  F0A9         	movff	?___fldiv+1,convert_rgb2hue@b+1
  3438   001128  C02B  F0AA         	movff	?___fldiv+2,convert_rgb2hue@b+2
  3439   00112C  C02C  F0AB         	movff	?___fldiv+3,convert_rgb2hue@b+3
  3440   001130                     
  3441                           ;color.c: 158:     min = r < g ? (r < b ? r : b) : (g < b ? g : b);
  3442   001130  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3443   001134  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3444   001138  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3445   00113C  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3446   001140  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3447   001144  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3448   001148  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3449   00114C  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3450   001150  ECA9  F01B         	call	___flge	;wreg free
  3451   001154  A0D8               	btfss	status,0,c
  3452   001156  EFAF  F008         	goto	u4141
  3453   00115A  EFB1  F008         	goto	u4140
  3454   00115E                     u4141:
  3455   00115E  EFE6  F008         	goto	l4855
  3456   001162                     u4140:
  3457   001162  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3458   001166  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3459   00116A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3460   00116E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3461   001172  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3462   001176  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3463   00117A  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3464   00117E  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3465   001182  ECA9  F01B         	call	___flge	;wreg free
  3466   001186  A0D8               	btfss	status,0,c
  3467   001188  EFC8  F008         	goto	u4151
  3468   00118C  EFCA  F008         	goto	u4150
  3469   001190                     u4151:
  3470   001190  EFD4  F008         	goto	l99
  3471   001194                     u4150:
  3472   001194  C0A8  F080         	movff	convert_rgb2hue@b,_convert_rgb2hue$367
  3473   001198  C0A9  F081         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$367+1
  3474   00119C  C0AA  F082         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$367+2
  3475   0011A0  C0AB  F083         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$367+3
  3476   0011A4  EFDC  F008         	goto	l101
  3477   0011A8                     l99:
  3478   0011A8  C0A4  F080         	movff	convert_rgb2hue@g,_convert_rgb2hue$367
  3479   0011AC  C0A5  F081         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$367+1
  3480   0011B0  C0A6  F082         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$367+2
  3481   0011B4  C0A7  F083         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$367+3
  3482   0011B8                     l101:
  3483   0011B8  C080  F090         	movff	_convert_rgb2hue$367,convert_rgb2hue@min
  3484   0011BC  C081  F091         	movff	_convert_rgb2hue$367+1,convert_rgb2hue@min+1
  3485   0011C0  C082  F092         	movff	_convert_rgb2hue$367+2,convert_rgb2hue@min+2
  3486   0011C4  C083  F093         	movff	_convert_rgb2hue$367+3,convert_rgb2hue@min+3
  3487   0011C8  EF19  F009         	goto	l4859
  3488   0011CC                     l4855:
  3489   0011CC  C0A0  F002         	movff	convert_rgb2hue@r,___flge@ff1
  3490   0011D0  C0A1  F003         	movff	convert_rgb2hue@r+1,___flge@ff1+1
  3491   0011D4  C0A2  F004         	movff	convert_rgb2hue@r+2,___flge@ff1+2
  3492   0011D8  C0A3  F005         	movff	convert_rgb2hue@r+3,___flge@ff1+3
  3493   0011DC  C0A8  F006         	movff	convert_rgb2hue@b,___flge@ff2
  3494   0011E0  C0A9  F007         	movff	convert_rgb2hue@b+1,___flge@ff2+1
  3495   0011E4  C0AA  F008         	movff	convert_rgb2hue@b+2,___flge@ff2+2
  3496   0011E8  C0AB  F009         	movff	convert_rgb2hue@b+3,___flge@ff2+3
  3497   0011EC  ECA9  F01B         	call	___flge	;wreg free
  3498   0011F0  A0D8               	btfss	status,0,c
  3499   0011F2  EFFD  F008         	goto	u4161
  3500   0011F6  EFFF  F008         	goto	u4160
  3501   0011FA                     u4161:
  3502   0011FA  EF09  F009         	goto	l103
  3503   0011FE                     u4160:
  3504   0011FE  C0A8  F084         	movff	convert_rgb2hue@b,_convert_rgb2hue$368
  3505   001202  C0A9  F085         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$368+1
  3506   001206  C0AA  F086         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$368+2
  3507   00120A  C0AB  F087         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$368+3
  3508   00120E  EF11  F009         	goto	l105
  3509   001212                     l103:
  3510   001212  C0A0  F084         	movff	convert_rgb2hue@r,_convert_rgb2hue$368
  3511   001216  C0A1  F085         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$368+1
  3512   00121A  C0A2  F086         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$368+2
  3513   00121E  C0A3  F087         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$368+3
  3514   001222                     l105:
  3515   001222  C084  F090         	movff	_convert_rgb2hue$368,convert_rgb2hue@min
  3516   001226  C085  F091         	movff	_convert_rgb2hue$368+1,convert_rgb2hue@min+1
  3517   00122A  C086  F092         	movff	_convert_rgb2hue$368+2,convert_rgb2hue@min+2
  3518   00122E  C087  F093         	movff	_convert_rgb2hue$368+3,convert_rgb2hue@min+3
  3519   001232                     l4859:
  3520                           
  3521                           ;color.c: 159:     max = r > g ? (r > b ? r : b) : (g > b ? g : b);
  3522   001232  C0A4  F002         	movff	convert_rgb2hue@g,___flge@ff1
  3523   001236  C0A5  F003         	movff	convert_rgb2hue@g+1,___flge@ff1+1
  3524   00123A  C0A6  F004         	movff	convert_rgb2hue@g+2,___flge@ff1+2
  3525   00123E  C0A7  F005         	movff	convert_rgb2hue@g+3,___flge@ff1+3
  3526   001242  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3527   001246  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3528   00124A  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3529   00124E  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3530   001252  ECA9  F01B         	call	___flge	;wreg free
  3531   001256  A0D8               	btfss	status,0,c
  3532   001258  EF30  F009         	goto	u4171
  3533   00125C  EF32  F009         	goto	u4170
  3534   001260                     u4171:
  3535   001260  EF67  F009         	goto	l4865
  3536   001264                     u4170:
  3537   001264  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3538   001268  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3539   00126C  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3540   001270  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3541   001274  C0A4  F006         	movff	convert_rgb2hue@g,___flge@ff2
  3542   001278  C0A5  F007         	movff	convert_rgb2hue@g+1,___flge@ff2+1
  3543   00127C  C0A6  F008         	movff	convert_rgb2hue@g+2,___flge@ff2+2
  3544   001280  C0A7  F009         	movff	convert_rgb2hue@g+3,___flge@ff2+3
  3545   001284  ECA9  F01B         	call	___flge	;wreg free
  3546   001288  A0D8               	btfss	status,0,c
  3547   00128A  EF49  F009         	goto	u4181
  3548   00128E  EF4B  F009         	goto	u4180
  3549   001292                     u4181:
  3550   001292  EF55  F009         	goto	l111
  3551   001296                     u4180:
  3552   001296  C0A8  F088         	movff	convert_rgb2hue@b,_convert_rgb2hue$369
  3553   00129A  C0A9  F089         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$369+1
  3554   00129E  C0AA  F08A         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$369+2
  3555   0012A2  C0AB  F08B         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$369+3
  3556   0012A6  EF5D  F009         	goto	l113
  3557   0012AA                     l111:
  3558   0012AA  C0A4  F088         	movff	convert_rgb2hue@g,_convert_rgb2hue$369
  3559   0012AE  C0A5  F089         	movff	convert_rgb2hue@g+1,_convert_rgb2hue$369+1
  3560   0012B2  C0A6  F08A         	movff	convert_rgb2hue@g+2,_convert_rgb2hue$369+2
  3561   0012B6  C0A7  F08B         	movff	convert_rgb2hue@g+3,_convert_rgb2hue$369+3
  3562   0012BA                     l113:
  3563   0012BA  C088  F098         	movff	_convert_rgb2hue$369,convert_rgb2hue@max
  3564   0012BE  C089  F099         	movff	_convert_rgb2hue$369+1,convert_rgb2hue@max+1
  3565   0012C2  C08A  F09A         	movff	_convert_rgb2hue$369+2,convert_rgb2hue@max+2
  3566   0012C6  C08B  F09B         	movff	_convert_rgb2hue$369+3,convert_rgb2hue@max+3
  3567   0012CA  EF9A  F009         	goto	l4869
  3568   0012CE                     l4865:
  3569   0012CE  C0A8  F002         	movff	convert_rgb2hue@b,___flge@ff1
  3570   0012D2  C0A9  F003         	movff	convert_rgb2hue@b+1,___flge@ff1+1
  3571   0012D6  C0AA  F004         	movff	convert_rgb2hue@b+2,___flge@ff1+2
  3572   0012DA  C0AB  F005         	movff	convert_rgb2hue@b+3,___flge@ff1+3
  3573   0012DE  C0A0  F006         	movff	convert_rgb2hue@r,___flge@ff2
  3574   0012E2  C0A1  F007         	movff	convert_rgb2hue@r+1,___flge@ff2+1
  3575   0012E6  C0A2  F008         	movff	convert_rgb2hue@r+2,___flge@ff2+2
  3576   0012EA  C0A3  F009         	movff	convert_rgb2hue@r+3,___flge@ff2+3
  3577   0012EE  ECA9  F01B         	call	___flge	;wreg free
  3578   0012F2  A0D8               	btfss	status,0,c
  3579   0012F4  EF7E  F009         	goto	u4191
  3580   0012F8  EF80  F009         	goto	u4190
  3581   0012FC                     u4191:
  3582   0012FC  EF8A  F009         	goto	l115
  3583   001300                     u4190:
  3584   001300  C0A8  F08C         	movff	convert_rgb2hue@b,_convert_rgb2hue$370
  3585   001304  C0A9  F08D         	movff	convert_rgb2hue@b+1,_convert_rgb2hue$370+1
  3586   001308  C0AA  F08E         	movff	convert_rgb2hue@b+2,_convert_rgb2hue$370+2
  3587   00130C  C0AB  F08F         	movff	convert_rgb2hue@b+3,_convert_rgb2hue$370+3
  3588   001310  EF92  F009         	goto	l117
  3589   001314                     l115:
  3590   001314  C0A0  F08C         	movff	convert_rgb2hue@r,_convert_rgb2hue$370
  3591   001318  C0A1  F08D         	movff	convert_rgb2hue@r+1,_convert_rgb2hue$370+1
  3592   00131C  C0A2  F08E         	movff	convert_rgb2hue@r+2,_convert_rgb2hue$370+2
  3593   001320  C0A3  F08F         	movff	convert_rgb2hue@r+3,_convert_rgb2hue$370+3
  3594   001324                     l117:
  3595   001324  C08C  F098         	movff	_convert_rgb2hue$370,convert_rgb2hue@max
  3596   001328  C08D  F099         	movff	_convert_rgb2hue$370+1,convert_rgb2hue@max+1
  3597   00132C  C08E  F09A         	movff	_convert_rgb2hue$370+2,convert_rgb2hue@max+2
  3598   001330  C08F  F09B         	movff	_convert_rgb2hue$370+3,convert_rgb2hue@max+3
  3599   001334                     l4869:
  3600                           
  3601                           ;color.c: 160:     diff = max - min;
  3602   001334  C098  F012         	movff	convert_rgb2hue@max,___flsub@b
  3603   001338  C099  F013         	movff	convert_rgb2hue@max+1,___flsub@b+1
  3604   00133C  C09A  F014         	movff	convert_rgb2hue@max+2,___flsub@b+2
  3605   001340  C09B  F015         	movff	convert_rgb2hue@max+3,___flsub@b+3
  3606   001344  C090  F016         	movff	convert_rgb2hue@min,___flsub@a
  3607   001348  C091  F017         	movff	convert_rgb2hue@min+1,___flsub@a+1
  3608   00134C  C092  F018         	movff	convert_rgb2hue@min+2,___flsub@a+2
  3609   001350  C093  F019         	movff	convert_rgb2hue@min+3,___flsub@a+3
  3610   001354  EC54  F022         	call	___flsub	;wreg free
  3611   001358  C012  F094         	movff	?___flsub,convert_rgb2hue@diff
  3612   00135C  C013  F095         	movff	?___flsub+1,convert_rgb2hue@diff+1
  3613   001360  C014  F096         	movff	?___flsub+2,convert_rgb2hue@diff+2
  3614   001364  C015  F097         	movff	?___flsub+3,convert_rgb2hue@diff+3
  3615                           
  3616                           ;color.c: 161:     if (max == min) {
  3617   001368  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3618   00136C  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3619   001370  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3620   001374  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3621   001378  C090  F006         	movff	convert_rgb2hue@min,___fleq@ff2
  3622   00137C  C091  F007         	movff	convert_rgb2hue@min+1,___fleq@ff2+1
  3623   001380  C092  F008         	movff	convert_rgb2hue@min+2,___fleq@ff2+2
  3624   001384  C093  F009         	movff	convert_rgb2hue@min+3,___fleq@ff2+3
  3625   001388  EC8C  F01E         	call	___fleq	;wreg free
  3626   00138C  A0D8               	btfss	status,0,c
  3627   00138E  EFCB  F009         	goto	u4201
  3628   001392  EFCD  F009         	goto	u4200
  3629   001396                     u4201:
  3630   001396  EFD8  F009         	goto	l4873
  3631   00139A                     u4200:
  3632   00139A                     
  3633                           ;color.c: 162:         hue = 0;
  3634   00139A  0E00               	movlw	0
  3635   00139C  0100               	movlb	0	; () banked
  3636   00139E  6F9C               	movwf	convert_rgb2hue@hue& (0+255),b
  3637   0013A0  0E00               	movlw	0
  3638   0013A2  6F9D               	movwf	(convert_rgb2hue@hue+1)& (0+255),b
  3639   0013A4  0E00               	movlw	0
  3640   0013A6  6F9E               	movwf	(convert_rgb2hue@hue+2)& (0+255),b
  3641   0013A8  0E00               	movlw	0
  3642   0013AA  6F9F               	movwf	(convert_rgb2hue@hue+3)& (0+255),b
  3643                           
  3644                           ;color.c: 163:     } else if (max == r){
  3645   0013AC  EFE1  F00A         	goto	l4885
  3646   0013B0                     l4873:
  3647   0013B0  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3648   0013B4  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3649   0013B8  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3650   0013BC  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3651   0013C0  C0A0  F006         	movff	convert_rgb2hue@r,___fleq@ff2
  3652   0013C4  C0A1  F007         	movff	convert_rgb2hue@r+1,___fleq@ff2+1
  3653   0013C8  C0A2  F008         	movff	convert_rgb2hue@r+2,___fleq@ff2+2
  3654   0013CC  C0A3  F009         	movff	convert_rgb2hue@r+3,___fleq@ff2+3
  3655   0013D0  EC8C  F01E         	call	___fleq	;wreg free
  3656   0013D4  A0D8               	btfss	status,0,c
  3657   0013D6  EFEF  F009         	goto	u4211
  3658   0013DA  EFF1  F009         	goto	u4210
  3659   0013DE                     u4211:
  3660   0013DE  EF1F  F00A         	goto	l4877
  3661   0013E2                     u4210:
  3662   0013E2                     
  3663                           ;color.c: 164:         hue = (b - g) / diff;
  3664   0013E2  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3665   0013E6  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3666   0013EA  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3667   0013EE  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3668   0013F2  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3669   0013F6  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3670   0013FA  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3671   0013FE  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3672   001402  EC54  F022         	call	___flsub	;wreg free
  3673   001406  C012  F029         	movff	?___flsub,___fldiv@b
  3674   00140A  C013  F02A         	movff	?___flsub+1,___fldiv@b+1
  3675   00140E  C014  F02B         	movff	?___flsub+2,___fldiv@b+2
  3676   001412  C015  F02C         	movff	?___flsub+3,___fldiv@b+3
  3677   001416  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  3678   00141A  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3679   00141E  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3680   001422  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3681   001426  EC05  F012         	call	___fldiv	;wreg free
  3682   00142A  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3683   00142E  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3684   001432  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3685   001436  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3686                           
  3687                           ;color.c: 165:     } else if (max == g){
  3688   00143A  EFE1  F00A         	goto	l4885
  3689   00143E                     l4877:
  3690   00143E  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3691   001442  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3692   001446  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3693   00144A  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3694   00144E  C0A4  F006         	movff	convert_rgb2hue@g,___fleq@ff2
  3695   001452  C0A5  F007         	movff	convert_rgb2hue@g+1,___fleq@ff2+1
  3696   001456  C0A6  F008         	movff	convert_rgb2hue@g+2,___fleq@ff2+2
  3697   00145A  C0A7  F009         	movff	convert_rgb2hue@g+3,___fleq@ff2+3
  3698   00145E  EC8C  F01E         	call	___fleq	;wreg free
  3699   001462  A0D8               	btfss	status,0,c
  3700   001464  EF36  F00A         	goto	u4221
  3701   001468  EF38  F00A         	goto	u4220
  3702   00146C                     u4221:
  3703   00146C  EF80  F00A         	goto	l4881
  3704   001470                     u4220:
  3705   001470                     
  3706                           ;color.c: 166:         hue = (b - r) / diff;
  3707   001470  C0A0  F016         	movff	convert_rgb2hue@r,___flsub@a
  3708   001474  C0A1  F017         	movff	convert_rgb2hue@r+1,___flsub@a+1
  3709   001478  C0A2  F018         	movff	convert_rgb2hue@r+2,___flsub@a+2
  3710   00147C  C0A3  F019         	movff	convert_rgb2hue@r+3,___flsub@a+3
  3711   001480  C0A8  F012         	movff	convert_rgb2hue@b,___flsub@b
  3712   001484  C0A9  F013         	movff	convert_rgb2hue@b+1,___flsub@b+1
  3713   001488  C0AA  F014         	movff	convert_rgb2hue@b+2,___flsub@b+2
  3714   00148C  C0AB  F015         	movff	convert_rgb2hue@b+3,___flsub@b+3
  3715   001490  EC54  F022         	call	___flsub	;wreg free
  3716   001494  C012  F029         	movff	?___flsub,___fldiv@b
  3717   001498  C013  F02A         	movff	?___flsub+1,___fldiv@b+1
  3718   00149C  C014  F02B         	movff	?___flsub+2,___fldiv@b+2
  3719   0014A0  C015  F02C         	movff	?___flsub+3,___fldiv@b+3
  3720   0014A4  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  3721   0014A8  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3722   0014AC  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3723   0014B0  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3724   0014B4  EC05  F012         	call	___fldiv	;wreg free
  3725   0014B8  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3726   0014BC  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3727   0014C0  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3728   0014C4  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3729                           
  3730                           ;color.c: 167:         hue = hue + 2;
  3731   0014C8  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3732   0014CC  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3733   0014D0  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3734   0014D4  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3735   0014D8  0E00               	movlw	0
  3736   0014DA  6E06               	movwf	___fladd@a^0,c
  3737   0014DC  0E00               	movlw	0
  3738   0014DE  6E07               	movwf	(___fladd@a+1)^0,c
  3739   0014E0  0E00               	movlw	0
  3740   0014E2  6E08               	movwf	(___fladd@a+2)^0,c
  3741   0014E4  0E40               	movlw	64
  3742   0014E6  6E09               	movwf	(___fladd@a+3)^0,c
  3743   0014E8  EC90  F00D         	call	___fladd	;wreg free
  3744   0014EC  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3745   0014F0  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3746   0014F4  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3747   0014F8  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3748                           
  3749                           ;color.c: 168:     } else if (max == b){
  3750   0014FC  EFE1  F00A         	goto	l4885
  3751   001500                     l4881:
  3752   001500  C098  F002         	movff	convert_rgb2hue@max,___fleq@ff1
  3753   001504  C099  F003         	movff	convert_rgb2hue@max+1,___fleq@ff1+1
  3754   001508  C09A  F004         	movff	convert_rgb2hue@max+2,___fleq@ff1+2
  3755   00150C  C09B  F005         	movff	convert_rgb2hue@max+3,___fleq@ff1+3
  3756   001510  C0A8  F006         	movff	convert_rgb2hue@b,___fleq@ff2
  3757   001514  C0A9  F007         	movff	convert_rgb2hue@b+1,___fleq@ff2+1
  3758   001518  C0AA  F008         	movff	convert_rgb2hue@b+2,___fleq@ff2+2
  3759   00151C  C0AB  F009         	movff	convert_rgb2hue@b+3,___fleq@ff2+3
  3760   001520  EC8C  F01E         	call	___fleq	;wreg free
  3761   001524  A0D8               	btfss	status,0,c
  3762   001526  EF97  F00A         	goto	u4231
  3763   00152A  EF99  F00A         	goto	u4230
  3764   00152E                     u4231:
  3765   00152E  EFE1  F00A         	goto	l121
  3766   001532                     u4230:
  3767   001532                     
  3768                           ;color.c: 169:         hue = (r - g) / diff;
  3769   001532  C0A4  F016         	movff	convert_rgb2hue@g,___flsub@a
  3770   001536  C0A5  F017         	movff	convert_rgb2hue@g+1,___flsub@a+1
  3771   00153A  C0A6  F018         	movff	convert_rgb2hue@g+2,___flsub@a+2
  3772   00153E  C0A7  F019         	movff	convert_rgb2hue@g+3,___flsub@a+3
  3773   001542  C0A0  F012         	movff	convert_rgb2hue@r,___flsub@b
  3774   001546  C0A1  F013         	movff	convert_rgb2hue@r+1,___flsub@b+1
  3775   00154A  C0A2  F014         	movff	convert_rgb2hue@r+2,___flsub@b+2
  3776   00154E  C0A3  F015         	movff	convert_rgb2hue@r+3,___flsub@b+3
  3777   001552  EC54  F022         	call	___flsub	;wreg free
  3778   001556  C012  F029         	movff	?___flsub,___fldiv@b
  3779   00155A  C013  F02A         	movff	?___flsub+1,___fldiv@b+1
  3780   00155E  C014  F02B         	movff	?___flsub+2,___fldiv@b+2
  3781   001562  C015  F02C         	movff	?___flsub+3,___fldiv@b+3
  3782   001566  C094  F02D         	movff	convert_rgb2hue@diff,___fldiv@a
  3783   00156A  C095  F02E         	movff	convert_rgb2hue@diff+1,___fldiv@a+1
  3784   00156E  C096  F02F         	movff	convert_rgb2hue@diff+2,___fldiv@a+2
  3785   001572  C097  F030         	movff	convert_rgb2hue@diff+3,___fldiv@a+3
  3786   001576  EC05  F012         	call	___fldiv	;wreg free
  3787   00157A  C029  F09C         	movff	?___fldiv,convert_rgb2hue@hue
  3788   00157E  C02A  F09D         	movff	?___fldiv+1,convert_rgb2hue@hue+1
  3789   001582  C02B  F09E         	movff	?___fldiv+2,convert_rgb2hue@hue+2
  3790   001586  C02C  F09F         	movff	?___fldiv+3,convert_rgb2hue@hue+3
  3791                           
  3792                           ;color.c: 170:         hue = hue + 4;
  3793   00158A  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3794   00158E  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3795   001592  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3796   001596  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3797   00159A  0E00               	movlw	0
  3798   00159C  6E06               	movwf	___fladd@a^0,c
  3799   00159E  0E00               	movlw	0
  3800   0015A0  6E07               	movwf	(___fladd@a+1)^0,c
  3801   0015A2  0E80               	movlw	128
  3802   0015A4  6E08               	movwf	(___fladd@a+2)^0,c
  3803   0015A6  0E40               	movlw	64
  3804   0015A8  6E09               	movwf	(___fladd@a+3)^0,c
  3805   0015AA  EC90  F00D         	call	___fladd	;wreg free
  3806   0015AE  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3807   0015B2  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3808   0015B6  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3809   0015BA  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3810   0015BE  EFE1  F00A         	goto	l4885
  3811   0015C2                     l121:
  3812   0015C2                     l4885:
  3813                           
  3814                           ;color.c: 173:     hue = hue * 60;
  3815   0015C2  C09C  F010         	movff	convert_rgb2hue@hue,___flmul@b
  3816   0015C6  C09D  F011         	movff	convert_rgb2hue@hue+1,___flmul@b+1
  3817   0015CA  C09E  F012         	movff	convert_rgb2hue@hue+2,___flmul@b+2
  3818   0015CE  C09F  F013         	movff	convert_rgb2hue@hue+3,___flmul@b+3
  3819   0015D2  0E00               	movlw	0
  3820   0015D4  6E14               	movwf	___flmul@a^0,c
  3821   0015D6  0E00               	movlw	0
  3822   0015D8  6E15               	movwf	(___flmul@a+1)^0,c
  3823   0015DA  0E70               	movlw	112
  3824   0015DC  6E16               	movwf	(___flmul@a+2)^0,c
  3825   0015DE  0E42               	movlw	66
  3826   0015E0  6E17               	movwf	(___flmul@a+3)^0,c
  3827   0015E2  ECF0  F00F         	call	___flmul	;wreg free
  3828   0015E6  C010  F09C         	movff	?___flmul,convert_rgb2hue@hue
  3829   0015EA  C011  F09D         	movff	?___flmul+1,convert_rgb2hue@hue+1
  3830   0015EE  C012  F09E         	movff	?___flmul+2,convert_rgb2hue@hue+2
  3831   0015F2  C013  F09F         	movff	?___flmul+3,convert_rgb2hue@hue+3
  3832   0015F6                     
  3833                           ;color.c: 174:     if (hue < 0) {
  3834   0015F6  0100               	movlb	0	; () banked
  3835   0015F8  BF9F               	btfsc	(convert_rgb2hue@hue+3)& (0+255),7,b
  3836   0015FA  EF03  F00B         	goto	u4240
  3837   0015FE  EF01  F00B         	goto	u4241
  3838   001602                     u4241:
  3839   001602  EF1D  F00B         	goto	l125
  3840   001606                     u4240:
  3841   001606                     
  3842                           ; BSR set to: 0
  3843                           ;color.c: 175:         hue = hue + 360;
  3844   001606  C09C  F002         	movff	convert_rgb2hue@hue,___fladd@b
  3845   00160A  C09D  F003         	movff	convert_rgb2hue@hue+1,___fladd@b+1
  3846   00160E  C09E  F004         	movff	convert_rgb2hue@hue+2,___fladd@b+2
  3847   001612  C09F  F005         	movff	convert_rgb2hue@hue+3,___fladd@b+3
  3848   001616  0E00               	movlw	0
  3849   001618  6E06               	movwf	___fladd@a^0,c
  3850   00161A  0E00               	movlw	0
  3851   00161C  6E07               	movwf	(___fladd@a+1)^0,c
  3852   00161E  0EB4               	movlw	180
  3853   001620  6E08               	movwf	(___fladd@a+2)^0,c
  3854   001622  0E43               	movlw	67
  3855   001624  6E09               	movwf	(___fladd@a+3)^0,c
  3856   001626  EC90  F00D         	call	___fladd	;wreg free
  3857   00162A  C002  F09C         	movff	?___fladd,convert_rgb2hue@hue
  3858   00162E  C003  F09D         	movff	?___fladd+1,convert_rgb2hue@hue+1
  3859   001632  C004  F09E         	movff	?___fladd+2,convert_rgb2hue@hue+2
  3860   001636  C005  F09F         	movff	?___fladd+3,convert_rgb2hue@hue+3
  3861   00163A                     l125:
  3862                           
  3863                           ;color.c: 178:     return (unsigned int)hue;
  3864   00163A  C09C  F042         	movff	convert_rgb2hue@hue,___fltol@f1
  3865   00163E  C09D  F043         	movff	convert_rgb2hue@hue+1,___fltol@f1+1
  3866   001642  C09E  F044         	movff	convert_rgb2hue@hue+2,___fltol@f1+2
  3867   001646  C09F  F045         	movff	convert_rgb2hue@hue+3,___fltol@f1+3
  3868   00164A  EC26  F01B         	call	___fltol	;wreg free
  3869   00164E  C042  F04C         	movff	?___fltol,?_convert_rgb2hue
  3870   001652  C043  F04D         	movff	?___fltol+1,?_convert_rgb2hue+1
  3871   001656  0012               	return		;funcret
  3872   001658                     __end_of_convert_rgb2hue:
  3873                           	callstack 0
  3874                           
  3875 ;; *************** function ___xxtofl *****************
  3876 ;; Defined at:
  3877 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;  sign            1    wreg     unsigned char 
  3880 ;;  val             4    1[COMRAM] long 
  3881 ;; Auto vars:     Size  Location     Type
  3882 ;;  sign            1    9[COMRAM] unsigned char 
  3883 ;;  arg             4   11[COMRAM] unsigned long 
  3884 ;;  exp             1   10[COMRAM] unsigned char 
  3885 ;; Return value:  Size  Location     Type
  3886 ;;                  4    1[COMRAM] unsigned char 
  3887 ;; Registers used:
  3888 ;;		wreg, status,2, status,0
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3894 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3895 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3896 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3897 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3898 ;;Total ram usage:       14 bytes
  3899 ;; Hardware stack levels used: 1
  3900 ;; Hardware stack levels required when called: 1
  3901 ;; This function calls:
  3902 ;;		Nothing
  3903 ;; This function is called by:
  3904 ;;		_convert_rgb2hue
  3905 ;;		_main
  3906 ;;		_fullSpeedAhead
  3907 ;; This function uses a non-reentrant model
  3908 ;;
  3909                           
  3910                           	psect	text8
  3911   002CA6                     __ptext8:
  3912                           	callstack 0
  3913   002CA6                     ___xxtofl:
  3914                           	callstack 26
  3915                           
  3916                           ;incstack = 0
  3917                           ;___xxtofl@sign stored from wreg
  3918   002CA6  6E0A               	movwf	___xxtofl@sign^0,c
  3919   002CA8  500A               	movf	___xxtofl@sign^0,w,c
  3920   002CAA  B4D8               	btfsc	status,2,c
  3921   002CAC  EF5A  F016         	goto	u3681
  3922   002CB0  EF5C  F016         	goto	u3680
  3923   002CB4                     u3681:
  3924   002CB4  EF7E  F016         	goto	l1470
  3925   002CB8                     u3680:
  3926   002CB8  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  3927   002CBA  EF63  F016         	goto	u3690
  3928   002CBE  EF61  F016         	goto	u3691
  3929   002CC2                     u3691:
  3930   002CC2  EF7E  F016         	goto	l1470
  3931   002CC6                     u3690:
  3932   002CC6  C002  F006         	movff	___xxtofl@val,??___xxtofl
  3933   002CCA  C003  F007         	movff	___xxtofl@val+1,??___xxtofl+1
  3934   002CCE  C004  F008         	movff	___xxtofl@val+2,??___xxtofl+2
  3935   002CD2  C005  F009         	movff	___xxtofl@val+3,??___xxtofl+3
  3936   002CD6  1E06               	comf	??___xxtofl^0,f,c
  3937   002CD8  1E07               	comf	(??___xxtofl+1)^0,f,c
  3938   002CDA  1E08               	comf	(??___xxtofl+2)^0,f,c
  3939   002CDC  1E09               	comf	(??___xxtofl+3)^0,f,c
  3940   002CDE  2A06               	incf	??___xxtofl^0,f,c
  3941   002CE0  0E00               	movlw	0
  3942   002CE2  2207               	addwfc	(??___xxtofl+1)^0,f,c
  3943   002CE4  2208               	addwfc	(??___xxtofl+2)^0,f,c
  3944   002CE6  2209               	addwfc	(??___xxtofl+3)^0,f,c
  3945   002CE8  C006  F00C         	movff	??___xxtofl,___xxtofl@arg
  3946   002CEC  C007  F00D         	movff	??___xxtofl+1,___xxtofl@arg+1
  3947   002CF0  C008  F00E         	movff	??___xxtofl+2,___xxtofl@arg+2
  3948   002CF4  C009  F00F         	movff	??___xxtofl+3,___xxtofl@arg+3
  3949   002CF8  EF86  F016         	goto	l4417
  3950   002CFC                     l1470:
  3951   002CFC  C002  F00C         	movff	___xxtofl@val,___xxtofl@arg
  3952   002D00  C003  F00D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3953   002D04  C004  F00E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3954   002D08  C005  F00F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3955   002D0C                     l4417:
  3956   002D0C  5002               	movf	___xxtofl@val^0,w,c
  3957   002D0E  1003               	iorwf	(___xxtofl@val+1)^0,w,c
  3958   002D10  1004               	iorwf	(___xxtofl@val+2)^0,w,c
  3959   002D12  1005               	iorwf	(___xxtofl@val+3)^0,w,c
  3960   002D14  A4D8               	btfss	status,2,c
  3961   002D16  EF8F  F016         	goto	u3701
  3962   002D1A  EF91  F016         	goto	u3700
  3963   002D1E                     u3701:
  3964   002D1E  EF9B  F016         	goto	l4423
  3965   002D22                     u3700:
  3966   002D22  0E00               	movlw	0
  3967   002D24  6E02               	movwf	?___xxtofl^0,c
  3968   002D26  0E00               	movlw	0
  3969   002D28  6E03               	movwf	(?___xxtofl+1)^0,c
  3970   002D2A  0E00               	movlw	0
  3971   002D2C  6E04               	movwf	(?___xxtofl+2)^0,c
  3972   002D2E  0E00               	movlw	0
  3973   002D30  6E05               	movwf	(?___xxtofl+3)^0,c
  3974   002D32  EF2C  F017         	goto	l1473
  3975   002D36                     l4423:
  3976   002D36  0E96               	movlw	150
  3977   002D38  6E0B               	movwf	___xxtofl@exp^0,c
  3978   002D3A  EFA5  F016         	goto	l4427
  3979   002D3E                     l4425:
  3980   002D3E  2A0B               	incf	___xxtofl@exp^0,f,c
  3981   002D40  90D8               	bcf	status,0,c
  3982   002D42  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  3983   002D44  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  3984   002D46  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  3985   002D48  320C               	rrcf	___xxtofl@arg^0,f,c
  3986   002D4A                     l4427:
  3987   002D4A  0E00               	movlw	0
  3988   002D4C  140C               	andwf	___xxtofl@arg^0,w,c
  3989   002D4E  6E06               	movwf	??___xxtofl^0,c
  3990   002D50  0E00               	movlw	0
  3991   002D52  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  3992   002D54  6E07               	movwf	(??___xxtofl+1)^0,c
  3993   002D56  0E00               	movlw	0
  3994   002D58  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  3995   002D5A  6E08               	movwf	(??___xxtofl+2)^0,c
  3996   002D5C  0EFE               	movlw	254
  3997   002D5E  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  3998   002D60  6E09               	movwf	(??___xxtofl+3)^0,c
  3999   002D62  5006               	movf	??___xxtofl^0,w,c
  4000   002D64  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4001   002D66  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4002   002D68  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4003   002D6A  A4D8               	btfss	status,2,c
  4004   002D6C  EFBA  F016         	goto	u3711
  4005   002D70  EFBC  F016         	goto	u3710
  4006   002D74                     u3711:
  4007   002D74  EF9F  F016         	goto	l4425
  4008   002D78                     u3710:
  4009   002D78  EFCA  F016         	goto	l1477
  4010   002D7C                     l4429:
  4011   002D7C  2A0B               	incf	___xxtofl@exp^0,f,c
  4012   002D7E  0E01               	movlw	1
  4013   002D80  260C               	addwf	___xxtofl@arg^0,f,c
  4014   002D82  0E00               	movlw	0
  4015   002D84  220D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4016   002D86  220E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4017   002D88  220F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4018   002D8A  90D8               	bcf	status,0,c
  4019   002D8C  320F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4020   002D8E  320E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4021   002D90  320D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4022   002D92  320C               	rrcf	___xxtofl@arg^0,f,c
  4023   002D94                     l1477:
  4024   002D94  0E00               	movlw	0
  4025   002D96  140C               	andwf	___xxtofl@arg^0,w,c
  4026   002D98  6E06               	movwf	??___xxtofl^0,c
  4027   002D9A  0E00               	movlw	0
  4028   002D9C  140D               	andwf	(___xxtofl@arg+1)^0,w,c
  4029   002D9E  6E07               	movwf	(??___xxtofl+1)^0,c
  4030   002DA0  0E00               	movlw	0
  4031   002DA2  140E               	andwf	(___xxtofl@arg+2)^0,w,c
  4032   002DA4  6E08               	movwf	(??___xxtofl+2)^0,c
  4033   002DA6  0EFF               	movlw	255
  4034   002DA8  140F               	andwf	(___xxtofl@arg+3)^0,w,c
  4035   002DAA  6E09               	movwf	(??___xxtofl+3)^0,c
  4036   002DAC  5006               	movf	??___xxtofl^0,w,c
  4037   002DAE  1007               	iorwf	(??___xxtofl+1)^0,w,c
  4038   002DB0  1008               	iorwf	(??___xxtofl+2)^0,w,c
  4039   002DB2  1009               	iorwf	(??___xxtofl+3)^0,w,c
  4040   002DB4  A4D8               	btfss	status,2,c
  4041   002DB6  EFDF  F016         	goto	u3721
  4042   002DBA  EFE1  F016         	goto	u3720
  4043   002DBE                     u3721:
  4044   002DBE  EFBE  F016         	goto	l4429
  4045   002DC2                     u3720:
  4046   002DC2  EFE9  F016         	goto	l4437
  4047   002DC6                     l4435:
  4048   002DC6  060B               	decf	___xxtofl@exp^0,f,c
  4049   002DC8  90D8               	bcf	status,0,c
  4050   002DCA  360C               	rlcf	___xxtofl@arg^0,f,c
  4051   002DCC  360D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4052   002DCE  360E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4053   002DD0  360F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4054   002DD2                     l4437:
  4055   002DD2  BE0E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4056   002DD4  EFEE  F016         	goto	u3731
  4057   002DD8  EFF0  F016         	goto	u3730
  4058   002DDC                     u3731:
  4059   002DDC  EFF8  F016         	goto	l1484
  4060   002DE0                     u3730:
  4061   002DE0  0E02               	movlw	2
  4062   002DE2  600B               	cpfslt	___xxtofl@exp^0,c
  4063   002DE4  EFF6  F016         	goto	u3741
  4064   002DE8  EFF8  F016         	goto	u3740
  4065   002DEC                     u3741:
  4066   002DEC  EFE3  F016         	goto	l4435
  4067   002DF0                     u3740:
  4068   002DF0                     l1484:
  4069   002DF0  B00B               	btfsc	___xxtofl@exp^0,0,c
  4070   002DF2  EFFD  F016         	goto	u3751
  4071   002DF6  EFFF  F016         	goto	u3750
  4072   002DFA                     u3751:
  4073   002DFA  EF00  F017         	goto	l4443
  4074   002DFE                     u3750:
  4075   002DFE  9E0E               	bcf	(___xxtofl@arg+2)^0,7,c
  4076   002E00                     l4443:
  4077   002E00  90D8               	bcf	status,0,c
  4078   002E02  320B               	rrcf	___xxtofl@exp^0,f,c
  4079   002E04  C00B  F006         	movff	___xxtofl@exp,??___xxtofl
  4080   002E08  6A07               	clrf	(??___xxtofl+1)^0,c
  4081   002E0A  6A08               	clrf	(??___xxtofl+2)^0,c
  4082   002E0C  6A09               	clrf	(??___xxtofl+3)^0,c
  4083   002E0E  C006  F009         	movff	??___xxtofl,??___xxtofl+3
  4084   002E12  6A08               	clrf	(??___xxtofl+2)^0,c
  4085   002E14  6A07               	clrf	(??___xxtofl+1)^0,c
  4086   002E16  6A06               	clrf	??___xxtofl^0,c
  4087   002E18  5006               	movf	??___xxtofl^0,w,c
  4088   002E1A  120C               	iorwf	___xxtofl@arg^0,f,c
  4089   002E1C  5007               	movf	(??___xxtofl+1)^0,w,c
  4090   002E1E  120D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4091   002E20  5008               	movf	(??___xxtofl+2)^0,w,c
  4092   002E22  120E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4093   002E24  5009               	movf	(??___xxtofl+3)^0,w,c
  4094   002E26  120F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4095   002E28  500A               	movf	___xxtofl@sign^0,w,c
  4096   002E2A  B4D8               	btfsc	status,2,c
  4097   002E2C  EF1A  F017         	goto	u3761
  4098   002E30  EF1C  F017         	goto	u3760
  4099   002E34                     u3761:
  4100   002E34  EF24  F017         	goto	l4453
  4101   002E38                     u3760:
  4102   002E38  BE05               	btfsc	(___xxtofl@val+3)^0,7,c
  4103   002E3A  EF23  F017         	goto	u3770
  4104   002E3E  EF21  F017         	goto	u3771
  4105   002E42                     u3771:
  4106   002E42  EF24  F017         	goto	l4453
  4107   002E46                     u3770:
  4108   002E46  8E0F               	bsf	(___xxtofl@arg+3)^0,7,c
  4109   002E48                     l4453:
  4110   002E48  C00C  F002         	movff	___xxtofl@arg,?___xxtofl
  4111   002E4C  C00D  F003         	movff	___xxtofl@arg+1,?___xxtofl+1
  4112   002E50  C00E  F004         	movff	___xxtofl@arg+2,?___xxtofl+2
  4113   002E54  C00F  F005         	movff	___xxtofl@arg+3,?___xxtofl+3
  4114   002E58                     l1473:
  4115   002E58  0012               	return		;funcret
  4116   002E5A                     __end_of___xxtofl:
  4117                           	callstack 0
  4118                           
  4119 ;; *************** function ___fltol *****************
  4120 ;; Defined at:
  4121 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;  f1              4   65[COMRAM] unsigned char 
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;  exp1            1   74[COMRAM] unsigned char 
  4126 ;;  sign1           1   73[COMRAM] unsigned char 
  4127 ;; Return value:  Size  Location     Type
  4128 ;;                  4   65[COMRAM] long 
  4129 ;; Registers used:
  4130 ;;		wreg, status,2, status,0
  4131 ;; Tracked objects:
  4132 ;;		On entry : 0/0
  4133 ;;		On exit  : 0/0
  4134 ;;		Unchanged: 0/0
  4135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4136 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4137 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4138 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4139 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4140 ;;Total ram usage:       10 bytes
  4141 ;; Hardware stack levels used: 1
  4142 ;; Hardware stack levels required when called: 1
  4143 ;; This function calls:
  4144 ;;		Nothing
  4145 ;; This function is called by:
  4146 ;;		_convert_rgb2hue
  4147 ;;		_main
  4148 ;;		_fullSpeedAhead
  4149 ;;		_calibration_turning
  4150 ;; This function uses a non-reentrant model
  4151 ;;
  4152                           
  4153                           	psect	text9
  4154   00364C                     __ptext9:
  4155                           	callstack 0
  4156   00364C                     ___fltol:
  4157                           	callstack 26
  4158   00364C  3444               	rlcf	(___fltol@f1+2)^0,w,c
  4159   00364E  3445               	rlcf	(___fltol@f1+3)^0,w,c
  4160   003650  6E4B               	movwf	___fltol@exp1^0,c
  4161   003652  504B               	movf	___fltol@exp1^0,w,c
  4162   003654  A4D8               	btfss	status,2,c
  4163   003656  EF2F  F01B         	goto	u3611
  4164   00365A  EF31  F01B         	goto	u3610
  4165   00365E                     u3611:
  4166   00365E  EF3B  F01B         	goto	l4373
  4167   003662                     u3610:
  4168   003662                     l4369:
  4169   003662  0E00               	movlw	0
  4170   003664  6E42               	movwf	?___fltol^0,c
  4171   003666  0E00               	movlw	0
  4172   003668  6E43               	movwf	(?___fltol+1)^0,c
  4173   00366A  0E00               	movlw	0
  4174   00366C  6E44               	movwf	(?___fltol+2)^0,c
  4175   00366E  0E00               	movlw	0
  4176   003670  6E45               	movwf	(?___fltol+3)^0,c
  4177   003672  EFA8  F01B         	goto	l1112
  4178   003676                     l4373:
  4179   003676  C042  F046         	movff	___fltol@f1,??___fltol
  4180   00367A  C043  F047         	movff	___fltol@f1+1,??___fltol+1
  4181   00367E  C044  F048         	movff	___fltol@f1+2,??___fltol+2
  4182   003682  C045  F049         	movff	___fltol@f1+3,??___fltol+3
  4183   003686  0E20               	movlw	32
  4184   003688  EF4B  F01B         	goto	u3620
  4185   00368C                     u3625:
  4186   00368C  90D8               	bcf	status,0,c
  4187   00368E  3249               	rrcf	(??___fltol+3)^0,f,c
  4188   003690  3248               	rrcf	(??___fltol+2)^0,f,c
  4189   003692  3247               	rrcf	(??___fltol+1)^0,f,c
  4190   003694  3246               	rrcf	??___fltol^0,f,c
  4191   003696                     u3620:
  4192   003696  2EE8               	decfsz	wreg,f,c
  4193   003698  EF46  F01B         	goto	u3625
  4194   00369C  5046               	movf	??___fltol^0,w,c
  4195   00369E  6E4A               	movwf	___fltol@sign1^0,c
  4196   0036A0  8E44               	bsf	(___fltol@f1+2)^0,7,c
  4197   0036A2  0EFF               	movlw	255
  4198   0036A4  1642               	andwf	___fltol@f1^0,f,c
  4199   0036A6  0EFF               	movlw	255
  4200   0036A8  1643               	andwf	(___fltol@f1+1)^0,f,c
  4201   0036AA  0EFF               	movlw	255
  4202   0036AC  1644               	andwf	(___fltol@f1+2)^0,f,c
  4203   0036AE  0E00               	movlw	0
  4204   0036B0  1645               	andwf	(___fltol@f1+3)^0,f,c
  4205   0036B2  0E96               	movlw	150
  4206   0036B4  5E4B               	subwf	___fltol@exp1^0,f,c
  4207   0036B6  BE4B               	btfsc	___fltol@exp1^0,7,c
  4208   0036B8  EF62  F01B         	goto	u3630
  4209   0036BC  EF60  F01B         	goto	u3631
  4210   0036C0                     u3631:
  4211   0036C0  EF78  F01B         	goto	l4393
  4212   0036C4                     u3630:
  4213   0036C4  504B               	movf	___fltol@exp1^0,w,c
  4214   0036C6  0A80               	xorlw	128
  4215   0036C8  0F97               	addlw	151
  4216   0036CA  B0D8               	btfsc	status,0,c
  4217   0036CC  EF6A  F01B         	goto	u3641
  4218   0036D0  EF6C  F01B         	goto	u3640
  4219   0036D4                     u3641:
  4220   0036D4  EF6E  F01B         	goto	l4389
  4221   0036D8                     u3640:
  4222   0036D8  EF31  F01B         	goto	l4369
  4223   0036DC                     l4389:
  4224   0036DC  90D8               	bcf	status,0,c
  4225   0036DE  3245               	rrcf	(___fltol@f1+3)^0,f,c
  4226   0036E0  3244               	rrcf	(___fltol@f1+2)^0,f,c
  4227   0036E2  3243               	rrcf	(___fltol@f1+1)^0,f,c
  4228   0036E4  3242               	rrcf	___fltol@f1^0,f,c
  4229   0036E6  3E4B               	incfsz	___fltol@exp1^0,f,c
  4230   0036E8  EF6E  F01B         	goto	l4389
  4231   0036EC  EF90  F01B         	goto	l4403
  4232   0036F0                     l4393:
  4233   0036F0  0E1F               	movlw	31
  4234   0036F2  644B               	cpfsgt	___fltol@exp1^0,c
  4235   0036F4  EF7E  F01B         	goto	u3651
  4236   0036F8  EF80  F01B         	goto	u3650
  4237   0036FC                     u3651:
  4238   0036FC  EF88  F01B         	goto	l4401
  4239   003700                     u3650:
  4240   003700  EF31  F01B         	goto	l4369
  4241   003704                     l4399:
  4242   003704  90D8               	bcf	status,0,c
  4243   003706  3642               	rlcf	___fltol@f1^0,f,c
  4244   003708  3643               	rlcf	(___fltol@f1+1)^0,f,c
  4245   00370A  3644               	rlcf	(___fltol@f1+2)^0,f,c
  4246   00370C  3645               	rlcf	(___fltol@f1+3)^0,f,c
  4247   00370E  064B               	decf	___fltol@exp1^0,f,c
  4248   003710                     l4401:
  4249   003710  504B               	movf	___fltol@exp1^0,w,c
  4250   003712  A4D8               	btfss	status,2,c
  4251   003714  EF8E  F01B         	goto	u3661
  4252   003718  EF90  F01B         	goto	u3660
  4253   00371C                     u3661:
  4254   00371C  EF82  F01B         	goto	l4399
  4255   003720                     u3660:
  4256   003720                     l4403:
  4257   003720  504A               	movf	___fltol@sign1^0,w,c
  4258   003722  B4D8               	btfsc	status,2,c
  4259   003724  EF96  F01B         	goto	u3671
  4260   003728  EF98  F01B         	goto	u3670
  4261   00372C                     u3671:
  4262   00372C  EFA0  F01B         	goto	l4407
  4263   003730                     u3670:
  4264   003730  1E45               	comf	(___fltol@f1+3)^0,f,c
  4265   003732  1E44               	comf	(___fltol@f1+2)^0,f,c
  4266   003734  1E43               	comf	(___fltol@f1+1)^0,f,c
  4267   003736  6C42               	negf	___fltol@f1^0,c
  4268   003738  0E00               	movlw	0
  4269   00373A  2243               	addwfc	(___fltol@f1+1)^0,f,c
  4270   00373C  2244               	addwfc	(___fltol@f1+2)^0,f,c
  4271   00373E  2245               	addwfc	(___fltol@f1+3)^0,f,c
  4272   003740                     l4407:
  4273   003740  C042  F042         	movff	___fltol@f1,?___fltol
  4274   003744  C043  F043         	movff	___fltol@f1+1,?___fltol+1
  4275   003748  C044  F044         	movff	___fltol@f1+2,?___fltol+2
  4276   00374C  C045  F045         	movff	___fltol@f1+3,?___fltol+3
  4277   003750                     l1112:
  4278   003750  0012               	return		;funcret
  4279   003752                     __end_of___fltol:
  4280                           	callstack 0
  4281                           
  4282 ;; *************** function ___flsub *****************
  4283 ;; Defined at:
  4284 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  b               4   17[COMRAM] long 
  4287 ;;  a               4   21[COMRAM] long 
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;		None
  4290 ;; Return value:  Size  Location     Type
  4291 ;;                  4   17[COMRAM] long 
  4292 ;; Registers used:
  4293 ;;		wreg, status,2, status,0, cstack
  4294 ;; Tracked objects:
  4295 ;;		On entry : 0/0
  4296 ;;		On exit  : 0/0
  4297 ;;		Unchanged: 0/0
  4298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4299 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4302 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4303 ;;Total ram usage:        8 bytes
  4304 ;; Hardware stack levels used: 1
  4305 ;; Hardware stack levels required when called: 2
  4306 ;; This function calls:
  4307 ;;		___fladd
  4308 ;; This function is called by:
  4309 ;;		_convert_rgb2hue
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313                           	psect	text10
  4314   0044A8                     __ptext10:
  4315                           	callstack 0
  4316   0044A8                     ___flsub:
  4317                           	callstack 26
  4318   0044A8  0E00               	movlw	0
  4319   0044AA  1A16               	xorwf	___flsub@a^0,f,c
  4320   0044AC  0E00               	movlw	0
  4321   0044AE  1A17               	xorwf	(___flsub@a+1)^0,f,c
  4322   0044B0  0E00               	movlw	0
  4323   0044B2  1A18               	xorwf	(___flsub@a+2)^0,f,c
  4324   0044B4  0E80               	movlw	128
  4325   0044B6  1A19               	xorwf	(___flsub@a+3)^0,f,c
  4326   0044B8  C012  F002         	movff	___flsub@b,___fladd@b
  4327   0044BC  C013  F003         	movff	___flsub@b+1,___fladd@b+1
  4328   0044C0  C014  F004         	movff	___flsub@b+2,___fladd@b+2
  4329   0044C4  C015  F005         	movff	___flsub@b+3,___fladd@b+3
  4330   0044C8  C016  F006         	movff	___flsub@a,___fladd@a
  4331   0044CC  C017  F007         	movff	___flsub@a+1,___fladd@a+1
  4332   0044D0  C018  F008         	movff	___flsub@a+2,___fladd@a+2
  4333   0044D4  C019  F009         	movff	___flsub@a+3,___fladd@a+3
  4334   0044D8  EC90  F00D         	call	___fladd	;wreg free
  4335   0044DC  C002  F012         	movff	?___fladd,?___flsub
  4336   0044E0  C003  F013         	movff	?___fladd+1,?___flsub+1
  4337   0044E4  C004  F014         	movff	?___fladd+2,?___flsub+2
  4338   0044E8  C005  F015         	movff	?___fladd+3,?___flsub+3
  4339   0044EC  0012               	return		;funcret
  4340   0044EE                     __end_of___flsub:
  4341                           	callstack 0
  4342                           
  4343 ;; *************** function ___fladd *****************
  4344 ;; Defined at:
  4345 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4346 ;; Parameters:    Size  Location     Type
  4347 ;;  b               4    1[COMRAM] long 
  4348 ;;  a               4    5[COMRAM] long 
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;  grs             1   16[COMRAM] unsigned char 
  4351 ;;  bexp            1   15[COMRAM] unsigned char 
  4352 ;;  aexp            1   14[COMRAM] unsigned char 
  4353 ;;  signs           1   13[COMRAM] unsigned char 
  4354 ;; Return value:  Size  Location     Type
  4355 ;;                  4    1[COMRAM] unsigned char 
  4356 ;; Registers used:
  4357 ;;		wreg, status,2, status,0
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4363 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4364 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4365 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4366 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4367 ;;Total ram usage:       16 bytes
  4368 ;; Hardware stack levels used: 1
  4369 ;; Hardware stack levels required when called: 1
  4370 ;; This function calls:
  4371 ;;		Nothing
  4372 ;; This function is called by:
  4373 ;;		_convert_rgb2hue
  4374 ;;		___flsub
  4375 ;;		_calibration_turning
  4376 ;; This function uses a non-reentrant model
  4377 ;;
  4378                           
  4379                           	psect	text11
  4380   001B20                     __ptext11:
  4381                           	callstack 0
  4382   001B20                     ___fladd:
  4383                           	callstack 26
  4384   001B20  5005               	movf	(___fladd@b+3)^0,w,c
  4385   001B22  0B80               	andlw	128
  4386   001B24  6E0E               	movwf	___fladd@signs^0,c
  4387   001B26  5005               	movf	(___fladd@b+3)^0,w,c
  4388   001B28  2405               	addwf	(___fladd@b+3)^0,w,c
  4389   001B2A  6E10               	movwf	___fladd@bexp^0,c
  4390   001B2C  AE04               	btfss	(___fladd@b+2)^0,7,c
  4391   001B2E  EF9B  F00D         	goto	u3031
  4392   001B32  EF9D  F00D         	goto	u3030
  4393   001B36                     u3031:
  4394   001B36  EF9E  F00D         	goto	l4041
  4395   001B3A                     u3030:
  4396   001B3A  8010               	bsf	___fladd@bexp^0,0,c
  4397   001B3C                     l4041:
  4398   001B3C  5010               	movf	___fladd@bexp^0,w,c
  4399   001B3E  B4D8               	btfsc	status,2,c
  4400   001B40  EFA4  F00D         	goto	u3041
  4401   001B44  EFA6  F00D         	goto	u3040
  4402   001B48                     u3041:
  4403   001B48  EFBB  F00D         	goto	l4051
  4404   001B4C                     u3040:
  4405   001B4C  2810               	incf	___fladd@bexp^0,w,c
  4406   001B4E  A4D8               	btfss	status,2,c
  4407   001B50  EFAC  F00D         	goto	u3051
  4408   001B54  EFAE  F00D         	goto	u3050
  4409   001B58                     u3051:
  4410   001B58  EFB6  F00D         	goto	l4047
  4411   001B5C                     u3050:
  4412   001B5C  0E00               	movlw	0
  4413   001B5E  6E02               	movwf	___fladd@b^0,c
  4414   001B60  0E00               	movlw	0
  4415   001B62  6E03               	movwf	(___fladd@b+1)^0,c
  4416   001B64  0E00               	movlw	0
  4417   001B66  6E04               	movwf	(___fladd@b+2)^0,c
  4418   001B68  0E00               	movlw	0
  4419   001B6A  6E05               	movwf	(___fladd@b+3)^0,c
  4420   001B6C                     l4047:
  4421   001B6C  8E04               	bsf	(___fladd@b+2)^0,7,c
  4422   001B6E  0E00               	movlw	0
  4423   001B70  6E05               	movwf	(___fladd@b+3)^0,c
  4424   001B72  EFC3  F00D         	goto	l4053
  4425   001B76                     l4051:
  4426   001B76  0E00               	movlw	0
  4427   001B78  6E02               	movwf	___fladd@b^0,c
  4428   001B7A  0E00               	movlw	0
  4429   001B7C  6E03               	movwf	(___fladd@b+1)^0,c
  4430   001B7E  0E00               	movlw	0
  4431   001B80  6E04               	movwf	(___fladd@b+2)^0,c
  4432   001B82  0E00               	movlw	0
  4433   001B84  6E05               	movwf	(___fladd@b+3)^0,c
  4434   001B86                     l4053:
  4435   001B86  5009               	movf	(___fladd@a+3)^0,w,c
  4436   001B88  0B80               	andlw	128
  4437   001B8A  6E0F               	movwf	___fladd@aexp^0,c
  4438   001B8C  500E               	movf	___fladd@signs^0,w,c
  4439   001B8E  180F               	xorwf	___fladd@aexp^0,w,c
  4440   001B90  B4D8               	btfsc	status,2,c
  4441   001B92  EFCD  F00D         	goto	u3061
  4442   001B96  EFCF  F00D         	goto	u3060
  4443   001B9A                     u3061:
  4444   001B9A  EFD0  F00D         	goto	l4059
  4445   001B9E                     u3060:
  4446   001B9E  8C0E               	bsf	___fladd@signs^0,6,c
  4447   001BA0                     l4059:
  4448   001BA0  5009               	movf	(___fladd@a+3)^0,w,c
  4449   001BA2  2409               	addwf	(___fladd@a+3)^0,w,c
  4450   001BA4  6E0F               	movwf	___fladd@aexp^0,c
  4451   001BA6  AE08               	btfss	(___fladd@a+2)^0,7,c
  4452   001BA8  EFD8  F00D         	goto	u3071
  4453   001BAC  EFDA  F00D         	goto	u3070
  4454   001BB0                     u3071:
  4455   001BB0  EFDB  F00D         	goto	l4065
  4456   001BB4                     u3070:
  4457   001BB4  800F               	bsf	___fladd@aexp^0,0,c
  4458   001BB6                     l4065:
  4459   001BB6  500F               	movf	___fladd@aexp^0,w,c
  4460   001BB8  B4D8               	btfsc	status,2,c
  4461   001BBA  EFE1  F00D         	goto	u3081
  4462   001BBE  EFE3  F00D         	goto	u3080
  4463   001BC2                     u3081:
  4464   001BC2  EFF8  F00D         	goto	l4075
  4465   001BC6                     u3080:
  4466   001BC6  280F               	incf	___fladd@aexp^0,w,c
  4467   001BC8  A4D8               	btfss	status,2,c
  4468   001BCA  EFE9  F00D         	goto	u3091
  4469   001BCE  EFEB  F00D         	goto	u3090
  4470   001BD2                     u3091:
  4471   001BD2  EFF3  F00D         	goto	l4071
  4472   001BD6                     u3090:
  4473   001BD6  0E00               	movlw	0
  4474   001BD8  6E06               	movwf	___fladd@a^0,c
  4475   001BDA  0E00               	movlw	0
  4476   001BDC  6E07               	movwf	(___fladd@a+1)^0,c
  4477   001BDE  0E00               	movlw	0
  4478   001BE0  6E08               	movwf	(___fladd@a+2)^0,c
  4479   001BE2  0E00               	movlw	0
  4480   001BE4  6E09               	movwf	(___fladd@a+3)^0,c
  4481   001BE6                     l4071:
  4482   001BE6  8E08               	bsf	(___fladd@a+2)^0,7,c
  4483   001BE8  0E00               	movlw	0
  4484   001BEA  6E09               	movwf	(___fladd@a+3)^0,c
  4485   001BEC  EF00  F00E         	goto	l4077
  4486   001BF0                     l4075:
  4487   001BF0  0E00               	movlw	0
  4488   001BF2  6E06               	movwf	___fladd@a^0,c
  4489   001BF4  0E00               	movlw	0
  4490   001BF6  6E07               	movwf	(___fladd@a+1)^0,c
  4491   001BF8  0E00               	movlw	0
  4492   001BFA  6E08               	movwf	(___fladd@a+2)^0,c
  4493   001BFC  0E00               	movlw	0
  4494   001BFE  6E09               	movwf	(___fladd@a+3)^0,c
  4495   001C00                     l4077:
  4496   001C00  5010               	movf	___fladd@bexp^0,w,c
  4497   001C02  5C0F               	subwf	___fladd@aexp^0,w,c
  4498   001C04  B0D8               	btfsc	status,0,c
  4499   001C06  EF07  F00E         	goto	u3101
  4500   001C0A  EF09  F00E         	goto	u3100
  4501   001C0E                     u3101:
  4502   001C0E  EF30  F00E         	goto	l4113
  4503   001C12                     u3100:
  4504   001C12  AC0E               	btfss	___fladd@signs^0,6,c
  4505   001C14  EF0E  F00E         	goto	u3111
  4506   001C18  EF10  F00E         	goto	u3110
  4507   001C1C                     u3111:
  4508   001C1C  EF12  F00E         	goto	l4083
  4509   001C20                     u3110:
  4510   001C20  0E80               	movlw	128
  4511   001C22  1A0E               	xorwf	___fladd@signs^0,f,c
  4512   001C24                     l4083:
  4513   001C24  C010  F011         	movff	___fladd@bexp,___fladd@grs
  4514   001C28  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4515   001C2C  C011  F00F         	movff	___fladd@grs,___fladd@aexp
  4516   001C30  C002  F011         	movff	___fladd@b,___fladd@grs
  4517   001C34  C006  F002         	movff	___fladd@a,___fladd@b
  4518   001C38  C011  F006         	movff	___fladd@grs,___fladd@a
  4519   001C3C  C003  F011         	movff	___fladd@b+1,___fladd@grs
  4520   001C40  C007  F003         	movff	___fladd@a+1,___fladd@b+1
  4521   001C44  C011  F007         	movff	___fladd@grs,___fladd@a+1
  4522   001C48  C004  F011         	movff	___fladd@b+2,___fladd@grs
  4523   001C4C  C008  F004         	movff	___fladd@a+2,___fladd@b+2
  4524   001C50  C011  F008         	movff	___fladd@grs,___fladd@a+2
  4525   001C54  C005  F011         	movff	___fladd@b+3,___fladd@grs
  4526   001C58  C009  F005         	movff	___fladd@a+3,___fladd@b+3
  4527   001C5C  C011  F009         	movff	___fladd@grs,___fladd@a+3
  4528   001C60                     l4113:
  4529   001C60  0E00               	movlw	0
  4530   001C62  6E11               	movwf	___fladd@grs^0,c
  4531   001C64  5010               	movf	___fladd@bexp^0,w,c
  4532   001C66  C00F  F00A         	movff	___fladd@aexp,??___fladd
  4533   001C6A  6A0B               	clrf	(??___fladd+1)^0,c
  4534   001C6C  5E0A               	subwf	??___fladd^0,f,c
  4535   001C6E  0E00               	movlw	0
  4536   001C70  5A0B               	subwfb	(??___fladd+1)^0,f,c
  4537   001C72  BE0B               	btfsc	(??___fladd+1)^0,7,c
  4538   001C74  EF45  F00E         	goto	u3121
  4539   001C78  500B               	movf	(??___fladd+1)^0,w,c
  4540   001C7A  E109               	bnz	u3120
  4541   001C7C  0E1A               	movlw	26
  4542   001C7E  5C0A               	subwf	??___fladd^0,w,c
  4543   001C80  A0D8               	btfss	status,0,c
  4544   001C82  EF45  F00E         	goto	u3121
  4545   001C86  EF47  F00E         	goto	u3120
  4546   001C8A                     u3121:
  4547   001C8A  EF7E  F00E         	goto	l1344
  4548   001C8E                     u3120:
  4549   001C8E  5002               	movf	___fladd@b^0,w,c
  4550   001C90  1003               	iorwf	(___fladd@b+1)^0,w,c
  4551   001C92  1004               	iorwf	(___fladd@b+2)^0,w,c
  4552   001C94  1005               	iorwf	(___fladd@b+3)^0,w,c
  4553   001C96  A4D8               	btfss	status,2,c
  4554   001C98  EF50  F00E         	goto	u3131
  4555   001C9C  EF53  F00E         	goto	u3130
  4556   001CA0                     u3131:
  4557   001CA0  0E01               	movlw	1
  4558   001CA2  EF54  F00E         	goto	u3140
  4559   001CA6                     u3130:
  4560   001CA6  0E00               	movlw	0
  4561   001CA8                     u3140:
  4562   001CA8  6E11               	movwf	___fladd@grs^0,c
  4563   001CAA  0E00               	movlw	0
  4564   001CAC  6E02               	movwf	___fladd@b^0,c
  4565   001CAE  0E00               	movlw	0
  4566   001CB0  6E03               	movwf	(___fladd@b+1)^0,c
  4567   001CB2  0E00               	movlw	0
  4568   001CB4  6E04               	movwf	(___fladd@b+2)^0,c
  4569   001CB6  0E00               	movlw	0
  4570   001CB8  6E05               	movwf	(___fladd@b+3)^0,c
  4571   001CBA  C00F  F010         	movff	___fladd@aexp,___fladd@bexp
  4572   001CBE  EF87  F00E         	goto	l1343
  4573   001CC2                     l1345:
  4574   001CC2  A011               	btfss	___fladd@grs^0,0,c
  4575   001CC4  EF66  F00E         	goto	u3151
  4576   001CC8  EF68  F00E         	goto	u3150
  4577   001CCC                     u3151:
  4578   001CCC  EF6E  F00E         	goto	l4125
  4579   001CD0                     u3150:
  4580   001CD0  90D8               	bcf	status,0,c
  4581   001CD2  3011               	rrcf	___fladd@grs^0,w,c
  4582   001CD4  0901               	iorlw	1
  4583   001CD6  6E11               	movwf	___fladd@grs^0,c
  4584   001CD8  EF70  F00E         	goto	l4127
  4585   001CDC                     l4125:
  4586   001CDC  90D8               	bcf	status,0,c
  4587   001CDE  3211               	rrcf	___fladd@grs^0,f,c
  4588   001CE0                     l4127:
  4589   001CE0  A002               	btfss	___fladd@b^0,0,c
  4590   001CE2  EF75  F00E         	goto	u3161
  4591   001CE6  EF77  F00E         	goto	u3160
  4592   001CEA                     u3161:
  4593   001CEA  EF78  F00E         	goto	l4131
  4594   001CEE                     u3160:
  4595   001CEE  8E11               	bsf	___fladd@grs^0,7,c
  4596   001CF0                     l4131:
  4597   001CF0  3405               	rlcf	(___fladd@b+3)^0,w,c
  4598   001CF2  3205               	rrcf	(___fladd@b+3)^0,f,c
  4599   001CF4  3204               	rrcf	(___fladd@b+2)^0,f,c
  4600   001CF6  3203               	rrcf	(___fladd@b+1)^0,f,c
  4601   001CF8  3202               	rrcf	___fladd@b^0,f,c
  4602   001CFA  2A10               	incf	___fladd@bexp^0,f,c
  4603   001CFC                     l1344:
  4604   001CFC  500F               	movf	___fladd@aexp^0,w,c
  4605   001CFE  5C10               	subwf	___fladd@bexp^0,w,c
  4606   001D00  A0D8               	btfss	status,0,c
  4607   001D02  EF85  F00E         	goto	u3171
  4608   001D06  EF87  F00E         	goto	u3170
  4609   001D0A                     u3171:
  4610   001D0A  EF61  F00E         	goto	l1345
  4611   001D0E                     u3170:
  4612   001D0E                     l1343:
  4613   001D0E  BC0E               	btfsc	___fladd@signs^0,6,c
  4614   001D10  EF8C  F00E         	goto	u3181
  4615   001D14  EF8E  F00E         	goto	u3180
  4616   001D18                     u3181:
  4617   001D18  EFCE  F00E         	goto	l4159
  4618   001D1C                     u3180:
  4619   001D1C  5010               	movf	___fladd@bexp^0,w,c
  4620   001D1E  A4D8               	btfss	status,2,c
  4621   001D20  EF94  F00E         	goto	u3191
  4622   001D24  EF96  F00E         	goto	u3190
  4623   001D28                     u3191:
  4624   001D28  EFA0  F00E         	goto	l4141
  4625   001D2C                     u3190:
  4626   001D2C  0E00               	movlw	0
  4627   001D2E  6E02               	movwf	?___fladd^0,c
  4628   001D30  0E00               	movlw	0
  4629   001D32  6E03               	movwf	(?___fladd+1)^0,c
  4630   001D34  0E00               	movlw	0
  4631   001D36  6E04               	movwf	(?___fladd+2)^0,c
  4632   001D38  0E00               	movlw	0
  4633   001D3A  6E05               	movwf	(?___fladd+3)^0,c
  4634   001D3C  EFEF  F00F         	goto	l1352
  4635   001D40                     l4141:
  4636   001D40  5006               	movf	___fladd@a^0,w,c
  4637   001D42  2602               	addwf	___fladd@b^0,f,c
  4638   001D44  5007               	movf	(___fladd@a+1)^0,w,c
  4639   001D46  2203               	addwfc	(___fladd@b+1)^0,f,c
  4640   001D48  5008               	movf	(___fladd@a+2)^0,w,c
  4641   001D4A  2204               	addwfc	(___fladd@b+2)^0,f,c
  4642   001D4C  5009               	movf	(___fladd@a+3)^0,w,c
  4643   001D4E  2205               	addwfc	(___fladd@b+3)^0,f,c
  4644   001D50  A005               	btfss	(___fladd@b+3)^0,0,c
  4645   001D52  EFAD  F00E         	goto	u3201
  4646   001D56  EFAF  F00E         	goto	u3200
  4647   001D5A                     u3201:
  4648   001D5A  EF5B  F00F         	goto	l4195
  4649   001D5E                     u3200:
  4650   001D5E  A011               	btfss	___fladd@grs^0,0,c
  4651   001D60  EFB4  F00E         	goto	u3211
  4652   001D64  EFB6  F00E         	goto	u3210
  4653   001D68                     u3211:
  4654   001D68  EFBC  F00E         	goto	l4149
  4655   001D6C                     u3210:
  4656   001D6C  90D8               	bcf	status,0,c
  4657   001D6E  3011               	rrcf	___fladd@grs^0,w,c
  4658   001D70  0901               	iorlw	1
  4659   001D72  6E11               	movwf	___fladd@grs^0,c
  4660   001D74  EFBE  F00E         	goto	l4151
  4661   001D78                     l4149:
  4662   001D78  90D8               	bcf	status,0,c
  4663   001D7A  3211               	rrcf	___fladd@grs^0,f,c
  4664   001D7C                     l4151:
  4665   001D7C  A002               	btfss	___fladd@b^0,0,c
  4666   001D7E  EFC3  F00E         	goto	u3221
  4667   001D82  EFC5  F00E         	goto	u3220
  4668   001D86                     u3221:
  4669   001D86  EFC6  F00E         	goto	l4155
  4670   001D8A                     u3220:
  4671   001D8A  8E11               	bsf	___fladd@grs^0,7,c
  4672   001D8C                     l4155:
  4673   001D8C  3405               	rlcf	(___fladd@b+3)^0,w,c
  4674   001D8E  3205               	rrcf	(___fladd@b+3)^0,f,c
  4675   001D90  3204               	rrcf	(___fladd@b+2)^0,f,c
  4676   001D92  3203               	rrcf	(___fladd@b+1)^0,f,c
  4677   001D94  3202               	rrcf	___fladd@b^0,f,c
  4678   001D96  2A10               	incf	___fladd@bexp^0,f,c
  4679   001D98  EF5B  F00F         	goto	l4195
  4680   001D9C                     l4159:
  4681   001D9C  5006               	movf	___fladd@a^0,w,c
  4682   001D9E  5C02               	subwf	___fladd@b^0,w,c
  4683   001DA0  5007               	movf	(___fladd@a+1)^0,w,c
  4684   001DA2  5803               	subwfb	(___fladd@b+1)^0,w,c
  4685   001DA4  5008               	movf	(___fladd@a+2)^0,w,c
  4686   001DA6  5804               	subwfb	(___fladd@b+2)^0,w,c
  4687   001DA8  5005               	movf	(___fladd@b+3)^0,w,c
  4688   001DAA  0A80               	xorlw	128
  4689   001DAC  6E0A               	movwf	??___fladd^0,c
  4690   001DAE  5009               	movf	(___fladd@a+3)^0,w,c
  4691   001DB0  0A80               	xorlw	128
  4692   001DB2  580A               	subwfb	??___fladd^0,w,c
  4693   001DB4  B0D8               	btfsc	status,0,c
  4694   001DB6  EFDF  F00E         	goto	u3231
  4695   001DBA  EFE1  F00E         	goto	u3230
  4696   001DBE                     u3231:
  4697   001DBE  EF0C  F00F         	goto	l4169
  4698   001DC2                     u3230:
  4699   001DC2  5002               	movf	___fladd@b^0,w,c
  4700   001DC4  5C06               	subwf	___fladd@a^0,w,c
  4701   001DC6  6E0A               	movwf	??___fladd^0,c
  4702   001DC8  5003               	movf	(___fladd@b+1)^0,w,c
  4703   001DCA  5807               	subwfb	(___fladd@a+1)^0,w,c
  4704   001DCC  6E0B               	movwf	(??___fladd+1)^0,c
  4705   001DCE  5004               	movf	(___fladd@b+2)^0,w,c
  4706   001DD0  5808               	subwfb	(___fladd@a+2)^0,w,c
  4707   001DD2  6E0C               	movwf	(??___fladd+2)^0,c
  4708   001DD4  5005               	movf	(___fladd@b+3)^0,w,c
  4709   001DD6  5809               	subwfb	(___fladd@a+3)^0,w,c
  4710   001DD8  6E0D               	movwf	(??___fladd+3)^0,c
  4711   001DDA  0EFF               	movlw	255
  4712   001DDC  240A               	addwf	??___fladd^0,w,c
  4713   001DDE  6E02               	movwf	___fladd@b^0,c
  4714   001DE0  0EFF               	movlw	255
  4715   001DE2  200B               	addwfc	(??___fladd+1)^0,w,c
  4716   001DE4  6E03               	movwf	(___fladd@b+1)^0,c
  4717   001DE6  0EFF               	movlw	255
  4718   001DE8  200C               	addwfc	(??___fladd+2)^0,w,c
  4719   001DEA  6E04               	movwf	(___fladd@b+2)^0,c
  4720   001DEC  0EFF               	movlw	255
  4721   001DEE  200D               	addwfc	(??___fladd+3)^0,w,c
  4722   001DF0  6E05               	movwf	(___fladd@b+3)^0,c
  4723   001DF2  0E80               	movlw	128
  4724   001DF4  1A0E               	xorwf	___fladd@signs^0,f,c
  4725   001DF6  6C11               	negf	___fladd@grs^0,c
  4726   001DF8  5011               	movf	___fladd@grs^0,w,c
  4727   001DFA  A4D8               	btfss	status,2,c
  4728   001DFC  EF02  F00F         	goto	u3241
  4729   001E00  EF04  F00F         	goto	u3240
  4730   001E04                     u3241:
  4731   001E04  EF14  F00F         	goto	l1360
  4732   001E08                     u3240:
  4733   001E08  0E01               	movlw	1
  4734   001E0A  2602               	addwf	___fladd@b^0,f,c
  4735   001E0C  0E00               	movlw	0
  4736   001E0E  2203               	addwfc	(___fladd@b+1)^0,f,c
  4737   001E10  2204               	addwfc	(___fladd@b+2)^0,f,c
  4738   001E12  2205               	addwfc	(___fladd@b+3)^0,f,c
  4739   001E14  EF14  F00F         	goto	l1360
  4740   001E18                     l4169:
  4741   001E18  5006               	movf	___fladd@a^0,w,c
  4742   001E1A  5E02               	subwf	___fladd@b^0,f,c
  4743   001E1C  5007               	movf	(___fladd@a+1)^0,w,c
  4744   001E1E  5A03               	subwfb	(___fladd@b+1)^0,f,c
  4745   001E20  5008               	movf	(___fladd@a+2)^0,w,c
  4746   001E22  5A04               	subwfb	(___fladd@b+2)^0,f,c
  4747   001E24  5009               	movf	(___fladd@a+3)^0,w,c
  4748   001E26  5A05               	subwfb	(___fladd@b+3)^0,f,c
  4749   001E28                     l1360:
  4750   001E28  5002               	movf	___fladd@b^0,w,c
  4751   001E2A  1003               	iorwf	(___fladd@b+1)^0,w,c
  4752   001E2C  1004               	iorwf	(___fladd@b+2)^0,w,c
  4753   001E2E  1005               	iorwf	(___fladd@b+3)^0,w,c
  4754   001E30  A4D8               	btfss	status,2,c
  4755   001E32  EF1D  F00F         	goto	u3251
  4756   001E36  EF1F  F00F         	goto	u3250
  4757   001E3A                     u3251:
  4758   001E3A  EF54  F00F         	goto	l4193
  4759   001E3E                     u3250:
  4760   001E3E  5011               	movf	___fladd@grs^0,w,c
  4761   001E40  A4D8               	btfss	status,2,c
  4762   001E42  EF25  F00F         	goto	u3261
  4763   001E46  EF27  F00F         	goto	u3260
  4764   001E4A                     u3261:
  4765   001E4A  EF54  F00F         	goto	l4193
  4766   001E4E                     u3260:
  4767   001E4E  0E00               	movlw	0
  4768   001E50  6E02               	movwf	?___fladd^0,c
  4769   001E52  0E00               	movlw	0
  4770   001E54  6E03               	movwf	(?___fladd+1)^0,c
  4771   001E56  0E00               	movlw	0
  4772   001E58  6E04               	movwf	(?___fladd+2)^0,c
  4773   001E5A  0E00               	movlw	0
  4774   001E5C  6E05               	movwf	(?___fladd+3)^0,c
  4775   001E5E  EFEF  F00F         	goto	l1352
  4776   001E62                     l4177:
  4777   001E62  90D8               	bcf	status,0,c
  4778   001E64  3602               	rlcf	___fladd@b^0,f,c
  4779   001E66  3603               	rlcf	(___fladd@b+1)^0,f,c
  4780   001E68  3604               	rlcf	(___fladd@b+2)^0,f,c
  4781   001E6A  3605               	rlcf	(___fladd@b+3)^0,f,c
  4782   001E6C  AE11               	btfss	___fladd@grs^0,7,c
  4783   001E6E  EF3B  F00F         	goto	u3271
  4784   001E72  EF3D  F00F         	goto	u3270
  4785   001E76                     u3271:
  4786   001E76  EF3E  F00F         	goto	l4183
  4787   001E7A                     u3270:
  4788   001E7A  8002               	bsf	___fladd@b^0,0,c
  4789   001E7C                     l4183:
  4790   001E7C  A011               	btfss	___fladd@grs^0,0,c
  4791   001E7E  EF43  F00F         	goto	u3281
  4792   001E82  EF45  F00F         	goto	u3280
  4793   001E86                     u3281:
  4794   001E86  EF49  F00F         	goto	l4187
  4795   001E8A                     u3280:
  4796   001E8A  80D8               	bsf	status,0,c
  4797   001E8C  3611               	rlcf	___fladd@grs^0,f,c
  4798   001E8E  EF4B  F00F         	goto	l4189
  4799   001E92                     l4187:
  4800   001E92  90D8               	bcf	status,0,c
  4801   001E94  3611               	rlcf	___fladd@grs^0,f,c
  4802   001E96                     l4189:
  4803   001E96  5010               	movf	___fladd@bexp^0,w,c
  4804   001E98  B4D8               	btfsc	status,2,c
  4805   001E9A  EF51  F00F         	goto	u3291
  4806   001E9E  EF53  F00F         	goto	u3290
  4807   001EA2                     u3291:
  4808   001EA2  EF54  F00F         	goto	l4193
  4809   001EA6                     u3290:
  4810   001EA6  0610               	decf	___fladd@bexp^0,f,c
  4811   001EA8                     l4193:
  4812   001EA8  AE04               	btfss	(___fladd@b+2)^0,7,c
  4813   001EAA  EF59  F00F         	goto	u3301
  4814   001EAE  EF5B  F00F         	goto	u3300
  4815   001EB2                     u3301:
  4816   001EB2  EF31  F00F         	goto	l4177
  4817   001EB6                     u3300:
  4818   001EB6                     l4195:
  4819   001EB6  0E00               	movlw	0
  4820   001EB8  6E0F               	movwf	___fladd@aexp^0,c
  4821   001EBA  AE11               	btfss	___fladd@grs^0,7,c
  4822   001EBC  EF62  F00F         	goto	u3311
  4823   001EC0  EF64  F00F         	goto	u3310
  4824   001EC4                     u3311:
  4825   001EC4  EF7C  F00F         	goto	l1369
  4826   001EC8                     u3310:
  4827   001EC8  C011  F00A         	movff	___fladd@grs,??___fladd
  4828   001ECC  0E7F               	movlw	127
  4829   001ECE  160A               	andwf	??___fladd^0,f,c
  4830   001ED0  B4D8               	btfsc	status,2,c
  4831   001ED2  EF6D  F00F         	goto	u3321
  4832   001ED6  EF6F  F00F         	goto	u3320
  4833   001EDA                     u3321:
  4834   001EDA  EF73  F00F         	goto	l1370
  4835   001EDE                     u3320:
  4836   001EDE                     l4201:
  4837   001EDE  0E01               	movlw	1
  4838   001EE0  6E0F               	movwf	___fladd@aexp^0,c
  4839   001EE2  EF7C  F00F         	goto	l1369
  4840   001EE6                     l1370:
  4841   001EE6  A002               	btfss	___fladd@b^0,0,c
  4842   001EE8  EF78  F00F         	goto	u3331
  4843   001EEC  EF7A  F00F         	goto	u3330
  4844   001EF0                     u3331:
  4845   001EF0  EF7C  F00F         	goto	l1369
  4846   001EF4                     u3330:
  4847   001EF4  EF6F  F00F         	goto	l4201
  4848   001EF8                     l1369:
  4849   001EF8  500F               	movf	___fladd@aexp^0,w,c
  4850   001EFA  B4D8               	btfsc	status,2,c
  4851   001EFC  EF82  F00F         	goto	u3341
  4852   001F00  EF84  F00F         	goto	u3340
  4853   001F04                     u3341:
  4854   001F04  EFAF  F00F         	goto	l4213
  4855   001F08                     u3340:
  4856   001F08  0E01               	movlw	1
  4857   001F0A  2602               	addwf	___fladd@b^0,f,c
  4858   001F0C  0E00               	movlw	0
  4859   001F0E  2203               	addwfc	(___fladd@b+1)^0,f,c
  4860   001F10  2204               	addwfc	(___fladd@b+2)^0,f,c
  4861   001F12  2205               	addwfc	(___fladd@b+3)^0,f,c
  4862   001F14  A005               	btfss	(___fladd@b+3)^0,0,c
  4863   001F16  EF8F  F00F         	goto	u3351
  4864   001F1A  EF91  F00F         	goto	u3350
  4865   001F1E                     u3351:
  4866   001F1E  EFAF  F00F         	goto	l4213
  4867   001F22                     u3350:
  4868   001F22  C002  F00A         	movff	___fladd@b,??___fladd
  4869   001F26  C003  F00B         	movff	___fladd@b+1,??___fladd+1
  4870   001F2A  C004  F00C         	movff	___fladd@b+2,??___fladd+2
  4871   001F2E  C005  F00D         	movff	___fladd@b+3,??___fladd+3
  4872   001F32  340D               	rlcf	(??___fladd+3)^0,w,c
  4873   001F34  320D               	rrcf	(??___fladd+3)^0,f,c
  4874   001F36  320C               	rrcf	(??___fladd+2)^0,f,c
  4875   001F38  320B               	rrcf	(??___fladd+1)^0,f,c
  4876   001F3A  320A               	rrcf	??___fladd^0,f,c
  4877   001F3C  C00A  F002         	movff	??___fladd,___fladd@b
  4878   001F40  C00B  F003         	movff	??___fladd+1,___fladd@b+1
  4879   001F44  C00C  F004         	movff	??___fladd+2,___fladd@b+2
  4880   001F48  C00D  F005         	movff	??___fladd+3,___fladd@b+3
  4881   001F4C  2810               	incf	___fladd@bexp^0,w,c
  4882   001F4E  B4D8               	btfsc	status,2,c
  4883   001F50  EFAC  F00F         	goto	u3361
  4884   001F54  EFAE  F00F         	goto	u3360
  4885   001F58                     u3361:
  4886   001F58  EFAF  F00F         	goto	l4213
  4887   001F5C                     u3360:
  4888   001F5C  2A10               	incf	___fladd@bexp^0,f,c
  4889   001F5E                     l4213:
  4890   001F5E  2810               	incf	___fladd@bexp^0,w,c
  4891   001F60  B4D8               	btfsc	status,2,c
  4892   001F62  EFB5  F00F         	goto	u3371
  4893   001F66  EFB7  F00F         	goto	u3370
  4894   001F6A                     u3371:
  4895   001F6A  EFBF  F00F         	goto	l4217
  4896   001F6E                     u3370:
  4897   001F6E  5010               	movf	___fladd@bexp^0,w,c
  4898   001F70  A4D8               	btfss	status,2,c
  4899   001F72  EFBD  F00F         	goto	u3381
  4900   001F76  EFBF  F00F         	goto	u3380
  4901   001F7A                     u3381:
  4902   001F7A  EFD1  F00F         	goto	l4221
  4903   001F7E                     u3380:
  4904   001F7E                     l4217:
  4905   001F7E  0E00               	movlw	0
  4906   001F80  6E02               	movwf	___fladd@b^0,c
  4907   001F82  0E00               	movlw	0
  4908   001F84  6E03               	movwf	(___fladd@b+1)^0,c
  4909   001F86  0E00               	movlw	0
  4910   001F88  6E04               	movwf	(___fladd@b+2)^0,c
  4911   001F8A  0E00               	movlw	0
  4912   001F8C  6E05               	movwf	(___fladd@b+3)^0,c
  4913   001F8E  5010               	movf	___fladd@bexp^0,w,c
  4914   001F90  A4D8               	btfss	status,2,c
  4915   001F92  EFCD  F00F         	goto	u3391
  4916   001F96  EFCF  F00F         	goto	u3390
  4917   001F9A                     u3391:
  4918   001F9A  EFD1  F00F         	goto	l4221
  4919   001F9E                     u3390:
  4920   001F9E  0E00               	movlw	0
  4921   001FA0  6E0E               	movwf	___fladd@signs^0,c
  4922   001FA2                     l4221:
  4923   001FA2  A010               	btfss	___fladd@bexp^0,0,c
  4924   001FA4  EFD6  F00F         	goto	u3401
  4925   001FA8  EFD8  F00F         	goto	u3400
  4926   001FAC                     u3401:
  4927   001FAC  EFDB  F00F         	goto	l4225
  4928   001FB0                     u3400:
  4929   001FB0  8E04               	bsf	(___fladd@b+2)^0,7,c
  4930   001FB2  EFDC  F00F         	goto	l4227
  4931   001FB6                     l4225:
  4932   001FB6  9E04               	bcf	(___fladd@b+2)^0,7,c
  4933   001FB8                     l4227:
  4934   001FB8  90D8               	bcf	status,0,c
  4935   001FBA  3010               	rrcf	___fladd@bexp^0,w,c
  4936   001FBC  6E05               	movwf	(___fladd@b+3)^0,c
  4937   001FBE  AE0E               	btfss	___fladd@signs^0,7,c
  4938   001FC0  EFE4  F00F         	goto	u3411
  4939   001FC4  EFE6  F00F         	goto	u3410
  4940   001FC8                     u3411:
  4941   001FC8  EFE7  F00F         	goto	l4233
  4942   001FCC                     u3410:
  4943   001FCC  8E05               	bsf	(___fladd@b+3)^0,7,c
  4944   001FCE                     l4233:
  4945   001FCE  C002  F002         	movff	___fladd@b,?___fladd
  4946   001FD2  C003  F003         	movff	___fladd@b+1,?___fladd+1
  4947   001FD6  C004  F004         	movff	___fladd@b+2,?___fladd+2
  4948   001FDA  C005  F005         	movff	___fladd@b+3,?___fladd+3
  4949   001FDE                     l1352:
  4950   001FDE  0012               	return		;funcret
  4951   001FE0                     __end_of___fladd:
  4952                           	callstack 0
  4953                           
  4954 ;; *************** function ___flmul *****************
  4955 ;; Defined at:
  4956 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;  b               4   15[COMRAM] unsigned char 
  4959 ;;  a               4   19[COMRAM] unsigned char 
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;  prod            4   34[COMRAM] struct .
  4962 ;;  grs             4   28[COMRAM] unsigned long 
  4963 ;;  temp            2   38[COMRAM] struct .
  4964 ;;  bexp            1   33[COMRAM] unsigned char 
  4965 ;;  aexp            1   32[COMRAM] unsigned char 
  4966 ;;  sign            1   27[COMRAM] unsigned char 
  4967 ;; Return value:  Size  Location     Type
  4968 ;;                  4   15[COMRAM] unsigned char 
  4969 ;; Registers used:
  4970 ;;		wreg, status,2, status,0, prodl, prodh
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4976 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4977 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4978 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4979 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4980 ;;Total ram usage:       25 bytes
  4981 ;; Hardware stack levels used: 1
  4982 ;; Hardware stack levels required when called: 1
  4983 ;; This function calls:
  4984 ;;		Nothing
  4985 ;; This function is called by:
  4986 ;;		_convert_rgb2hue
  4987 ;;		_main
  4988 ;;		_fullSpeedAhead
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           	psect	text12
  4993   001FE0                     __ptext12:
  4994                           	callstack 0
  4995   001FE0                     ___flmul:
  4996                           	callstack 26
  4997   001FE0  5013               	movf	(___flmul@b+3)^0,w,c
  4998   001FE2  0B80               	andlw	128
  4999   001FE4  6E1C               	movwf	___flmul@sign^0,c
  5000   001FE6  5013               	movf	(___flmul@b+3)^0,w,c
  5001   001FE8  2413               	addwf	(___flmul@b+3)^0,w,c
  5002   001FEA  6E22               	movwf	___flmul@bexp^0,c
  5003   001FEC  AE12               	btfss	(___flmul@b+2)^0,7,c
  5004   001FEE  EFFB  F00F         	goto	u3421
  5005   001FF2  EFFD  F00F         	goto	u3420
  5006   001FF6                     u3421:
  5007   001FF6  EFFE  F00F         	goto	l4243
  5008   001FFA                     u3420:
  5009   001FFA  8022               	bsf	___flmul@bexp^0,0,c
  5010   001FFC                     l4243:
  5011   001FFC  5022               	movf	___flmul@bexp^0,w,c
  5012   001FFE  B4D8               	btfsc	status,2,c
  5013   002000  EF04  F010         	goto	u3431
  5014   002004  EF06  F010         	goto	u3430
  5015   002008                     u3431:
  5016   002008  EF19  F010         	goto	l4251
  5017   00200C                     u3430:
  5018   00200C  2822               	incf	___flmul@bexp^0,w,c
  5019   00200E  A4D8               	btfss	status,2,c
  5020   002010  EF0C  F010         	goto	u3441
  5021   002014  EF0E  F010         	goto	u3440
  5022   002018                     u3441:
  5023   002018  EF16  F010         	goto	l4249
  5024   00201C                     u3440:
  5025   00201C  0E00               	movlw	0
  5026   00201E  6E10               	movwf	___flmul@b^0,c
  5027   002020  0E00               	movlw	0
  5028   002022  6E11               	movwf	(___flmul@b+1)^0,c
  5029   002024  0E00               	movlw	0
  5030   002026  6E12               	movwf	(___flmul@b+2)^0,c
  5031   002028  0E00               	movlw	0
  5032   00202A  6E13               	movwf	(___flmul@b+3)^0,c
  5033   00202C                     l4249:
  5034   00202C  8E12               	bsf	(___flmul@b+2)^0,7,c
  5035   00202E  EF21  F010         	goto	l4253
  5036   002032                     l4251:
  5037   002032  0E00               	movlw	0
  5038   002034  6E10               	movwf	___flmul@b^0,c
  5039   002036  0E00               	movlw	0
  5040   002038  6E11               	movwf	(___flmul@b+1)^0,c
  5041   00203A  0E00               	movlw	0
  5042   00203C  6E12               	movwf	(___flmul@b+2)^0,c
  5043   00203E  0E00               	movlw	0
  5044   002040  6E13               	movwf	(___flmul@b+3)^0,c
  5045   002042                     l4253:
  5046   002042  5017               	movf	(___flmul@a+3)^0,w,c
  5047   002044  0B80               	andlw	128
  5048   002046  1A1C               	xorwf	___flmul@sign^0,f,c
  5049   002048  5017               	movf	(___flmul@a+3)^0,w,c
  5050   00204A  2417               	addwf	(___flmul@a+3)^0,w,c
  5051   00204C  6E21               	movwf	___flmul@aexp^0,c
  5052   00204E  AE16               	btfss	(___flmul@a+2)^0,7,c
  5053   002050  EF2C  F010         	goto	u3451
  5054   002054  EF2E  F010         	goto	u3450
  5055   002058                     u3451:
  5056   002058  EF2F  F010         	goto	l4261
  5057   00205C                     u3450:
  5058   00205C  8021               	bsf	___flmul@aexp^0,0,c
  5059   00205E                     l4261:
  5060   00205E  5021               	movf	___flmul@aexp^0,w,c
  5061   002060  B4D8               	btfsc	status,2,c
  5062   002062  EF35  F010         	goto	u3461
  5063   002066  EF37  F010         	goto	u3460
  5064   00206A                     u3461:
  5065   00206A  EF4A  F010         	goto	l4269
  5066   00206E                     u3460:
  5067   00206E  2821               	incf	___flmul@aexp^0,w,c
  5068   002070  A4D8               	btfss	status,2,c
  5069   002072  EF3D  F010         	goto	u3471
  5070   002076  EF3F  F010         	goto	u3470
  5071   00207A                     u3471:
  5072   00207A  EF47  F010         	goto	l4267
  5073   00207E                     u3470:
  5074   00207E  0E00               	movlw	0
  5075   002080  6E14               	movwf	___flmul@a^0,c
  5076   002082  0E00               	movlw	0
  5077   002084  6E15               	movwf	(___flmul@a+1)^0,c
  5078   002086  0E00               	movlw	0
  5079   002088  6E16               	movwf	(___flmul@a+2)^0,c
  5080   00208A  0E00               	movlw	0
  5081   00208C  6E17               	movwf	(___flmul@a+3)^0,c
  5082   00208E                     l4267:
  5083   00208E  8E16               	bsf	(___flmul@a+2)^0,7,c
  5084   002090  EF52  F010         	goto	l1429
  5085   002094                     l4269:
  5086   002094  0E00               	movlw	0
  5087   002096  6E14               	movwf	___flmul@a^0,c
  5088   002098  0E00               	movlw	0
  5089   00209A  6E15               	movwf	(___flmul@a+1)^0,c
  5090   00209C  0E00               	movlw	0
  5091   00209E  6E16               	movwf	(___flmul@a+2)^0,c
  5092   0020A0  0E00               	movlw	0
  5093   0020A2  6E17               	movwf	(___flmul@a+3)^0,c
  5094   0020A4                     l1429:
  5095   0020A4  5021               	movf	___flmul@aexp^0,w,c
  5096   0020A6  B4D8               	btfsc	status,2,c
  5097   0020A8  EF58  F010         	goto	u3481
  5098   0020AC  EF5A  F010         	goto	u3480
  5099   0020B0                     u3481:
  5100   0020B0  EF62  F010         	goto	l4273
  5101   0020B4                     u3480:
  5102   0020B4  5022               	movf	___flmul@bexp^0,w,c
  5103   0020B6  A4D8               	btfss	status,2,c
  5104   0020B8  EF60  F010         	goto	u3491
  5105   0020BC  EF62  F010         	goto	u3490
  5106   0020C0                     u3491:
  5107   0020C0  EF6C  F010         	goto	l4277
  5108   0020C4                     u3490:
  5109   0020C4                     l4273:
  5110   0020C4  0E00               	movlw	0
  5111   0020C6  6E10               	movwf	?___flmul^0,c
  5112   0020C8  0E00               	movlw	0
  5113   0020CA  6E11               	movwf	(?___flmul+1)^0,c
  5114   0020CC  0E00               	movlw	0
  5115   0020CE  6E12               	movwf	(?___flmul+2)^0,c
  5116   0020D0  0E00               	movlw	0
  5117   0020D2  6E13               	movwf	(?___flmul+3)^0,c
  5118   0020D4  EF04  F012         	goto	l1433
  5119   0020D8                     l4277:
  5120   0020D8  5016               	movf	(___flmul@a+2)^0,w,c
  5121   0020DA  0210               	mulwf	___flmul@b^0,c
  5122   0020DC  CFF3 F027          	movff	prodl,___flmul@temp
  5123   0020E0  CFF4 F028          	movff	prodh,___flmul@temp+1
  5124   0020E4  5027               	movf	___flmul@temp^0,w,c
  5125   0020E6  6E1D               	movwf	___flmul@grs^0,c
  5126   0020E8  6A1E               	clrf	(___flmul@grs+1)^0,c
  5127   0020EA  6A1F               	clrf	(___flmul@grs+2)^0,c
  5128   0020EC  6A20               	clrf	(___flmul@grs+3)^0,c
  5129   0020EE  5028               	movf	(___flmul@temp+1)^0,w,c
  5130   0020F0  6E23               	movwf	___flmul@prod^0,c
  5131   0020F2  6A24               	clrf	(___flmul@prod+1)^0,c
  5132   0020F4  6A25               	clrf	(___flmul@prod+2)^0,c
  5133   0020F6  6A26               	clrf	(___flmul@prod+3)^0,c
  5134   0020F8  5015               	movf	(___flmul@a+1)^0,w,c
  5135   0020FA  0211               	mulwf	(___flmul@b+1)^0,c
  5136   0020FC  CFF3 F027          	movff	prodl,___flmul@temp
  5137   002100  CFF4 F028          	movff	prodh,___flmul@temp+1
  5138   002104  5027               	movf	___flmul@temp^0,w,c
  5139   002106  261D               	addwf	___flmul@grs^0,f,c
  5140   002108  0E00               	movlw	0
  5141   00210A  221E               	addwfc	(___flmul@grs+1)^0,f,c
  5142   00210C  221F               	addwfc	(___flmul@grs+2)^0,f,c
  5143   00210E  2220               	addwfc	(___flmul@grs+3)^0,f,c
  5144   002110  5028               	movf	(___flmul@temp+1)^0,w,c
  5145   002112  2623               	addwf	___flmul@prod^0,f,c
  5146   002114  0E00               	movlw	0
  5147   002116  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5148   002118  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5149   00211A  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5150   00211C  5014               	movf	___flmul@a^0,w,c
  5151   00211E  0212               	mulwf	(___flmul@b+2)^0,c
  5152   002120  CFF3 F027          	movff	prodl,___flmul@temp
  5153   002124  CFF4 F028          	movff	prodh,___flmul@temp+1
  5154   002128  5027               	movf	___flmul@temp^0,w,c
  5155   00212A  261D               	addwf	___flmul@grs^0,f,c
  5156   00212C  0E00               	movlw	0
  5157   00212E  221E               	addwfc	(___flmul@grs+1)^0,f,c
  5158   002130  221F               	addwfc	(___flmul@grs+2)^0,f,c
  5159   002132  2220               	addwfc	(___flmul@grs+3)^0,f,c
  5160   002134  5028               	movf	(___flmul@temp+1)^0,w,c
  5161   002136  2623               	addwf	___flmul@prod^0,f,c
  5162   002138  0E00               	movlw	0
  5163   00213A  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5164   00213C  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5165   00213E  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5166   002140  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  5167   002144  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  5168   002148  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  5169   00214C  6A1D               	clrf	___flmul@grs^0,c
  5170   00214E  5014               	movf	___flmul@a^0,w,c
  5171   002150  0211               	mulwf	(___flmul@b+1)^0,c
  5172   002152  CFF3 F027          	movff	prodl,___flmul@temp
  5173   002156  CFF4 F028          	movff	prodh,___flmul@temp+1
  5174   00215A  5027               	movf	___flmul@temp^0,w,c
  5175   00215C  261D               	addwf	___flmul@grs^0,f,c
  5176   00215E  5028               	movf	(___flmul@temp+1)^0,w,c
  5177   002160  221E               	addwfc	(___flmul@grs+1)^0,f,c
  5178   002162  0E00               	movlw	0
  5179   002164  221F               	addwfc	(___flmul@grs+2)^0,f,c
  5180   002166  0E00               	movlw	0
  5181   002168  2220               	addwfc	(___flmul@grs+3)^0,f,c
  5182   00216A  5015               	movf	(___flmul@a+1)^0,w,c
  5183   00216C  0210               	mulwf	___flmul@b^0,c
  5184   00216E  CFF3 F027          	movff	prodl,___flmul@temp
  5185   002172  CFF4 F028          	movff	prodh,___flmul@temp+1
  5186   002176  5027               	movf	___flmul@temp^0,w,c
  5187   002178  261D               	addwf	___flmul@grs^0,f,c
  5188   00217A  5028               	movf	(___flmul@temp+1)^0,w,c
  5189   00217C  221E               	addwfc	(___flmul@grs+1)^0,f,c
  5190   00217E  0E00               	movlw	0
  5191   002180  221F               	addwfc	(___flmul@grs+2)^0,f,c
  5192   002182  0E00               	movlw	0
  5193   002184  2220               	addwfc	(___flmul@grs+3)^0,f,c
  5194   002186  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  5195   00218A  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  5196   00218E  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  5197   002192  6A1D               	clrf	___flmul@grs^0,c
  5198   002194  5014               	movf	___flmul@a^0,w,c
  5199   002196  0210               	mulwf	___flmul@b^0,c
  5200   002198  CFF3 F027          	movff	prodl,___flmul@temp
  5201   00219C  CFF4 F028          	movff	prodh,___flmul@temp+1
  5202   0021A0  5027               	movf	___flmul@temp^0,w,c
  5203   0021A2  261D               	addwf	___flmul@grs^0,f,c
  5204   0021A4  5028               	movf	(___flmul@temp+1)^0,w,c
  5205   0021A6  221E               	addwfc	(___flmul@grs+1)^0,f,c
  5206   0021A8  0E00               	movlw	0
  5207   0021AA  221F               	addwfc	(___flmul@grs+2)^0,f,c
  5208   0021AC  0E00               	movlw	0
  5209   0021AE  2220               	addwfc	(___flmul@grs+3)^0,f,c
  5210   0021B0  5016               	movf	(___flmul@a+2)^0,w,c
  5211   0021B2  0211               	mulwf	(___flmul@b+1)^0,c
  5212   0021B4  CFF3 F027          	movff	prodl,___flmul@temp
  5213   0021B8  CFF4 F028          	movff	prodh,___flmul@temp+1
  5214   0021BC  5027               	movf	___flmul@temp^0,w,c
  5215   0021BE  2623               	addwf	___flmul@prod^0,f,c
  5216   0021C0  5028               	movf	(___flmul@temp+1)^0,w,c
  5217   0021C2  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5218   0021C4  0E00               	movlw	0
  5219   0021C6  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5220   0021C8  0E00               	movlw	0
  5221   0021CA  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5222   0021CC  5015               	movf	(___flmul@a+1)^0,w,c
  5223   0021CE  0212               	mulwf	(___flmul@b+2)^0,c
  5224   0021D0  CFF3 F027          	movff	prodl,___flmul@temp
  5225   0021D4  CFF4 F028          	movff	prodh,___flmul@temp+1
  5226   0021D8  5027               	movf	___flmul@temp^0,w,c
  5227   0021DA  2623               	addwf	___flmul@prod^0,f,c
  5228   0021DC  5028               	movf	(___flmul@temp+1)^0,w,c
  5229   0021DE  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5230   0021E0  0E00               	movlw	0
  5231   0021E2  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5232   0021E4  0E00               	movlw	0
  5233   0021E6  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5234   0021E8  5016               	movf	(___flmul@a+2)^0,w,c
  5235   0021EA  0212               	mulwf	(___flmul@b+2)^0,c
  5236   0021EC  CFF3 F027          	movff	prodl,___flmul@temp
  5237   0021F0  CFF4 F028          	movff	prodh,___flmul@temp+1
  5238   0021F4  5027               	movf	___flmul@temp^0,w,c
  5239   0021F6  6E18               	movwf	??___flmul^0,c
  5240   0021F8  5028               	movf	(___flmul@temp+1)^0,w,c
  5241   0021FA  6E19               	movwf	(??___flmul+1)^0,c
  5242   0021FC  6A1A               	clrf	(??___flmul+2)^0,c
  5243   0021FE  6A1B               	clrf	(??___flmul+3)^0,c
  5244   002200  C01A  F01B         	movff	??___flmul+2,??___flmul+3
  5245   002204  C019  F01A         	movff	??___flmul+1,??___flmul+2
  5246   002208  C018  F019         	movff	??___flmul,??___flmul+1
  5247   00220C  6A18               	clrf	??___flmul^0,c
  5248   00220E  5018               	movf	??___flmul^0,w,c
  5249   002210  2623               	addwf	___flmul@prod^0,f,c
  5250   002212  5019               	movf	(??___flmul+1)^0,w,c
  5251   002214  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5252   002216  501A               	movf	(??___flmul+2)^0,w,c
  5253   002218  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5254   00221A  501B               	movf	(??___flmul+3)^0,w,c
  5255   00221C  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5256   00221E  C01D  F018         	movff	___flmul@grs,??___flmul
  5257   002222  C01E  F019         	movff	___flmul@grs+1,??___flmul+1
  5258   002226  C01F  F01A         	movff	___flmul@grs+2,??___flmul+2
  5259   00222A  C020  F01B         	movff	___flmul@grs+3,??___flmul+3
  5260   00222E  0E19               	movlw	25
  5261   002230  EF1F  F011         	goto	u3500
  5262   002234                     u3505:
  5263   002234  90D8               	bcf	status,0,c
  5264   002236  321B               	rrcf	(??___flmul+3)^0,f,c
  5265   002238  321A               	rrcf	(??___flmul+2)^0,f,c
  5266   00223A  3219               	rrcf	(??___flmul+1)^0,f,c
  5267   00223C  3218               	rrcf	??___flmul^0,f,c
  5268   00223E                     u3500:
  5269   00223E  2EE8               	decfsz	wreg,f,c
  5270   002240  EF1A  F011         	goto	u3505
  5271   002244  5018               	movf	??___flmul^0,w,c
  5272   002246  2623               	addwf	___flmul@prod^0,f,c
  5273   002248  5019               	movf	(??___flmul+1)^0,w,c
  5274   00224A  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5275   00224C  501A               	movf	(??___flmul+2)^0,w,c
  5276   00224E  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5277   002250  501B               	movf	(??___flmul+3)^0,w,c
  5278   002252  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5279   002254  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  5280   002258  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  5281   00225C  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  5282   002260  6A1D               	clrf	___flmul@grs^0,c
  5283   002262  5021               	movf	___flmul@aexp^0,w,c
  5284   002264  C022  F018         	movff	___flmul@bexp,??___flmul
  5285   002268  6A19               	clrf	(??___flmul+1)^0,c
  5286   00226A  2618               	addwf	??___flmul^0,f,c
  5287   00226C  0E00               	movlw	0
  5288   00226E  2219               	addwfc	(??___flmul+1)^0,f,c
  5289   002270  0E82               	movlw	130
  5290   002272  2418               	addwf	??___flmul^0,w,c
  5291   002274  6E27               	movwf	___flmul@temp^0,c
  5292   002276  0EFF               	movlw	255
  5293   002278  2019               	addwfc	(??___flmul+1)^0,w,c
  5294   00227A  6E28               	movwf	(___flmul@temp+1)^0,c
  5295   00227C  EF55  F011         	goto	l4325
  5296   002280                     l4319:
  5297   002280  90D8               	bcf	status,0,c
  5298   002282  3623               	rlcf	___flmul@prod^0,f,c
  5299   002284  3624               	rlcf	(___flmul@prod+1)^0,f,c
  5300   002286  3625               	rlcf	(___flmul@prod+2)^0,f,c
  5301   002288  3626               	rlcf	(___flmul@prod+3)^0,f,c
  5302   00228A  AE20               	btfss	(___flmul@grs+3)^0,7,c
  5303   00228C  EF4A  F011         	goto	u3511
  5304   002290  EF4C  F011         	goto	u3510
  5305   002294                     u3511:
  5306   002294  EF4D  F011         	goto	l1436
  5307   002298                     u3510:
  5308   002298  8023               	bsf	___flmul@prod^0,0,c
  5309   00229A                     l1436:
  5310   00229A  90D8               	bcf	status,0,c
  5311   00229C  361D               	rlcf	___flmul@grs^0,f,c
  5312   00229E  361E               	rlcf	(___flmul@grs+1)^0,f,c
  5313   0022A0  361F               	rlcf	(___flmul@grs+2)^0,f,c
  5314   0022A2  3620               	rlcf	(___flmul@grs+3)^0,f,c
  5315   0022A4  0627               	decf	___flmul@temp^0,f,c
  5316   0022A6  A0D8               	btfss	status,0,c
  5317   0022A8  0628               	decf	(___flmul@temp+1)^0,f,c
  5318   0022AA                     l4325:
  5319   0022AA  AE25               	btfss	(___flmul@prod+2)^0,7,c
  5320   0022AC  EF5A  F011         	goto	u3521
  5321   0022B0  EF5C  F011         	goto	u3520
  5322   0022B4                     u3521:
  5323   0022B4  EF40  F011         	goto	l4319
  5324   0022B8                     u3520:
  5325   0022B8  0E00               	movlw	0
  5326   0022BA  6E21               	movwf	___flmul@aexp^0,c
  5327   0022BC  AE20               	btfss	(___flmul@grs+3)^0,7,c
  5328   0022BE  EF63  F011         	goto	u3531
  5329   0022C2  EF65  F011         	goto	u3530
  5330   0022C6                     u3531:
  5331   0022C6  EF89  F011         	goto	l1438
  5332   0022CA                     u3530:
  5333   0022CA  0EFF               	movlw	255
  5334   0022CC  141D               	andwf	___flmul@grs^0,w,c
  5335   0022CE  6E18               	movwf	??___flmul^0,c
  5336   0022D0  0EFF               	movlw	255
  5337   0022D2  141E               	andwf	(___flmul@grs+1)^0,w,c
  5338   0022D4  6E19               	movwf	(??___flmul+1)^0,c
  5339   0022D6  0EFF               	movlw	255
  5340   0022D8  141F               	andwf	(___flmul@grs+2)^0,w,c
  5341   0022DA  6E1A               	movwf	(??___flmul+2)^0,c
  5342   0022DC  0E7F               	movlw	127
  5343   0022DE  1420               	andwf	(___flmul@grs+3)^0,w,c
  5344   0022E0  6E1B               	movwf	(??___flmul+3)^0,c
  5345   0022E2  5018               	movf	??___flmul^0,w,c
  5346   0022E4  1019               	iorwf	(??___flmul+1)^0,w,c
  5347   0022E6  101A               	iorwf	(??___flmul+2)^0,w,c
  5348   0022E8  101B               	iorwf	(??___flmul+3)^0,w,c
  5349   0022EA  B4D8               	btfsc	status,2,c
  5350   0022EC  EF7A  F011         	goto	u3541
  5351   0022F0  EF7C  F011         	goto	u3540
  5352   0022F4                     u3541:
  5353   0022F4  EF80  F011         	goto	l1439
  5354   0022F8                     u3540:
  5355   0022F8                     l4333:
  5356   0022F8  0E01               	movlw	1
  5357   0022FA  6E21               	movwf	___flmul@aexp^0,c
  5358   0022FC  EF89  F011         	goto	l1438
  5359   002300                     l1439:
  5360   002300  A023               	btfss	___flmul@prod^0,0,c
  5361   002302  EF85  F011         	goto	u3551
  5362   002306  EF87  F011         	goto	u3550
  5363   00230A                     u3551:
  5364   00230A  EF89  F011         	goto	l1438
  5365   00230E                     u3550:
  5366   00230E  EF7C  F011         	goto	l4333
  5367   002312                     l1438:
  5368   002312  5021               	movf	___flmul@aexp^0,w,c
  5369   002314  B4D8               	btfsc	status,2,c
  5370   002316  EF8F  F011         	goto	u3561
  5371   00231A  EF91  F011         	goto	u3560
  5372   00231E                     u3561:
  5373   00231E  EFB5  F011         	goto	l4345
  5374   002322                     u3560:
  5375   002322  0E01               	movlw	1
  5376   002324  2623               	addwf	___flmul@prod^0,f,c
  5377   002326  0E00               	movlw	0
  5378   002328  2224               	addwfc	(___flmul@prod+1)^0,f,c
  5379   00232A  2225               	addwfc	(___flmul@prod+2)^0,f,c
  5380   00232C  2226               	addwfc	(___flmul@prod+3)^0,f,c
  5381   00232E  A026               	btfss	(___flmul@prod+3)^0,0,c
  5382   002330  EF9C  F011         	goto	u3571
  5383   002334  EF9E  F011         	goto	u3570
  5384   002338                     u3571:
  5385   002338  EFB5  F011         	goto	l4345
  5386   00233C                     u3570:
  5387   00233C  C023  F018         	movff	___flmul@prod,??___flmul
  5388   002340  C024  F019         	movff	___flmul@prod+1,??___flmul+1
  5389   002344  C025  F01A         	movff	___flmul@prod+2,??___flmul+2
  5390   002348  C026  F01B         	movff	___flmul@prod+3,??___flmul+3
  5391   00234C  341B               	rlcf	(??___flmul+3)^0,w,c
  5392   00234E  321B               	rrcf	(??___flmul+3)^0,f,c
  5393   002350  321A               	rrcf	(??___flmul+2)^0,f,c
  5394   002352  3219               	rrcf	(??___flmul+1)^0,f,c
  5395   002354  3218               	rrcf	??___flmul^0,f,c
  5396   002356  C018  F023         	movff	??___flmul,___flmul@prod
  5397   00235A  C019  F024         	movff	??___flmul+1,___flmul@prod+1
  5398   00235E  C01A  F025         	movff	??___flmul+2,___flmul@prod+2
  5399   002362  C01B  F026         	movff	??___flmul+3,___flmul@prod+3
  5400   002366  4A27               	infsnz	___flmul@temp^0,f,c
  5401   002368  2A28               	incf	(___flmul@temp+1)^0,f,c
  5402   00236A                     l4345:
  5403   00236A  BE28               	btfsc	(___flmul@temp+1)^0,7,c
  5404   00236C  EFC0  F011         	goto	u3581
  5405   002370  5028               	movf	(___flmul@temp+1)^0,w,c
  5406   002372  E108               	bnz	u3580
  5407   002374  2827               	incf	___flmul@temp^0,w,c
  5408   002376  A0D8               	btfss	status,0,c
  5409   002378  EFC0  F011         	goto	u3581
  5410   00237C  EFC2  F011         	goto	u3580
  5411   002380                     u3581:
  5412   002380  EFCC  F011         	goto	l4349
  5413   002384                     u3580:
  5414   002384  0E00               	movlw	0
  5415   002386  6E23               	movwf	___flmul@prod^0,c
  5416   002388  0E00               	movlw	0
  5417   00238A  6E24               	movwf	(___flmul@prod+1)^0,c
  5418   00238C  0E80               	movlw	128
  5419   00238E  6E25               	movwf	(___flmul@prod+2)^0,c
  5420   002390  0E7F               	movlw	127
  5421   002392  6E26               	movwf	(___flmul@prod+3)^0,c
  5422   002394  EFFA  F011         	goto	l4361
  5423   002398                     l4349:
  5424   002398  BE28               	btfsc	(___flmul@temp+1)^0,7,c
  5425   00239A  EFD9  F011         	goto	u3590
  5426   00239E  5028               	movf	(___flmul@temp+1)^0,w,c
  5427   0023A0  E106               	bnz	u3591
  5428   0023A2  0427               	decf	___flmul@temp^0,w,c
  5429   0023A4  B0D8               	btfsc	status,0,c
  5430   0023A6  EFD7  F011         	goto	u3591
  5431   0023AA  EFD9  F011         	goto	u3590
  5432   0023AE                     u3591:
  5433   0023AE  EFE5  F011         	goto	l1446
  5434   0023B2                     u3590:
  5435   0023B2  0E00               	movlw	0
  5436   0023B4  6E23               	movwf	___flmul@prod^0,c
  5437   0023B6  0E00               	movlw	0
  5438   0023B8  6E24               	movwf	(___flmul@prod+1)^0,c
  5439   0023BA  0E00               	movlw	0
  5440   0023BC  6E25               	movwf	(___flmul@prod+2)^0,c
  5441   0023BE  0E00               	movlw	0
  5442   0023C0  6E26               	movwf	(___flmul@prod+3)^0,c
  5443   0023C2  0E00               	movlw	0
  5444   0023C4  6E1C               	movwf	___flmul@sign^0,c
  5445   0023C6  EFFA  F011         	goto	l4361
  5446   0023CA                     l1446:
  5447   0023CA  C027  F022         	movff	___flmul@temp,___flmul@bexp
  5448   0023CE  0EFF               	movlw	255
  5449   0023D0  1623               	andwf	___flmul@prod^0,f,c
  5450   0023D2  0EFF               	movlw	255
  5451   0023D4  1624               	andwf	(___flmul@prod+1)^0,f,c
  5452   0023D6  0E7F               	movlw	127
  5453   0023D8  1625               	andwf	(___flmul@prod+2)^0,f,c
  5454   0023DA  0E00               	movlw	0
  5455   0023DC  1626               	andwf	(___flmul@prod+3)^0,f,c
  5456   0023DE  A022               	btfss	___flmul@bexp^0,0,c
  5457   0023E0  EFF4  F011         	goto	u3601
  5458   0023E4  EFF6  F011         	goto	u3600
  5459   0023E8                     u3601:
  5460   0023E8  EFF7  F011         	goto	l4359
  5461   0023EC                     u3600:
  5462   0023EC  8E25               	bsf	(___flmul@prod+2)^0,7,c
  5463   0023EE                     l4359:
  5464   0023EE  90D8               	bcf	status,0,c
  5465   0023F0  3022               	rrcf	___flmul@bexp^0,w,c
  5466   0023F2  6E26               	movwf	(___flmul@prod+3)^0,c
  5467   0023F4                     l4361:
  5468   0023F4  501C               	movf	___flmul@sign^0,w,c
  5469   0023F6  1226               	iorwf	(___flmul@prod+3)^0,f,c
  5470   0023F8  C023  F010         	movff	___flmul@prod,?___flmul
  5471   0023FC  C024  F011         	movff	___flmul@prod+1,?___flmul+1
  5472   002400  C025  F012         	movff	___flmul@prod+2,?___flmul+2
  5473   002404  C026  F013         	movff	___flmul@prod+3,?___flmul+3
  5474   002408                     l1433:
  5475   002408  0012               	return		;funcret
  5476   00240A                     __end_of___flmul:
  5477                           	callstack 0
  5478                           
  5479 ;; *************** function ___flge *****************
  5480 ;; Defined at:
  5481 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\flge.c"
  5482 ;; Parameters:    Size  Location     Type
  5483 ;;  ff1             4    1[COMRAM] unsigned char 
  5484 ;;  ff2             4    5[COMRAM] unsigned char 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;		None
  5487 ;; Return value:  Size  Location     Type
  5488 ;;		None               void
  5489 ;; Registers used:
  5490 ;;		wreg, status,2, status,0
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 0/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5496 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5498 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5499 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5500 ;;Total ram usage:       12 bytes
  5501 ;; Hardware stack levels used: 1
  5502 ;; Hardware stack levels required when called: 1
  5503 ;; This function calls:
  5504 ;;		Nothing
  5505 ;; This function is called by:
  5506 ;;		_convert_rgb2hue
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510                           	psect	text13
  5511   003752                     __ptext13:
  5512                           	callstack 0
  5513   003752                     ___flge:
  5514                           	callstack 27
  5515   003752  0E00               	movlw	0
  5516   003754  1402               	andwf	___flge@ff1^0,w,c
  5517   003756  6E0A               	movwf	??___flge^0,c
  5518   003758  0E00               	movlw	0
  5519   00375A  1403               	andwf	(___flge@ff1+1)^0,w,c
  5520   00375C  6E0B               	movwf	(??___flge+1)^0,c
  5521   00375E  0E80               	movlw	128
  5522   003760  1404               	andwf	(___flge@ff1+2)^0,w,c
  5523   003762  6E0C               	movwf	(??___flge+2)^0,c
  5524   003764  0E7F               	movlw	127
  5525   003766  1405               	andwf	(___flge@ff1+3)^0,w,c
  5526   003768  6E0D               	movwf	(??___flge+3)^0,c
  5527   00376A  500A               	movf	??___flge^0,w,c
  5528   00376C  100B               	iorwf	(??___flge+1)^0,w,c
  5529   00376E  100C               	iorwf	(??___flge+2)^0,w,c
  5530   003770  100D               	iorwf	(??___flge+3)^0,w,c
  5531   003772  A4D8               	btfss	status,2,c
  5532   003774  EFBE  F01B         	goto	u4091
  5533   003778  EFC0  F01B         	goto	u4090
  5534   00377C                     u4091:
  5535   00377C  EFC8  F01B         	goto	l4767
  5536   003780                     u4090:
  5537   003780  0E00               	movlw	0
  5538   003782  6E02               	movwf	___flge@ff1^0,c
  5539   003784  0E00               	movlw	0
  5540   003786  6E03               	movwf	(___flge@ff1+1)^0,c
  5541   003788  0E00               	movlw	0
  5542   00378A  6E04               	movwf	(___flge@ff1+2)^0,c
  5543   00378C  0E00               	movlw	0
  5544   00378E  6E05               	movwf	(___flge@ff1+3)^0,c
  5545   003790                     l4767:
  5546   003790  0E00               	movlw	0
  5547   003792  1406               	andwf	___flge@ff2^0,w,c
  5548   003794  6E0A               	movwf	??___flge^0,c
  5549   003796  0E00               	movlw	0
  5550   003798  1407               	andwf	(___flge@ff2+1)^0,w,c
  5551   00379A  6E0B               	movwf	(??___flge+1)^0,c
  5552   00379C  0E80               	movlw	128
  5553   00379E  1408               	andwf	(___flge@ff2+2)^0,w,c
  5554   0037A0  6E0C               	movwf	(??___flge+2)^0,c
  5555   0037A2  0E7F               	movlw	127
  5556   0037A4  1409               	andwf	(___flge@ff2+3)^0,w,c
  5557   0037A6  6E0D               	movwf	(??___flge+3)^0,c
  5558   0037A8  500A               	movf	??___flge^0,w,c
  5559   0037AA  100B               	iorwf	(??___flge+1)^0,w,c
  5560   0037AC  100C               	iorwf	(??___flge+2)^0,w,c
  5561   0037AE  100D               	iorwf	(??___flge+3)^0,w,c
  5562   0037B0  A4D8               	btfss	status,2,c
  5563   0037B2  EFDD  F01B         	goto	u4101
  5564   0037B6  EFDF  F01B         	goto	u4100
  5565   0037BA                     u4101:
  5566   0037BA  EFE7  F01B         	goto	l4771
  5567   0037BE                     u4100:
  5568   0037BE  0E00               	movlw	0
  5569   0037C0  6E06               	movwf	___flge@ff2^0,c
  5570   0037C2  0E00               	movlw	0
  5571   0037C4  6E07               	movwf	(___flge@ff2+1)^0,c
  5572   0037C6  0E00               	movlw	0
  5573   0037C8  6E08               	movwf	(___flge@ff2+2)^0,c
  5574   0037CA  0E00               	movlw	0
  5575   0037CC  6E09               	movwf	(___flge@ff2+3)^0,c
  5576   0037CE                     l4771:
  5577   0037CE  AE05               	btfss	(___flge@ff1+3)^0,7,c
  5578   0037D0  EFEC  F01B         	goto	u4111
  5579   0037D4  EFEE  F01B         	goto	u4110
  5580   0037D8                     u4111:
  5581   0037D8  EFF7  F01B         	goto	l4775
  5582   0037DC                     u4110:
  5583   0037DC  6C02               	negf	___flge@ff1^0,c
  5584   0037DE  1E03               	comf	(___flge@ff1+1)^0,f,c
  5585   0037E0  B0D8               	btfsc	status,0,c
  5586   0037E2  2A03               	incf	(___flge@ff1+1)^0,f,c
  5587   0037E4  1E04               	comf	(___flge@ff1+2)^0,f,c
  5588   0037E6  B0D8               	btfsc	status,0,c
  5589   0037E8  2A04               	incf	(___flge@ff1+2)^0,f,c
  5590   0037EA  0E80               	movlw	128
  5591   0037EC  5605               	subfwb	(___flge@ff1+3)^0,f,c
  5592   0037EE                     l4775:
  5593   0037EE  AE09               	btfss	(___flge@ff2+3)^0,7,c
  5594   0037F0  EFFC  F01B         	goto	u4121
  5595   0037F4  EFFE  F01B         	goto	u4120
  5596   0037F8                     u4121:
  5597   0037F8  EF07  F01C         	goto	l1080
  5598   0037FC                     u4120:
  5599   0037FC  6C06               	negf	___flge@ff2^0,c
  5600   0037FE  1E07               	comf	(___flge@ff2+1)^0,f,c
  5601   003800  B0D8               	btfsc	status,0,c
  5602   003802  2A07               	incf	(___flge@ff2+1)^0,f,c
  5603   003804  1E08               	comf	(___flge@ff2+2)^0,f,c
  5604   003806  B0D8               	btfsc	status,0,c
  5605   003808  2A08               	incf	(___flge@ff2+2)^0,f,c
  5606   00380A  0E80               	movlw	128
  5607   00380C  5609               	subfwb	(___flge@ff2+3)^0,f,c
  5608   00380E                     l1080:
  5609   00380E  0E00               	movlw	0
  5610   003810  1A02               	xorwf	___flge@ff1^0,f,c
  5611   003812  0E00               	movlw	0
  5612   003814  1A03               	xorwf	(___flge@ff1+1)^0,f,c
  5613   003816  0E00               	movlw	0
  5614   003818  1A04               	xorwf	(___flge@ff1+2)^0,f,c
  5615   00381A  0E80               	movlw	128
  5616   00381C  1A05               	xorwf	(___flge@ff1+3)^0,f,c
  5617   00381E  0E00               	movlw	0
  5618   003820  1A06               	xorwf	___flge@ff2^0,f,c
  5619   003822  0E00               	movlw	0
  5620   003824  1A07               	xorwf	(___flge@ff2+1)^0,f,c
  5621   003826  0E00               	movlw	0
  5622   003828  1A08               	xorwf	(___flge@ff2+2)^0,f,c
  5623   00382A  0E80               	movlw	128
  5624   00382C  1A09               	xorwf	(___flge@ff2+3)^0,f,c
  5625   00382E  5006               	movf	___flge@ff2^0,w,c
  5626   003830  5C02               	subwf	___flge@ff1^0,w,c
  5627   003832  5007               	movf	(___flge@ff2+1)^0,w,c
  5628   003834  5803               	subwfb	(___flge@ff1+1)^0,w,c
  5629   003836  5008               	movf	(___flge@ff2+2)^0,w,c
  5630   003838  5804               	subwfb	(___flge@ff1+2)^0,w,c
  5631   00383A  5009               	movf	(___flge@ff2+3)^0,w,c
  5632   00383C  5805               	subwfb	(___flge@ff1+3)^0,w,c
  5633   00383E  B0D8               	btfsc	status,0,c
  5634   003840  EF24  F01C         	goto	u4131
  5635   003844  EF26  F01C         	goto	u4130
  5636   003848                     u4131:
  5637   003848  EF29  F01C         	goto	l4781
  5638   00384C                     u4130:
  5639   00384C  90D8               	bcf	status,0,c
  5640   00384E  EF2A  F01C         	goto	l1085
  5641   003852                     l4781:
  5642   003852  80D8               	bsf	status,0,c
  5643   003854                     l1085:
  5644   003854  0012               	return		;funcret
  5645   003856                     __end_of___flge:
  5646                           	callstack 0
  5647                           
  5648 ;; *************** function ___fleq *****************
  5649 ;; Defined at:
  5650 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fleq.c"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;  ff1             4    1[COMRAM] unsigned char 
  5653 ;;  ff2             4    5[COMRAM] unsigned char 
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;		None
  5656 ;; Return value:  Size  Location     Type
  5657 ;;		None               void
  5658 ;; Registers used:
  5659 ;;		wreg, status,2, status,0
  5660 ;; Tracked objects:
  5661 ;;		On entry : 0/0
  5662 ;;		On exit  : 0/0
  5663 ;;		Unchanged: 0/0
  5664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5665 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5667 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5668 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5669 ;;Total ram usage:       12 bytes
  5670 ;; Hardware stack levels used: 1
  5671 ;; Hardware stack levels required when called: 1
  5672 ;; This function calls:
  5673 ;;		Nothing
  5674 ;; This function is called by:
  5675 ;;		_convert_rgb2hue
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679                           	psect	text14
  5680   003D18                     __ptext14:
  5681                           	callstack 0
  5682   003D18                     ___fleq:
  5683                           	callstack 27
  5684   003D18  0E00               	movlw	0
  5685   003D1A  1402               	andwf	___fleq@ff1^0,w,c
  5686   003D1C  6E0A               	movwf	??___fleq^0,c
  5687   003D1E  0E00               	movlw	0
  5688   003D20  1403               	andwf	(___fleq@ff1+1)^0,w,c
  5689   003D22  6E0B               	movwf	(??___fleq+1)^0,c
  5690   003D24  0E80               	movlw	128
  5691   003D26  1404               	andwf	(___fleq@ff1+2)^0,w,c
  5692   003D28  6E0C               	movwf	(??___fleq+2)^0,c
  5693   003D2A  0E7F               	movlw	127
  5694   003D2C  1405               	andwf	(___fleq@ff1+3)^0,w,c
  5695   003D2E  6E0D               	movwf	(??___fleq+3)^0,c
  5696   003D30  500A               	movf	??___fleq^0,w,c
  5697   003D32  100B               	iorwf	(??___fleq+1)^0,w,c
  5698   003D34  100C               	iorwf	(??___fleq+2)^0,w,c
  5699   003D36  100D               	iorwf	(??___fleq+3)^0,w,c
  5700   003D38  A4D8               	btfss	status,2,c
  5701   003D3A  EFA1  F01E         	goto	u4061
  5702   003D3E  EFA3  F01E         	goto	u4060
  5703   003D42                     u4061:
  5704   003D42  EFAB  F01E         	goto	l4751
  5705   003D46                     u4060:
  5706   003D46  0E00               	movlw	0
  5707   003D48  6E02               	movwf	___fleq@ff1^0,c
  5708   003D4A  0E00               	movlw	0
  5709   003D4C  6E03               	movwf	(___fleq@ff1+1)^0,c
  5710   003D4E  0E00               	movlw	0
  5711   003D50  6E04               	movwf	(___fleq@ff1+2)^0,c
  5712   003D52  0E00               	movlw	0
  5713   003D54  6E05               	movwf	(___fleq@ff1+3)^0,c
  5714   003D56                     l4751:
  5715   003D56  0E00               	movlw	0
  5716   003D58  1406               	andwf	___fleq@ff2^0,w,c
  5717   003D5A  6E0A               	movwf	??___fleq^0,c
  5718   003D5C  0E00               	movlw	0
  5719   003D5E  1407               	andwf	(___fleq@ff2+1)^0,w,c
  5720   003D60  6E0B               	movwf	(??___fleq+1)^0,c
  5721   003D62  0E80               	movlw	128
  5722   003D64  1408               	andwf	(___fleq@ff2+2)^0,w,c
  5723   003D66  6E0C               	movwf	(??___fleq+2)^0,c
  5724   003D68  0E7F               	movlw	127
  5725   003D6A  1409               	andwf	(___fleq@ff2+3)^0,w,c
  5726   003D6C  6E0D               	movwf	(??___fleq+3)^0,c
  5727   003D6E  500A               	movf	??___fleq^0,w,c
  5728   003D70  100B               	iorwf	(??___fleq+1)^0,w,c
  5729   003D72  100C               	iorwf	(??___fleq+2)^0,w,c
  5730   003D74  100D               	iorwf	(??___fleq+3)^0,w,c
  5731   003D76  A4D8               	btfss	status,2,c
  5732   003D78  EFC0  F01E         	goto	u4071
  5733   003D7C  EFC2  F01E         	goto	u4070
  5734   003D80                     u4071:
  5735   003D80  EFCA  F01E         	goto	l4755
  5736   003D84                     u4070:
  5737   003D84  0E00               	movlw	0
  5738   003D86  6E06               	movwf	___fleq@ff2^0,c
  5739   003D88  0E00               	movlw	0
  5740   003D8A  6E07               	movwf	(___fleq@ff2+1)^0,c
  5741   003D8C  0E00               	movlw	0
  5742   003D8E  6E08               	movwf	(___fleq@ff2+2)^0,c
  5743   003D90  0E00               	movlw	0
  5744   003D92  6E09               	movwf	(___fleq@ff2+3)^0,c
  5745   003D94                     l4755:
  5746   003D94  5006               	movf	___fleq@ff2^0,w,c
  5747   003D96  1802               	xorwf	___fleq@ff1^0,w,c
  5748   003D98  E10F               	bnz	u4080
  5749   003D9A  5007               	movf	(___fleq@ff2+1)^0,w,c
  5750   003D9C  1803               	xorwf	(___fleq@ff1+1)^0,w,c
  5751   003D9E  E10C               	bnz	u4080
  5752   003DA0  5008               	movf	(___fleq@ff2+2)^0,w,c
  5753   003DA2  1804               	xorwf	(___fleq@ff1+2)^0,w,c
  5754   003DA4  E109               	bnz	u4080
  5755   003DA6  5009               	movf	(___fleq@ff2+3)^0,w,c
  5756   003DA8  1805               	xorwf	(___fleq@ff1+3)^0,w,c
  5757   003DAA  B4D8               	btfsc	status,2,c
  5758   003DAC  EFDA  F01E         	goto	u4081
  5759   003DB0  EFDC  F01E         	goto	u4080
  5760   003DB4                     u4081:
  5761   003DB4  EFDF  F01E         	goto	l4759
  5762   003DB8                     u4080:
  5763   003DB8  90D8               	bcf	status,0,c
  5764   003DBA  EFE0  F01E         	goto	l1074
  5765   003DBE                     l4759:
  5766   003DBE  80D8               	bsf	status,0,c
  5767   003DC0                     l1074:
  5768   003DC0  0012               	return		;funcret
  5769   003DC2                     __end_of___fleq:
  5770                           	callstack 0
  5771                           
  5772 ;; *************** function ___fldiv *****************
  5773 ;; Defined at:
  5774 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcdiv.c"
  5775 ;; Parameters:    Size  Location     Type
  5776 ;;  b               4   40[COMRAM] unsigned char 
  5777 ;;  a               4   44[COMRAM] unsigned char 
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;  grs             4   59[COMRAM] unsigned long 
  5780 ;;  rem             4   52[COMRAM] unsigned long 
  5781 ;;  new_exp         2   57[COMRAM] short 
  5782 ;;  aexp            1   64[COMRAM] unsigned char 
  5783 ;;  bexp            1   63[COMRAM] unsigned char 
  5784 ;;  sign            1   56[COMRAM] unsigned char 
  5785 ;; Return value:  Size  Location     Type
  5786 ;;                  4   40[COMRAM] unsigned char 
  5787 ;; Registers used:
  5788 ;;		wreg, status,2, status,0
  5789 ;; Tracked objects:
  5790 ;;		On entry : 0/0
  5791 ;;		On exit  : 0/0
  5792 ;;		Unchanged: 0/0
  5793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5794 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5795 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5796 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5797 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5798 ;;Total ram usage:       25 bytes
  5799 ;; Hardware stack levels used: 1
  5800 ;; Hardware stack levels required when called: 1
  5801 ;; This function calls:
  5802 ;;		Nothing
  5803 ;; This function is called by:
  5804 ;;		_convert_rgb2hue
  5805 ;;		_main
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           	psect	text15
  5810   00240A                     __ptext15:
  5811                           	callstack 0
  5812   00240A                     ___fldiv:
  5813                           	callstack 27
  5814   00240A  502C               	movf	(___fldiv@b+3)^0,w,c
  5815   00240C  0B80               	andlw	128
  5816   00240E  6E39               	movwf	___fldiv@sign^0,c
  5817   002410  502C               	movf	(___fldiv@b+3)^0,w,c
  5818   002412  242C               	addwf	(___fldiv@b+3)^0,w,c
  5819   002414  6E40               	movwf	___fldiv@bexp^0,c
  5820   002416  AE2B               	btfss	(___fldiv@b+2)^0,7,c
  5821   002418  EF10  F012         	goto	u3831
  5822   00241C  EF12  F012         	goto	u3830
  5823   002420                     u3831:
  5824   002420  EF13  F012         	goto	l4609
  5825   002424                     u3830:
  5826   002424  8040               	bsf	___fldiv@bexp^0,0,c
  5827   002426                     l4609:
  5828   002426  5040               	movf	___fldiv@bexp^0,w,c
  5829   002428  B4D8               	btfsc	status,2,c
  5830   00242A  EF19  F012         	goto	u3841
  5831   00242E  EF1B  F012         	goto	u3840
  5832   002432                     u3841:
  5833   002432  EF30  F012         	goto	l4619
  5834   002436                     u3840:
  5835   002436  2840               	incf	___fldiv@bexp^0,w,c
  5836   002438  A4D8               	btfss	status,2,c
  5837   00243A  EF21  F012         	goto	u3851
  5838   00243E  EF23  F012         	goto	u3850
  5839   002442                     u3851:
  5840   002442  EF2B  F012         	goto	l4615
  5841   002446                     u3850:
  5842   002446  0E00               	movlw	0
  5843   002448  6E29               	movwf	___fldiv@b^0,c
  5844   00244A  0E00               	movlw	0
  5845   00244C  6E2A               	movwf	(___fldiv@b+1)^0,c
  5846   00244E  0E00               	movlw	0
  5847   002450  6E2B               	movwf	(___fldiv@b+2)^0,c
  5848   002452  0E00               	movlw	0
  5849   002454  6E2C               	movwf	(___fldiv@b+3)^0,c
  5850   002456                     l4615:
  5851   002456  8E2B               	bsf	(___fldiv@b+2)^0,7,c
  5852   002458  0E00               	movlw	0
  5853   00245A  6E2C               	movwf	(___fldiv@b+3)^0,c
  5854   00245C  EF38  F012         	goto	l4621
  5855   002460                     l4619:
  5856   002460  0E00               	movlw	0
  5857   002462  6E29               	movwf	___fldiv@b^0,c
  5858   002464  0E00               	movlw	0
  5859   002466  6E2A               	movwf	(___fldiv@b+1)^0,c
  5860   002468  0E00               	movlw	0
  5861   00246A  6E2B               	movwf	(___fldiv@b+2)^0,c
  5862   00246C  0E00               	movlw	0
  5863   00246E  6E2C               	movwf	(___fldiv@b+3)^0,c
  5864   002470                     l4621:
  5865   002470  5030               	movf	(___fldiv@a+3)^0,w,c
  5866   002472  0B80               	andlw	128
  5867   002474  1A39               	xorwf	___fldiv@sign^0,f,c
  5868   002476  5030               	movf	(___fldiv@a+3)^0,w,c
  5869   002478  2430               	addwf	(___fldiv@a+3)^0,w,c
  5870   00247A  6E41               	movwf	___fldiv@aexp^0,c
  5871   00247C  AE2F               	btfss	(___fldiv@a+2)^0,7,c
  5872   00247E  EF43  F012         	goto	u3861
  5873   002482  EF45  F012         	goto	u3860
  5874   002486                     u3861:
  5875   002486  EF46  F012         	goto	l4629
  5876   00248A                     u3860:
  5877   00248A  8041               	bsf	___fldiv@aexp^0,0,c
  5878   00248C                     l4629:
  5879   00248C  5041               	movf	___fldiv@aexp^0,w,c
  5880   00248E  B4D8               	btfsc	status,2,c
  5881   002490  EF4C  F012         	goto	u3871
  5882   002494  EF4E  F012         	goto	u3870
  5883   002498                     u3871:
  5884   002498  EF63  F012         	goto	l4639
  5885   00249C                     u3870:
  5886   00249C  2841               	incf	___fldiv@aexp^0,w,c
  5887   00249E  A4D8               	btfss	status,2,c
  5888   0024A0  EF54  F012         	goto	u3881
  5889   0024A4  EF56  F012         	goto	u3880
  5890   0024A8                     u3881:
  5891   0024A8  EF5E  F012         	goto	l4635
  5892   0024AC                     u3880:
  5893   0024AC  0E00               	movlw	0
  5894   0024AE  6E2D               	movwf	___fldiv@a^0,c
  5895   0024B0  0E00               	movlw	0
  5896   0024B2  6E2E               	movwf	(___fldiv@a+1)^0,c
  5897   0024B4  0E00               	movlw	0
  5898   0024B6  6E2F               	movwf	(___fldiv@a+2)^0,c
  5899   0024B8  0E00               	movlw	0
  5900   0024BA  6E30               	movwf	(___fldiv@a+3)^0,c
  5901   0024BC                     l4635:
  5902   0024BC  8E2F               	bsf	(___fldiv@a+2)^0,7,c
  5903   0024BE  0E00               	movlw	0
  5904   0024C0  6E30               	movwf	(___fldiv@a+3)^0,c
  5905   0024C2  EF6B  F012         	goto	l4641
  5906   0024C6                     l4639:
  5907   0024C6  0E00               	movlw	0
  5908   0024C8  6E2D               	movwf	___fldiv@a^0,c
  5909   0024CA  0E00               	movlw	0
  5910   0024CC  6E2E               	movwf	(___fldiv@a+1)^0,c
  5911   0024CE  0E00               	movlw	0
  5912   0024D0  6E2F               	movwf	(___fldiv@a+2)^0,c
  5913   0024D2  0E00               	movlw	0
  5914   0024D4  6E30               	movwf	(___fldiv@a+3)^0,c
  5915   0024D6                     l4641:
  5916   0024D6  502D               	movf	___fldiv@a^0,w,c
  5917   0024D8  102E               	iorwf	(___fldiv@a+1)^0,w,c
  5918   0024DA  102F               	iorwf	(___fldiv@a+2)^0,w,c
  5919   0024DC  1030               	iorwf	(___fldiv@a+3)^0,w,c
  5920   0024DE  A4D8               	btfss	status,2,c
  5921   0024E0  EF74  F012         	goto	u3891
  5922   0024E4  EF76  F012         	goto	u3890
  5923   0024E8                     u3891:
  5924   0024E8  EF8E  F012         	goto	l4653
  5925   0024EC                     u3890:
  5926   0024EC  0E00               	movlw	0
  5927   0024EE  6E29               	movwf	___fldiv@b^0,c
  5928   0024F0  0E00               	movlw	0
  5929   0024F2  6E2A               	movwf	(___fldiv@b+1)^0,c
  5930   0024F4  0E00               	movlw	0
  5931   0024F6  6E2B               	movwf	(___fldiv@b+2)^0,c
  5932   0024F8  0E00               	movlw	0
  5933   0024FA  6E2C               	movwf	(___fldiv@b+3)^0,c
  5934   0024FC  0E80               	movlw	128
  5935   0024FE  122B               	iorwf	(___fldiv@b+2)^0,f,c
  5936   002500  0E7F               	movlw	127
  5937   002502  122C               	iorwf	(___fldiv@b+3)^0,f,c
  5938   002504                     l4647:
  5939   002504  5039               	movf	___fldiv@sign^0,w,c
  5940   002506  122C               	iorwf	(___fldiv@b+3)^0,f,c
  5941   002508  C029  F029         	movff	___fldiv@b,?___fldiv
  5942   00250C  C02A  F02A         	movff	___fldiv@b+1,?___fldiv+1
  5943   002510  C02B  F02B         	movff	___fldiv@b+2,?___fldiv+2
  5944   002514  C02C  F02C         	movff	___fldiv@b+3,?___fldiv+3
  5945   002518  EFD1  F013         	goto	l1397
  5946   00251C                     l4653:
  5947   00251C  5040               	movf	___fldiv@bexp^0,w,c
  5948   00251E  A4D8               	btfss	status,2,c
  5949   002520  EF94  F012         	goto	u3901
  5950   002524  EF96  F012         	goto	u3900
  5951   002528                     u3901:
  5952   002528  EFA0  F012         	goto	l4661
  5953   00252C                     u3900:
  5954   00252C  0E00               	movlw	0
  5955   00252E  6E29               	movwf	?___fldiv^0,c
  5956   002530  0E00               	movlw	0
  5957   002532  6E2A               	movwf	(?___fldiv+1)^0,c
  5958   002534  0E00               	movlw	0
  5959   002536  6E2B               	movwf	(?___fldiv+2)^0,c
  5960   002538  0E00               	movlw	0
  5961   00253A  6E2C               	movwf	(?___fldiv+3)^0,c
  5962   00253C  EFD1  F013         	goto	l1397
  5963   002540                     l4661:
  5964   002540  5041               	movf	___fldiv@aexp^0,w,c
  5965   002542  C040  F031         	movff	___fldiv@bexp,??___fldiv
  5966   002546  6A32               	clrf	(??___fldiv+1)^0,c
  5967   002548  5E31               	subwf	??___fldiv^0,f,c
  5968   00254A  0E00               	movlw	0
  5969   00254C  5A32               	subwfb	(??___fldiv+1)^0,f,c
  5970   00254E  0E7F               	movlw	127
  5971   002550  2431               	addwf	??___fldiv^0,w,c
  5972   002552  6E3A               	movwf	___fldiv@new_exp^0,c
  5973   002554  0E00               	movlw	0
  5974   002556  2032               	addwfc	(??___fldiv+1)^0,w,c
  5975   002558  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  5976   00255A  C029  F035         	movff	___fldiv@b,___fldiv@rem
  5977   00255E  C02A  F036         	movff	___fldiv@b+1,___fldiv@rem+1
  5978   002562  C02B  F037         	movff	___fldiv@b+2,___fldiv@rem+2
  5979   002566  C02C  F038         	movff	___fldiv@b+3,___fldiv@rem+3
  5980   00256A  0E00               	movlw	0
  5981   00256C  6E29               	movwf	___fldiv@b^0,c
  5982   00256E  0E00               	movlw	0
  5983   002570  6E2A               	movwf	(___fldiv@b+1)^0,c
  5984   002572  0E00               	movlw	0
  5985   002574  6E2B               	movwf	(___fldiv@b+2)^0,c
  5986   002576  0E00               	movlw	0
  5987   002578  6E2C               	movwf	(___fldiv@b+3)^0,c
  5988   00257A  0E00               	movlw	0
  5989   00257C  6E3C               	movwf	___fldiv@grs^0,c
  5990   00257E  0E00               	movlw	0
  5991   002580  6E3D               	movwf	(___fldiv@grs+1)^0,c
  5992   002582  0E00               	movlw	0
  5993   002584  6E3E               	movwf	(___fldiv@grs+2)^0,c
  5994   002586  0E00               	movlw	0
  5995   002588  6E3F               	movwf	(___fldiv@grs+3)^0,c
  5996   00258A  0E00               	movlw	0
  5997   00258C  6E41               	movwf	___fldiv@aexp^0,c
  5998   00258E  EF01  F013         	goto	l1399
  5999   002592                     l4671:
  6000   002592  5041               	movf	___fldiv@aexp^0,w,c
  6001   002594  B4D8               	btfsc	status,2,c
  6002   002596  EFCF  F012         	goto	u3911
  6003   00259A  EFD1  F012         	goto	u3910
  6004   00259E                     u3911:
  6005   00259E  EFE8  F012         	goto	l4679
  6006   0025A2                     u3910:
  6007   0025A2  90D8               	bcf	status,0,c
  6008   0025A4  3635               	rlcf	___fldiv@rem^0,f,c
  6009   0025A6  3636               	rlcf	(___fldiv@rem+1)^0,f,c
  6010   0025A8  3637               	rlcf	(___fldiv@rem+2)^0,f,c
  6011   0025AA  3638               	rlcf	(___fldiv@rem+3)^0,f,c
  6012   0025AC  90D8               	bcf	status,0,c
  6013   0025AE  3629               	rlcf	___fldiv@b^0,f,c
  6014   0025B0  362A               	rlcf	(___fldiv@b+1)^0,f,c
  6015   0025B2  362B               	rlcf	(___fldiv@b+2)^0,f,c
  6016   0025B4  362C               	rlcf	(___fldiv@b+3)^0,f,c
  6017   0025B6  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  6018   0025B8  EFE0  F012         	goto	u3921
  6019   0025BC  EFE2  F012         	goto	u3920
  6020   0025C0                     u3921:
  6021   0025C0  EFE3  F012         	goto	l1402
  6022   0025C4                     u3920:
  6023   0025C4  8029               	bsf	___fldiv@b^0,0,c
  6024   0025C6                     l1402:
  6025   0025C6  90D8               	bcf	status,0,c
  6026   0025C8  363C               	rlcf	___fldiv@grs^0,f,c
  6027   0025CA  363D               	rlcf	(___fldiv@grs+1)^0,f,c
  6028   0025CC  363E               	rlcf	(___fldiv@grs+2)^0,f,c
  6029   0025CE  363F               	rlcf	(___fldiv@grs+3)^0,f,c
  6030   0025D0                     l4679:
  6031   0025D0  502D               	movf	___fldiv@a^0,w,c
  6032   0025D2  5C35               	subwf	___fldiv@rem^0,w,c
  6033   0025D4  502E               	movf	(___fldiv@a+1)^0,w,c
  6034   0025D6  5836               	subwfb	(___fldiv@rem+1)^0,w,c
  6035   0025D8  502F               	movf	(___fldiv@a+2)^0,w,c
  6036   0025DA  5837               	subwfb	(___fldiv@rem+2)^0,w,c
  6037   0025DC  5030               	movf	(___fldiv@a+3)^0,w,c
  6038   0025DE  5838               	subwfb	(___fldiv@rem+3)^0,w,c
  6039   0025E0  A0D8               	btfss	status,0,c
  6040   0025E2  EFF5  F012         	goto	u3931
  6041   0025E6  EFF7  F012         	goto	u3930
  6042   0025EA                     u3931:
  6043   0025EA  EF00  F013         	goto	l4685
  6044   0025EE                     u3930:
  6045   0025EE  8C3F               	bsf	(___fldiv@grs+3)^0,6,c
  6046   0025F0  502D               	movf	___fldiv@a^0,w,c
  6047   0025F2  5E35               	subwf	___fldiv@rem^0,f,c
  6048   0025F4  502E               	movf	(___fldiv@a+1)^0,w,c
  6049   0025F6  5A36               	subwfb	(___fldiv@rem+1)^0,f,c
  6050   0025F8  502F               	movf	(___fldiv@a+2)^0,w,c
  6051   0025FA  5A37               	subwfb	(___fldiv@rem+2)^0,f,c
  6052   0025FC  5030               	movf	(___fldiv@a+3)^0,w,c
  6053   0025FE  5A38               	subwfb	(___fldiv@rem+3)^0,f,c
  6054   002600                     l4685:
  6055   002600  2A41               	incf	___fldiv@aexp^0,f,c
  6056   002602                     l1399:
  6057   002602  0E19               	movlw	25
  6058   002604  6441               	cpfsgt	___fldiv@aexp^0,c
  6059   002606  EF07  F013         	goto	u3941
  6060   00260A  EF09  F013         	goto	u3940
  6061   00260E                     u3941:
  6062   00260E  EFC9  F012         	goto	l4671
  6063   002612                     u3940:
  6064   002612  5035               	movf	___fldiv@rem^0,w,c
  6065   002614  1036               	iorwf	(___fldiv@rem+1)^0,w,c
  6066   002616  1037               	iorwf	(___fldiv@rem+2)^0,w,c
  6067   002618  1038               	iorwf	(___fldiv@rem+3)^0,w,c
  6068   00261A  B4D8               	btfsc	status,2,c
  6069   00261C  EF12  F013         	goto	u3951
  6070   002620  EF14  F013         	goto	u3950
  6071   002624                     u3951:
  6072   002624  EF2C  F013         	goto	l4697
  6073   002628                     u3950:
  6074   002628  803C               	bsf	___fldiv@grs^0,0,c
  6075   00262A  EF2C  F013         	goto	l4697
  6076   00262E                     l4691:
  6077   00262E  90D8               	bcf	status,0,c
  6078   002630  3629               	rlcf	___fldiv@b^0,f,c
  6079   002632  362A               	rlcf	(___fldiv@b+1)^0,f,c
  6080   002634  362B               	rlcf	(___fldiv@b+2)^0,f,c
  6081   002636  362C               	rlcf	(___fldiv@b+3)^0,f,c
  6082   002638  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  6083   00263A  EF21  F013         	goto	u3961
  6084   00263E  EF23  F013         	goto	u3960
  6085   002642                     u3961:
  6086   002642  EF24  F013         	goto	l1408
  6087   002646                     u3960:
  6088   002646  8029               	bsf	___fldiv@b^0,0,c
  6089   002648                     l1408:
  6090   002648  90D8               	bcf	status,0,c
  6091   00264A  363C               	rlcf	___fldiv@grs^0,f,c
  6092   00264C  363D               	rlcf	(___fldiv@grs+1)^0,f,c
  6093   00264E  363E               	rlcf	(___fldiv@grs+2)^0,f,c
  6094   002650  363F               	rlcf	(___fldiv@grs+3)^0,f,c
  6095   002652  063A               	decf	___fldiv@new_exp^0,f,c
  6096   002654  A0D8               	btfss	status,0,c
  6097   002656  063B               	decf	(___fldiv@new_exp+1)^0,f,c
  6098   002658                     l4697:
  6099   002658  AE2B               	btfss	(___fldiv@b+2)^0,7,c
  6100   00265A  EF31  F013         	goto	u3971
  6101   00265E  EF33  F013         	goto	u3970
  6102   002662                     u3971:
  6103   002662  EF17  F013         	goto	l4691
  6104   002666                     u3970:
  6105   002666  0E00               	movlw	0
  6106   002668  6E41               	movwf	___fldiv@aexp^0,c
  6107   00266A  AE3F               	btfss	(___fldiv@grs+3)^0,7,c
  6108   00266C  EF3A  F013         	goto	u3981
  6109   002670  EF3C  F013         	goto	u3980
  6110   002674                     u3981:
  6111   002674  EF60  F013         	goto	l1410
  6112   002678                     u3980:
  6113   002678  0EFF               	movlw	255
  6114   00267A  143C               	andwf	___fldiv@grs^0,w,c
  6115   00267C  6E31               	movwf	??___fldiv^0,c
  6116   00267E  0EFF               	movlw	255
  6117   002680  143D               	andwf	(___fldiv@grs+1)^0,w,c
  6118   002682  6E32               	movwf	(??___fldiv+1)^0,c
  6119   002684  0EFF               	movlw	255
  6120   002686  143E               	andwf	(___fldiv@grs+2)^0,w,c
  6121   002688  6E33               	movwf	(??___fldiv+2)^0,c
  6122   00268A  0E7F               	movlw	127
  6123   00268C  143F               	andwf	(___fldiv@grs+3)^0,w,c
  6124   00268E  6E34               	movwf	(??___fldiv+3)^0,c
  6125   002690  5031               	movf	??___fldiv^0,w,c
  6126   002692  1032               	iorwf	(??___fldiv+1)^0,w,c
  6127   002694  1033               	iorwf	(??___fldiv+2)^0,w,c
  6128   002696  1034               	iorwf	(??___fldiv+3)^0,w,c
  6129   002698  B4D8               	btfsc	status,2,c
  6130   00269A  EF51  F013         	goto	u3991
  6131   00269E  EF53  F013         	goto	u3990
  6132   0026A2                     u3991:
  6133   0026A2  EF57  F013         	goto	l1411
  6134   0026A6                     u3990:
  6135   0026A6                     l4705:
  6136   0026A6  0E01               	movlw	1
  6137   0026A8  6E41               	movwf	___fldiv@aexp^0,c
  6138   0026AA  EF60  F013         	goto	l1410
  6139   0026AE                     l1411:
  6140   0026AE  A029               	btfss	___fldiv@b^0,0,c
  6141   0026B0  EF5C  F013         	goto	u4001
  6142   0026B4  EF5E  F013         	goto	u4000
  6143   0026B8                     u4001:
  6144   0026B8  EF60  F013         	goto	l1410
  6145   0026BC                     u4000:
  6146   0026BC  EF53  F013         	goto	l4705
  6147   0026C0                     l1410:
  6148   0026C0  5041               	movf	___fldiv@aexp^0,w,c
  6149   0026C2  B4D8               	btfsc	status,2,c
  6150   0026C4  EF66  F013         	goto	u4011
  6151   0026C8  EF68  F013         	goto	u4010
  6152   0026CC                     u4011:
  6153   0026CC  EF8C  F013         	goto	l4717
  6154   0026D0                     u4010:
  6155   0026D0  0E01               	movlw	1
  6156   0026D2  2629               	addwf	___fldiv@b^0,f,c
  6157   0026D4  0E00               	movlw	0
  6158   0026D6  222A               	addwfc	(___fldiv@b+1)^0,f,c
  6159   0026D8  222B               	addwfc	(___fldiv@b+2)^0,f,c
  6160   0026DA  222C               	addwfc	(___fldiv@b+3)^0,f,c
  6161   0026DC  A02C               	btfss	(___fldiv@b+3)^0,0,c
  6162   0026DE  EF73  F013         	goto	u4021
  6163   0026E2  EF75  F013         	goto	u4020
  6164   0026E6                     u4021:
  6165   0026E6  EF8C  F013         	goto	l4717
  6166   0026EA                     u4020:
  6167   0026EA  C029  F031         	movff	___fldiv@b,??___fldiv
  6168   0026EE  C02A  F032         	movff	___fldiv@b+1,??___fldiv+1
  6169   0026F2  C02B  F033         	movff	___fldiv@b+2,??___fldiv+2
  6170   0026F6  C02C  F034         	movff	___fldiv@b+3,??___fldiv+3
  6171   0026FA  3434               	rlcf	(??___fldiv+3)^0,w,c
  6172   0026FC  3234               	rrcf	(??___fldiv+3)^0,f,c
  6173   0026FE  3233               	rrcf	(??___fldiv+2)^0,f,c
  6174   002700  3232               	rrcf	(??___fldiv+1)^0,f,c
  6175   002702  3231               	rrcf	??___fldiv^0,f,c
  6176   002704  C031  F029         	movff	??___fldiv,___fldiv@b
  6177   002708  C032  F02A         	movff	??___fldiv+1,___fldiv@b+1
  6178   00270C  C033  F02B         	movff	??___fldiv+2,___fldiv@b+2
  6179   002710  C034  F02C         	movff	??___fldiv+3,___fldiv@b+3
  6180   002714  4A3A               	infsnz	___fldiv@new_exp^0,f,c
  6181   002716  2A3B               	incf	(___fldiv@new_exp+1)^0,f,c
  6182   002718                     l4717:
  6183   002718  BE3B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6184   00271A  EF97  F013         	goto	u4031
  6185   00271E  503B               	movf	(___fldiv@new_exp+1)^0,w,c
  6186   002720  E108               	bnz	u4030
  6187   002722  283A               	incf	___fldiv@new_exp^0,w,c
  6188   002724  A0D8               	btfss	status,0,c
  6189   002726  EF97  F013         	goto	u4031
  6190   00272A  EF99  F013         	goto	u4030
  6191   00272E                     u4031:
  6192   00272E  EFA4  F013         	goto	l4721
  6193   002732                     u4030:
  6194   002732  0E00               	movlw	0
  6195   002734  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  6196   002736  683A               	setf	___fldiv@new_exp^0,c
  6197   002738  0E00               	movlw	0
  6198   00273A  6E29               	movwf	___fldiv@b^0,c
  6199   00273C  0E00               	movlw	0
  6200   00273E  6E2A               	movwf	(___fldiv@b+1)^0,c
  6201   002740  0E00               	movlw	0
  6202   002742  6E2B               	movwf	(___fldiv@b+2)^0,c
  6203   002744  0E00               	movlw	0
  6204   002746  6E2C               	movwf	(___fldiv@b+3)^0,c
  6205   002748                     l4721:
  6206   002748  BE3B               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6207   00274A  EFB1  F013         	goto	u4040
  6208   00274E  503B               	movf	(___fldiv@new_exp+1)^0,w,c
  6209   002750  E106               	bnz	u4041
  6210   002752  043A               	decf	___fldiv@new_exp^0,w,c
  6211   002754  B0D8               	btfsc	status,0,c
  6212   002756  EFAF  F013         	goto	u4041
  6213   00275A  EFB1  F013         	goto	u4040
  6214   00275E                     u4041:
  6215   00275E  EFBF  F013         	goto	l4725
  6216   002762                     u4040:
  6217   002762  0E00               	movlw	0
  6218   002764  6E3B               	movwf	(___fldiv@new_exp+1)^0,c
  6219   002766  0E00               	movlw	0
  6220   002768  6E3A               	movwf	___fldiv@new_exp^0,c
  6221   00276A  0E00               	movlw	0
  6222   00276C  6E29               	movwf	___fldiv@b^0,c
  6223   00276E  0E00               	movlw	0
  6224   002770  6E2A               	movwf	(___fldiv@b+1)^0,c
  6225   002772  0E00               	movlw	0
  6226   002774  6E2B               	movwf	(___fldiv@b+2)^0,c
  6227   002776  0E00               	movlw	0
  6228   002778  6E2C               	movwf	(___fldiv@b+3)^0,c
  6229   00277A  0E00               	movlw	0
  6230   00277C  6E39               	movwf	___fldiv@sign^0,c
  6231   00277E                     l4725:
  6232   00277E  C03A  F040         	movff	___fldiv@new_exp,___fldiv@bexp
  6233   002782  A040               	btfss	___fldiv@bexp^0,0,c
  6234   002784  EFC6  F013         	goto	u4051
  6235   002788  EFC8  F013         	goto	u4050
  6236   00278C                     u4051:
  6237   00278C  EFCB  F013         	goto	l4731
  6238   002790                     u4050:
  6239   002790  8E2B               	bsf	(___fldiv@b+2)^0,7,c
  6240   002792  EFCC  F013         	goto	l4733
  6241   002796                     l4731:
  6242   002796  9E2B               	bcf	(___fldiv@b+2)^0,7,c
  6243   002798                     l4733:
  6244   002798  90D8               	bcf	status,0,c
  6245   00279A  3040               	rrcf	___fldiv@bexp^0,w,c
  6246   00279C  6E2C               	movwf	(___fldiv@b+3)^0,c
  6247   00279E  EF82  F012         	goto	l4647
  6248   0027A2                     l1397:
  6249   0027A2  0012               	return		;funcret
  6250   0027A4                     __end_of___fldiv:
  6251                           	callstack 0
  6252                           
  6253 ;; *************** function _initUSART4 *****************
  6254 ;; Defined at:
  6255 ;;		line 14 in file "serial.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;		None
  6258 ;; Auto vars:     Size  Location     Type
  6259 ;;		None
  6260 ;; Return value:  Size  Location     Type
  6261 ;;                  1    wreg      void 
  6262 ;; Registers used:
  6263 ;;		wreg, status,2
  6264 ;; Tracked objects:
  6265 ;;		On entry : 0/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6273 ;;Total ram usage:        0 bytes
  6274 ;; Hardware stack levels used: 1
  6275 ;; Hardware stack levels required when called: 1
  6276 ;; This function calls:
  6277 ;;		Nothing
  6278 ;; This function is called by:
  6279 ;;		_main
  6280 ;; This function uses a non-reentrant model
  6281 ;;
  6282                           
  6283                           	psect	text16
  6284   004B40                     __ptext16:
  6285                           	callstack 0
  6286   004B40                     _initUSART4:
  6287                           	callstack 29
  6288   004B40                     
  6289                           ;serial.c: 15:     RC0PPS = 0x12;
  6290   004B40  0E12               	movlw	18
  6291   004B42  010E               	movlb	14	; () banked
  6292   004B44  6F62               	movwf	98,b	;volatile
  6293                           
  6294                           ;serial.c: 16:     RX4PPS = 0x11;
  6295   004B46  0E11               	movlw	17
  6296   004B48  6F15               	movwf	21,b	;volatile
  6297   004B4A                     
  6298                           ; BSR set to: 14
  6299                           ;serial.c: 17:     BAUD4CONbits.BRG16 = 0;
  6300   004B4A  97E9               	bcf	233,3,b	;volatile
  6301   004B4C                     
  6302                           ; BSR set to: 14
  6303                           ;serial.c: 18:     TX4STAbits.BRGH = 0;
  6304   004B4C  95E8               	bcf	232,2,b	;volatile
  6305                           
  6306                           ;serial.c: 19:     SP4BRGL = 51;
  6307   004B4E  0E33               	movlw	51
  6308   004B50  6FE5               	movwf	229,b	;volatile
  6309                           
  6310                           ;serial.c: 20:     SP4BRGH = 0;
  6311   004B52  0E00               	movlw	0
  6312   004B54  6FE6               	movwf	230,b	;volatile
  6313   004B56                     
  6314                           ; BSR set to: 14
  6315                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  6316   004B56  89E7               	bsf	231,4,b	;volatile
  6317   004B58                     
  6318                           ; BSR set to: 14
  6319                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  6320   004B58  8BE8               	bsf	232,5,b	;volatile
  6321   004B5A                     
  6322                           ; BSR set to: 14
  6323                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  6324   004B5A  8FE7               	bsf	231,7,b	;volatile
  6325   004B5C                     
  6326                           ; BSR set to: 14
  6327   004B5C  0012               	return		;funcret
  6328   004B5E                     __end_of_initUSART4:
  6329                           	callstack 0
  6330                           
  6331 ;; *************** function _initDCmotorsPWM *****************
  6332 ;; Defined at:
  6333 ;;		line 5 in file "dc_motor.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;		None
  6338 ;; Return value:  Size  Location     Type
  6339 ;;                  1    wreg      void 
  6340 ;; Registers used:
  6341 ;;		wreg, status,2
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6347 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6350 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6351 ;;Total ram usage:        2 bytes
  6352 ;; Hardware stack levels used: 1
  6353 ;; Hardware stack levels required when called: 1
  6354 ;; This function calls:
  6355 ;;		Nothing
  6356 ;; This function is called by:
  6357 ;;		_main
  6358 ;; This function uses a non-reentrant model
  6359 ;;
  6360                           
  6361                           	psect	text17
  6362   003FA0                     __ptext17:
  6363                           	callstack 0
  6364   003FA0                     _initDCmotorsPWM:
  6365                           	callstack 29
  6366   003FA0                     
  6367                           ;dc_motor.c: 7:     TRISEbits.TRISE2=0;
  6368   003FA0  9485               	bcf	133,2,c	;volatile
  6369                           
  6370                           ;dc_motor.c: 8:     TRISCbits.TRISC7=0;
  6371   003FA2  9E83               	bcf	131,7,c	;volatile
  6372                           
  6373                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  6374   003FA4  9885               	bcf	133,4,c	;volatile
  6375                           
  6376                           ;dc_motor.c: 10:     TRISGbits.TRISG6=0;
  6377   003FA6  9C87               	bcf	135,6,c	;volatile
  6378                           
  6379                           ;dc_motor.c: 12:     LATEbits.LATE2=0;
  6380   003FA8  947D               	bcf	125,2,c	;volatile
  6381                           
  6382                           ;dc_motor.c: 13:     LATCbits.LATC7=0;
  6383   003FAA  9E7B               	bcf	123,7,c	;volatile
  6384                           
  6385                           ;dc_motor.c: 14:     LATEbits.LATE4=0;
  6386   003FAC  987D               	bcf	125,4,c	;volatile
  6387                           
  6388                           ;dc_motor.c: 15:     LATGbits.LATG6=0;
  6389   003FAE  9C7F               	bcf	127,6,c	;volatile
  6390   003FB0                     
  6391                           ;dc_motor.c: 18:     RE2PPS=0x05;
  6392   003FB0  0E05               	movlw	5
  6393   003FB2  010E               	movlb	14	; () banked
  6394   003FB4  6F74               	movwf	116,b	;volatile
  6395                           
  6396                           ;dc_motor.c: 19:     RE4PPS=0x06;
  6397   003FB6  0E06               	movlw	6
  6398   003FB8  6F76               	movwf	118,b	;volatile
  6399                           
  6400                           ;dc_motor.c: 20:     RC7PPS=0x07;
  6401   003FBA  0E07               	movlw	7
  6402   003FBC  6F69               	movwf	105,b	;volatile
  6403                           
  6404                           ;dc_motor.c: 21:     RG6PPS=0x08;
  6405   003FBE  0E08               	movlw	8
  6406   003FC0  6F88               	movwf	136,b	;volatile
  6407                           
  6408                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  6409   003FC2  50BD               	movf	189,w,c	;volatile
  6410   003FC4  0B8F               	andlw	-113
  6411   003FC6  0940               	iorlw	64
  6412   003FC8  6EBD               	movwf	189,c	;volatile
  6413                           
  6414                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  6415   003FCA  0EE0               	movlw	-32
  6416   003FCC  16BE               	andwf	190,f,c	;volatile
  6417                           
  6418                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  6419   003FCE  50BF               	movf	191,w,c	;volatile
  6420   003FD0  0BF0               	andlw	-16
  6421   003FD2  0901               	iorlw	1
  6422   003FD4  6EBF               	movwf	191,c	;volatile
  6423   003FD6                     
  6424                           ; BSR set to: 14
  6425                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  6426   003FD6  C002  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  6427   003FDA                     
  6428                           ; BSR set to: 14
  6429                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  6430   003FDA  8EBD               	bsf	189,7,c	;volatile
  6431                           
  6432                           ;dc_motor.c: 35:     CCPR1H=0;
  6433   003FDC  0E00               	movlw	0
  6434   003FDE  6EAA               	movwf	170,c	;volatile
  6435                           
  6436                           ;dc_motor.c: 36:     CCPR2H=0;
  6437   003FE0  0E00               	movlw	0
  6438   003FE2  6EA6               	movwf	166,c	;volatile
  6439                           
  6440                           ;dc_motor.c: 37:     CCPR3H=0;
  6441   003FE4  0E00               	movlw	0
  6442   003FE6  010F               	movlb	15	; () banked
  6443   003FE8  6F25               	movwf	37,b	;volatile
  6444                           
  6445                           ;dc_motor.c: 38:     CCPR4H=0;
  6446   003FEA  0E00               	movlw	0
  6447   003FEC  6F21               	movwf	33,b	;volatile
  6448                           
  6449                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  6450   003FEE  0EFC               	movlw	-4
  6451   003FF0  16AD               	andwf	173,f,c	;volatile
  6452                           
  6453                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  6454   003FF2  0EF3               	movlw	-13
  6455   003FF4  16AD               	andwf	173,f,c	;volatile
  6456                           
  6457                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  6458   003FF6  0ECF               	movlw	-49
  6459   003FF8  16AD               	andwf	173,f,c	;volatile
  6460                           
  6461                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  6462   003FFA  0E3F               	movlw	-193
  6463   003FFC  16AD               	andwf	173,f,c	;volatile
  6464   003FFE                     
  6465                           ; BSR set to: 15
  6466                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  6467   003FFE  88AB               	bsf	171,4,c	;volatile
  6468                           
  6469                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  6470   004000  50AB               	movf	171,w,c	;volatile
  6471   004002  0BF0               	andlw	-16
  6472   004004  090C               	iorlw	12
  6473   004006  6EAB               	movwf	171,c	;volatile
  6474   004008                     
  6475                           ; BSR set to: 15
  6476                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  6477   004008  8EAB               	bsf	171,7,c	;volatile
  6478   00400A                     
  6479                           ; BSR set to: 15
  6480                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  6481   00400A  88A7               	bsf	167,4,c	;volatile
  6482                           
  6483                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  6484   00400C  50A7               	movf	167,w,c	;volatile
  6485   00400E  0BF0               	andlw	-16
  6486   004010  090C               	iorlw	12
  6487   004012  6EA7               	movwf	167,c	;volatile
  6488   004014                     
  6489                           ; BSR set to: 15
  6490                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  6491   004014  8EA7               	bsf	167,7,c	;volatile
  6492   004016                     
  6493                           ; BSR set to: 15
  6494                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  6495   004016  8926               	bsf	38,4,b	;volatile
  6496                           
  6497                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  6498   004018  5126               	movf	38,w,b	;volatile
  6499   00401A  0BF0               	andlw	-16
  6500   00401C  090C               	iorlw	12
  6501   00401E  6F26               	movwf	38,b	;volatile
  6502   004020                     
  6503                           ; BSR set to: 15
  6504                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  6505   004020  8F26               	bsf	38,7,b	;volatile
  6506   004022                     
  6507                           ; BSR set to: 15
  6508                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  6509   004022  8922               	bsf	34,4,b	;volatile
  6510                           
  6511                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  6512   004024  5122               	movf	34,w,b	;volatile
  6513   004026  0BF0               	andlw	-16
  6514   004028  090C               	iorlw	12
  6515   00402A  6F22               	movwf	34,b	;volatile
  6516   00402C                     
  6517                           ; BSR set to: 15
  6518                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  6519   00402C  8F22               	bsf	34,7,b	;volatile
  6520   00402E                     
  6521                           ; BSR set to: 15
  6522   00402E  0012               	return		;funcret
  6523   004030                     __end_of_initDCmotorsPWM:
  6524                           	callstack 0
  6525                           
  6526 ;; *************** function _get16bitTMR0val *****************
  6527 ;; Defined at:
  6528 ;;		line 34 in file "timers.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;  path_step       2   27[COMRAM] unsigned int 
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;  time_ms         4   33[COMRAM] long 
  6533 ;;  combined_val    2   37[COMRAM] int 
  6534 ;; Return value:  Size  Location     Type
  6535 ;;                  2   27[COMRAM] unsigned int 
  6536 ;; Registers used:
  6537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6538 ;; Tracked objects:
  6539 ;;		On entry : 0/0
  6540 ;;		On exit  : 0/0
  6541 ;;		Unchanged: 0/0
  6542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6543 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6544 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6545 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6546 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6547 ;;Total ram usage:       12 bytes
  6548 ;; Hardware stack levels used: 1
  6549 ;; Hardware stack levels required when called: 2
  6550 ;; This function calls:
  6551 ;;		___aldiv
  6552 ;;		___lmul
  6553 ;;		_logAction
  6554 ;; This function is called by:
  6555 ;;		_main
  6556 ;; This function uses a non-reentrant model
  6557 ;;
  6558                           
  6559                           	psect	text18
  6560   003E6C                     __ptext18:
  6561                           	callstack 0
  6562   003E6C                     _get16bitTMR0val:
  6563                           	callstack 28
  6564   003E6C                     
  6565                           ;timers.c: 34: unsigned int get16bitTMR0val(unsigned int path_step);timers.c: 35: {;time
      +                          rs.c: 36:     int combined_value;;timers.c: 37:     combined_value = TMR0L | (TMR0H << 8
      +                          );
  6566   003E6C  50D4               	movf	212,w,c	;volatile
  6567   003E6E  6E1F               	movwf	(??_get16bitTMR0val+1)^0,c
  6568   003E70  6A1E               	clrf	??_get16bitTMR0val^0,c
  6569   003E72  50D3               	movf	211,w,c	;volatile
  6570   003E74  6E20               	movwf	(??_get16bitTMR0val+2)^0,c
  6571   003E76  6A21               	clrf	(??_get16bitTMR0val+3)^0,c
  6572   003E78  501E               	movf	??_get16bitTMR0val^0,w,c
  6573   003E7A  1020               	iorwf	(??_get16bitTMR0val+2)^0,w,c
  6574   003E7C  6E26               	movwf	get16bitTMR0val@combined_value^0,c
  6575   003E7E  501F               	movf	(??_get16bitTMR0val+1)^0,w,c
  6576   003E80  1021               	iorwf	(??_get16bitTMR0val+3)^0,w,c
  6577   003E82  6E27               	movwf	(get16bitTMR0val@combined_value+1)^0,c
  6578   003E84                     
  6579                           ;timers.c: 38:     long time_ms = combined_value*65535*4*8192/64000000;
  6580   003E84  C026  F002         	movff	get16bitTMR0val@combined_value,___lmul@multiplier
  6581   003E88  C027  F003         	movff	get16bitTMR0val@combined_value+1,___lmul@multiplier+1
  6582   003E8C  0E00               	movlw	0
  6583   003E8E  BE03               	btfsc	(___lmul@multiplier+1)^0,7,c
  6584   003E90  0EFF               	movlw	-1
  6585   003E92  6E04               	movwf	(___lmul@multiplier+2)^0,c
  6586   003E94  6E05               	movwf	(___lmul@multiplier+3)^0,c
  6587   003E96  0E00               	movlw	0
  6588   003E98  6E06               	movwf	___lmul@multiplicand^0,c
  6589   003E9A  0E80               	movlw	128
  6590   003E9C  6E07               	movwf	(___lmul@multiplicand+1)^0,c
  6591   003E9E  0EFF               	movlw	255
  6592   003EA0  6E08               	movwf	(___lmul@multiplicand+2)^0,c
  6593   003EA2  0E7F               	movlw	127
  6594   003EA4  6E09               	movwf	(___lmul@multiplicand+3)^0,c
  6595   003EA6  EC52  F021         	call	___lmul	;wreg free
  6596   003EAA  C002  F00E         	movff	?___lmul,___aldiv@dividend
  6597   003EAE  C003  F00F         	movff	?___lmul+1,___aldiv@dividend+1
  6598   003EB2  C004  F010         	movff	?___lmul+2,___aldiv@dividend+2
  6599   003EB6  C005  F011         	movff	?___lmul+3,___aldiv@dividend+3
  6600   003EBA  0E00               	movlw	0
  6601   003EBC  6E12               	movwf	___aldiv@divisor^0,c
  6602   003EBE  0E90               	movlw	144
  6603   003EC0  6E13               	movwf	(___aldiv@divisor+1)^0,c
  6604   003EC2  0ED0               	movlw	208
  6605   003EC4  6E14               	movwf	(___aldiv@divisor+2)^0,c
  6606   003EC6  0E03               	movlw	3
  6607   003EC8  6E15               	movwf	(___aldiv@divisor+3)^0,c
  6608   003ECA  ECA0  F01A         	call	___aldiv	;wreg free
  6609   003ECE  C00E  F022         	movff	?___aldiv,get16bitTMR0val@time_ms
  6610   003ED2  C00F  F023         	movff	?___aldiv+1,get16bitTMR0val@time_ms+1
  6611   003ED6  C010  F024         	movff	?___aldiv+2,get16bitTMR0val@time_ms+2
  6612   003EDA  C011  F025         	movff	?___aldiv+3,get16bitTMR0val@time_ms+3
  6613   003EDE                     
  6614                           ;timers.c: 40:     logAction(0,time_ms, path_step);
  6615   003EDE  C022  F002         	movff	get16bitTMR0val@time_ms,logAction@newTime
  6616   003EE2  C023  F003         	movff	get16bitTMR0val@time_ms+1,logAction@newTime+1
  6617   003EE6  C024  F004         	movff	get16bitTMR0val@time_ms+2,logAction@newTime+2
  6618   003EEA  C025  F005         	movff	get16bitTMR0val@time_ms+3,logAction@newTime+3
  6619   003EEE  C01C  F006         	movff	get16bitTMR0val@path_step,logAction@path_step
  6620   003EF2  C01D  F007         	movff	get16bitTMR0val@path_step+1,logAction@path_step+1
  6621   003EF6  0E00               	movlw	0
  6622   003EF8  EC87  F021         	call	_logAction
  6623   003EFC                     
  6624                           ;timers.c: 41:     path_step++;
  6625   003EFC  4A1C               	infsnz	get16bitTMR0val@path_step^0,f,c
  6626   003EFE  2A1D               	incf	(get16bitTMR0val@path_step+1)^0,f,c
  6627   003F00                     
  6628                           ;timers.c: 43:     return path_step;
  6629   003F00  C01C  F01C         	movff	get16bitTMR0val@path_step,?_get16bitTMR0val
  6630   003F04  C01D  F01D         	movff	get16bitTMR0val@path_step+1,?_get16bitTMR0val+1
  6631   003F08  0012               	return		;funcret
  6632   003F0A                     __end_of_get16bitTMR0val:
  6633                           	callstack 0
  6634                           
  6635 ;; *************** function ___lmul *****************
  6636 ;; Defined at:
  6637 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;  multiplier      4    1[COMRAM] unsigned long 
  6640 ;;  multiplicand    4    5[COMRAM] unsigned long 
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;  product         4    9[COMRAM] unsigned long 
  6643 ;; Return value:  Size  Location     Type
  6644 ;;                  4    1[COMRAM] unsigned long 
  6645 ;; Registers used:
  6646 ;;		wreg, status,2, status,0
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6652 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6653 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6655 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6656 ;;Total ram usage:       12 bytes
  6657 ;; Hardware stack levels used: 1
  6658 ;; Hardware stack levels required when called: 1
  6659 ;; This function calls:
  6660 ;;		Nothing
  6661 ;; This function is called by:
  6662 ;;		_get16bitTMR0val
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           	psect	text19
  6667   0042A4                     __ptext19:
  6668                           	callstack 0
  6669   0042A4                     ___lmul:
  6670                           	callstack 28
  6671   0042A4  0E00               	movlw	0
  6672   0042A6  6E0A               	movwf	___lmul@product^0,c
  6673   0042A8  0E00               	movlw	0
  6674   0042AA  6E0B               	movwf	(___lmul@product+1)^0,c
  6675   0042AC  0E00               	movlw	0
  6676   0042AE  6E0C               	movwf	(___lmul@product+2)^0,c
  6677   0042B0  0E00               	movlw	0
  6678   0042B2  6E0D               	movwf	(___lmul@product+3)^0,c
  6679   0042B4                     l5031:
  6680   0042B4  A002               	btfss	___lmul@multiplier^0,0,c
  6681   0042B6  EF5F  F021         	goto	u4371
  6682   0042BA  EF61  F021         	goto	u4370
  6683   0042BE                     u4371:
  6684   0042BE  EF69  F021         	goto	l5035
  6685   0042C2                     u4370:
  6686   0042C2  5006               	movf	___lmul@multiplicand^0,w,c
  6687   0042C4  260A               	addwf	___lmul@product^0,f,c
  6688   0042C6  5007               	movf	(___lmul@multiplicand+1)^0,w,c
  6689   0042C8  220B               	addwfc	(___lmul@product+1)^0,f,c
  6690   0042CA  5008               	movf	(___lmul@multiplicand+2)^0,w,c
  6691   0042CC  220C               	addwfc	(___lmul@product+2)^0,f,c
  6692   0042CE  5009               	movf	(___lmul@multiplicand+3)^0,w,c
  6693   0042D0  220D               	addwfc	(___lmul@product+3)^0,f,c
  6694   0042D2                     l5035:
  6695   0042D2  90D8               	bcf	status,0,c
  6696   0042D4  3606               	rlcf	___lmul@multiplicand^0,f,c
  6697   0042D6  3607               	rlcf	(___lmul@multiplicand+1)^0,f,c
  6698   0042D8  3608               	rlcf	(___lmul@multiplicand+2)^0,f,c
  6699   0042DA  3609               	rlcf	(___lmul@multiplicand+3)^0,f,c
  6700   0042DC  90D8               	bcf	status,0,c
  6701   0042DE  3205               	rrcf	(___lmul@multiplier+3)^0,f,c
  6702   0042E0  3204               	rrcf	(___lmul@multiplier+2)^0,f,c
  6703   0042E2  3203               	rrcf	(___lmul@multiplier+1)^0,f,c
  6704   0042E4  3202               	rrcf	___lmul@multiplier^0,f,c
  6705   0042E6  5002               	movf	___lmul@multiplier^0,w,c
  6706   0042E8  1003               	iorwf	(___lmul@multiplier+1)^0,w,c
  6707   0042EA  1004               	iorwf	(___lmul@multiplier+2)^0,w,c
  6708   0042EC  1005               	iorwf	(___lmul@multiplier+3)^0,w,c
  6709   0042EE  A4D8               	btfss	status,2,c
  6710   0042F0  EF7C  F021         	goto	u4381
  6711   0042F4  EF7E  F021         	goto	u4380
  6712   0042F8                     u4381:
  6713   0042F8  EF5A  F021         	goto	l5031
  6714   0042FC                     u4380:
  6715   0042FC  C00A  F002         	movff	___lmul@product,?___lmul
  6716   004300  C00B  F003         	movff	___lmul@product+1,?___lmul+1
  6717   004304  C00C  F004         	movff	___lmul@product+2,?___lmul+2
  6718   004308  C00D  F005         	movff	___lmul@product+3,?___lmul+3
  6719   00430C  0012               	return		;funcret
  6720   00430E                     __end_of___lmul:
  6721                           	callstack 0
  6722                           
  6723 ;; *************** function ___aldiv *****************
  6724 ;; Defined at:
  6725 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  6726 ;; Parameters:    Size  Location     Type
  6727 ;;  dividend        4   13[COMRAM] long 
  6728 ;;  divisor         4   17[COMRAM] long 
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;  quotient        4   23[COMRAM] long 
  6731 ;;  sign            1   22[COMRAM] unsigned char 
  6732 ;;  counter         1   21[COMRAM] unsigned char 
  6733 ;; Return value:  Size  Location     Type
  6734 ;;                  4   13[COMRAM] long 
  6735 ;; Registers used:
  6736 ;;		wreg, status,2, status,0
  6737 ;; Tracked objects:
  6738 ;;		On entry : 0/0
  6739 ;;		On exit  : 0/0
  6740 ;;		Unchanged: 0/0
  6741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6742 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6743 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6745 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6746 ;;Total ram usage:       14 bytes
  6747 ;; Hardware stack levels used: 1
  6748 ;; Hardware stack levels required when called: 1
  6749 ;; This function calls:
  6750 ;;		Nothing
  6751 ;; This function is called by:
  6752 ;;		_get16bitTMR0val
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           	psect	text20
  6757   003540                     __ptext20:
  6758                           	callstack 0
  6759   003540                     ___aldiv:
  6760                           	callstack 28
  6761   003540  0E00               	movlw	0
  6762   003542  6E17               	movwf	___aldiv@sign^0,c
  6763   003544  BE15               	btfsc	(___aldiv@divisor+3)^0,7,c
  6764   003546  EFA9  F01A         	goto	u4390
  6765   00354A  EFA7  F01A         	goto	u4391
  6766   00354E                     u4391:
  6767   00354E  EFB3  F01A         	goto	l5047
  6768   003552                     u4390:
  6769   003552  1E15               	comf	(___aldiv@divisor+3)^0,f,c
  6770   003554  1E14               	comf	(___aldiv@divisor+2)^0,f,c
  6771   003556  1E13               	comf	(___aldiv@divisor+1)^0,f,c
  6772   003558  6C12               	negf	___aldiv@divisor^0,c
  6773   00355A  0E00               	movlw	0
  6774   00355C  2213               	addwfc	(___aldiv@divisor+1)^0,f,c
  6775   00355E  2214               	addwfc	(___aldiv@divisor+2)^0,f,c
  6776   003560  2215               	addwfc	(___aldiv@divisor+3)^0,f,c
  6777   003562  0E01               	movlw	1
  6778   003564  6E17               	movwf	___aldiv@sign^0,c
  6779   003566                     l5047:
  6780   003566  BE11               	btfsc	(___aldiv@dividend+3)^0,7,c
  6781   003568  EFBA  F01A         	goto	u4400
  6782   00356C  EFB8  F01A         	goto	u4401
  6783   003570                     u4401:
  6784   003570  EFC4  F01A         	goto	l5053
  6785   003574                     u4400:
  6786   003574  1E11               	comf	(___aldiv@dividend+3)^0,f,c
  6787   003576  1E10               	comf	(___aldiv@dividend+2)^0,f,c
  6788   003578  1E0F               	comf	(___aldiv@dividend+1)^0,f,c
  6789   00357A  6C0E               	negf	___aldiv@dividend^0,c
  6790   00357C  0E00               	movlw	0
  6791   00357E  220F               	addwfc	(___aldiv@dividend+1)^0,f,c
  6792   003580  2210               	addwfc	(___aldiv@dividend+2)^0,f,c
  6793   003582  2211               	addwfc	(___aldiv@dividend+3)^0,f,c
  6794   003584  0E01               	movlw	1
  6795   003586  1A17               	xorwf	___aldiv@sign^0,f,c
  6796   003588                     l5053:
  6797   003588  0E00               	movlw	0
  6798   00358A  6E18               	movwf	___aldiv@quotient^0,c
  6799   00358C  0E00               	movlw	0
  6800   00358E  6E19               	movwf	(___aldiv@quotient+1)^0,c
  6801   003590  0E00               	movlw	0
  6802   003592  6E1A               	movwf	(___aldiv@quotient+2)^0,c
  6803   003594  0E00               	movlw	0
  6804   003596  6E1B               	movwf	(___aldiv@quotient+3)^0,c
  6805   003598  5012               	movf	___aldiv@divisor^0,w,c
  6806   00359A  1013               	iorwf	(___aldiv@divisor+1)^0,w,c
  6807   00359C  1014               	iorwf	(___aldiv@divisor+2)^0,w,c
  6808   00359E  1015               	iorwf	(___aldiv@divisor+3)^0,w,c
  6809   0035A0  B4D8               	btfsc	status,2,c
  6810   0035A2  EFD5  F01A         	goto	u4411
  6811   0035A6  EFD7  F01A         	goto	u4410
  6812   0035AA                     u4411:
  6813   0035AA  EF0D  F01B         	goto	l5075
  6814   0035AE                     u4410:
  6815   0035AE  0E01               	movlw	1
  6816   0035B0  6E16               	movwf	___aldiv@counter^0,c
  6817   0035B2  EFE1  F01A         	goto	l5061
  6818   0035B6                     l5059:
  6819   0035B6  90D8               	bcf	status,0,c
  6820   0035B8  3612               	rlcf	___aldiv@divisor^0,f,c
  6821   0035BA  3613               	rlcf	(___aldiv@divisor+1)^0,f,c
  6822   0035BC  3614               	rlcf	(___aldiv@divisor+2)^0,f,c
  6823   0035BE  3615               	rlcf	(___aldiv@divisor+3)^0,f,c
  6824   0035C0  2A16               	incf	___aldiv@counter^0,f,c
  6825   0035C2                     l5061:
  6826   0035C2  AE15               	btfss	(___aldiv@divisor+3)^0,7,c
  6827   0035C4  EFE6  F01A         	goto	u4421
  6828   0035C8  EFE8  F01A         	goto	u4420
  6829   0035CC                     u4421:
  6830   0035CC  EFDB  F01A         	goto	l5059
  6831   0035D0                     u4420:
  6832   0035D0                     l5063:
  6833   0035D0  90D8               	bcf	status,0,c
  6834   0035D2  3618               	rlcf	___aldiv@quotient^0,f,c
  6835   0035D4  3619               	rlcf	(___aldiv@quotient+1)^0,f,c
  6836   0035D6  361A               	rlcf	(___aldiv@quotient+2)^0,f,c
  6837   0035D8  361B               	rlcf	(___aldiv@quotient+3)^0,f,c
  6838   0035DA  5012               	movf	___aldiv@divisor^0,w,c
  6839   0035DC  5C0E               	subwf	___aldiv@dividend^0,w,c
  6840   0035DE  5013               	movf	(___aldiv@divisor+1)^0,w,c
  6841   0035E0  580F               	subwfb	(___aldiv@dividend+1)^0,w,c
  6842   0035E2  5014               	movf	(___aldiv@divisor+2)^0,w,c
  6843   0035E4  5810               	subwfb	(___aldiv@dividend+2)^0,w,c
  6844   0035E6  5015               	movf	(___aldiv@divisor+3)^0,w,c
  6845   0035E8  5811               	subwfb	(___aldiv@dividend+3)^0,w,c
  6846   0035EA  A0D8               	btfss	status,0,c
  6847   0035EC  EFFA  F01A         	goto	u4431
  6848   0035F0  EFFC  F01A         	goto	u4430
  6849   0035F4                     u4431:
  6850   0035F4  EF05  F01B         	goto	l5071
  6851   0035F8                     u4430:
  6852   0035F8  5012               	movf	___aldiv@divisor^0,w,c
  6853   0035FA  5E0E               	subwf	___aldiv@dividend^0,f,c
  6854   0035FC  5013               	movf	(___aldiv@divisor+1)^0,w,c
  6855   0035FE  5A0F               	subwfb	(___aldiv@dividend+1)^0,f,c
  6856   003600  5014               	movf	(___aldiv@divisor+2)^0,w,c
  6857   003602  5A10               	subwfb	(___aldiv@dividend+2)^0,f,c
  6858   003604  5015               	movf	(___aldiv@divisor+3)^0,w,c
  6859   003606  5A11               	subwfb	(___aldiv@dividend+3)^0,f,c
  6860   003608  8018               	bsf	___aldiv@quotient^0,0,c
  6861   00360A                     l5071:
  6862   00360A  90D8               	bcf	status,0,c
  6863   00360C  3215               	rrcf	(___aldiv@divisor+3)^0,f,c
  6864   00360E  3214               	rrcf	(___aldiv@divisor+2)^0,f,c
  6865   003610  3213               	rrcf	(___aldiv@divisor+1)^0,f,c
  6866   003612  3212               	rrcf	___aldiv@divisor^0,f,c
  6867   003614  2E16               	decfsz	___aldiv@counter^0,f,c
  6868   003616  EFE8  F01A         	goto	l5063
  6869   00361A                     l5075:
  6870   00361A  5017               	movf	___aldiv@sign^0,w,c
  6871   00361C  B4D8               	btfsc	status,2,c
  6872   00361E  EF13  F01B         	goto	u4441
  6873   003622  EF15  F01B         	goto	u4440
  6874   003626                     u4441:
  6875   003626  EF1D  F01B         	goto	l5079
  6876   00362A                     u4440:
  6877   00362A  1E1B               	comf	(___aldiv@quotient+3)^0,f,c
  6878   00362C  1E1A               	comf	(___aldiv@quotient+2)^0,f,c
  6879   00362E  1E19               	comf	(___aldiv@quotient+1)^0,f,c
  6880   003630  6C18               	negf	___aldiv@quotient^0,c
  6881   003632  0E00               	movlw	0
  6882   003634  2219               	addwfc	(___aldiv@quotient+1)^0,f,c
  6883   003636  221A               	addwfc	(___aldiv@quotient+2)^0,f,c
  6884   003638  221B               	addwfc	(___aldiv@quotient+3)^0,f,c
  6885   00363A                     l5079:
  6886   00363A  C018  F00E         	movff	___aldiv@quotient,?___aldiv
  6887   00363E  C019  F00F         	movff	___aldiv@quotient+1,?___aldiv+1
  6888   003642  C01A  F010         	movff	___aldiv@quotient+2,?___aldiv+2
  6889   003646  C01B  F011         	movff	___aldiv@quotient+3,?___aldiv+3
  6890   00364A  0012               	return		;funcret
  6891   00364C                     __end_of___aldiv:
  6892                           	callstack 0
  6893                           
  6894 ;; *************** function _decision *****************
  6895 ;; Defined at:
  6896 ;;		line 181 in file "color.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;  hue             2   36[COMRAM] unsigned int 
  6899 ;;  path_step       2   38[COMRAM] unsigned int 
  6900 ;;  factor          2   40[COMRAM] unsigned int 
  6901 ;; Auto vars:     Size  Location     Type
  6902 ;;  color           2    0        unsigned int 
  6903 ;; Return value:  Size  Location     Type
  6904 ;;                  2   36[COMRAM] unsigned int 
  6905 ;; Registers used:
  6906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6907 ;; Tracked objects:
  6908 ;;		On entry : 0/0
  6909 ;;		On exit  : 0/0
  6910 ;;		Unchanged: 0/0
  6911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6912 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6915 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6916 ;;Total ram usage:        6 bytes
  6917 ;; Hardware stack levels used: 1
  6918 ;; Hardware stack levels required when called: 6
  6919 ;; This function calls:
  6920 ;;		_logAction
  6921 ;;		_moveBlue
  6922 ;;		_moveGreen
  6923 ;;		_moveLightBlue
  6924 ;;		_moveOrange
  6925 ;;		_movePink
  6926 ;;		_moveRed
  6927 ;;		_moveYellow
  6928 ;; This function is called by:
  6929 ;;		_main
  6930 ;; This function uses a non-reentrant model
  6931 ;;
  6932                           
  6933                           	psect	text21
  6934   0027A4                     __ptext21:
  6935                           	callstack 0
  6936   0027A4                     _decision:
  6937                           	callstack 24
  6938   0027A4                     
  6939                           ;color.c: 186:     unsigned int color;;color.c: 188:     if (hue<=10 || hue>=355) {
  6940   0027A4  5026               	movf	(decision@hue+1)^0,w,c
  6941   0027A6  E109               	bnz	u4450
  6942   0027A8  0E0B               	movlw	11
  6943   0027AA  5C25               	subwf	decision@hue^0,w,c
  6944   0027AC  A0D8               	btfss	status,0,c
  6945   0027AE  EFDB  F013         	goto	u4451
  6946   0027B2  EFDD  F013         	goto	u4450
  6947   0027B6                     u4451:
  6948   0027B6  EFE8  F013         	goto	l5135
  6949   0027BA                     u4450:
  6950   0027BA  0E63               	movlw	99
  6951   0027BC  5C25               	subwf	decision@hue^0,w,c
  6952   0027BE  0E01               	movlw	1
  6953   0027C0  5826               	subwfb	(decision@hue+1)^0,w,c
  6954   0027C2  A0D8               	btfss	status,0,c
  6955   0027C4  EFE6  F013         	goto	u4461
  6956   0027C8  EFE8  F013         	goto	u4460
  6957   0027CC                     u4461:
  6958   0027CC  EF05  F014         	goto	l5143
  6959   0027D0                     u4460:
  6960   0027D0                     l5135:
  6961                           
  6962                           ;color.c: 189:         moveRed(&motorL, &motorR, factor);
  6963   0027D0  0EE7               	movlw	low _motorL
  6964   0027D2  6E1F               	movwf	moveRed@mL^0,c
  6965   0027D4  0EDE               	movlw	low _motorR
  6966   0027D6  6E20               	movwf	moveRed@mR^0,c
  6967   0027D8  C029  F021         	movff	decision@factor,moveRed@factor
  6968   0027DC  C02A  F022         	movff	decision@factor+1,moveRed@factor+1
  6969   0027E0  ECDA  F023         	call	_moveRed	;wreg free
  6970   0027E4                     
  6971                           ;color.c: 190:         logAction(1,0, path_step);
  6972   0027E4  0E00               	movlw	0
  6973   0027E6  6E02               	movwf	logAction@newTime^0,c
  6974   0027E8  0E00               	movlw	0
  6975   0027EA  6E03               	movwf	(logAction@newTime+1)^0,c
  6976   0027EC  0E00               	movlw	0
  6977   0027EE  6E04               	movwf	(logAction@newTime+2)^0,c
  6978   0027F0  0E00               	movlw	0
  6979   0027F2  6E05               	movwf	(logAction@newTime+3)^0,c
  6980   0027F4  C027  F006         	movff	decision@path_step,logAction@path_step
  6981   0027F8  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  6982   0027FC  0E01               	movlw	1
  6983   0027FE  EC87  F021         	call	_logAction
  6984   002802                     l5141:
  6985                           
  6986                           ;color.c: 192:         path_step++;
  6987   002802  4A27               	infsnz	decision@path_step^0,f,c
  6988   002804  2A28               	incf	(decision@path_step+1)^0,f,c
  6989                           
  6990                           ;color.c: 193:     }
  6991   002806  EF2B  F015         	goto	l5215
  6992   00280A                     l5143:
  6993   00280A  5026               	movf	(decision@hue+1)^0,w,c
  6994   00280C  E109               	bnz	u4470
  6995   00280E  0E69               	movlw	105
  6996   002810  5C25               	subwf	decision@hue^0,w,c
  6997   002812  A0D8               	btfss	status,0,c
  6998   002814  EF0E  F014         	goto	u4471
  6999   002818  EF10  F014         	goto	u4470
  7000   00281C                     u4471:
  7001   00281C  EF36  F014         	goto	l5155
  7002   002820                     u4470:
  7003   002820  5026               	movf	(decision@hue+1)^0,w,c
  7004   002822  E107               	bnz	u4481
  7005   002824  0E83               	movlw	131
  7006   002826  5C25               	subwf	decision@hue^0,w,c
  7007   002828  B0D8               	btfsc	status,0,c
  7008   00282A  EF19  F014         	goto	u4481
  7009   00282E  EF1B  F014         	goto	u4480
  7010   002832                     u4481:
  7011   002832  EF36  F014         	goto	l5155
  7012   002836                     u4480:
  7013   002836                     
  7014                           ;color.c: 195:         moveGreen(&motorL, &motorR,factor);
  7015   002836  0EE7               	movlw	low _motorL
  7016   002838  6E1F               	movwf	moveGreen@mL^0,c
  7017   00283A  0EDE               	movlw	low _motorR
  7018   00283C  6E20               	movwf	moveGreen@mR^0,c
  7019   00283E  C029  F021         	movff	decision@factor,moveGreen@factor
  7020   002842  C02A  F022         	movff	decision@factor+1,moveGreen@factor+1
  7021   002846  EC4E  F024         	call	_moveGreen	;wreg free
  7022   00284A                     
  7023                           ;color.c: 196:         logAction(2,0, path_step);
  7024   00284A  0E00               	movlw	0
  7025   00284C  6E02               	movwf	logAction@newTime^0,c
  7026   00284E  0E00               	movlw	0
  7027   002850  6E03               	movwf	(logAction@newTime+1)^0,c
  7028   002852  0E00               	movlw	0
  7029   002854  6E04               	movwf	(logAction@newTime+2)^0,c
  7030   002856  0E00               	movlw	0
  7031   002858  6E05               	movwf	(logAction@newTime+3)^0,c
  7032   00285A  C027  F006         	movff	decision@path_step,logAction@path_step
  7033   00285E  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  7034   002862  0E02               	movlw	2
  7035   002864  EC87  F021         	call	_logAction
  7036   002868  EF01  F014         	goto	l5141
  7037   00286C                     l5155:
  7038   00286C  5026               	movf	(decision@hue+1)^0,w,c
  7039   00286E  E109               	bnz	u4490
  7040   002870  0EE6               	movlw	230
  7041   002872  5C25               	subwf	decision@hue^0,w,c
  7042   002874  A0D8               	btfss	status,0,c
  7043   002876  EF3F  F014         	goto	u4491
  7044   00287A  EF41  F014         	goto	u4490
  7045   00287E                     u4491:
  7046   00287E  EF67  F014         	goto	l5167
  7047   002882                     u4490:
  7048   002882  5026               	movf	(decision@hue+1)^0,w,c
  7049   002884  E107               	bnz	u4501
  7050   002886  0EF1               	movlw	241
  7051   002888  5C25               	subwf	decision@hue^0,w,c
  7052   00288A  B0D8               	btfsc	status,0,c
  7053   00288C  EF4A  F014         	goto	u4501
  7054   002890  EF4C  F014         	goto	u4500
  7055   002894                     u4501:
  7056   002894  EF67  F014         	goto	l5167
  7057   002898                     u4500:
  7058   002898                     
  7059                           ;color.c: 200:         moveBlue(&motorL,&motorR, factor);
  7060   002898  0EE7               	movlw	low _motorL
  7061   00289A  6E1F               	movwf	moveBlue@mL^0,c
  7062   00289C  0EDE               	movlw	low _motorR
  7063   00289E  6E20               	movwf	moveBlue@mR^0,c
  7064   0028A0  C029  F021         	movff	decision@factor,moveBlue@factor
  7065   0028A4  C02A  F022         	movff	decision@factor+1,moveBlue@factor+1
  7066   0028A8  EC6B  F024         	call	_moveBlue	;wreg free
  7067   0028AC                     
  7068                           ;color.c: 201:         logAction(3,0, path_step);
  7069   0028AC  0E00               	movlw	0
  7070   0028AE  6E02               	movwf	logAction@newTime^0,c
  7071   0028B0  0E00               	movlw	0
  7072   0028B2  6E03               	movwf	(logAction@newTime+1)^0,c
  7073   0028B4  0E00               	movlw	0
  7074   0028B6  6E04               	movwf	(logAction@newTime+2)^0,c
  7075   0028B8  0E00               	movlw	0
  7076   0028BA  6E05               	movwf	(logAction@newTime+3)^0,c
  7077   0028BC  C027  F006         	movff	decision@path_step,logAction@path_step
  7078   0028C0  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  7079   0028C4  0E03               	movlw	3
  7080   0028C6  EC87  F021         	call	_logAction
  7081   0028CA  EF01  F014         	goto	l5141
  7082   0028CE                     l5167:
  7083   0028CE  5026               	movf	(decision@hue+1)^0,w,c
  7084   0028D0  E109               	bnz	u4510
  7085   0028D2  0ED8               	movlw	216
  7086   0028D4  5C25               	subwf	decision@hue^0,w,c
  7087   0028D6  A0D8               	btfss	status,0,c
  7088   0028D8  EF70  F014         	goto	u4511
  7089   0028DC  EF72  F014         	goto	u4510
  7090   0028E0                     u4511:
  7091   0028E0  EF98  F014         	goto	l5179
  7092   0028E4                     u4510:
  7093   0028E4  5026               	movf	(decision@hue+1)^0,w,c
  7094   0028E6  E107               	bnz	u4521
  7095   0028E8  0EDE               	movlw	222
  7096   0028EA  5C25               	subwf	decision@hue^0,w,c
  7097   0028EC  B0D8               	btfsc	status,0,c
  7098   0028EE  EF7B  F014         	goto	u4521
  7099   0028F2  EF7D  F014         	goto	u4520
  7100   0028F6                     u4521:
  7101   0028F6  EF98  F014         	goto	l5179
  7102   0028FA                     u4520:
  7103   0028FA                     
  7104                           ;color.c: 205:         moveLightBlue(&motorL,&motorR, factor);
  7105   0028FA  0EE7               	movlw	low _motorL
  7106   0028FC  6E1F               	movwf	moveLightBlue@mL^0,c
  7107   0028FE  0EDE               	movlw	low _motorR
  7108   002900  6E20               	movwf	moveLightBlue@mR^0,c
  7109   002902  C029  F021         	movff	decision@factor,moveLightBlue@factor
  7110   002906  C02A  F022         	movff	decision@factor+1,moveLightBlue@factor+1
  7111   00290A  EC31  F024         	call	_moveLightBlue	;wreg free
  7112   00290E                     
  7113                           ;color.c: 206:         logAction(4,0, path_step);
  7114   00290E  0E00               	movlw	0
  7115   002910  6E02               	movwf	logAction@newTime^0,c
  7116   002912  0E00               	movlw	0
  7117   002914  6E03               	movwf	(logAction@newTime+1)^0,c
  7118   002916  0E00               	movlw	0
  7119   002918  6E04               	movwf	(logAction@newTime+2)^0,c
  7120   00291A  0E00               	movlw	0
  7121   00291C  6E05               	movwf	(logAction@newTime+3)^0,c
  7122   00291E  C027  F006         	movff	decision@path_step,logAction@path_step
  7123   002922  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  7124   002926  0E04               	movlw	4
  7125   002928  EC87  F021         	call	_logAction
  7126   00292C  EF01  F014         	goto	l5141
  7127   002930                     l5179:
  7128   002930  0E2E               	movlw	46
  7129   002932  5C25               	subwf	decision@hue^0,w,c
  7130   002934  0E01               	movlw	1
  7131   002936  5826               	subwfb	(decision@hue+1)^0,w,c
  7132   002938  A0D8               	btfss	status,0,c
  7133   00293A  EFA1  F014         	goto	u4531
  7134   00293E  EFA3  F014         	goto	u4530
  7135   002942                     u4531:
  7136   002942  EFC9  F014         	goto	l5191
  7137   002946                     u4530:
  7138   002946  0E5B               	movlw	91
  7139   002948  5C25               	subwf	decision@hue^0,w,c
  7140   00294A  0E01               	movlw	1
  7141   00294C  5826               	subwfb	(decision@hue+1)^0,w,c
  7142   00294E  B0D8               	btfsc	status,0,c
  7143   002950  EFAC  F014         	goto	u4541
  7144   002954  EFAE  F014         	goto	u4540
  7145   002958                     u4541:
  7146   002958  EFC9  F014         	goto	l5191
  7147   00295C                     u4540:
  7148   00295C                     
  7149                           ;color.c: 210:         moveYellow(&motorL,&motorR, factor);
  7150   00295C  0EE7               	movlw	low _motorL
  7151   00295E  6E1F               	movwf	moveYellow@mL^0,c
  7152   002960  0EDE               	movlw	low _motorR
  7153   002962  6E20               	movwf	moveYellow@mR^0,c
  7154   002964  C029  F021         	movff	decision@factor,moveYellow@factor
  7155   002968  C02A  F022         	movff	decision@factor+1,moveYellow@factor+1
  7156   00296C  ECBD  F023         	call	_moveYellow	;wreg free
  7157   002970                     
  7158                           ;color.c: 211:         logAction(5,0, path_step);
  7159   002970  0E00               	movlw	0
  7160   002972  6E02               	movwf	logAction@newTime^0,c
  7161   002974  0E00               	movlw	0
  7162   002976  6E03               	movwf	(logAction@newTime+1)^0,c
  7163   002978  0E00               	movlw	0
  7164   00297A  6E04               	movwf	(logAction@newTime+2)^0,c
  7165   00297C  0E00               	movlw	0
  7166   00297E  6E05               	movwf	(logAction@newTime+3)^0,c
  7167   002980  C027  F006         	movff	decision@path_step,logAction@path_step
  7168   002984  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  7169   002988  0E05               	movlw	5
  7170   00298A  EC87  F021         	call	_logAction
  7171   00298E  EF01  F014         	goto	l5141
  7172   002992                     l5191:
  7173   002992  5026               	movf	(decision@hue+1)^0,w,c
  7174   002994  E109               	bnz	u4550
  7175   002996  0E0F               	movlw	15
  7176   002998  5C25               	subwf	decision@hue^0,w,c
  7177   00299A  A0D8               	btfss	status,0,c
  7178   00299C  EFD2  F014         	goto	u4551
  7179   0029A0  EFD4  F014         	goto	u4550
  7180   0029A4                     u4551:
  7181   0029A4  EFFA  F014         	goto	l5203
  7182   0029A8                     u4550:
  7183   0029A8  5026               	movf	(decision@hue+1)^0,w,c
  7184   0029AA  E107               	bnz	u4561
  7185   0029AC  0E24               	movlw	36
  7186   0029AE  5C25               	subwf	decision@hue^0,w,c
  7187   0029B0  B0D8               	btfsc	status,0,c
  7188   0029B2  EFDD  F014         	goto	u4561
  7189   0029B6  EFDF  F014         	goto	u4560
  7190   0029BA                     u4561:
  7191   0029BA  EFFA  F014         	goto	l5203
  7192   0029BE                     u4560:
  7193   0029BE                     
  7194                           ;color.c: 215:         moveOrange(&motorL,&motorR, factor);
  7195   0029BE  0EE7               	movlw	low _motorL
  7196   0029C0  6E1F               	movwf	moveOrange@mL^0,c
  7197   0029C2  0EDE               	movlw	low _motorR
  7198   0029C4  6E20               	movwf	moveOrange@mR^0,c
  7199   0029C6  C029  F021         	movff	decision@factor,moveOrange@factor
  7200   0029CA  C02A  F022         	movff	decision@factor+1,moveOrange@factor+1
  7201   0029CE  EC14  F024         	call	_moveOrange	;wreg free
  7202   0029D2                     
  7203                           ;color.c: 216:         logAction(6,0, path_step);
  7204   0029D2  0E00               	movlw	0
  7205   0029D4  6E02               	movwf	logAction@newTime^0,c
  7206   0029D6  0E00               	movlw	0
  7207   0029D8  6E03               	movwf	(logAction@newTime+1)^0,c
  7208   0029DA  0E00               	movlw	0
  7209   0029DC  6E04               	movwf	(logAction@newTime+2)^0,c
  7210   0029DE  0E00               	movlw	0
  7211   0029E0  6E05               	movwf	(logAction@newTime+3)^0,c
  7212   0029E2  C027  F006         	movff	decision@path_step,logAction@path_step
  7213   0029E6  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  7214   0029EA  0E06               	movlw	6
  7215   0029EC  EC87  F021         	call	_logAction
  7216   0029F0  EF01  F014         	goto	l5141
  7217   0029F4                     l5203:
  7218   0029F4  5026               	movf	(decision@hue+1)^0,w,c
  7219   0029F6  E109               	bnz	u4570
  7220   0029F8  0EF4               	movlw	244
  7221   0029FA  5C25               	subwf	decision@hue^0,w,c
  7222   0029FC  A0D8               	btfss	status,0,c
  7223   0029FE  EF03  F015         	goto	u4571
  7224   002A02  EF05  F015         	goto	u4570
  7225   002A06                     u4571:
  7226   002A06  EF2B  F015         	goto	l138
  7227   002A0A                     u4570:
  7228   002A0A  5026               	movf	(decision@hue+1)^0,w,c
  7229   002A0C  E107               	bnz	u4581
  7230   002A0E  0EFC               	movlw	252
  7231   002A10  5C25               	subwf	decision@hue^0,w,c
  7232   002A12  B0D8               	btfsc	status,0,c
  7233   002A14  EF0E  F015         	goto	u4581
  7234   002A18  EF10  F015         	goto	u4580
  7235   002A1C                     u4581:
  7236   002A1C  EF2B  F015         	goto	l138
  7237   002A20                     u4580:
  7238   002A20                     
  7239                           ;color.c: 220:         movePink(&motorL,&motorR, factor);
  7240   002A20  0EE7               	movlw	low _motorL
  7241   002A22  6E1F               	movwf	movePink@mL^0,c
  7242   002A24  0EDE               	movlw	low _motorR
  7243   002A26  6E20               	movwf	movePink@mR^0,c
  7244   002A28  C029  F021         	movff	decision@factor,movePink@factor
  7245   002A2C  C02A  F022         	movff	decision@factor+1,movePink@factor+1
  7246   002A30  ECF7  F023         	call	_movePink	;wreg free
  7247   002A34                     
  7248                           ;color.c: 221:         logAction(7,0, path_step);
  7249   002A34  0E00               	movlw	0
  7250   002A36  6E02               	movwf	logAction@newTime^0,c
  7251   002A38  0E00               	movlw	0
  7252   002A3A  6E03               	movwf	(logAction@newTime+1)^0,c
  7253   002A3C  0E00               	movlw	0
  7254   002A3E  6E04               	movwf	(logAction@newTime+2)^0,c
  7255   002A40  0E00               	movlw	0
  7256   002A42  6E05               	movwf	(logAction@newTime+3)^0,c
  7257   002A44  C027  F006         	movff	decision@path_step,logAction@path_step
  7258   002A48  C028  F007         	movff	decision@path_step+1,logAction@path_step+1
  7259   002A4C  0E07               	movlw	7
  7260   002A4E  EC87  F021         	call	_logAction
  7261   002A52  EF01  F014         	goto	l5141
  7262   002A56                     l138:
  7263   002A56                     l5215:
  7264                           
  7265                           ;color.c: 227:     return path_step;
  7266   002A56  C027  F025         	movff	decision@path_step,?_decision
  7267   002A5A  C028  F026         	movff	decision@path_step+1,?_decision+1
  7268   002A5E  0012               	return		;funcret
  7269   002A60                     __end_of_decision:
  7270                           	callstack 0
  7271                           
  7272 ;; *************** function _moveYellow *****************
  7273 ;; Defined at:
  7274 ;;		line 294 in file "dc_motor.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  7277 ;;		 -> motorL(9), 
  7278 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  7279 ;;		 -> motorR(9), 
  7280 ;;  factor          2   32[COMRAM] unsigned int 
  7281 ;; Auto vars:     Size  Location     Type
  7282 ;;		None
  7283 ;; Return value:  Size  Location     Type
  7284 ;;                  1    wreg      void 
  7285 ;; Registers used:
  7286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7287 ;; Tracked objects:
  7288 ;;		On entry : 0/0
  7289 ;;		On exit  : 0/0
  7290 ;;		Unchanged: 0/0
  7291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7292 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7294 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7295 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7296 ;;Total ram usage:        6 bytes
  7297 ;; Hardware stack levels used: 1
  7298 ;; Hardware stack levels required when called: 5
  7299 ;; This function calls:
  7300 ;;		_backOneAndHalf
  7301 ;;		_right90
  7302 ;; This function is called by:
  7303 ;;		_decision
  7304 ;; This function uses a non-reentrant model
  7305 ;;
  7306                           
  7307                           	psect	text22
  7308   00477A                     __ptext22:
  7309                           	callstack 0
  7310   00477A                     _moveYellow:
  7311                           	callstack 24
  7312   00477A                     
  7313                           ;dc_motor.c: 294:  void moveYellow(struct DC_motor *mL, struct DC_motor *mR, unsigned in
      +                          t factor);dc_motor.c: 295: {;dc_motor.c: 297:     backOneAndHalf(mL,mR);
  7314   00477A  C01F  F019         	movff	moveYellow@mL,backOneAndHalf@mL
  7315   00477E  C020  F01A         	movff	moveYellow@mR,backOneAndHalf@mR
  7316   004782  ECF2  F024         	call	_backOneAndHalf	;wreg free
  7317   004786                     
  7318                           ;dc_motor.c: 298:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7319   004786  0E29               	movlw	41
  7320   004788  6E24               	movwf	(??_moveYellow+1)^0,c
  7321   00478A  0E96               	movlw	150
  7322   00478C  6E23               	movwf	??_moveYellow^0,c
  7323   00478E  0E7F               	movlw	127
  7324   004790                     u5447:
  7325   004790  2EE8               	decfsz	wreg,f,c
  7326   004792  D7FE               	bra	u5447
  7327   004794  2E23               	decfsz	??_moveYellow^0,f,c
  7328   004796  D7FC               	bra	u5447
  7329   004798  2E24               	decfsz	(??_moveYellow+1)^0,f,c
  7330   00479A  D7FA               	bra	u5447
  7331   00479C  0000               	nop	
  7332   00479E                     
  7333                           ;dc_motor.c: 299:     right90(mL,mR, factor);
  7334   00479E  C01F  F019         	movff	moveYellow@mL,right90@mL
  7335   0047A2  C020  F01A         	movff	moveYellow@mR,right90@mR
  7336   0047A6  C021  F01B         	movff	moveYellow@factor,right90@factor
  7337   0047AA  C022  F01C         	movff	moveYellow@factor+1,right90@factor+1
  7338   0047AE  EC99  F022         	call	_right90	;wreg free
  7339   0047B2  0012               	return		;funcret
  7340   0047B4                     __end_of_moveYellow:
  7341                           	callstack 0
  7342                           
  7343 ;; *************** function _moveRed *****************
  7344 ;; Defined at:
  7345 ;;		line 265 in file "dc_motor.c"
  7346 ;; Parameters:    Size  Location     Type
  7347 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  7348 ;;		 -> motorL(9), 
  7349 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  7350 ;;		 -> motorR(9), 
  7351 ;;  factor          2   32[COMRAM] unsigned int 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;		None
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      void 
  7356 ;; Registers used:
  7357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7363 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7365 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7366 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7367 ;;Total ram usage:        6 bytes
  7368 ;; Hardware stack levels used: 1
  7369 ;; Hardware stack levels required when called: 5
  7370 ;; This function calls:
  7371 ;;		_backHalf
  7372 ;;		_right90
  7373 ;; This function is called by:
  7374 ;;		_decision
  7375 ;; This function uses a non-reentrant model
  7376 ;;
  7377                           
  7378                           	psect	text23
  7379   0047B4                     __ptext23:
  7380                           	callstack 0
  7381   0047B4                     _moveRed:
  7382                           	callstack 24
  7383   0047B4                     
  7384                           ;dc_motor.c: 265: void moveRed(struct DC_motor *mL, struct DC_motor *mR, unsigned int fa
      +                          ctor);dc_motor.c: 266: {;dc_motor.c: 268:     backHalf(mL,mR);
  7385   0047B4  C01F  F019         	movff	moveRed@mL,backHalf@mL
  7386   0047B8  C020  F01A         	movff	moveRed@mR,backHalf@mR
  7387   0047BC  EC24  F025         	call	_backHalf	;wreg free
  7388   0047C0                     
  7389                           ;dc_motor.c: 269:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7390   0047C0  0E29               	movlw	41
  7391   0047C2  6E24               	movwf	(??_moveRed+1)^0,c
  7392   0047C4  0E96               	movlw	150
  7393   0047C6  6E23               	movwf	??_moveRed^0,c
  7394   0047C8  0E7F               	movlw	127
  7395   0047CA                     u5457:
  7396   0047CA  2EE8               	decfsz	wreg,f,c
  7397   0047CC  D7FE               	bra	u5457
  7398   0047CE  2E23               	decfsz	??_moveRed^0,f,c
  7399   0047D0  D7FC               	bra	u5457
  7400   0047D2  2E24               	decfsz	(??_moveRed+1)^0,f,c
  7401   0047D4  D7FA               	bra	u5457
  7402   0047D6  0000               	nop	
  7403   0047D8                     
  7404                           ;dc_motor.c: 270:     right90(mL,mR,factor);
  7405   0047D8  C01F  F019         	movff	moveRed@mL,right90@mL
  7406   0047DC  C020  F01A         	movff	moveRed@mR,right90@mR
  7407   0047E0  C021  F01B         	movff	moveRed@factor,right90@factor
  7408   0047E4  C022  F01C         	movff	moveRed@factor+1,right90@factor+1
  7409   0047E8  EC99  F022         	call	_right90	;wreg free
  7410   0047EC  0012               	return		;funcret
  7411   0047EE                     __end_of_moveRed:
  7412                           	callstack 0
  7413                           
  7414 ;; *************** function _right90 *****************
  7415 ;; Defined at:
  7416 ;;		line 193 in file "dc_motor.c"
  7417 ;; Parameters:    Size  Location     Type
  7418 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7419 ;;		 -> motorL(9), 
  7420 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7421 ;;		 -> motorR(9), 
  7422 ;;  factor          2   26[COMRAM] unsigned int 
  7423 ;; Auto vars:     Size  Location     Type
  7424 ;;  delay_after_    2   28[COMRAM] unsigned int 
  7425 ;;  delay           2    0        unsigned int 
  7426 ;; Return value:  Size  Location     Type
  7427 ;;                  1    wreg      void 
  7428 ;; Registers used:
  7429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7435 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7436 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7438 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7439 ;;Total ram usage:        6 bytes
  7440 ;; Hardware stack levels used: 1
  7441 ;; Hardware stack levels required when called: 4
  7442 ;; This function calls:
  7443 ;;		___wmul
  7444 ;;		_customDelayMs
  7445 ;;		_stop
  7446 ;;		_turnRight
  7447 ;; This function is called by:
  7448 ;;		_moveRed
  7449 ;;		_moveYellow
  7450 ;;		_reverseTurn
  7451 ;;		_calibration_turning
  7452 ;; This function uses a non-reentrant model
  7453 ;;
  7454                           
  7455                           	psect	text24
  7456   004532                     __ptext24:
  7457                           	callstack 0
  7458   004532                     _right90:
  7459                           	callstack 24
  7460   004532                     
  7461                           ;dc_motor.c: 196:     unsigned int delay_after_calibration = delay * factor;
  7462   004532  0E01               	movlw	1
  7463   004534  6E03               	movwf	(___wmul@multiplier+1)^0,c
  7464   004536  0E22               	movlw	34
  7465   004538  6E02               	movwf	___wmul@multiplier^0,c
  7466   00453A  C01B  F004         	movff	right90@factor,___wmul@multiplicand
  7467   00453E  C01C  F005         	movff	right90@factor+1,___wmul@multiplicand+1
  7468   004542  EC7D  F025         	call	___wmul	;wreg free
  7469   004546  C002  F01D         	movff	?___wmul,right90@delay_after_calibration
  7470   00454A  C003  F01E         	movff	?___wmul+1,right90@delay_after_calibration+1
  7471   00454E                     
  7472                           ;dc_motor.c: 197:     turnRight(mL,mR);
  7473   00454E  C019  F014         	movff	right90@mL,turnRight@mL
  7474   004552  C01A  F015         	movff	right90@mR,turnRight@mR
  7475   004556  EC5F  F020         	call	_turnRight	;wreg free
  7476   00455A                     
  7477                           ;dc_motor.c: 198:     customDelayMs(delay_after_calibration);
  7478   00455A  C01D  F002         	movff	right90@delay_after_calibration,customDelayMs@milliseconds
  7479   00455E  C01E  F003         	movff	right90@delay_after_calibration+1,customDelayMs@milliseconds+1
  7480   004562  EC88  F024         	call	_customDelayMs	;wreg free
  7481   004566                     
  7482                           ;dc_motor.c: 199:     stop(mL,mR);
  7483   004566  C019  F014         	movff	right90@mL,stop@mL
  7484   00456A  C01A  F015         	movff	right90@mR,stop@mR
  7485   00456E  EC18  F020         	call	_stop	;wreg free
  7486   004572  0012               	return		;funcret
  7487   004574                     __end_of_right90:
  7488                           	callstack 0
  7489                           
  7490 ;; *************** function _movePink *****************
  7491 ;; Defined at:
  7492 ;;		line 303 in file "dc_motor.c"
  7493 ;; Parameters:    Size  Location     Type
  7494 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  7495 ;;		 -> motorL(9), 
  7496 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  7497 ;;		 -> motorR(9), 
  7498 ;;  factor          2   32[COMRAM] unsigned int 
  7499 ;; Auto vars:     Size  Location     Type
  7500 ;;		None
  7501 ;; Return value:  Size  Location     Type
  7502 ;;                  1    wreg      void 
  7503 ;; Registers used:
  7504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7505 ;; Tracked objects:
  7506 ;;		On entry : 0/0
  7507 ;;		On exit  : 0/0
  7508 ;;		Unchanged: 0/0
  7509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7510 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7512 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7513 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7514 ;;Total ram usage:        6 bytes
  7515 ;; Hardware stack levels used: 1
  7516 ;; Hardware stack levels required when called: 5
  7517 ;; This function calls:
  7518 ;;		_backOneAndHalf
  7519 ;;		_left90
  7520 ;; This function is called by:
  7521 ;;		_decision
  7522 ;; This function uses a non-reentrant model
  7523 ;;
  7524                           
  7525                           	psect	text25
  7526   0047EE                     __ptext25:
  7527                           	callstack 0
  7528   0047EE                     _movePink:
  7529                           	callstack 24
  7530   0047EE                     
  7531                           ;dc_motor.c: 303: void movePink(struct DC_motor *mL, struct DC_motor *mR, unsigned int f
      +                          actor);dc_motor.c: 304: {;dc_motor.c: 306:     backOneAndHalf(mL,mR);
  7532   0047EE  C01F  F019         	movff	movePink@mL,backOneAndHalf@mL
  7533   0047F2  C020  F01A         	movff	movePink@mR,backOneAndHalf@mR
  7534   0047F6  ECF2  F024         	call	_backOneAndHalf	;wreg free
  7535   0047FA                     
  7536                           ;dc_motor.c: 307:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7537   0047FA  0E29               	movlw	41
  7538   0047FC  6E24               	movwf	(??_movePink+1)^0,c
  7539   0047FE  0E96               	movlw	150
  7540   004800  6E23               	movwf	??_movePink^0,c
  7541   004802  0E7F               	movlw	127
  7542   004804                     u5467:
  7543   004804  2EE8               	decfsz	wreg,f,c
  7544   004806  D7FE               	bra	u5467
  7545   004808  2E23               	decfsz	??_movePink^0,f,c
  7546   00480A  D7FC               	bra	u5467
  7547   00480C  2E24               	decfsz	(??_movePink+1)^0,f,c
  7548   00480E  D7FA               	bra	u5467
  7549   004810  0000               	nop	
  7550   004812                     
  7551                           ;dc_motor.c: 308:     left90(mL,mR, factor);
  7552   004812  C01F  F019         	movff	movePink@mL,left90@mL
  7553   004816  C020  F01A         	movff	movePink@mR,left90@mR
  7554   00481A  C021  F01B         	movff	movePink@factor,left90@factor
  7555   00481E  C022  F01C         	movff	movePink@factor+1,left90@factor+1
  7556   004822  ECFC  F022         	call	_left90	;wreg free
  7557   004826  0012               	return		;funcret
  7558   004828                     __end_of_movePink:
  7559                           	callstack 0
  7560                           
  7561 ;; *************** function _backOneAndHalf *****************
  7562 ;; Defined at:
  7563 ;;		line 251 in file "dc_motor.c"
  7564 ;; Parameters:    Size  Location     Type
  7565 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7566 ;;		 -> motorL(9), 
  7567 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7568 ;;		 -> motorR(9), 
  7569 ;; Auto vars:     Size  Location     Type
  7570 ;;		None
  7571 ;; Return value:  Size  Location     Type
  7572 ;;                  1    wreg      void 
  7573 ;; Registers used:
  7574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7575 ;; Tracked objects:
  7576 ;;		On entry : 0/0
  7577 ;;		On exit  : 0/0
  7578 ;;		Unchanged: 0/0
  7579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7580 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7582 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7583 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7584 ;;Total ram usage:        4 bytes
  7585 ;; Hardware stack levels used: 1
  7586 ;; Hardware stack levels required when called: 4
  7587 ;; This function calls:
  7588 ;;		_fullSpeedBack
  7589 ;;		_stop
  7590 ;; This function is called by:
  7591 ;;		_moveYellow
  7592 ;;		_movePink
  7593 ;; This function uses a non-reentrant model
  7594 ;;
  7595                           
  7596                           	psect	text26
  7597   0049E4                     __ptext26:
  7598                           	callstack 0
  7599   0049E4                     _backOneAndHalf:
  7600                           	callstack 24
  7601   0049E4                     
  7602                           ;dc_motor.c: 251: void backOneAndHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 252: {;dc_motor.c: 253:     fullSpeedBack(mL,mR);
  7603   0049E4  C019  F014         	movff	backOneAndHalf@mL,fullSpeedBack@mL
  7604   0049E8  C01A  F015         	movff	backOneAndHalf@mR,fullSpeedBack@mR
  7605   0049EC  ECDD  F020         	call	_fullSpeedBack	;wreg free
  7606   0049F0                     
  7607                           ;dc_motor.c: 254:     _delay((unsigned long)((1300)*(64000000/4000.0)));
  7608   0049F0  0E6A               	movlw	106
  7609   0049F2  6E1C               	movwf	(??_backOneAndHalf+1)^0,c
  7610   0049F4  0E85               	movlw	133
  7611   0049F6  6E1B               	movwf	??_backOneAndHalf^0,c
  7612   0049F8  0EB4               	movlw	180
  7613   0049FA                     u5477:
  7614   0049FA  2EE8               	decfsz	wreg,f,c
  7615   0049FC  D7FE               	bra	u5477
  7616   0049FE  2E1B               	decfsz	??_backOneAndHalf^0,f,c
  7617   004A00  D7FC               	bra	u5477
  7618   004A02  2E1C               	decfsz	(??_backOneAndHalf+1)^0,f,c
  7619   004A04  D7FA               	bra	u5477
  7620   004A06  D000               	nop2	
  7621   004A08                     
  7622                           ;dc_motor.c: 255:     stop(mL,mR);
  7623   004A08  C019  F014         	movff	backOneAndHalf@mL,stop@mL
  7624   004A0C  C01A  F015         	movff	backOneAndHalf@mR,stop@mR
  7625   004A10  EC18  F020         	call	_stop	;wreg free
  7626   004A14  0012               	return		;funcret
  7627   004A16                     __end_of_backOneAndHalf:
  7628                           	callstack 0
  7629                           
  7630 ;; *************** function _moveOrange *****************
  7631 ;; Defined at:
  7632 ;;		line 312 in file "dc_motor.c"
  7633 ;; Parameters:    Size  Location     Type
  7634 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  7635 ;;		 -> motorL(9), 
  7636 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  7637 ;;		 -> motorR(9), 
  7638 ;;  factor          2   32[COMRAM] unsigned int 
  7639 ;; Auto vars:     Size  Location     Type
  7640 ;;		None
  7641 ;; Return value:  Size  Location     Type
  7642 ;;                  1    wreg      void 
  7643 ;; Registers used:
  7644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7645 ;; Tracked objects:
  7646 ;;		On entry : 0/0
  7647 ;;		On exit  : 0/0
  7648 ;;		Unchanged: 0/0
  7649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7650 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7652 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7653 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7654 ;;Total ram usage:        6 bytes
  7655 ;; Hardware stack levels used: 1
  7656 ;; Hardware stack levels required when called: 5
  7657 ;; This function calls:
  7658 ;;		_backHalf
  7659 ;;		_right135
  7660 ;; This function is called by:
  7661 ;;		_decision
  7662 ;; This function uses a non-reentrant model
  7663 ;;
  7664                           
  7665                           	psect	text27
  7666   004828                     __ptext27:
  7667                           	callstack 0
  7668   004828                     _moveOrange:
  7669                           	callstack 24
  7670   004828                     
  7671                           ;dc_motor.c: 312: void moveOrange(struct DC_motor *mL, struct DC_motor *mR, unsigned int
      +                           factor);dc_motor.c: 313: {;dc_motor.c: 315:     backHalf(mL,mR);
  7672   004828  C01F  F019         	movff	moveOrange@mL,backHalf@mL
  7673   00482C  C020  F01A         	movff	moveOrange@mR,backHalf@mR
  7674   004830  EC24  F025         	call	_backHalf	;wreg free
  7675   004834                     
  7676                           ;dc_motor.c: 316:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7677   004834  0E29               	movlw	41
  7678   004836  6E24               	movwf	(??_moveOrange+1)^0,c
  7679   004838  0E96               	movlw	150
  7680   00483A  6E23               	movwf	??_moveOrange^0,c
  7681   00483C  0E7F               	movlw	127
  7682   00483E                     u5487:
  7683   00483E  2EE8               	decfsz	wreg,f,c
  7684   004840  D7FE               	bra	u5487
  7685   004842  2E23               	decfsz	??_moveOrange^0,f,c
  7686   004844  D7FC               	bra	u5487
  7687   004846  2E24               	decfsz	(??_moveOrange+1)^0,f,c
  7688   004848  D7FA               	bra	u5487
  7689   00484A  0000               	nop	
  7690   00484C                     
  7691                           ;dc_motor.c: 317:     right135(mL,mR, factor);
  7692   00484C  C01F  F019         	movff	moveOrange@mL,right135@mL
  7693   004850  C020  F01A         	movff	moveOrange@mR,right135@mR
  7694   004854  C021  F01B         	movff	moveOrange@factor,right135@factor
  7695   004858  C022  F01C         	movff	moveOrange@factor+1,right135@factor+1
  7696   00485C  ECBA  F022         	call	_right135	;wreg free
  7697   004860  0012               	return		;funcret
  7698   004862                     __end_of_moveOrange:
  7699                           	callstack 0
  7700                           
  7701 ;; *************** function _right135 *****************
  7702 ;; Defined at:
  7703 ;;		line 223 in file "dc_motor.c"
  7704 ;; Parameters:    Size  Location     Type
  7705 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7706 ;;		 -> motorL(9), 
  7707 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7708 ;;		 -> motorR(9), 
  7709 ;;  factor          2   26[COMRAM] unsigned int 
  7710 ;; Auto vars:     Size  Location     Type
  7711 ;;  delay_after_    2   28[COMRAM] unsigned int 
  7712 ;;  delay           2    0        unsigned int 
  7713 ;; Return value:  Size  Location     Type
  7714 ;;                  1    wreg      void 
  7715 ;; Registers used:
  7716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7717 ;; Tracked objects:
  7718 ;;		On entry : 0/0
  7719 ;;		On exit  : 0/0
  7720 ;;		Unchanged: 0/0
  7721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7722 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7723 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7725 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7726 ;;Total ram usage:        6 bytes
  7727 ;; Hardware stack levels used: 1
  7728 ;; Hardware stack levels required when called: 4
  7729 ;; This function calls:
  7730 ;;		___wmul
  7731 ;;		_customDelayMs
  7732 ;;		_stop
  7733 ;;		_turnRight
  7734 ;; This function is called by:
  7735 ;;		_moveOrange
  7736 ;;		_reverseTurn
  7737 ;; This function uses a non-reentrant model
  7738 ;;
  7739                           
  7740                           	psect	text28
  7741   004574                     __ptext28:
  7742                           	callstack 0
  7743   004574                     _right135:
  7744                           	callstack 24
  7745   004574                     
  7746                           ;dc_motor.c: 226:     unsigned int delay_after_calibration = delay * factor;
  7747   004574  0E01               	movlw	1
  7748   004576  6E03               	movwf	(___wmul@multiplier+1)^0,c
  7749   004578  0E90               	movlw	144
  7750   00457A  6E02               	movwf	___wmul@multiplier^0,c
  7751   00457C  C01B  F004         	movff	right135@factor,___wmul@multiplicand
  7752   004580  C01C  F005         	movff	right135@factor+1,___wmul@multiplicand+1
  7753   004584  EC7D  F025         	call	___wmul	;wreg free
  7754   004588  C002  F01D         	movff	?___wmul,right135@delay_after_calibration
  7755   00458C  C003  F01E         	movff	?___wmul+1,right135@delay_after_calibration+1
  7756   004590                     
  7757                           ;dc_motor.c: 227:     turnRight(mL,mR);
  7758   004590  C019  F014         	movff	right135@mL,turnRight@mL
  7759   004594  C01A  F015         	movff	right135@mR,turnRight@mR
  7760   004598  EC5F  F020         	call	_turnRight	;wreg free
  7761   00459C                     
  7762                           ;dc_motor.c: 228:     customDelayMs(delay_after_calibration);
  7763   00459C  C01D  F002         	movff	right135@delay_after_calibration,customDelayMs@milliseconds
  7764   0045A0  C01E  F003         	movff	right135@delay_after_calibration+1,customDelayMs@milliseconds+1
  7765   0045A4  EC88  F024         	call	_customDelayMs	;wreg free
  7766   0045A8                     
  7767                           ;dc_motor.c: 229:     stop(mL,mR);
  7768   0045A8  C019  F014         	movff	right135@mL,stop@mL
  7769   0045AC  C01A  F015         	movff	right135@mR,stop@mR
  7770   0045B0  EC18  F020         	call	_stop	;wreg free
  7771   0045B4  0012               	return		;funcret
  7772   0045B6                     __end_of_right135:
  7773                           	callstack 0
  7774                           
  7775 ;; *************** function _turnRight *****************
  7776 ;; Defined at:
  7777 ;;		line 125 in file "dc_motor.c"
  7778 ;; Parameters:    Size  Location     Type
  7779 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  7780 ;;		 -> motorL(9), 
  7781 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  7782 ;;		 -> motorR(9), 
  7783 ;; Auto vars:     Size  Location     Type
  7784 ;;  i               2   22[COMRAM] unsigned int 
  7785 ;; Return value:  Size  Location     Type
  7786 ;;                  1    wreg      void 
  7787 ;; Registers used:
  7788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7789 ;; Tracked objects:
  7790 ;;		On entry : 0/0
  7791 ;;		On exit  : 0/0
  7792 ;;		Unchanged: 0/0
  7793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7794 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7795 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7796 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7797 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7798 ;;Total ram usage:        5 bytes
  7799 ;; Hardware stack levels used: 1
  7800 ;; Hardware stack levels required when called: 3
  7801 ;; This function calls:
  7802 ;;		_setMotorPWM
  7803 ;; This function is called by:
  7804 ;;		_right90
  7805 ;;		_right135
  7806 ;; This function uses a non-reentrant model
  7807 ;;
  7808                           
  7809                           	psect	text29
  7810   0040BE                     __ptext29:
  7811                           	callstack 0
  7812   0040BE                     _turnRight:
  7813                           	callstack 24
  7814   0040BE                     
  7815                           ;dc_motor.c: 125: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 126: {;dc_motor
      +                          .c: 128:     mL->direction = 1;
  7816   0040BE  5014               	movf	turnRight@mL^0,w,c
  7817   0040C0  6ED9               	movwf	fsr2l,c
  7818   0040C2  6ADA               	clrf	fsr2h,c
  7819   0040C4  0E01               	movlw	1
  7820   0040C6  26D9               	addwf	fsr2l,f,c
  7821   0040C8  0E01               	movlw	1
  7822   0040CA  6EDF               	movwf	indf2,c
  7823                           
  7824                           ;dc_motor.c: 129:     mR->direction = 0;
  7825   0040CC  5015               	movf	turnRight@mR^0,w,c
  7826   0040CE  6ED9               	movwf	fsr2l,c
  7827   0040D0  6ADA               	clrf	fsr2h,c
  7828   0040D2  0E01               	movlw	1
  7829   0040D4  26D9               	addwf	fsr2l,f,c
  7830   0040D6  6ADF               	clrf	indf2,c
  7831   0040D8                     
  7832                           ;dc_motor.c: 131:     setMotorPWM(mL);
  7833   0040D8  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7834   0040DC  EC65  F019         	call	_setMotorPWM	;wreg free
  7835   0040E0                     
  7836                           ;dc_motor.c: 132:     setMotorPWM(mR);
  7837   0040E0  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7838   0040E4  EC65  F019         	call	_setMotorPWM	;wreg free
  7839   0040E8                     
  7840                           ;dc_motor.c: 133:     for (unsigned int i = 0; i <50; i++)
  7841   0040E8  0E00               	movlw	0
  7842   0040EA  6E18               	movwf	(turnRight@i+1)^0,c
  7843   0040EC  0E00               	movlw	0
  7844   0040EE  6E17               	movwf	turnRight@i^0,c
  7845   0040F0                     l3993:
  7846                           
  7847                           ;dc_motor.c: 134:     {;dc_motor.c: 135:         mL->power++;
  7848   0040F0  5014               	movf	turnRight@mL^0,w,c
  7849   0040F2  6ED9               	movwf	fsr2l,c
  7850   0040F4  6ADA               	clrf	fsr2h,c
  7851   0040F6  2ADF               	incf	indf2,f,c
  7852                           
  7853                           ;dc_motor.c: 136:         mR->power++;
  7854   0040F8  5015               	movf	turnRight@mR^0,w,c
  7855   0040FA  6ED9               	movwf	fsr2l,c
  7856   0040FC  6ADA               	clrf	fsr2h,c
  7857   0040FE  2ADF               	incf	indf2,f,c
  7858   004100                     
  7859                           ;dc_motor.c: 137:         setMotorPWM(mL);
  7860   004100  C014  F00F         	movff	turnRight@mL,setMotorPWM@m
  7861   004104  EC65  F019         	call	_setMotorPWM	;wreg free
  7862   004108                     
  7863                           ;dc_motor.c: 138:         setMotorPWM(mR);
  7864   004108  C015  F00F         	movff	turnRight@mR,setMotorPWM@m
  7865   00410C  EC65  F019         	call	_setMotorPWM	;wreg free
  7866   004110                     
  7867                           ;dc_motor.c: 139:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  7868   004110  0E0B               	movlw	11
  7869   004112  6E16               	movwf	??_turnRight^0,c
  7870   004114  0E62               	movlw	98
  7871   004116                     u5497:
  7872   004116  2EE8               	decfsz	wreg,f,c
  7873   004118  D7FE               	bra	u5497
  7874   00411A  2E16               	decfsz	??_turnRight^0,f,c
  7875   00411C  D7FC               	bra	u5497
  7876   00411E  D000               	nop2	
  7877   004120                     
  7878                           ;dc_motor.c: 140:     }
  7879   004120  4A17               	infsnz	turnRight@i^0,f,c
  7880   004122  2A18               	incf	(turnRight@i+1)^0,f,c
  7881   004124  5018               	movf	(turnRight@i+1)^0,w,c
  7882   004126  E109               	bnz	u2990
  7883   004128  0E32               	movlw	50
  7884   00412A  5C17               	subwf	turnRight@i^0,w,c
  7885   00412C  A0D8               	btfss	status,0,c
  7886   00412E  EF9B  F020         	goto	u2991
  7887   004132  EF9D  F020         	goto	u2990
  7888   004136                     u2991:
  7889   004136  EF78  F020         	goto	l3993
  7890   00413A                     u2990:
  7891   00413A  0012               	return		;funcret
  7892   00413C                     __end_of_turnRight:
  7893                           	callstack 0
  7894                           
  7895 ;; *************** function _moveLightBlue *****************
  7896 ;; Defined at:
  7897 ;;		line 321 in file "dc_motor.c"
  7898 ;; Parameters:    Size  Location     Type
  7899 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  7900 ;;		 -> motorL(9), 
  7901 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  7902 ;;		 -> motorR(9), 
  7903 ;;  factor          2   32[COMRAM] unsigned int 
  7904 ;; Auto vars:     Size  Location     Type
  7905 ;;		None
  7906 ;; Return value:  Size  Location     Type
  7907 ;;                  1    wreg      void 
  7908 ;; Registers used:
  7909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7910 ;; Tracked objects:
  7911 ;;		On entry : 0/0
  7912 ;;		On exit  : 0/0
  7913 ;;		Unchanged: 0/0
  7914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7915 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7917 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7918 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7919 ;;Total ram usage:        6 bytes
  7920 ;; Hardware stack levels used: 1
  7921 ;; Hardware stack levels required when called: 5
  7922 ;; This function calls:
  7923 ;;		_backHalf
  7924 ;;		_left135
  7925 ;; This function is called by:
  7926 ;;		_decision
  7927 ;; This function uses a non-reentrant model
  7928 ;;
  7929                           
  7930                           	psect	text30
  7931   004862                     __ptext30:
  7932                           	callstack 0
  7933   004862                     _moveLightBlue:
  7934                           	callstack 24
  7935   004862                     
  7936                           ;dc_motor.c: 321: void moveLightBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned 
      +                          int factor);dc_motor.c: 322: {;dc_motor.c: 324:     backHalf(mL,mR);
  7937   004862  C01F  F019         	movff	moveLightBlue@mL,backHalf@mL
  7938   004866  C020  F01A         	movff	moveLightBlue@mR,backHalf@mR
  7939   00486A  EC24  F025         	call	_backHalf	;wreg free
  7940   00486E                     
  7941                           ;dc_motor.c: 325:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7942   00486E  0E29               	movlw	41
  7943   004870  6E24               	movwf	(??_moveLightBlue+1)^0,c
  7944   004872  0E96               	movlw	150
  7945   004874  6E23               	movwf	??_moveLightBlue^0,c
  7946   004876  0E7F               	movlw	127
  7947   004878                     u5507:
  7948   004878  2EE8               	decfsz	wreg,f,c
  7949   00487A  D7FE               	bra	u5507
  7950   00487C  2E23               	decfsz	??_moveLightBlue^0,f,c
  7951   00487E  D7FC               	bra	u5507
  7952   004880  2E24               	decfsz	(??_moveLightBlue+1)^0,f,c
  7953   004882  D7FA               	bra	u5507
  7954   004884  0000               	nop	
  7955   004886                     
  7956                           ;dc_motor.c: 326:     left135(mL,mR,factor);
  7957   004886  C01F  F019         	movff	moveLightBlue@mL,left135@mL
  7958   00488A  C020  F01A         	movff	moveLightBlue@mR,left135@mR
  7959   00488E  C021  F01B         	movff	moveLightBlue@factor,left135@factor
  7960   004892  C022  F01C         	movff	moveLightBlue@factor+1,left135@factor+1
  7961   004896  ECDB  F022         	call	_left135	;wreg free
  7962   00489A  0012               	return		;funcret
  7963   00489C                     __end_of_moveLightBlue:
  7964                           	callstack 0
  7965                           
  7966 ;; *************** function _left135 *****************
  7967 ;; Defined at:
  7968 ;;		line 233 in file "dc_motor.c"
  7969 ;; Parameters:    Size  Location     Type
  7970 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  7971 ;;		 -> motorL(9), 
  7972 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  7973 ;;		 -> motorR(9), 
  7974 ;;  factor          2   26[COMRAM] unsigned int 
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;  delay_after_    2   28[COMRAM] unsigned int 
  7977 ;;  delay           2    0        unsigned int 
  7978 ;; Return value:  Size  Location     Type
  7979 ;;                  1    wreg      void 
  7980 ;; Registers used:
  7981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7982 ;; Tracked objects:
  7983 ;;		On entry : 0/0
  7984 ;;		On exit  : 0/0
  7985 ;;		Unchanged: 0/0
  7986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7987 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7988 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7990 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7991 ;;Total ram usage:        6 bytes
  7992 ;; Hardware stack levels used: 1
  7993 ;; Hardware stack levels required when called: 4
  7994 ;; This function calls:
  7995 ;;		___wmul
  7996 ;;		_customDelayMs
  7997 ;;		_stop
  7998 ;;		_turnLeft
  7999 ;; This function is called by:
  8000 ;;		_moveLightBlue
  8001 ;;		_reverseTurn
  8002 ;; This function uses a non-reentrant model
  8003 ;;
  8004                           
  8005                           	psect	text31
  8006   0045B6                     __ptext31:
  8007                           	callstack 0
  8008   0045B6                     _left135:
  8009                           	callstack 24
  8010   0045B6                     
  8011                           ;dc_motor.c: 236:     unsigned int delay_after_calibration = delay * factor;
  8012   0045B6  0E01               	movlw	1
  8013   0045B8  6E03               	movwf	(___wmul@multiplier+1)^0,c
  8014   0045BA  0E90               	movlw	144
  8015   0045BC  6E02               	movwf	___wmul@multiplier^0,c
  8016   0045BE  C01B  F004         	movff	left135@factor,___wmul@multiplicand
  8017   0045C2  C01C  F005         	movff	left135@factor+1,___wmul@multiplicand+1
  8018   0045C6  EC7D  F025         	call	___wmul	;wreg free
  8019   0045CA  C002  F01D         	movff	?___wmul,left135@delay_after_calibration
  8020   0045CE  C003  F01E         	movff	?___wmul+1,left135@delay_after_calibration+1
  8021   0045D2                     
  8022                           ;dc_motor.c: 237:     turnLeft(mL,mR);
  8023   0045D2  C019  F014         	movff	left135@mL,turnLeft@mL
  8024   0045D6  C01A  F015         	movff	left135@mR,turnLeft@mR
  8025   0045DA  EC9E  F020         	call	_turnLeft	;wreg free
  8026   0045DE                     
  8027                           ;dc_motor.c: 238:     customDelayMs(delay_after_calibration);
  8028   0045DE  C01D  F002         	movff	left135@delay_after_calibration,customDelayMs@milliseconds
  8029   0045E2  C01E  F003         	movff	left135@delay_after_calibration+1,customDelayMs@milliseconds+1
  8030   0045E6  EC88  F024         	call	_customDelayMs	;wreg free
  8031   0045EA                     
  8032                           ;dc_motor.c: 239:     stop(mL,mR);
  8033   0045EA  C019  F014         	movff	left135@mL,stop@mL
  8034   0045EE  C01A  F015         	movff	left135@mR,stop@mR
  8035   0045F2  EC18  F020         	call	_stop	;wreg free
  8036   0045F6  0012               	return		;funcret
  8037   0045F8                     __end_of_left135:
  8038                           	callstack 0
  8039                           
  8040 ;; *************** function _moveGreen *****************
  8041 ;; Defined at:
  8042 ;;		line 276 in file "dc_motor.c"
  8043 ;; Parameters:    Size  Location     Type
  8044 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  8045 ;;		 -> motorL(9), 
  8046 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  8047 ;;		 -> motorR(9), 
  8048 ;;  factor          2   32[COMRAM] unsigned int 
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;		None
  8051 ;; Return value:  Size  Location     Type
  8052 ;;                  1    wreg      void 
  8053 ;; Registers used:
  8054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8060 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8062 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8063 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8064 ;;Total ram usage:        6 bytes
  8065 ;; Hardware stack levels used: 1
  8066 ;; Hardware stack levels required when called: 5
  8067 ;; This function calls:
  8068 ;;		_backHalf
  8069 ;;		_left90
  8070 ;; This function is called by:
  8071 ;;		_decision
  8072 ;; This function uses a non-reentrant model
  8073 ;;
  8074                           
  8075                           	psect	text32
  8076   00489C                     __ptext32:
  8077                           	callstack 0
  8078   00489C                     _moveGreen:
  8079                           	callstack 24
  8080   00489C                     
  8081                           ;dc_motor.c: 276: void moveGreen(struct DC_motor *mL, struct DC_motor *mR, unsigned int 
      +                          factor);dc_motor.c: 277: {;dc_motor.c: 279:     backHalf(mL,mR);
  8082   00489C  C01F  F019         	movff	moveGreen@mL,backHalf@mL
  8083   0048A0  C020  F01A         	movff	moveGreen@mR,backHalf@mR
  8084   0048A4  EC24  F025         	call	_backHalf	;wreg free
  8085   0048A8                     
  8086                           ;dc_motor.c: 280:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8087   0048A8  0E29               	movlw	41
  8088   0048AA  6E24               	movwf	(??_moveGreen+1)^0,c
  8089   0048AC  0E96               	movlw	150
  8090   0048AE  6E23               	movwf	??_moveGreen^0,c
  8091   0048B0  0E7F               	movlw	127
  8092   0048B2                     u5517:
  8093   0048B2  2EE8               	decfsz	wreg,f,c
  8094   0048B4  D7FE               	bra	u5517
  8095   0048B6  2E23               	decfsz	??_moveGreen^0,f,c
  8096   0048B8  D7FC               	bra	u5517
  8097   0048BA  2E24               	decfsz	(??_moveGreen+1)^0,f,c
  8098   0048BC  D7FA               	bra	u5517
  8099   0048BE  0000               	nop	
  8100   0048C0                     
  8101                           ;dc_motor.c: 281:     left90(mL,mR,factor);
  8102   0048C0  C01F  F019         	movff	moveGreen@mL,left90@mL
  8103   0048C4  C020  F01A         	movff	moveGreen@mR,left90@mR
  8104   0048C8  C021  F01B         	movff	moveGreen@factor,left90@factor
  8105   0048CC  C022  F01C         	movff	moveGreen@factor+1,left90@factor+1
  8106   0048D0  ECFC  F022         	call	_left90	;wreg free
  8107   0048D4  0012               	return		;funcret
  8108   0048D6                     __end_of_moveGreen:
  8109                           	callstack 0
  8110                           
  8111 ;; *************** function _left90 *****************
  8112 ;; Defined at:
  8113 ;;		line 203 in file "dc_motor.c"
  8114 ;; Parameters:    Size  Location     Type
  8115 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8116 ;;		 -> motorL(9), 
  8117 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8118 ;;		 -> motorR(9), 
  8119 ;;  factor          2   26[COMRAM] unsigned int 
  8120 ;; Auto vars:     Size  Location     Type
  8121 ;;  delay_after_    2   28[COMRAM] unsigned int 
  8122 ;;  delay           2    0        unsigned int 
  8123 ;; Return value:  Size  Location     Type
  8124 ;;                  1    wreg      void 
  8125 ;; Registers used:
  8126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8127 ;; Tracked objects:
  8128 ;;		On entry : 0/0
  8129 ;;		On exit  : 0/0
  8130 ;;		Unchanged: 0/0
  8131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8132 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8133 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8135 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8136 ;;Total ram usage:        6 bytes
  8137 ;; Hardware stack levels used: 1
  8138 ;; Hardware stack levels required when called: 4
  8139 ;; This function calls:
  8140 ;;		___wmul
  8141 ;;		_customDelayMs
  8142 ;;		_stop
  8143 ;;		_turnLeft
  8144 ;; This function is called by:
  8145 ;;		_moveGreen
  8146 ;;		_movePink
  8147 ;;		_reverseTurn
  8148 ;; This function uses a non-reentrant model
  8149 ;;
  8150                           
  8151                           	psect	text33
  8152   0045F8                     __ptext33:
  8153                           	callstack 0
  8154   0045F8                     _left90:
  8155                           	callstack 24
  8156   0045F8                     
  8157                           ;dc_motor.c: 206:     unsigned int delay_after_calibration = delay * factor;
  8158   0045F8  0E01               	movlw	1
  8159   0045FA  6E03               	movwf	(___wmul@multiplier+1)^0,c
  8160   0045FC  0E22               	movlw	34
  8161   0045FE  6E02               	movwf	___wmul@multiplier^0,c
  8162   004600  C01B  F004         	movff	left90@factor,___wmul@multiplicand
  8163   004604  C01C  F005         	movff	left90@factor+1,___wmul@multiplicand+1
  8164   004608  EC7D  F025         	call	___wmul	;wreg free
  8165   00460C  C002  F01D         	movff	?___wmul,left90@delay_after_calibration
  8166   004610  C003  F01E         	movff	?___wmul+1,left90@delay_after_calibration+1
  8167   004614                     
  8168                           ;dc_motor.c: 207:     turnLeft(mL,mR);
  8169   004614  C019  F014         	movff	left90@mL,turnLeft@mL
  8170   004618  C01A  F015         	movff	left90@mR,turnLeft@mR
  8171   00461C  EC9E  F020         	call	_turnLeft	;wreg free
  8172   004620                     
  8173                           ;dc_motor.c: 208:     customDelayMs(delay_after_calibration);
  8174   004620  C01D  F002         	movff	left90@delay_after_calibration,customDelayMs@milliseconds
  8175   004624  C01E  F003         	movff	left90@delay_after_calibration+1,customDelayMs@milliseconds+1
  8176   004628  EC88  F024         	call	_customDelayMs	;wreg free
  8177   00462C                     
  8178                           ;dc_motor.c: 209:     stop(mL,mR);
  8179   00462C  C019  F014         	movff	left90@mL,stop@mL
  8180   004630  C01A  F015         	movff	left90@mR,stop@mR
  8181   004634  EC18  F020         	call	_stop	;wreg free
  8182   004638  0012               	return		;funcret
  8183   00463A                     __end_of_left90:
  8184                           	callstack 0
  8185                           
  8186 ;; *************** function _moveBlue *****************
  8187 ;; Defined at:
  8188 ;;		line 285 in file "dc_motor.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;  mL              1   30[COMRAM] PTR struct DC_motor
  8191 ;;		 -> motorL(9), 
  8192 ;;  mR              1   31[COMRAM] PTR struct DC_motor
  8193 ;;		 -> motorR(9), 
  8194 ;;  factor          2   32[COMRAM] unsigned int 
  8195 ;; Auto vars:     Size  Location     Type
  8196 ;;		None
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  1    wreg      void 
  8199 ;; Registers used:
  8200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8206 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8208 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8209 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8210 ;;Total ram usage:        6 bytes
  8211 ;; Hardware stack levels used: 1
  8212 ;; Hardware stack levels required when called: 5
  8213 ;; This function calls:
  8214 ;;		_backHalf
  8215 ;;		_turn180
  8216 ;; This function is called by:
  8217 ;;		_decision
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           	psect	text34
  8222   0048D6                     __ptext34:
  8223                           	callstack 0
  8224   0048D6                     _moveBlue:
  8225                           	callstack 24
  8226   0048D6                     
  8227                           ;dc_motor.c: 285: void moveBlue(struct DC_motor *mL, struct DC_motor *mR, unsigned int f
      +                          actor);dc_motor.c: 286: {;dc_motor.c: 288:     backHalf(mL,mR);
  8228   0048D6  C01F  F019         	movff	moveBlue@mL,backHalf@mL
  8229   0048DA  C020  F01A         	movff	moveBlue@mR,backHalf@mR
  8230   0048DE  EC24  F025         	call	_backHalf	;wreg free
  8231   0048E2                     
  8232                           ;dc_motor.c: 289:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8233   0048E2  0E29               	movlw	41
  8234   0048E4  6E24               	movwf	(??_moveBlue+1)^0,c
  8235   0048E6  0E96               	movlw	150
  8236   0048E8  6E23               	movwf	??_moveBlue^0,c
  8237   0048EA  0E7F               	movlw	127
  8238   0048EC                     u5527:
  8239   0048EC  2EE8               	decfsz	wreg,f,c
  8240   0048EE  D7FE               	bra	u5527
  8241   0048F0  2E23               	decfsz	??_moveBlue^0,f,c
  8242   0048F2  D7FC               	bra	u5527
  8243   0048F4  2E24               	decfsz	(??_moveBlue+1)^0,f,c
  8244   0048F6  D7FA               	bra	u5527
  8245   0048F8  0000               	nop	
  8246   0048FA                     
  8247                           ;dc_motor.c: 290:     turn180(mL,mR, factor);
  8248   0048FA  C01F  F019         	movff	moveBlue@mL,turn180@mL
  8249   0048FE  C020  F01A         	movff	moveBlue@mR,turn180@mR
  8250   004902  C021  F01B         	movff	moveBlue@factor,turn180@factor
  8251   004906  C022  F01C         	movff	moveBlue@factor+1,turn180@factor+1
  8252   00490A  EC1D  F023         	call	_turn180	;wreg free
  8253   00490E  0012               	return		;funcret
  8254   004910                     __end_of_moveBlue:
  8255                           	callstack 0
  8256                           
  8257 ;; *************** function _turn180 *****************
  8258 ;; Defined at:
  8259 ;;		line 213 in file "dc_motor.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8262 ;;		 -> motorL(9), 
  8263 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8264 ;;		 -> motorR(9), 
  8265 ;;  factor          2   26[COMRAM] unsigned int 
  8266 ;; Auto vars:     Size  Location     Type
  8267 ;;  delay_after_    2   28[COMRAM] unsigned int 
  8268 ;;  delay           2    0        unsigned int 
  8269 ;; Return value:  Size  Location     Type
  8270 ;;                  1    wreg      void 
  8271 ;; Registers used:
  8272 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8273 ;; Tracked objects:
  8274 ;;		On entry : 0/0
  8275 ;;		On exit  : 0/0
  8276 ;;		Unchanged: 0/0
  8277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8278 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8279 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8281 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8282 ;;Total ram usage:        6 bytes
  8283 ;; Hardware stack levels used: 1
  8284 ;; Hardware stack levels required when called: 4
  8285 ;; This function calls:
  8286 ;;		___wmul
  8287 ;;		_customDelayMs
  8288 ;;		_stop
  8289 ;;		_turnLeft
  8290 ;; This function is called by:
  8291 ;;		_moveBlue
  8292 ;;		_moveWhite
  8293 ;;		_reverseTurn
  8294 ;; This function uses a non-reentrant model
  8295 ;;
  8296                           
  8297                           	psect	text35
  8298   00463A                     __ptext35:
  8299                           	callstack 0
  8300   00463A                     _turn180:
  8301                           	callstack 24
  8302   00463A                     
  8303                           ;dc_motor.c: 216:     unsigned int delay_after_calibration = delay * factor;
  8304   00463A  0E02               	movlw	2
  8305   00463C  6E03               	movwf	(___wmul@multiplier+1)^0,c
  8306   00463E  0E44               	movlw	68
  8307   004640  6E02               	movwf	___wmul@multiplier^0,c
  8308   004642  C01B  F004         	movff	turn180@factor,___wmul@multiplicand
  8309   004646  C01C  F005         	movff	turn180@factor+1,___wmul@multiplicand+1
  8310   00464A  EC7D  F025         	call	___wmul	;wreg free
  8311   00464E  C002  F01D         	movff	?___wmul,turn180@delay_after_calibration
  8312   004652  C003  F01E         	movff	?___wmul+1,turn180@delay_after_calibration+1
  8313   004656                     
  8314                           ;dc_motor.c: 217:     turnLeft(mL,mR);
  8315   004656  C019  F014         	movff	turn180@mL,turnLeft@mL
  8316   00465A  C01A  F015         	movff	turn180@mR,turnLeft@mR
  8317   00465E  EC9E  F020         	call	_turnLeft	;wreg free
  8318   004662                     
  8319                           ;dc_motor.c: 218:     customDelayMs(delay_after_calibration);
  8320   004662  C01D  F002         	movff	turn180@delay_after_calibration,customDelayMs@milliseconds
  8321   004666  C01E  F003         	movff	turn180@delay_after_calibration+1,customDelayMs@milliseconds+1
  8322   00466A  EC88  F024         	call	_customDelayMs	;wreg free
  8323   00466E                     
  8324                           ;dc_motor.c: 219:     stop(mL,mR);
  8325   00466E  C019  F014         	movff	turn180@mL,stop@mL
  8326   004672  C01A  F015         	movff	turn180@mR,stop@mR
  8327   004676  EC18  F020         	call	_stop	;wreg free
  8328   00467A  0012               	return		;funcret
  8329   00467C                     __end_of_turn180:
  8330                           	callstack 0
  8331                           
  8332 ;; *************** function _turnLeft *****************
  8333 ;; Defined at:
  8334 ;;		line 105 in file "dc_motor.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8337 ;;		 -> motorL(9), 
  8338 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8339 ;;		 -> motorR(9), 
  8340 ;; Auto vars:     Size  Location     Type
  8341 ;;  i               2   22[COMRAM] unsigned int 
  8342 ;; Return value:  Size  Location     Type
  8343 ;;                  1    wreg      void 
  8344 ;; Registers used:
  8345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8346 ;; Tracked objects:
  8347 ;;		On entry : 0/0
  8348 ;;		On exit  : 0/0
  8349 ;;		Unchanged: 0/0
  8350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8351 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8352 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8353 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8354 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8355 ;;Total ram usage:        5 bytes
  8356 ;; Hardware stack levels used: 1
  8357 ;; Hardware stack levels required when called: 3
  8358 ;; This function calls:
  8359 ;;		_setMotorPWM
  8360 ;; This function is called by:
  8361 ;;		_left90
  8362 ;;		_turn180
  8363 ;;		_left135
  8364 ;; This function uses a non-reentrant model
  8365 ;;
  8366                           
  8367                           	psect	text36
  8368   00413C                     __ptext36:
  8369                           	callstack 0
  8370   00413C                     _turnLeft:
  8371                           	callstack 24
  8372   00413C                     
  8373                           ;dc_motor.c: 105: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 106: {;dc_motor.
      +                          c: 108:     mL->direction = 0;
  8374   00413C  5014               	movf	turnLeft@mL^0,w,c
  8375   00413E  6ED9               	movwf	fsr2l,c
  8376   004140  6ADA               	clrf	fsr2h,c
  8377   004142  0E01               	movlw	1
  8378   004144  26D9               	addwf	fsr2l,f,c
  8379   004146  6ADF               	clrf	indf2,c
  8380                           
  8381                           ;dc_motor.c: 109:     mR->direction = 1;
  8382   004148  5015               	movf	turnLeft@mR^0,w,c
  8383   00414A  6ED9               	movwf	fsr2l,c
  8384   00414C  6ADA               	clrf	fsr2h,c
  8385   00414E  0E01               	movlw	1
  8386   004150  26D9               	addwf	fsr2l,f,c
  8387   004152  0E01               	movlw	1
  8388   004154  6EDF               	movwf	indf2,c
  8389   004156                     
  8390                           ;dc_motor.c: 111:     setMotorPWM(mL);
  8391   004156  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8392   00415A  EC65  F019         	call	_setMotorPWM	;wreg free
  8393   00415E                     
  8394                           ;dc_motor.c: 112:     setMotorPWM(mR);
  8395   00415E  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8396   004162  EC65  F019         	call	_setMotorPWM	;wreg free
  8397   004166                     
  8398                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  8399   004166  0E00               	movlw	0
  8400   004168  6E18               	movwf	(turnLeft@i+1)^0,c
  8401   00416A  0E00               	movlw	0
  8402   00416C  6E17               	movwf	turnLeft@i^0,c
  8403   00416E                     l3969:
  8404                           
  8405                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  8406   00416E  5014               	movf	turnLeft@mL^0,w,c
  8407   004170  6ED9               	movwf	fsr2l,c
  8408   004172  6ADA               	clrf	fsr2h,c
  8409   004174  2ADF               	incf	indf2,f,c
  8410                           
  8411                           ;dc_motor.c: 116:         mR->power++;
  8412   004176  5015               	movf	turnLeft@mR^0,w,c
  8413   004178  6ED9               	movwf	fsr2l,c
  8414   00417A  6ADA               	clrf	fsr2h,c
  8415   00417C  2ADF               	incf	indf2,f,c
  8416   00417E                     
  8417                           ;dc_motor.c: 117:         setMotorPWM(mL);
  8418   00417E  C014  F00F         	movff	turnLeft@mL,setMotorPWM@m
  8419   004182  EC65  F019         	call	_setMotorPWM	;wreg free
  8420   004186                     
  8421                           ;dc_motor.c: 118:         setMotorPWM(mR);
  8422   004186  C015  F00F         	movff	turnLeft@mR,setMotorPWM@m
  8423   00418A  EC65  F019         	call	_setMotorPWM	;wreg free
  8424   00418E                     
  8425                           ;dc_motor.c: 119:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8426   00418E  0E0B               	movlw	11
  8427   004190  6E16               	movwf	??_turnLeft^0,c
  8428   004192  0E62               	movlw	98
  8429   004194                     u5537:
  8430   004194  2EE8               	decfsz	wreg,f,c
  8431   004196  D7FE               	bra	u5537
  8432   004198  2E16               	decfsz	??_turnLeft^0,f,c
  8433   00419A  D7FC               	bra	u5537
  8434   00419C  D000               	nop2	
  8435   00419E                     
  8436                           ;dc_motor.c: 120:     }
  8437   00419E  4A17               	infsnz	turnLeft@i^0,f,c
  8438   0041A0  2A18               	incf	(turnLeft@i+1)^0,f,c
  8439   0041A2  5018               	movf	(turnLeft@i+1)^0,w,c
  8440   0041A4  E109               	bnz	u2980
  8441   0041A6  0E32               	movlw	50
  8442   0041A8  5C17               	subwf	turnLeft@i^0,w,c
  8443   0041AA  A0D8               	btfss	status,0,c
  8444   0041AC  EFDA  F020         	goto	u2981
  8445   0041B0  EFDC  F020         	goto	u2980
  8446   0041B4                     u2981:
  8447   0041B4  EFB7  F020         	goto	l3969
  8448   0041B8                     u2980:
  8449   0041B8  0012               	return		;funcret
  8450   0041BA                     __end_of_turnLeft:
  8451                           	callstack 0
  8452                           
  8453 ;; *************** function _customDelayMs *****************
  8454 ;; Defined at:
  8455 ;;		line 149 in file "calibration.c"
  8456 ;; Parameters:    Size  Location     Type
  8457 ;;  milliseconds    2    1[COMRAM] unsigned int 
  8458 ;; Auto vars:     Size  Location     Type
  8459 ;;  i               2    4[COMRAM] unsigned int 
  8460 ;; Return value:  Size  Location     Type
  8461 ;;                  1    wreg      void 
  8462 ;; Registers used:
  8463 ;;		wreg, status,2, status,0
  8464 ;; Tracked objects:
  8465 ;;		On entry : 0/0
  8466 ;;		On exit  : 0/0
  8467 ;;		Unchanged: 0/0
  8468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8469 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8470 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8471 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8472 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8473 ;;Total ram usage:        5 bytes
  8474 ;; Hardware stack levels used: 1
  8475 ;; Hardware stack levels required when called: 1
  8476 ;; This function calls:
  8477 ;;		Nothing
  8478 ;; This function is called by:
  8479 ;;		_right90
  8480 ;;		_left90
  8481 ;;		_turn180
  8482 ;;		_right135
  8483 ;;		_left135
  8484 ;;		_reverseStraight
  8485 ;; This function uses a non-reentrant model
  8486 ;;
  8487                           
  8488                           	psect	text37
  8489   004910                     __ptext37:
  8490                           	callstack 0
  8491   004910                     _customDelayMs:
  8492                           	callstack 26
  8493   004910                     
  8494                           ;calibration.c: 150:     for (unsigned int i = 0; i < milliseconds; i++) {
  8495   004910  0E00               	movlw	0
  8496   004912  6E06               	movwf	(customDelayMs@i+1)^0,c
  8497   004914  0E00               	movlw	0
  8498   004916  6E05               	movwf	customDelayMs@i^0,c
  8499   004918  EF98  F024         	goto	l809
  8500   00491C                     l4027:
  8501                           
  8502                           ;calibration.c: 151:         _delay((unsigned long)((1)*(64000000/4000.0)));
  8503   00491C  0E15               	movlw	21
  8504   00491E  6E04               	movwf	??_customDelayMs^0,c
  8505   004920  0EC6               	movlw	198
  8506   004922                     u5547:
  8507   004922  2EE8               	decfsz	wreg,f,c
  8508   004924  D7FE               	bra	u5547
  8509   004926  2E04               	decfsz	??_customDelayMs^0,f,c
  8510   004928  D7FC               	bra	u5547
  8511   00492A  D000               	nop2	
  8512   00492C                     
  8513                           ;calibration.c: 152:     }
  8514   00492C  4A05               	infsnz	customDelayMs@i^0,f,c
  8515   00492E  2A06               	incf	(customDelayMs@i+1)^0,f,c
  8516   004930                     l809:
  8517   004930  5002               	movf	customDelayMs@milliseconds^0,w,c
  8518   004932  5C05               	subwf	customDelayMs@i^0,w,c
  8519   004934  5003               	movf	(customDelayMs@milliseconds+1)^0,w,c
  8520   004936  5806               	subwfb	(customDelayMs@i+1)^0,w,c
  8521   004938  A0D8               	btfss	status,0,c
  8522   00493A  EFA1  F024         	goto	u3011
  8523   00493E  EFA3  F024         	goto	u3010
  8524   004942                     u3011:
  8525   004942  EF8E  F024         	goto	l4027
  8526   004946                     u3010:
  8527   004946  0012               	return		;funcret
  8528   004948                     __end_of_customDelayMs:
  8529                           	callstack 0
  8530                           
  8531 ;; *************** function _backHalf *****************
  8532 ;; Defined at:
  8533 ;;		line 243 in file "dc_motor.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;  mL              1   24[COMRAM] PTR struct DC_motor
  8536 ;;		 -> motorL(9), 
  8537 ;;  mR              1   25[COMRAM] PTR struct DC_motor
  8538 ;;		 -> motorR(9), 
  8539 ;; Auto vars:     Size  Location     Type
  8540 ;;		None
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  1    wreg      void 
  8543 ;; Registers used:
  8544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8550 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8552 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8553 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8554 ;;Total ram usage:        4 bytes
  8555 ;; Hardware stack levels used: 1
  8556 ;; Hardware stack levels required when called: 4
  8557 ;; This function calls:
  8558 ;;		_fullSpeedBack
  8559 ;;		_stop
  8560 ;; This function is called by:
  8561 ;;		_moveRed
  8562 ;;		_moveGreen
  8563 ;;		_moveBlue
  8564 ;;		_moveOrange
  8565 ;;		_moveLightBlue
  8566 ;;		_moveWhite
  8567 ;;		_reverseTurn
  8568 ;; This function uses a non-reentrant model
  8569 ;;
  8570                           
  8571                           	psect	text38
  8572   004A48                     __ptext38:
  8573                           	callstack 0
  8574   004A48                     _backHalf:
  8575                           	callstack 24
  8576   004A48                     
  8577                           ;dc_motor.c: 243: void backHalf(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 24
      +                          4: {;dc_motor.c: 245:     fullSpeedBack(mL,mR);
  8578   004A48  C019  F014         	movff	backHalf@mL,fullSpeedBack@mL
  8579   004A4C  C01A  F015         	movff	backHalf@mR,fullSpeedBack@mR
  8580   004A50  ECDD  F020         	call	_fullSpeedBack	;wreg free
  8581   004A54                     
  8582                           ;dc_motor.c: 246:     _delay((unsigned long)((300)*(64000000/4000.0)));
  8583   004A54  0E19               	movlw	25
  8584   004A56  6E1C               	movwf	(??_backHalf+1)^0,c
  8585   004A58  0E5A               	movlw	90
  8586   004A5A  6E1B               	movwf	??_backHalf^0,c
  8587   004A5C  0EB2               	movlw	178
  8588   004A5E                     u5557:
  8589   004A5E  2EE8               	decfsz	wreg,f,c
  8590   004A60  D7FE               	bra	u5557
  8591   004A62  2E1B               	decfsz	??_backHalf^0,f,c
  8592   004A64  D7FC               	bra	u5557
  8593   004A66  2E1C               	decfsz	(??_backHalf+1)^0,f,c
  8594   004A68  D7FA               	bra	u5557
  8595   004A6A                     
  8596                           ;dc_motor.c: 247:     stop(mL,mR);
  8597   004A6A  C019  F014         	movff	backHalf@mL,stop@mL
  8598   004A6E  C01A  F015         	movff	backHalf@mR,stop@mR
  8599   004A72  EC18  F020         	call	_stop	;wreg free
  8600   004A76  0012               	return		;funcret
  8601   004A78                     __end_of_backHalf:
  8602                           	callstack 0
  8603                           
  8604 ;; *************** function _stop *****************
  8605 ;; Defined at:
  8606 ;;		line 88 in file "dc_motor.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8609 ;;		 -> motorL(9), 
  8610 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8611 ;;		 -> motorR(9), 
  8612 ;; Auto vars:     Size  Location     Type
  8613 ;;		None
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  1    wreg      void 
  8616 ;; Registers used:
  8617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8623 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8625 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8626 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8627 ;;Total ram usage:        3 bytes
  8628 ;; Hardware stack levels used: 1
  8629 ;; Hardware stack levels required when called: 3
  8630 ;; This function calls:
  8631 ;;		_setMotorPWM
  8632 ;; This function is called by:
  8633 ;;		_main
  8634 ;;		_right90
  8635 ;;		_left90
  8636 ;;		_turn180
  8637 ;;		_right135
  8638 ;;		_left135
  8639 ;;		_backHalf
  8640 ;;		_backOneAndHalf
  8641 ;;		_reverseStraight
  8642 ;; This function uses a non-reentrant model
  8643 ;;
  8644                           
  8645                           	psect	text39
  8646   004030                     __ptext39:
  8647                           	callstack 0
  8648   004030                     _stop:
  8649                           	callstack 27
  8650   004030                     
  8651                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 91:
      +                               while(mL->power > 0 || mR->power > 0) {
  8652   004030  EF48  F020         	goto	l3953
  8653   004034                     l3939:
  8654                           
  8655                           ;dc_motor.c: 92:         if (mL->power > 0) mL->power--;
  8656   004034  5014               	movf	stop@mL^0,w,c
  8657   004036  6ED9               	movwf	fsr2l,c
  8658   004038  6ADA               	clrf	fsr2h,c
  8659   00403A  50DF               	movf	indf2,w,c
  8660   00403C  B4D8               	btfsc	status,2,c
  8661   00403E  EF23  F020         	goto	u2941
  8662   004042  EF25  F020         	goto	u2940
  8663   004046                     u2941:
  8664   004046  EF29  F020         	goto	l3943
  8665   00404A                     u2940:
  8666   00404A  5014               	movf	stop@mL^0,w,c
  8667   00404C  6ED9               	movwf	fsr2l,c
  8668   00404E  6ADA               	clrf	fsr2h,c
  8669   004050  06DF               	decf	indf2,f,c
  8670   004052                     l3943:
  8671                           
  8672                           ;dc_motor.c: 93:         if (mR->power > 0) mR->power--;
  8673   004052  5015               	movf	stop@mR^0,w,c
  8674   004054  6ED9               	movwf	fsr2l,c
  8675   004056  6ADA               	clrf	fsr2h,c
  8676   004058  50DF               	movf	indf2,w,c
  8677   00405A  B4D8               	btfsc	status,2,c
  8678   00405C  EF32  F020         	goto	u2951
  8679   004060  EF34  F020         	goto	u2950
  8680   004064                     u2951:
  8681   004064  EF38  F020         	goto	l3947
  8682   004068                     u2950:
  8683   004068  5015               	movf	stop@mR^0,w,c
  8684   00406A  6ED9               	movwf	fsr2l,c
  8685   00406C  6ADA               	clrf	fsr2h,c
  8686   00406E  06DF               	decf	indf2,f,c
  8687   004070                     l3947:
  8688                           
  8689                           ;dc_motor.c: 96:         setMotorPWM(mL);
  8690   004070  C014  F00F         	movff	stop@mL,setMotorPWM@m
  8691   004074  EC65  F019         	call	_setMotorPWM	;wreg free
  8692   004078                     
  8693                           ;dc_motor.c: 97:         setMotorPWM(mR);
  8694   004078  C015  F00F         	movff	stop@mR,setMotorPWM@m
  8695   00407C  EC65  F019         	call	_setMotorPWM	;wreg free
  8696   004080                     
  8697                           ;dc_motor.c: 100:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8698   004080  0E0B               	movlw	11
  8699   004082  6E16               	movwf	??_stop^0,c
  8700   004084  0E62               	movlw	98
  8701   004086                     u5567:
  8702   004086  2EE8               	decfsz	wreg,f,c
  8703   004088  D7FE               	bra	u5567
  8704   00408A  2E16               	decfsz	??_stop^0,f,c
  8705   00408C  D7FC               	bra	u5567
  8706   00408E  D000               	nop2	
  8707   004090                     l3953:
  8708                           
  8709                           ;dc_motor.c: 91:     while(mL->power > 0 || mR->power > 0) {
  8710   004090  5014               	movf	stop@mL^0,w,c
  8711   004092  6ED9               	movwf	fsr2l,c
  8712   004094  6ADA               	clrf	fsr2h,c
  8713   004096  50DF               	movf	indf2,w,c
  8714   004098  A4D8               	btfss	status,2,c
  8715   00409A  EF51  F020         	goto	u2961
  8716   00409E  EF53  F020         	goto	u2960
  8717   0040A2                     u2961:
  8718   0040A2  EF1A  F020         	goto	l3939
  8719   0040A6                     u2960:
  8720   0040A6  5015               	movf	stop@mR^0,w,c
  8721   0040A8  6ED9               	movwf	fsr2l,c
  8722   0040AA  6ADA               	clrf	fsr2h,c
  8723   0040AC  50DF               	movf	indf2,w,c
  8724   0040AE  A4D8               	btfss	status,2,c
  8725   0040B0  EF5C  F020         	goto	u2971
  8726   0040B4  EF5E  F020         	goto	u2970
  8727   0040B8                     u2971:
  8728   0040B8  EF1A  F020         	goto	l3939
  8729   0040BC                     u2970:
  8730   0040BC  0012               	return		;funcret
  8731   0040BE                     __end_of_stop:
  8732                           	callstack 0
  8733                           
  8734 ;; *************** function _fullSpeedBack *****************
  8735 ;; Defined at:
  8736 ;;		line 165 in file "dc_motor.c"
  8737 ;; Parameters:    Size  Location     Type
  8738 ;;  mL              1   19[COMRAM] PTR struct DC_motor
  8739 ;;		 -> motorL(9), 
  8740 ;;  mR              1   20[COMRAM] PTR struct DC_motor
  8741 ;;		 -> motorR(9), 
  8742 ;; Auto vars:     Size  Location     Type
  8743 ;;  power           2   22[COMRAM] int 
  8744 ;; Return value:  Size  Location     Type
  8745 ;;                  1    wreg      void 
  8746 ;; Registers used:
  8747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8748 ;; Tracked objects:
  8749 ;;		On entry : 0/0
  8750 ;;		On exit  : 0/0
  8751 ;;		Unchanged: 0/0
  8752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8753 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8754 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8755 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8756 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8757 ;;Total ram usage:        5 bytes
  8758 ;; Hardware stack levels used: 1
  8759 ;; Hardware stack levels required when called: 3
  8760 ;; This function calls:
  8761 ;;		_setMotorPWM
  8762 ;; This function is called by:
  8763 ;;		_backHalf
  8764 ;;		_backOneAndHalf
  8765 ;; This function uses a non-reentrant model
  8766 ;;
  8767                           
  8768                           	psect	text40
  8769   0041BA                     __ptext40:
  8770                           	callstack 0
  8771   0041BA                     _fullSpeedBack:
  8772                           	callstack 24
  8773   0041BA                     
  8774                           ;dc_motor.c: 165: void fullSpeedBack(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_m
      +                          otor.c: 168:     mL->direction = 0;
  8775   0041BA  5014               	movf	fullSpeedBack@mL^0,w,c
  8776   0041BC  6ED9               	movwf	fsr2l,c
  8777   0041BE  6ADA               	clrf	fsr2h,c
  8778   0041C0  0E01               	movlw	1
  8779   0041C2  26D9               	addwf	fsr2l,f,c
  8780   0041C4  6ADF               	clrf	indf2,c
  8781                           
  8782                           ;dc_motor.c: 169:     mR->direction = 0;
  8783   0041C6  5015               	movf	fullSpeedBack@mR^0,w,c
  8784   0041C8  6ED9               	movwf	fsr2l,c
  8785   0041CA  6ADA               	clrf	fsr2h,c
  8786   0041CC  0E01               	movlw	1
  8787   0041CE  26D9               	addwf	fsr2l,f,c
  8788   0041D0  6ADF               	clrf	indf2,c
  8789   0041D2                     
  8790                           ;dc_motor.c: 171:     for(int power = 0; power <= 50; power++) {
  8791   0041D2  0E00               	movlw	0
  8792   0041D4  6E18               	movwf	(fullSpeedBack@power+1)^0,c
  8793   0041D6  0E00               	movlw	0
  8794   0041D8  6E17               	movwf	fullSpeedBack@power^0,c
  8795   0041DA                     l4013:
  8796                           
  8797                           ;dc_motor.c: 172:         mL->power = power;
  8798   0041DA  5014               	movf	fullSpeedBack@mL^0,w,c
  8799   0041DC  6ED9               	movwf	fsr2l,c
  8800   0041DE  6ADA               	clrf	fsr2h,c
  8801   0041E0  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8802                           
  8803                           ;dc_motor.c: 173:         mR->power = power;
  8804   0041E4  5015               	movf	fullSpeedBack@mR^0,w,c
  8805   0041E6  6ED9               	movwf	fsr2l,c
  8806   0041E8  6ADA               	clrf	fsr2h,c
  8807   0041EA  C017  FFDF         	movff	fullSpeedBack@power,indf2
  8808   0041EE                     
  8809                           ;dc_motor.c: 176:         setMotorPWM(mL);
  8810   0041EE  C014  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  8811   0041F2  EC65  F019         	call	_setMotorPWM	;wreg free
  8812   0041F6                     
  8813                           ;dc_motor.c: 177:         setMotorPWM(mR);
  8814   0041F6  C015  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  8815   0041FA  EC65  F019         	call	_setMotorPWM	;wreg free
  8816   0041FE                     
  8817                           ;dc_motor.c: 180:         _delay((unsigned long)((500)*(64000000/4000000.0)));
  8818   0041FE  0E0B               	movlw	11
  8819   004200  6E16               	movwf	??_fullSpeedBack^0,c
  8820   004202  0E62               	movlw	98
  8821   004204                     u5577:
  8822   004204  2EE8               	decfsz	wreg,f,c
  8823   004206  D7FE               	bra	u5577
  8824   004208  2E16               	decfsz	??_fullSpeedBack^0,f,c
  8825   00420A  D7FC               	bra	u5577
  8826   00420C  D000               	nop2	
  8827   00420E                     
  8828                           ;dc_motor.c: 181:     }
  8829   00420E  4A17               	infsnz	fullSpeedBack@power^0,f,c
  8830   004210  2A18               	incf	(fullSpeedBack@power+1)^0,f,c
  8831   004212  BE18               	btfsc	(fullSpeedBack@power+1)^0,7,c
  8832   004214  EF15  F021         	goto	u3001
  8833   004218  5018               	movf	(fullSpeedBack@power+1)^0,w,c
  8834   00421A  E109               	bnz	u3000
  8835   00421C  0E33               	movlw	51
  8836   00421E  5C17               	subwf	fullSpeedBack@power^0,w,c
  8837   004220  A0D8               	btfss	status,0,c
  8838   004222  EF15  F021         	goto	u3001
  8839   004226  EF17  F021         	goto	u3000
  8840   00422A                     u3001:
  8841   00422A  EFED  F020         	goto	l4013
  8842   00422E                     u3000:
  8843   00422E  0012               	return		;funcret
  8844   004230                     __end_of_fullSpeedBack:
  8845                           	callstack 0
  8846                           
  8847 ;; *************** function _setMotorPWM *****************
  8848 ;; Defined at:
  8849 ;;		line 65 in file "dc_motor.c"
  8850 ;; Parameters:    Size  Location     Type
  8851 ;;  m               1   14[COMRAM] PTR struct DC_motor
  8852 ;;		 -> motorR(9), motorL(9), 
  8853 ;; Auto vars:     Size  Location     Type
  8854 ;;  negDuty         1   18[COMRAM] unsigned char 
  8855 ;;  posDuty         1   17[COMRAM] unsigned char 
  8856 ;; Return value:  Size  Location     Type
  8857 ;;                  1    wreg      void 
  8858 ;; Registers used:
  8859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8865 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8866 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8867 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8868 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8869 ;;Total ram usage:        5 bytes
  8870 ;; Hardware stack levels used: 1
  8871 ;; Hardware stack levels required when called: 2
  8872 ;; This function calls:
  8873 ;;		___lwdiv
  8874 ;;		___wmul
  8875 ;; This function is called by:
  8876 ;;		_stop
  8877 ;;		_turnLeft
  8878 ;;		_turnRight
  8879 ;;		_fullSpeedAhead
  8880 ;;		_fullSpeedBack
  8881 ;; This function uses a non-reentrant model
  8882 ;;
  8883                           
  8884                           	psect	text41
  8885   0032CA                     __ptext41:
  8886                           	callstack 0
  8887   0032CA                     _setMotorPWM:
  8888                           	callstack 27
  8889   0032CA                     
  8890                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  8891   0032CA  500F               	movf	setMotorPWM@m^0,w,c
  8892   0032CC  6ED9               	movwf	fsr2l,c
  8893   0032CE  6ADA               	clrf	fsr2h,c
  8894   0032D0  0E02               	movlw	2
  8895   0032D2  26D9               	addwf	fsr2l,f,c
  8896   0032D4  50DF               	movf	indf2,w,c
  8897   0032D6  B4D8               	btfsc	status,2,c
  8898   0032D8  EF70  F019         	goto	u2851
  8899   0032DC  EF72  F019         	goto	u2850
  8900   0032E0                     u2851:
  8901   0032E0  EFA2  F019         	goto	l3867
  8902   0032E4                     u2850:
  8903   0032E4                     
  8904                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  8905   0032E4  500F               	movf	setMotorPWM@m^0,w,c
  8906   0032E6  6ED9               	movwf	fsr2l,c
  8907   0032E8  6ADA               	clrf	fsr2h,c
  8908   0032EA  50DF               	movf	indf2,w,c
  8909   0032EC  6E10               	movwf	??_setMotorPWM^0,c
  8910   0032EE  5010               	movf	??_setMotorPWM^0,w,c
  8911   0032F0  6E02               	movwf	___wmul@multiplier^0,c
  8912   0032F2  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8913   0032F4  500F               	movf	setMotorPWM@m^0,w,c
  8914   0032F6  6ED9               	movwf	fsr2l,c
  8915   0032F8  6ADA               	clrf	fsr2h,c
  8916   0032FA  0E03               	movlw	3
  8917   0032FC  26D9               	addwf	fsr2l,f,c
  8918   0032FE  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8919   003302  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8920   003306  EC7D  F025         	call	___wmul	;wreg free
  8921   00330A  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8922   00330E  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8923   003312  0E00               	movlw	0
  8924   003314  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8925   003316  0E64               	movlw	100
  8926   003318  6E0A               	movwf	___lwdiv@divisor^0,c
  8927   00331A  EC18  F021         	call	___lwdiv	;wreg free
  8928   00331E  500F               	movf	setMotorPWM@m^0,w,c
  8929   003320  6ED9               	movwf	fsr2l,c
  8930   003322  6ADA               	clrf	fsr2h,c
  8931   003324  0E03               	movlw	3
  8932   003326  26D9               	addwf	fsr2l,f,c
  8933   003328  50DF               	movf	indf2,w,c
  8934   00332A  6E11               	movwf	(??_setMotorPWM+1)^0,c
  8935   00332C  5008               	movf	?___lwdiv^0,w,c
  8936   00332E  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  8937   003330  6E12               	movwf	setMotorPWM@posDuty^0,c
  8938   003332                     
  8939                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  8940   003332  500F               	movf	setMotorPWM@m^0,w,c
  8941   003334  6ED9               	movwf	fsr2l,c
  8942   003336  6ADA               	clrf	fsr2h,c
  8943   003338  0E03               	movlw	3
  8944   00333A  26D9               	addwf	fsr2l,f,c
  8945   00333C  50DF               	movf	indf2,w,c
  8946   00333E  6E13               	movwf	setMotorPWM@negDuty^0,c
  8947                           
  8948                           ;dc_motor.c: 72:     }
  8949   003340  EFC3  F019         	goto	l3871
  8950   003344                     l3867:
  8951                           
  8952                           ;dc_motor.c: 74:         posDuty=0;
  8953   003344  0E00               	movlw	0
  8954   003346  6E12               	movwf	setMotorPWM@posDuty^0,c
  8955   003348                     
  8956                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  8957   003348  500F               	movf	setMotorPWM@m^0,w,c
  8958   00334A  6ED9               	movwf	fsr2l,c
  8959   00334C  6ADA               	clrf	fsr2h,c
  8960   00334E  50DF               	movf	indf2,w,c
  8961   003350  6E10               	movwf	??_setMotorPWM^0,c
  8962   003352  5010               	movf	??_setMotorPWM^0,w,c
  8963   003354  6E02               	movwf	___wmul@multiplier^0,c
  8964   003356  6A03               	clrf	(___wmul@multiplier+1)^0,c
  8965   003358  500F               	movf	setMotorPWM@m^0,w,c
  8966   00335A  6ED9               	movwf	fsr2l,c
  8967   00335C  6ADA               	clrf	fsr2h,c
  8968   00335E  0E03               	movlw	3
  8969   003360  26D9               	addwf	fsr2l,f,c
  8970   003362  CFDE F004          	movff	postinc2,___wmul@multiplicand
  8971   003366  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  8972   00336A  EC7D  F025         	call	___wmul	;wreg free
  8973   00336E  C002  F008         	movff	?___wmul,___lwdiv@dividend
  8974   003372  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  8975   003376  0E00               	movlw	0
  8976   003378  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  8977   00337A  0E64               	movlw	100
  8978   00337C  6E0A               	movwf	___lwdiv@divisor^0,c
  8979   00337E  EC18  F021         	call	___lwdiv	;wreg free
  8980   003382  5008               	movf	?___lwdiv^0,w,c
  8981   003384  6E13               	movwf	setMotorPWM@negDuty^0,c
  8982   003386                     l3871:
  8983                           
  8984                           ;dc_motor.c: 78:     if (m->direction) {
  8985   003386  500F               	movf	setMotorPWM@m^0,w,c
  8986   003388  6ED9               	movwf	fsr2l,c
  8987   00338A  6ADA               	clrf	fsr2h,c
  8988   00338C  0E01               	movlw	1
  8989   00338E  26D9               	addwf	fsr2l,f,c
  8990   003390  50DF               	movf	indf2,w,c
  8991   003392  B4D8               	btfsc	status,2,c
  8992   003394  EFCE  F019         	goto	u2861
  8993   003398  EFD0  F019         	goto	u2860
  8994   00339C                     u2861:
  8995   00339C  EFF0  F019         	goto	l3875
  8996   0033A0                     u2860:
  8997   0033A0                     
  8998                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  8999   0033A0  500F               	movf	setMotorPWM@m^0,w,c
  9000   0033A2  6ED9               	movwf	fsr2l,c
  9001   0033A4  6ADA               	clrf	fsr2h,c
  9002   0033A6  0E05               	movlw	5
  9003   0033A8  26D9               	addwf	fsr2l,f,c
  9004   0033AA  CFDE F010          	movff	postinc2,??_setMotorPWM
  9005   0033AE  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  9006   0033B2  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  9007   0033B6  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9008   0033BA  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  9009                           
  9010                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  9011   0033BE  500F               	movf	setMotorPWM@m^0,w,c
  9012   0033C0  6ED9               	movwf	fsr2l,c
  9013   0033C2  6ADA               	clrf	fsr2h,c
  9014   0033C4  0E07               	movlw	7
  9015   0033C6  26D9               	addwf	fsr2l,f,c
  9016   0033C8  CFDE F010          	movff	postinc2,??_setMotorPWM
  9017   0033CC  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  9018   0033D0  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  9019   0033D4  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9020   0033D8  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  9021                           
  9022                           ;dc_motor.c: 81:     } else {
  9023   0033DC  EF0E  F01A         	goto	l392
  9024   0033E0                     l3875:
  9025                           
  9026                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  9027   0033E0  500F               	movf	setMotorPWM@m^0,w,c
  9028   0033E2  6ED9               	movwf	fsr2l,c
  9029   0033E4  6ADA               	clrf	fsr2h,c
  9030   0033E6  0E05               	movlw	5
  9031   0033E8  26D9               	addwf	fsr2l,f,c
  9032   0033EA  CFDE F010          	movff	postinc2,??_setMotorPWM
  9033   0033EE  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  9034   0033F2  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  9035   0033F6  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9036   0033FA  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  9037                           
  9038                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  9039   0033FE  500F               	movf	setMotorPWM@m^0,w,c
  9040   003400  6ED9               	movwf	fsr2l,c
  9041   003402  6ADA               	clrf	fsr2h,c
  9042   003404  0E07               	movlw	7
  9043   003406  26D9               	addwf	fsr2l,f,c
  9044   003408  CFDE F010          	movff	postinc2,??_setMotorPWM
  9045   00340C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  9046   003410  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  9047   003414  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9048   003418  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  9049   00341C                     l392:
  9050   00341C  0012               	return		;funcret
  9051   00341E                     __end_of_setMotorPWM:
  9052                           	callstack 0
  9053                           
  9054 ;; *************** function ___lwdiv *****************
  9055 ;; Defined at:
  9056 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  9057 ;; Parameters:    Size  Location     Type
  9058 ;;  dividend        2    7[COMRAM] unsigned int 
  9059 ;;  divisor         2    9[COMRAM] unsigned int 
  9060 ;; Auto vars:     Size  Location     Type
  9061 ;;  quotient        2   11[COMRAM] unsigned int 
  9062 ;;  counter         1   13[COMRAM] unsigned char 
  9063 ;; Return value:  Size  Location     Type
  9064 ;;                  2    7[COMRAM] unsigned int 
  9065 ;; Registers used:
  9066 ;;		wreg, status,2, status,0
  9067 ;; Tracked objects:
  9068 ;;		On entry : 0/0
  9069 ;;		On exit  : 0/0
  9070 ;;		Unchanged: 0/0
  9071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9072 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9073 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9075 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9076 ;;Total ram usage:        7 bytes
  9077 ;; Hardware stack levels used: 1
  9078 ;; Hardware stack levels required when called: 1
  9079 ;; This function calls:
  9080 ;;		Nothing
  9081 ;; This function is called by:
  9082 ;;		_setMotorPWM
  9083 ;;		_ADC2String
  9084 ;; This function uses a non-reentrant model
  9085 ;;
  9086                           
  9087                           	psect	text42
  9088   004230                     __ptext42:
  9089                           	callstack 0
  9090   004230                     ___lwdiv:
  9091                           	callstack 27
  9092   004230  0E00               	movlw	0
  9093   004232  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  9094   004234  0E00               	movlw	0
  9095   004236  6E0C               	movwf	___lwdiv@quotient^0,c
  9096   004238  500A               	movf	___lwdiv@divisor^0,w,c
  9097   00423A  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  9098   00423C  B4D8               	btfsc	status,2,c
  9099   00423E  EF23  F021         	goto	u2701
  9100   004242  EF25  F021         	goto	u2700
  9101   004246                     u2701:
  9102   004246  EF4D  F021         	goto	l1306
  9103   00424A                     u2700:
  9104   00424A  0E01               	movlw	1
  9105   00424C  6E0E               	movwf	___lwdiv@counter^0,c
  9106   00424E  EF2D  F021         	goto	l3783
  9107   004252                     l3781:
  9108   004252  90D8               	bcf	status,0,c
  9109   004254  360A               	rlcf	___lwdiv@divisor^0,f,c
  9110   004256  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  9111   004258  2A0E               	incf	___lwdiv@counter^0,f,c
  9112   00425A                     l3783:
  9113   00425A  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  9114   00425C  EF32  F021         	goto	u2711
  9115   004260  EF34  F021         	goto	u2710
  9116   004264                     u2711:
  9117   004264  EF29  F021         	goto	l3781
  9118   004268                     u2710:
  9119   004268                     l3785:
  9120   004268  90D8               	bcf	status,0,c
  9121   00426A  360C               	rlcf	___lwdiv@quotient^0,f,c
  9122   00426C  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  9123   00426E  500A               	movf	___lwdiv@divisor^0,w,c
  9124   004270  5C08               	subwf	___lwdiv@dividend^0,w,c
  9125   004272  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  9126   004274  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  9127   004276  A0D8               	btfss	status,0,c
  9128   004278  EF40  F021         	goto	u2721
  9129   00427C  EF42  F021         	goto	u2720
  9130   004280                     u2721:
  9131   004280  EF47  F021         	goto	l3793
  9132   004284                     u2720:
  9133   004284  500A               	movf	___lwdiv@divisor^0,w,c
  9134   004286  5E08               	subwf	___lwdiv@dividend^0,f,c
  9135   004288  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  9136   00428A  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  9137   00428C  800C               	bsf	___lwdiv@quotient^0,0,c
  9138   00428E                     l3793:
  9139   00428E  90D8               	bcf	status,0,c
  9140   004290  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  9141   004292  320A               	rrcf	___lwdiv@divisor^0,f,c
  9142   004294  2E0E               	decfsz	___lwdiv@counter^0,f,c
  9143   004296  EF34  F021         	goto	l3785
  9144   00429A                     l1306:
  9145   00429A  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  9146   00429E  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9147   0042A2  0012               	return		;funcret
  9148   0042A4                     __end_of___lwdiv:
  9149                           	callstack 0
  9150                           
  9151 ;; *************** function _logAction *****************
  9152 ;; Defined at:
  9153 ;;		line 14 in file "return_func.c"
  9154 ;; Parameters:    Size  Location     Type
  9155 ;;  newAction       1    wreg     unsigned char 
  9156 ;;  newTime         4    1[COMRAM] long 
  9157 ;;  path_step       2    5[COMRAM] unsigned int 
  9158 ;; Auto vars:     Size  Location     Type
  9159 ;;  newAction       1    9[COMRAM] unsigned char 
  9160 ;; Return value:  Size  Location     Type
  9161 ;;                  1    wreg      void 
  9162 ;; Registers used:
  9163 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9164 ;; Tracked objects:
  9165 ;;		On entry : 0/0
  9166 ;;		On exit  : 0/0
  9167 ;;		Unchanged: 0/0
  9168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9169 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9170 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9171 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9172 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9173 ;;Total ram usage:        9 bytes
  9174 ;; Hardware stack levels used: 1
  9175 ;; Hardware stack levels required when called: 1
  9176 ;; This function calls:
  9177 ;;		Nothing
  9178 ;; This function is called by:
  9179 ;;		_decision
  9180 ;;		_get16bitTMR0val
  9181 ;; This function uses a non-reentrant model
  9182 ;;
  9183                           
  9184                           	psect	text43
  9185   00430E                     __ptext43:
  9186                           	callstack 0
  9187   00430E                     _logAction:
  9188                           	callstack 28
  9189                           
  9190                           ;incstack = 0
  9191                           ;logAction@newAction stored from wreg
  9192   00430E  6E0A               	movwf	logAction@newAction^0,c
  9193   004310                     
  9194                           ;return_func.c: 15:     if (path_step < 50) {
  9195   004310  5007               	movf	(logAction@path_step+1)^0,w,c
  9196   004312  E107               	bnz	u4251
  9197   004314  0E32               	movlw	50
  9198   004316  5C06               	subwf	logAction@path_step^0,w,c
  9199   004318  B0D8               	btfsc	status,0,c
  9200   00431A  EF91  F021         	goto	u4251
  9201   00431E  EF93  F021         	goto	u4250
  9202   004322                     u4251:
  9203   004322  EFB3  F021         	goto	l673
  9204   004326                     u4250:
  9205   004326                     
  9206                           ;return_func.c: 16:         action[path_step] = newAction;
  9207   004326  0E3C               	movlw	low _action
  9208   004328  2406               	addwf	logAction@path_step^0,w,c
  9209   00432A  6ED9               	movwf	fsr2l,c
  9210   00432C  0E01               	movlw	high _action
  9211   00432E  2007               	addwfc	(logAction@path_step+1)^0,w,c
  9212   004330  6EDA               	movwf	fsr2h,c
  9213   004332  C00A  FFDF         	movff	logAction@newAction,indf2
  9214                           
  9215                           ;return_func.c: 17:         time[path_step] = newTime;
  9216   004336  0E00               	movlw	low _time
  9217   004338  6E08               	movwf	??_logAction^0,c
  9218   00433A  0E02               	movlw	high _time
  9219   00433C  6E09               	movwf	(??_logAction+1)^0,c
  9220   00433E  90D8               	bcf	status,0,c
  9221   004340  3406               	rlcf	logAction@path_step^0,w,c
  9222   004342  6ED9               	movwf	fsr2l,c
  9223   004344  3407               	rlcf	(logAction@path_step+1)^0,w,c
  9224   004346  6EDA               	movwf	fsr2h,c
  9225   004348  90D8               	bcf	status,0,c
  9226   00434A  36D9               	rlcf	fsr2l,f,c
  9227   00434C  36DA               	rlcf	fsr2h,f,c
  9228   00434E  5008               	movf	??_logAction^0,w,c
  9229   004350  26D9               	addwf	fsr2l,f,c
  9230   004352  5009               	movf	(??_logAction+1)^0,w,c
  9231   004354  22DA               	addwfc	fsr2h,f,c
  9232   004356  C002  FFDE         	movff	logAction@newTime,postinc2
  9233   00435A  C003  FFDE         	movff	logAction@newTime+1,postinc2
  9234   00435E  C004  FFDE         	movff	logAction@newTime+2,postinc2
  9235   004362  C005  FFDE         	movff	logAction@newTime+3,postinc2
  9236   004366                     l673:
  9237   004366  0012               	return		;funcret
  9238   004368                     __end_of_logAction:
  9239                           	callstack 0
  9240                           
  9241 ;; *************** function _color_click_init *****************
  9242 ;; Defined at:
  9243 ;;		line 9 in file "color.c"
  9244 ;; Parameters:    Size  Location     Type
  9245 ;;		None
  9246 ;; Auto vars:     Size  Location     Type
  9247 ;;		None
  9248 ;; Return value:  Size  Location     Type
  9249 ;;                  1    wreg      void 
  9250 ;; Registers used:
  9251 ;;		wreg, status,2, status,0, cstack
  9252 ;; Tracked objects:
  9253 ;;		On entry : 0/0
  9254 ;;		On exit  : 0/0
  9255 ;;		Unchanged: 0/0
  9256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9259 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9260 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9261 ;;Total ram usage:        1 bytes
  9262 ;; Hardware stack levels used: 1
  9263 ;; Hardware stack levels required when called: 4
  9264 ;; This function calls:
  9265 ;;		_I2C_2_Master_Init
  9266 ;;		_color_writetoaddr
  9267 ;; This function is called by:
  9268 ;;		_main
  9269 ;; This function uses a non-reentrant model
  9270 ;;
  9271                           
  9272                           	psect	text44
  9273   004948                     __ptext44:
  9274                           	callstack 0
  9275   004948                     _color_click_init:
  9276                           	callstack 26
  9277   004948                     
  9278                           ;color.c: 12:     I2C_2_Master_Init();
  9279   004948  EC54  F025         	call	_I2C_2_Master_Init	;wreg free
  9280   00494C                     
  9281                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  9282   00494C  0E01               	movlw	1
  9283   00494E  6E04               	movwf	color_writetoaddr@value^0,c
  9284   004950  0E00               	movlw	0
  9285   004952  EC90  F025         	call	_color_writetoaddr
  9286   004956                     
  9287                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  9288   004956  0E3F               	movlw	63
  9289   004958  6E06               	movwf	??_color_click_init^0,c
  9290   00495A  0E55               	movlw	85
  9291   00495C                     u5587:
  9292   00495C  2EE8               	decfsz	wreg,f,c
  9293   00495E  D7FE               	bra	u5587
  9294   004960  2E06               	decfsz	??_color_click_init^0,f,c
  9295   004962  D7FC               	bra	u5587
  9296   004964  0000               	nop	
  9297   004966                     
  9298                           ;color.c: 19:  color_writetoaddr(0x00, 0x03);
  9299   004966  0E03               	movlw	3
  9300   004968  6E04               	movwf	color_writetoaddr@value^0,c
  9301   00496A  0E00               	movlw	0
  9302   00496C  EC90  F025         	call	_color_writetoaddr
  9303   004970                     
  9304                           ;color.c: 22:  color_writetoaddr(0x01, 0xD5);
  9305   004970  0ED5               	movlw	213
  9306   004972  6E04               	movwf	color_writetoaddr@value^0,c
  9307   004974  0E01               	movlw	1
  9308   004976  EC90  F025         	call	_color_writetoaddr
  9309   00497A  0012               	return		;funcret
  9310   00497C                     __end_of_color_click_init:
  9311                           	callstack 0
  9312                           
  9313 ;; *************** function _color_writetoaddr *****************
  9314 ;; Defined at:
  9315 ;;		line 25 in file "color.c"
  9316 ;; Parameters:    Size  Location     Type
  9317 ;;  address         1    wreg     unsigned char 
  9318 ;;  value           1    3[COMRAM] unsigned char 
  9319 ;; Auto vars:     Size  Location     Type
  9320 ;;  address         1    4[COMRAM] unsigned char 
  9321 ;; Return value:  Size  Location     Type
  9322 ;;                  1    wreg      void 
  9323 ;; Registers used:
  9324 ;;		wreg, status,2, status,0, cstack
  9325 ;; Tracked objects:
  9326 ;;		On entry : 0/0
  9327 ;;		On exit  : 0/0
  9328 ;;		Unchanged: 0/0
  9329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9330 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9331 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9333 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9334 ;;Total ram usage:        2 bytes
  9335 ;; Hardware stack levels used: 1
  9336 ;; Hardware stack levels required when called: 3
  9337 ;; This function calls:
  9338 ;;		_I2C_2_Master_Start
  9339 ;;		_I2C_2_Master_Stop
  9340 ;;		_I2C_2_Master_Write
  9341 ;; This function is called by:
  9342 ;;		_color_click_init
  9343 ;; This function uses a non-reentrant model
  9344 ;;
  9345                           
  9346                           	psect	text45
  9347   004B20                     __ptext45:
  9348                           	callstack 0
  9349   004B20                     _color_writetoaddr:
  9350                           	callstack 26
  9351                           
  9352                           ;incstack = 0
  9353                           ;color_writetoaddr@address stored from wreg
  9354   004B20  6E05               	movwf	color_writetoaddr@address^0,c
  9355   004B22                     
  9356                           ;color.c: 26:     I2C_2_Master_Start();
  9357   004B22  ECE2  F025         	call	_I2C_2_Master_Start	;wreg free
  9358                           
  9359                           ;color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  9360   004B26  0E52               	movlw	82
  9361   004B28  ECD7  F025         	call	_I2C_2_Master_Write
  9362                           
  9363                           ;color.c: 28:     I2C_2_Master_Write(0x80 | address);
  9364   004B2C  5005               	movf	color_writetoaddr@address^0,w,c
  9365   004B2E  0980               	iorlw	128
  9366   004B30  ECD7  F025         	call	_I2C_2_Master_Write
  9367                           
  9368                           ;color.c: 29:     I2C_2_Master_Write(value);
  9369   004B34  5004               	movf	color_writetoaddr@value^0,w,c
  9370   004B36  ECD7  F025         	call	_I2C_2_Master_Write
  9371                           
  9372                           ;color.c: 30:     I2C_2_Master_Stop();
  9373   004B3A  ECDD  F025         	call	_I2C_2_Master_Stop	;wreg free
  9374   004B3E  0012               	return		;funcret
  9375   004B40                     __end_of_color_writetoaddr:
  9376                           	callstack 0
  9377                           
  9378 ;; *************** function _I2C_2_Master_Init *****************
  9379 ;; Defined at:
  9380 ;;		line 4 in file "i2c.c"
  9381 ;; Parameters:    Size  Location     Type
  9382 ;;		None
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;		None
  9385 ;; Return value:  Size  Location     Type
  9386 ;;                  1    wreg      void 
  9387 ;; Registers used:
  9388 ;;		wreg, status,2
  9389 ;; Tracked objects:
  9390 ;;		On entry : 0/0
  9391 ;;		On exit  : 0/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9398 ;;Total ram usage:        0 bytes
  9399 ;; Hardware stack levels used: 1
  9400 ;; Hardware stack levels required when called: 1
  9401 ;; This function calls:
  9402 ;;		Nothing
  9403 ;; This function is called by:
  9404 ;;		_color_click_init
  9405 ;; This function uses a non-reentrant model
  9406 ;;
  9407                           
  9408                           	psect	text46
  9409   004AA8                     __ptext46:
  9410                           	callstack 0
  9411   004AA8                     _I2C_2_Master_Init:
  9412                           	callstack 28
  9413   004AA8                     
  9414                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  9415   004AA8  010E               	movlb	14	; () banked
  9416   004AAA  51D9               	movf	217,w,b	;volatile
  9417   004AAC  0BF0               	andlw	-16
  9418   004AAE  0908               	iorlw	8
  9419   004AB0  6FD9               	movwf	217,b	;volatile
  9420   004AB2                     
  9421                           ; BSR set to: 14
  9422                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  9423   004AB2  8BD9               	bsf	217,5,b	;volatile
  9424                           
  9425                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  9426   004AB4  0E9F               	movlw	159
  9427   004AB6  6FD6               	movwf	214,b	;volatile
  9428   004AB8                     
  9429                           ; BSR set to: 14
  9430                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  9431   004AB8  8A84               	bsf	132,5,c	;volatile
  9432   004ABA                     
  9433                           ; BSR set to: 14
  9434                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  9435   004ABA  8C84               	bsf	132,6,c	;volatile
  9436   004ABC                     
  9437                           ; BSR set to: 14
  9438                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  9439   004ABC  9BA7               	bcf	167,5,b	;volatile
  9440   004ABE                     
  9441                           ; BSR set to: 14
  9442                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  9443   004ABE  9DA7               	bcf	167,6,b	;volatile
  9444                           
  9445                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  9446   004AC0  0E1D               	movlw	29
  9447   004AC2  6F1D               	movwf	29,b	;volatile
  9448                           
  9449                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  9450   004AC4  0E1E               	movlw	30
  9451   004AC6  6F1C               	movwf	28,b	;volatile
  9452                           
  9453                           ;i2c.c: 18:   RD5PPS=0x1C;
  9454   004AC8  0E1C               	movlw	28
  9455   004ACA  6F6F               	movwf	111,b	;volatile
  9456                           
  9457                           ;i2c.c: 19:   RD6PPS=0x1B;
  9458   004ACC  0E1B               	movlw	27
  9459   004ACE  6F70               	movwf	112,b	;volatile
  9460   004AD0                     
  9461                           ; BSR set to: 14
  9462   004AD0  0012               	return		;funcret
  9463   004AD2                     __end_of_I2C_2_Master_Init:
  9464                           	callstack 0
  9465                           
  9466 ;; *************** function _calibration_colors *****************
  9467 ;; Defined at:
  9468 ;;		line 9 in file "calibration.c"
  9469 ;; Parameters:    Size  Location     Type
  9470 ;;  cCal            1   77[COMRAM] PTR struct colors
  9471 ;;		 -> colorCalibration(10), 
  9472 ;; Auto vars:     Size  Location     Type
  9473 ;;  cal_state      20   50[BANK0 ] unsigned char [20]
  9474 ;; Return value:  Size  Location     Type
  9475 ;;                  1    wreg      void 
  9476 ;; Registers used:
  9477 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9478 ;; Tracked objects:
  9479 ;;		On entry : 0/0
  9480 ;;		On exit  : 0/0
  9481 ;;		Unchanged: 0/0
  9482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9483 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9484 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9485 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9486 ;;      Totals:         3      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9487 ;;Total ram usage:       23 bytes
  9488 ;; Hardware stack levels used: 1
  9489 ;; Hardware stack levels required when called: 10
  9490 ;; This function calls:
  9491 ;;		_color_read_Blue
  9492 ;;		_color_read_Clear
  9493 ;;		_color_read_Green
  9494 ;;		_color_read_Red
  9495 ;;		_send2USART
  9496 ;;		_sendStringSerial4
  9497 ;;		_sprintf
  9498 ;; This function is called by:
  9499 ;;		_main
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           	psect	text47
  9504   002A60                     __ptext47:
  9505                           	callstack 0
  9506   002A60                     _calibration_colors:
  9507                           	callstack 20
  9508   002A60                     
  9509                           ;calibration.c: 9: void calibration_colors(colors *cCal);calibration.c: 10: {;calibratio
      +                          n.c: 12:     LATGbits.LATG0 = 0;
  9510   002A60  907F               	bcf	127,0,c	;volatile
  9511                           
  9512                           ;calibration.c: 13:     LATEbits.LATE7 = 0;
  9513   002A62  9E7D               	bcf	125,7,c	;volatile
  9514                           
  9515                           ;calibration.c: 14:     LATAbits.LATA3 = 0;
  9516   002A64  9679               	bcf	121,3,c	;volatile
  9517   002A66                     
  9518                           ;calibration.c: 16:     char cal_state[20];;calibration.c: 20:     sprintf(cal_state,"Ca
      +                          libration state = red", ".");
  9519   002A66  0E92               	movlw	low calibration_colors@cal_state
  9520   002A68  6E32               	movwf	sprintf@s^0,c
  9521   002A6A  0E8A               	movlw	low STR_3
  9522   002A6C  6E33               	movwf	sprintf@fmt^0,c
  9523   002A6E  0EC3               	movlw	low STR_4
  9524   002A70  6E34               	movwf	(?_sprintf+2)^0,c
  9525   002A72  5034               	movf	(?_sprintf+2)^0,w,c
  9526   002A74  A4D8               	btfss	status,2,c
  9527   002A76  0E0E               	movlw	high __smallconst
  9528   002A78  6E35               	movwf	(?_sprintf+3)^0,c
  9529   002A7A  ECBE  F024         	call	_sprintf	;wreg free
  9530   002A7E                     
  9531                           ;calibration.c: 21:     sendStringSerial4(cal_state);
  9532   002A7E  0E92               	movlw	low calibration_colors@cal_state
  9533   002A80  6E03               	movwf	sendStringSerial4@string^0,c
  9534   002A82  EC0B  F025         	call	_sendStringSerial4	;wreg free
  9535   002A86                     l769:
  9536                           
  9537                           ;calibration.c: 24:     while(PORTFbits.RF2 == 1){
  9538   002A86  B48E               	btfsc	142,2,c	;volatile
  9539   002A88  EF48  F015         	goto	u5131
  9540   002A8C  EF4A  F015         	goto	u5130
  9541   002A90                     u5131:
  9542   002A90  EF43  F015         	goto	l769
  9543   002A94                     u5130:
  9544   002A94                     
  9545                           ;calibration.c: 28:     LATGbits.LATG0 = 1;
  9546   002A94  807F               	bsf	127,0,c	;volatile
  9547   002A96                     
  9548                           ;calibration.c: 29:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9549   002A96  0E29               	movlw	41
  9550   002A98  6E50               	movwf	(??_calibration_colors+1)^0,c
  9551   002A9A  0E96               	movlw	150
  9552   002A9C  6E4F               	movwf	??_calibration_colors^0,c
  9553   002A9E  0E7F               	movlw	127
  9554   002AA0                     u5597:
  9555   002AA0  2EE8               	decfsz	wreg,f,c
  9556   002AA2  D7FE               	bra	u5597
  9557   002AA4  2E4F               	decfsz	??_calibration_colors^0,f,c
  9558   002AA6  D7FC               	bra	u5597
  9559   002AA8  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
  9560   002AAA  D7FA               	bra	u5597
  9561   002AAC  0000               	nop	
  9562   002AAE                     
  9563                           ;calibration.c: 30:     (cCal->red) = color_read_Red();
  9564   002AAE  ECB4  F021         	call	_color_read_Red	;wreg free
  9565   002AB2  504E               	movf	calibration_colors@cCal^0,w,c
  9566   002AB4  6ED9               	movwf	fsr2l,c
  9567   002AB6  6ADA               	clrf	fsr2h,c
  9568   002AB8  C006  FFDE         	movff	?_color_read_Red,postinc2
  9569   002ABC  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  9570   002AC0                     
  9571                           ;calibration.c: 31:     LATGbits.LATG0 = 0;
  9572   002AC0  907F               	bcf	127,0,c	;volatile
  9573   002AC2                     
  9574                           ;calibration.c: 34:     sprintf(cal_state,"Calibration state = green \n\r", ".");
  9575   002AC2  0E92               	movlw	low calibration_colors@cal_state
  9576   002AC4  6E32               	movwf	sprintf@s^0,c
  9577   002AC6  0E01               	movlw	low STR_5
  9578   002AC8  6E33               	movwf	sprintf@fmt^0,c
  9579   002ACA  0EC3               	movlw	low STR_4
  9580   002ACC  6E34               	movwf	(?_sprintf+2)^0,c
  9581   002ACE  5034               	movf	(?_sprintf+2)^0,w,c
  9582   002AD0  A4D8               	btfss	status,2,c
  9583   002AD2  0E0E               	movlw	high __smallconst
  9584   002AD4  6E35               	movwf	(?_sprintf+3)^0,c
  9585   002AD6  ECBE  F024         	call	_sprintf	;wreg free
  9586   002ADA                     
  9587                           ;calibration.c: 35:     sendStringSerial4(&cal_state);
  9588   002ADA  0E92               	movlw	low calibration_colors@cal_state
  9589   002ADC  6E03               	movwf	sendStringSerial4@string^0,c
  9590   002ADE  EC0B  F025         	call	_sendStringSerial4	;wreg free
  9591   002AE2                     l772:
  9592                           
  9593                           ;calibration.c: 37:     while(PORTFbits.RF2 == 1){
  9594   002AE2  B48E               	btfsc	142,2,c	;volatile
  9595   002AE4  EF76  F015         	goto	u5141
  9596   002AE8  EF78  F015         	goto	u5140
  9597   002AEC                     u5141:
  9598   002AEC  EF71  F015         	goto	l772
  9599   002AF0                     u5140:
  9600   002AF0                     
  9601                           ;calibration.c: 41:     LATEbits.LATE7 = 1;
  9602   002AF0  8E7D               	bsf	125,7,c	;volatile
  9603   002AF2                     
  9604                           ;calibration.c: 42:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9605   002AF2  0E29               	movlw	41
  9606   002AF4  6E50               	movwf	(??_calibration_colors+1)^0,c
  9607   002AF6  0E96               	movlw	150
  9608   002AF8  6E4F               	movwf	??_calibration_colors^0,c
  9609   002AFA  0E7F               	movlw	127
  9610   002AFC                     u5607:
  9611   002AFC  2EE8               	decfsz	wreg,f,c
  9612   002AFE  D7FE               	bra	u5607
  9613   002B00  2E4F               	decfsz	??_calibration_colors^0,f,c
  9614   002B02  D7FC               	bra	u5607
  9615   002B04  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
  9616   002B06  D7FA               	bra	u5607
  9617   002B08  0000               	nop	
  9618   002B0A                     
  9619                           ;calibration.c: 43:     (cCal->green) = color_read_Green();
  9620   002B0A  ECDC  F021         	call	_color_read_Green	;wreg free
  9621   002B0E  504E               	movf	calibration_colors@cCal^0,w,c
  9622   002B10  6ED9               	movwf	fsr2l,c
  9623   002B12  6ADA               	clrf	fsr2h,c
  9624   002B14  0E02               	movlw	2
  9625   002B16  26D9               	addwf	fsr2l,f,c
  9626   002B18  C006  FFDE         	movff	?_color_read_Green,postinc2
  9627   002B1C  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  9628   002B20                     
  9629                           ;calibration.c: 44:     LATEbits.LATE7 = 0;
  9630   002B20  9E7D               	bcf	125,7,c	;volatile
  9631   002B22                     
  9632                           ;calibration.c: 47:     sprintf(cal_state,"Calibration state= blue \n\r", ".");
  9633   002B22  0E92               	movlw	low calibration_colors@cal_state
  9634   002B24  6E32               	movwf	sprintf@s^0,c
  9635   002B26  0E3B               	movlw	low STR_7
  9636   002B28  6E33               	movwf	sprintf@fmt^0,c
  9637   002B2A  0EC3               	movlw	low STR_4
  9638   002B2C  6E34               	movwf	(?_sprintf+2)^0,c
  9639   002B2E  5034               	movf	(?_sprintf+2)^0,w,c
  9640   002B30  A4D8               	btfss	status,2,c
  9641   002B32  0E0E               	movlw	high __smallconst
  9642   002B34  6E35               	movwf	(?_sprintf+3)^0,c
  9643   002B36  ECBE  F024         	call	_sprintf	;wreg free
  9644   002B3A                     
  9645                           ;calibration.c: 48:     sendStringSerial4(&cal_state);
  9646   002B3A  0E92               	movlw	low calibration_colors@cal_state
  9647   002B3C  6E03               	movwf	sendStringSerial4@string^0,c
  9648   002B3E  EC0B  F025         	call	_sendStringSerial4	;wreg free
  9649   002B42                     l775:
  9650                           
  9651                           ;calibration.c: 50:     while(PORTFbits.RF2 == 1){
  9652   002B42  B48E               	btfsc	142,2,c	;volatile
  9653   002B44  EFA6  F015         	goto	u5151
  9654   002B48  EFA8  F015         	goto	u5150
  9655   002B4C                     u5151:
  9656   002B4C  EFA1  F015         	goto	l775
  9657   002B50                     u5150:
  9658   002B50                     
  9659                           ;calibration.c: 54:     LATAbits.LATA3 = 1;
  9660   002B50  8679               	bsf	121,3,c	;volatile
  9661   002B52                     
  9662                           ;calibration.c: 55:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9663   002B52  0E29               	movlw	41
  9664   002B54  6E50               	movwf	(??_calibration_colors+1)^0,c
  9665   002B56  0E96               	movlw	150
  9666   002B58  6E4F               	movwf	??_calibration_colors^0,c
  9667   002B5A  0E7F               	movlw	127
  9668   002B5C                     u5617:
  9669   002B5C  2EE8               	decfsz	wreg,f,c
  9670   002B5E  D7FE               	bra	u5617
  9671   002B60  2E4F               	decfsz	??_calibration_colors^0,f,c
  9672   002B62  D7FC               	bra	u5617
  9673   002B64  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
  9674   002B66  D7FA               	bra	u5617
  9675   002B68  0000               	nop	
  9676   002B6A                     
  9677                           ;calibration.c: 56:     (cCal->blue) = color_read_Blue();
  9678   002B6A  EC2C  F022         	call	_color_read_Blue	;wreg free
  9679   002B6E  504E               	movf	calibration_colors@cCal^0,w,c
  9680   002B70  6ED9               	movwf	fsr2l,c
  9681   002B72  6ADA               	clrf	fsr2h,c
  9682   002B74  0E04               	movlw	4
  9683   002B76  26D9               	addwf	fsr2l,f,c
  9684   002B78  C006  FFDE         	movff	?_color_read_Blue,postinc2
  9685   002B7C  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  9686   002B80                     
  9687                           ;calibration.c: 57:     LATAbits.LATA3 = 0;
  9688   002B80  9679               	bcf	121,3,c	;volatile
  9689   002B82                     
  9690                           ;calibration.c: 60:     sprintf(cal_state,"Calibration state =  white", ".");
  9691   002B82  0E92               	movlw	low calibration_colors@cal_state
  9692   002B84  6E32               	movwf	sprintf@s^0,c
  9693   002B86  0E56               	movlw	low STR_9
  9694   002B88  6E33               	movwf	sprintf@fmt^0,c
  9695   002B8A  0EC3               	movlw	low STR_4
  9696   002B8C  6E34               	movwf	(?_sprintf+2)^0,c
  9697   002B8E  5034               	movf	(?_sprintf+2)^0,w,c
  9698   002B90  A4D8               	btfss	status,2,c
  9699   002B92  0E0E               	movlw	high __smallconst
  9700   002B94  6E35               	movwf	(?_sprintf+3)^0,c
  9701   002B96  ECBE  F024         	call	_sprintf	;wreg free
  9702   002B9A                     
  9703                           ;calibration.c: 61:     sendStringSerial4(&cal_state);
  9704   002B9A  0E92               	movlw	low calibration_colors@cal_state
  9705   002B9C  6E03               	movwf	sendStringSerial4@string^0,c
  9706   002B9E  EC0B  F025         	call	_sendStringSerial4	;wreg free
  9707   002BA2                     l778:
  9708                           
  9709                           ;calibration.c: 63:     while(PORTFbits.RF2 == 1){
  9710   002BA2  B48E               	btfsc	142,2,c	;volatile
  9711   002BA4  EFD6  F015         	goto	u5161
  9712   002BA8  EFD8  F015         	goto	u5160
  9713   002BAC                     u5161:
  9714   002BAC  EFD1  F015         	goto	l778
  9715   002BB0                     u5160:
  9716   002BB0                     
  9717                           ;calibration.c: 66:     LATGbits.LATG0 = 1;
  9718   002BB0  807F               	bsf	127,0,c	;volatile
  9719                           
  9720                           ;calibration.c: 67:     LATEbits.LATE7 = 1;
  9721   002BB2  8E7D               	bsf	125,7,c	;volatile
  9722                           
  9723                           ;calibration.c: 68:     LATAbits.LATA3 = 1;
  9724   002BB4  8679               	bsf	121,3,c	;volatile
  9725   002BB6                     
  9726                           ;calibration.c: 69:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9727   002BB6  0E29               	movlw	41
  9728   002BB8  6E50               	movwf	(??_calibration_colors+1)^0,c
  9729   002BBA  0E96               	movlw	150
  9730   002BBC  6E4F               	movwf	??_calibration_colors^0,c
  9731   002BBE  0E7F               	movlw	127
  9732   002BC0                     u5627:
  9733   002BC0  2EE8               	decfsz	wreg,f,c
  9734   002BC2  D7FE               	bra	u5627
  9735   002BC4  2E4F               	decfsz	??_calibration_colors^0,f,c
  9736   002BC6  D7FC               	bra	u5627
  9737   002BC8  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
  9738   002BCA  D7FA               	bra	u5627
  9739   002BCC  0000               	nop	
  9740   002BCE                     
  9741                           ;calibration.c: 70:     (cCal->clear) = color_read_Clear();
  9742   002BCE  EC04  F022         	call	_color_read_Clear	;wreg free
  9743   002BD2  504E               	movf	calibration_colors@cCal^0,w,c
  9744   002BD4  6ED9               	movwf	fsr2l,c
  9745   002BD6  6ADA               	clrf	fsr2h,c
  9746   002BD8  0E06               	movlw	6
  9747   002BDA  26D9               	addwf	fsr2l,f,c
  9748   002BDC  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9749   002BE0  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9750   002BE4                     
  9751                           ;calibration.c: 71:     LATGbits.LATG0 = 0;
  9752   002BE4  907F               	bcf	127,0,c	;volatile
  9753   002BE6                     
  9754                           ;calibration.c: 72:     LATEbits.LATE7 = 0;
  9755   002BE6  9E7D               	bcf	125,7,c	;volatile
  9756   002BE8                     
  9757                           ;calibration.c: 73:     LATAbits.LATA3 = 0;
  9758   002BE8  9679               	bcf	121,3,c	;volatile
  9759   002BEA                     
  9760                           ;calibration.c: 75:     sprintf(cal_state,"Calibration state =  ambient", ".");
  9761   002BEA  0E92               	movlw	low calibration_colors@cal_state
  9762   002BEC  6E32               	movwf	sprintf@s^0,c
  9763   002BEE  0E1E               	movlw	low STR_11
  9764   002BF0  6E33               	movwf	sprintf@fmt^0,c
  9765   002BF2  0EC3               	movlw	low STR_4
  9766   002BF4  6E34               	movwf	(?_sprintf+2)^0,c
  9767   002BF6  5034               	movf	(?_sprintf+2)^0,w,c
  9768   002BF8  A4D8               	btfss	status,2,c
  9769   002BFA  0E0E               	movlw	high __smallconst
  9770   002BFC  6E35               	movwf	(?_sprintf+3)^0,c
  9771   002BFE  ECBE  F024         	call	_sprintf	;wreg free
  9772   002C02                     
  9773                           ;calibration.c: 76:     sendStringSerial4(&cal_state);
  9774   002C02  0E92               	movlw	low calibration_colors@cal_state
  9775   002C04  6E03               	movwf	sendStringSerial4@string^0,c
  9776   002C06  EC0B  F025         	call	_sendStringSerial4	;wreg free
  9777   002C0A                     l781:
  9778                           
  9779                           ;calibration.c: 78:     while(PORTFbits.RF2 == 1){
  9780   002C0A  B48E               	btfsc	142,2,c	;volatile
  9781   002C0C  EF0A  F016         	goto	u5171
  9782   002C10  EF0C  F016         	goto	u5170
  9783   002C14                     u5171:
  9784   002C14  EF05  F016         	goto	l781
  9785   002C18                     u5170:
  9786   002C18                     
  9787                           ;calibration.c: 81:     LATGbits.LATG0 = 1;
  9788   002C18  807F               	bsf	127,0,c	;volatile
  9789                           
  9790                           ;calibration.c: 82:     LATEbits.LATE7 = 1;
  9791   002C1A  8E7D               	bsf	125,7,c	;volatile
  9792                           
  9793                           ;calibration.c: 83:     LATAbits.LATA3 = 1;
  9794   002C1C  8679               	bsf	121,3,c	;volatile
  9795   002C1E                     
  9796                           ;calibration.c: 84:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9797   002C1E  0E29               	movlw	41
  9798   002C20  6E50               	movwf	(??_calibration_colors+1)^0,c
  9799   002C22  0E96               	movlw	150
  9800   002C24  6E4F               	movwf	??_calibration_colors^0,c
  9801   002C26  0E7F               	movlw	127
  9802   002C28                     u5637:
  9803   002C28  2EE8               	decfsz	wreg,f,c
  9804   002C2A  D7FE               	bra	u5637
  9805   002C2C  2E4F               	decfsz	??_calibration_colors^0,f,c
  9806   002C2E  D7FC               	bra	u5637
  9807   002C30  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
  9808   002C32  D7FA               	bra	u5637
  9809   002C34  0000               	nop	
  9810   002C36                     
  9811                           ;calibration.c: 85:     (cCal->ambient) = color_read_Clear();
  9812   002C36  EC04  F022         	call	_color_read_Clear	;wreg free
  9813   002C3A  504E               	movf	calibration_colors@cCal^0,w,c
  9814   002C3C  6ED9               	movwf	fsr2l,c
  9815   002C3E  6ADA               	clrf	fsr2h,c
  9816   002C40  0E08               	movlw	8
  9817   002C42  26D9               	addwf	fsr2l,f,c
  9818   002C44  C006  FFDE         	movff	?_color_read_Clear,postinc2
  9819   002C48  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  9820   002C4C                     
  9821                           ;calibration.c: 86:     LATGbits.LATG0 = 0;
  9822   002C4C  907F               	bcf	127,0,c	;volatile
  9823   002C4E                     
  9824                           ;calibration.c: 87:     LATEbits.LATE7 = 0;
  9825   002C4E  9E7D               	bcf	125,7,c	;volatile
  9826   002C50                     
  9827                           ;calibration.c: 88:     LATAbits.LATA3 = 0;
  9828   002C50  9679               	bcf	121,3,c	;volatile
  9829   002C52                     
  9830                           ;calibration.c: 92:     sprintf(cal_state,"CALIBRATION COMPLETED \n\r", ".");
  9831   002C52  0E92               	movlw	low calibration_colors@cal_state
  9832   002C54  6E32               	movwf	sprintf@s^0,c
  9833   002C56  0E71               	movlw	low STR_13
  9834   002C58  6E33               	movwf	sprintf@fmt^0,c
  9835   002C5A  0EC3               	movlw	low STR_4
  9836   002C5C  6E34               	movwf	(?_sprintf+2)^0,c
  9837   002C5E  5034               	movf	(?_sprintf+2)^0,w,c
  9838   002C60  A4D8               	btfss	status,2,c
  9839   002C62  0E0E               	movlw	high __smallconst
  9840   002C64  6E35               	movwf	(?_sprintf+3)^0,c
  9841   002C66  ECBE  F024         	call	_sprintf	;wreg free
  9842   002C6A                     
  9843                           ;calibration.c: 93:     sendStringSerial4(&cal_state);
  9844   002C6A  0E92               	movlw	low calibration_colors@cal_state
  9845   002C6C  6E03               	movwf	sendStringSerial4@string^0,c
  9846   002C6E  EC0B  F025         	call	_sendStringSerial4	;wreg free
  9847   002C72                     
  9848                           ;calibration.c: 94:     send2USART(colorCalibration.ambient);
  9849   002C72  C0DC  F04C         	movff	_colorCalibration+8,send2USART@hue
  9850   002C76  C0DD  F04D         	movff	_colorCalibration+9,send2USART@hue+1
  9851   002C7A  ECAF  F025         	call	_send2USART	;wreg free
  9852   002C7E                     l784:
  9853                           
  9854                           ;calibration.c: 96:     while(PORTFbits.RF2 == 1){
  9855   002C7E  B48E               	btfsc	142,2,c	;volatile
  9856   002C80  EF44  F016         	goto	u5181
  9857   002C84  EF46  F016         	goto	u5180
  9858   002C88                     u5181:
  9859   002C88  EF3F  F016         	goto	l784
  9860   002C8C                     u5180:
  9861   002C8C                     
  9862                           ;calibration.c: 99:     _delay((unsigned long)((500)*(64000000/4000.0)));
  9863   002C8C  0E29               	movlw	41
  9864   002C8E  6E50               	movwf	(??_calibration_colors+1)^0,c
  9865   002C90  0E96               	movlw	150
  9866   002C92  6E4F               	movwf	??_calibration_colors^0,c
  9867   002C94  0E7F               	movlw	127
  9868   002C96                     u5647:
  9869   002C96  2EE8               	decfsz	wreg,f,c
  9870   002C98  D7FE               	bra	u5647
  9871   002C9A  2E4F               	decfsz	??_calibration_colors^0,f,c
  9872   002C9C  D7FC               	bra	u5647
  9873   002C9E  2E50               	decfsz	(??_calibration_colors+1)^0,f,c
  9874   002CA0  D7FA               	bra	u5647
  9875   002CA2  0000               	nop	
  9876   002CA4  0012               	return		;funcret
  9877   002CA6                     __end_of_calibration_colors:
  9878                           	callstack 0
  9879                           
  9880 ;; *************** function _send2USART *****************
  9881 ;; Defined at:
  9882 ;;		line 146 in file "serial.c"
  9883 ;; Parameters:    Size  Location     Type
  9884 ;;  hue             2   75[COMRAM] unsigned int 
  9885 ;; Auto vars:     Size  Location     Type
  9886 ;;  hue_char       50    0[BANK0 ] unsigned char [50]
  9887 ;; Return value:  Size  Location     Type
  9888 ;;                  1    wreg      void 
  9889 ;; Registers used:
  9890 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9891 ;; Tracked objects:
  9892 ;;		On entry : 0/0
  9893 ;;		On exit  : 0/0
  9894 ;;		Unchanged: 0/0
  9895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9896 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9897 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9899 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9900 ;;Total ram usage:       52 bytes
  9901 ;; Hardware stack levels used: 1
  9902 ;; Hardware stack levels required when called: 9
  9903 ;; This function calls:
  9904 ;;		_sendStringSerial4
  9905 ;;		_sprintf
  9906 ;; This function is called by:
  9907 ;;		_main
  9908 ;;		_calibration_colors
  9909 ;; This function uses a non-reentrant model
  9910 ;;
  9911                           
  9912                           	psect	text48
  9913   004B5E                     __ptext48:
  9914                           	callstack 0
  9915   004B5E                     _send2USART:
  9916                           	callstack 21
  9917   004B5E                     
  9918                           ;serial.c: 146: void send2USART(unsigned int hue);serial.c: 147: {;serial.c: 148:       
      +                            char hue_char[50];;serial.c: 153:         sprintf(hue_char,"hue=%03d,  ",hue);
  9919   004B5E  0E60               	movlw	low send2USART@hue_char
  9920   004B60  6E32               	movwf	sprintf@s^0,c
  9921   004B62  0EB7               	movlw	low STR_2
  9922   004B64  6E33               	movwf	sprintf@fmt^0,c
  9923   004B66  C04C  F034         	movff	send2USART@hue,?_sprintf+2
  9924   004B6A  C04D  F035         	movff	send2USART@hue+1,?_sprintf+3
  9925   004B6E  ECBE  F024         	call	_sprintf	;wreg free
  9926   004B72                     
  9927                           ;serial.c: 158:         sendStringSerial4(hue_char);
  9928   004B72  0E60               	movlw	low send2USART@hue_char
  9929   004B74  6E03               	movwf	sendStringSerial4@string^0,c
  9930   004B76  EC0B  F025         	call	_sendStringSerial4	;wreg free
  9931   004B7A  0012               	return		;funcret
  9932   004B7C                     __end_of_send2USART:
  9933                           	callstack 0
  9934                           
  9935 ;; *************** function _sprintf *****************
  9936 ;; Defined at:
  9937 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  9938 ;; Parameters:    Size  Location     Type
  9939 ;;  s               1   49[COMRAM] PTR unsigned char 
  9940 ;;		 -> calibration_colors@cal_state(20), send2USART@hue_char(50), sendAllReadings@buffer(10), 
  9941 ;;  fmt             1   50[COMRAM] PTR const unsigned char 
  9942 ;;		 -> STR_13(25), STR_11(29), STR_9(27), STR_7(27), 
  9943 ;;		 -> STR_5(29), STR_3(24), STR_2(12), STR_1(21), 
  9944 ;; Auto vars:     Size  Location     Type
  9945 ;;  f              12   56[COMRAM] struct _IO_FILE
  9946 ;;  ret             2    0        int 
  9947 ;;  ap              1   55[COMRAM] PTR void [1]
  9948 ;;		 -> ?_sprintf(2), 
  9949 ;; Return value:  Size  Location     Type
  9950 ;;                  2   49[COMRAM] int 
  9951 ;; Registers used:
  9952 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9953 ;; Tracked objects:
  9954 ;;		On entry : 0/0
  9955 ;;		On exit  : 0/0
  9956 ;;		Unchanged: 0/0
  9957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9958 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9959 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9961 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9962 ;;Total ram usage:       19 bytes
  9963 ;; Hardware stack levels used: 1
  9964 ;; Hardware stack levels required when called: 8
  9965 ;; This function calls:
  9966 ;;		_vfprintf
  9967 ;; This function is called by:
  9968 ;;		_send2USART
  9969 ;;		_calibration_colors
  9970 ;;		_ADC2String
  9971 ;; This function uses a non-reentrant model
  9972 ;;
  9973                           
  9974                           	psect	text49
  9975   00497C                     __ptext49:
  9976                           	callstack 0
  9977   00497C                     _sprintf:
  9978                           	callstack 21
  9979   00497C  0E34               	movlw	low (?_sprintf+2)
  9980   00497E  6E38               	movwf	sprintf@ap^0,c
  9981   004980  C032  F039         	movff	sprintf@s,sprintf@f
  9982   004984  0E00               	movlw	0
  9983   004986  6E3D               	movwf	(sprintf@f+4)^0,c
  9984   004988  0E00               	movlw	0
  9985   00498A  6E3C               	movwf	(sprintf@f+3)^0,c
  9986   00498C  0E00               	movlw	0
  9987   00498E  6E44               	movwf	(sprintf@f+11)^0,c
  9988   004990  0E00               	movlw	0
  9989   004992  6E43               	movwf	(sprintf@f+10)^0,c
  9990   004994  0E39               	movlw	low sprintf@f
  9991   004996  6E2E               	movwf	vfprintf@fp^0,c
  9992   004998  C033  F02F         	movff	sprintf@fmt,vfprintf@fmt
  9993   00499C  0E38               	movlw	low sprintf@ap
  9994   00499E  6E30               	movwf	vfprintf@ap^0,c
  9995   0049A0  EC3E  F023         	call	_vfprintf	;wreg free
  9996   0049A4  5032               	movf	sprintf@s^0,w,c
  9997   0049A6  243C               	addwf	(sprintf@f+3)^0,w,c
  9998   0049A8  6ED9               	movwf	fsr2l,c
  9999   0049AA  6ADA               	clrf	fsr2h,c
 10000   0049AC  6ADF               	clrf	indf2,c
 10001   0049AE  0012               	return		;funcret
 10002   0049B0                     __end_of_sprintf:
 10003                           	callstack 0
 10004                           
 10005 ;; *************** function _vfprintf *****************
 10006 ;; Defined at:
 10007 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10008 ;; Parameters:    Size  Location     Type
 10009 ;;  fp              1   45[COMRAM] PTR struct _IO_FILE
 10010 ;;		 -> sprintf@f(12), 
 10011 ;;  fmt             1   46[COMRAM] PTR const unsigned char 
 10012 ;;		 -> STR_13(25), STR_11(29), STR_9(27), STR_7(27), 
 10013 ;;		 -> STR_5(29), STR_3(24), STR_2(12), STR_1(21), 
 10014 ;;  ap              1   47[COMRAM] PTR PTR void 
 10015 ;;		 -> sprintf@ap(1), 
 10016 ;; Auto vars:     Size  Location     Type
 10017 ;;  cfmt            1   48[COMRAM] PTR unsigned char 
 10018 ;;		 -> STR_13(25), STR_11(29), STR_9(27), STR_7(27), 
 10019 ;;		 -> STR_5(29), STR_3(24), STR_2(12), STR_1(21), 
 10020 ;; Return value:  Size  Location     Type
 10021 ;;                  2   45[COMRAM] int 
 10022 ;; Registers used:
 10023 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10024 ;; Tracked objects:
 10025 ;;		On entry : 0/0
 10026 ;;		On exit  : 0/0
 10027 ;;		Unchanged: 0/0
 10028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10029 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10030 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10032 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10033 ;;Total ram usage:        4 bytes
 10034 ;; Hardware stack levels used: 1
 10035 ;; Hardware stack levels required when called: 7
 10036 ;; This function calls:
 10037 ;;		_vfpfcnvrt
 10038 ;; This function is called by:
 10039 ;;		_sprintf
 10040 ;; This function uses a non-reentrant model
 10041 ;;
 10042                           
 10043                           	psect	text50
 10044   00467C                     __ptext50:
 10045                           	callstack 0
 10046   00467C                     _vfprintf:
 10047                           	callstack 21
 10048   00467C                     
 10049                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
 10050   00467C  C02F  F031         	movff	vfprintf@fmt,vfprintf@cfmt
 10051                           
 10052                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
 10053   004680  EF4A  F023         	goto	l5815
 10054   004684                     l5813:
 10055                           
 10056                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
 10057   004684  C02E  F023         	movff	vfprintf@fp,vfpfcnvrt@fp
 10058   004688  0E31               	movlw	low vfprintf@cfmt
 10059   00468A  6E24               	movwf	vfpfcnvrt@fmt^0,c
 10060   00468C  C030  F025         	movff	vfprintf@ap,vfpfcnvrt@ap
 10061   004690  EC2D  F017         	call	_vfpfcnvrt	;wreg free
 10062   004694                     l5815:
 10063                           
 10064                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
 10065   004694  C031  FFF6         	movff	vfprintf@cfmt,tblptrl
 10066   004698                     	if	1	;There is more than 1 active tblptr byte
 10067   004698  0E0E               	movlw	high __smallconst
 10068   00469A  6EF7               	movwf	tblptrh,c
 10069   00469C                     	endif
 10070   00469C                     	if	0	;tblptru may be non-zero
 10071   00469C                     	endif
 10072   00469C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10073   00469C  0E00               	movlw	low (__smallconst shr (0+16))
 10074   00469E  6EF8               	movwf	tblptru,c
 10075   0046A0                     	endif
 10076   0046A0  0008               	tblrd		*
 10077   0046A2  50F5               	movf	tablat,w,c
 10078   0046A4  0900               	iorlw	0
 10079   0046A6  A4D8               	btfss	status,2,c
 10080   0046A8  EF58  F023         	goto	u5121
 10081   0046AC  EF5A  F023         	goto	u5120
 10082   0046B0                     u5121:
 10083   0046B0  EF42  F023         	goto	l5813
 10084   0046B4                     u5120:
 10085   0046B4                     
 10086                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
 10087   0046B4  0E00               	movlw	0
 10088   0046B6  6E2F               	movwf	(?_vfprintf+1)^0,c
 10089   0046B8  0E00               	movlw	0
 10090   0046BA  6E2E               	movwf	?_vfprintf^0,c
 10091   0046BC  0012               	return		;funcret
 10092   0046BE                     __end_of_vfprintf:
 10093                           	callstack 0
 10094                           
 10095 ;; *************** function _vfpfcnvrt *****************
 10096 ;; Defined at:
 10097 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10098 ;; Parameters:    Size  Location     Type
 10099 ;;  fp              1   34[COMRAM] PTR struct _IO_FILE
 10100 ;;		 -> sprintf@f(12), 
 10101 ;;  fmt             1   35[COMRAM] PTR PTR unsigned char 
 10102 ;;		 -> vfprintf@cfmt(1), 
 10103 ;;  ap              1   36[COMRAM] PTR PTR void 
 10104 ;;		 -> sprintf@ap(1), 
 10105 ;; Auto vars:     Size  Location     Type
 10106 ;;  convarg         4   39[COMRAM] struct .
 10107 ;;  cp              1   44[COMRAM] PTR unsigned char 
 10108 ;;		 -> STR_13(25), STR_11(29), STR_9(27), STR_7(27), 
 10109 ;;		 -> STR_5(29), STR_3(24), STR_2(12), STR_1(21), 
 10110 ;;  done            1   43[COMRAM] _Bool 
 10111 ;;  c               1    0        unsigned char 
 10112 ;; Return value:  Size  Location     Type
 10113 ;;                  1    wreg      void 
 10114 ;; Registers used:
 10115 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10116 ;; Tracked objects:
 10117 ;;		On entry : 0/0
 10118 ;;		On exit  : 0/0
 10119 ;;		Unchanged: 0/0
 10120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10121 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10122 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10123 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10124 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10125 ;;Total ram usage:       11 bytes
 10126 ;; Hardware stack levels used: 1
 10127 ;; Hardware stack levels required when called: 6
 10128 ;; This function calls:
 10129 ;;		_dtoa
 10130 ;;		_fputc
 10131 ;;		_read_prec_or_width
 10132 ;; This function is called by:
 10133 ;;		_vfprintf
 10134 ;; This function uses a non-reentrant model
 10135 ;;
 10136                           
 10137                           	psect	text51
 10138   002E5A                     __ptext51:
 10139                           	callstack 0
 10140   002E5A                     _vfpfcnvrt:
 10141                           	callstack 21
 10142   002E5A                     
 10143                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
 10144   002E5A  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10145   002E5C  6ED9               	movwf	fsr2l,c
 10146   002E5E  6ADA               	clrf	fsr2h,c
 10147   002E60  CFDF FFF6          	movff	indf2,tblptrl
 10148   002E64                     	if	1	;There is more than 1 active tblptr byte
 10149   002E64  0E0E               	movlw	high __smallconst
 10150   002E66  6EF7               	movwf	tblptrh,c
 10151   002E68                     	endif
 10152   002E68                     	if	0	;tblptru may be non-zero
 10153   002E68                     	endif
 10154   002E68                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10155   002E68  0E00               	movlw	low (__smallconst shr (0+16))
 10156   002E6A  6EF8               	movwf	tblptru,c
 10157   002E6C                     	endif
 10158   002E6C  0008               	tblrd		*
 10159   002E6E  50F5               	movf	tablat,w,c
 10160   002E70  0A25               	xorlw	37
 10161   002E72  A4D8               	btfss	status,2,c
 10162   002E74  EF3E  F017         	goto	u5071
 10163   002E78  EF40  F017         	goto	u5070
 10164   002E7C                     u5071:
 10165   002E7C  EFDD  F017         	goto	l5801
 10166   002E80                     u5070:
 10167   002E80                     
 10168                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
 10169   002E80  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10170   002E82  6ED9               	movwf	fsr2l,c
 10171   002E84  6ADA               	clrf	fsr2h,c
 10172   002E86  2ADF               	incf	indf2,f,c
 10173   002E88                     
 10174                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
 10175   002E88  0E00               	movlw	0
 10176   002E8A  0100               	movlb	0	; () banked
 10177   002E8C  6FC3               	movwf	(_width+1)& (0+255),b
 10178   002E8E  0E00               	movlw	0
 10179   002E90  6FC2               	movwf	_width& (0+255),b
 10180   002E92  C0C2  F0C6         	movff	_width,_flags
 10181   002E96                     
 10182                           ; BSR set to: 0
 10183                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
 10184   002E96  69C4               	setf	_prec& (0+255),b
 10185   002E98  69C5               	setf	(_prec+1)& (0+255),b
 10186   002E9A                     
 10187                           ; BSR set to: 0
 10188                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
 10189   002E9A  0E00               	movlw	0
 10190   002E9C  6E2C               	movwf	vfpfcnvrt@done^0,c
 10191                           
 10192                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
 10193   002E9E  EF78  F017         	goto	l5775
 10194   002EA2                     l5765:
 10195                           
 10196                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
 10197   002EA2  0100               	movlb	0	; () banked
 10198   002EA4  83C6               	bsf	_flags& (0+255),1,b
 10199   002EA6                     
 10200                           ; BSR set to: 0
 10201                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
 10202   002EA6  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10203   002EA8  6ED9               	movwf	fsr2l,c
 10204   002EAA  6ADA               	clrf	fsr2h,c
 10205   002EAC  2ADF               	incf	indf2,f,c
 10206                           
 10207                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
 10208   002EAE  EF78  F017         	goto	l5775
 10209   002EB2                     l5769:
 10210                           
 10211                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
 10212   002EB2  0E01               	movlw	1
 10213   002EB4  6E2C               	movwf	vfpfcnvrt@done^0,c
 10214                           
 10215                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
 10216   002EB6  EF78  F017         	goto	l5775
 10217   002EBA                     l5773:
 10218   002EBA  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10219   002EBC  6ED9               	movwf	fsr2l,c
 10220   002EBE  6ADA               	clrf	fsr2h,c
 10221   002EC0  CFDF FFF6          	movff	indf2,tblptrl
 10222   002EC4                     	if	1	;There is more than 1 active tblptr byte
 10223   002EC4  0E0E               	movlw	high __smallconst
 10224   002EC6  6EF7               	movwf	tblptrh,c
 10225   002EC8                     	endif
 10226   002EC8                     	if	0	;tblptru may be non-zero
 10227   002EC8                     	endif
 10228   002EC8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10229   002EC8  0E00               	movlw	low (__smallconst shr (0+16))
 10230   002ECA  6EF8               	movwf	tblptru,c
 10231   002ECC                     	endif
 10232   002ECC  0008               	tblrd		*
 10233   002ECE  50F5               	movf	tablat,w,c
 10234   002ED0  6E26               	movwf	??_vfpfcnvrt^0,c
 10235   002ED2  6A27               	clrf	(??_vfpfcnvrt+1)^0,c
 10236                           
 10237                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10238                           ; Switch size 1, requested type "simple"
 10239                           ; Number of cases is 1, Range of values is 0 to 0
 10240                           ; switch strategies available:
 10241                           ; Name         Instructions Cycles
 10242                           ; simple_byte            4     3 (average)
 10243                           ;	Chosen strategy is simple_byte
 10244   002ED4  5027               	movf	(??_vfpfcnvrt+1)^0,w,c
 10245   002ED6  0A00               	xorlw	0	; case 0
 10246   002ED8  B4D8               	btfsc	status,2,c
 10247   002EDA  EF71  F017         	goto	l6129
 10248   002EDE  EF59  F017         	goto	l5769
 10249   002EE2                     l6129:
 10250                           
 10251                           ; Switch size 1, requested type "simple"
 10252                           ; Number of cases is 1, Range of values is 48 to 48
 10253                           ; switch strategies available:
 10254                           ; Name         Instructions Cycles
 10255                           ; simple_byte            4     3 (average)
 10256                           ;	Chosen strategy is simple_byte
 10257   002EE2  5026               	movf	??_vfpfcnvrt^0,w,c
 10258   002EE4  0A30               	xorlw	48	; case 48
 10259   002EE6  B4D8               	btfsc	status,2,c
 10260   002EE8  EF51  F017         	goto	l5765
 10261   002EEC  EF59  F017         	goto	l5769
 10262   002EF0                     l5775:
 10263                           
 10264                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
 10265   002EF0  502C               	movf	vfpfcnvrt@done^0,w,c
 10266   002EF2  B4D8               	btfsc	status,2,c
 10267   002EF4  EF7E  F017         	goto	u5081
 10268   002EF8  EF80  F017         	goto	u5080
 10269   002EFC                     u5081:
 10270   002EFC  EF5D  F017         	goto	l5773
 10271   002F00                     u5080:
 10272   002F00                     
 10273                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
 10274   002F00  C024  F008         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
 10275   002F04  C025  F009         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
 10276   002F08  EC35  F01E         	call	_read_prec_or_width	;wreg free
 10277   002F0C  C008  F0C2         	movff	?_read_prec_or_width,_width
 10278   002F10  C009  F0C3         	movff	?_read_prec_or_width+1,_width+1
 10279   002F14                     
 10280                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
 10281   002F14  0100               	movlb	0	; () banked
 10282   002F16  BFC3               	btfsc	(_width+1)& (0+255),7,b
 10283   002F18  EF92  F017         	goto	u5090
 10284   002F1C  EF90  F017         	goto	u5091
 10285   002F20                     u5091:
 10286   002F20  EF97  F017         	goto	l5783
 10287   002F24                     u5090:
 10288   002F24                     
 10289                           ; BSR set to: 0
 10290                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
 10291   002F24  81C6               	bsf	_flags& (0+255),0,b
 10292                           
 10293                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
 10294   002F26  6DC2               	negf	_width& (0+255),b
 10295   002F28  1FC3               	comf	(_width+1)& (0+255),f,b
 10296   002F2A  B0D8               	btfsc	status,0,c
 10297   002F2C  2BC3               	incf	(_width+1)& (0+255),f,b
 10298   002F2E                     l5783:
 10299                           
 10300                           ; BSR set to: 0
 10301                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
 10302   002F2E  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10303   002F30  6ED9               	movwf	fsr2l,c
 10304   002F32  6ADA               	clrf	fsr2h,c
 10305   002F34  50DF               	movf	indf2,w,c
 10306   002F36  6E2D               	movwf	vfpfcnvrt@cp^0,c
 10307   002F38                     
 10308                           ; BSR set to: 0
 10309                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
 10310   002F38  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
 10311   002F3C                     	if	1	;There is more than 1 active tblptr byte
 10312   002F3C  0E0E               	movlw	high __smallconst
 10313   002F3E  6EF7               	movwf	tblptrh,c
 10314   002F40                     	endif
 10315   002F40                     	if	0	;tblptru may be non-zero
 10316   002F40                     	endif
 10317   002F40                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10318   002F40  0E00               	movlw	low (__smallconst shr (0+16))
 10319   002F42  6EF8               	movwf	tblptru,c
 10320   002F44                     	endif
 10321   002F44  0008               	tblrd		*
 10322   002F46  50F5               	movf	tablat,w,c
 10323   002F48  0A64               	xorlw	100
 10324   002F4A  B4D8               	btfsc	status,2,c
 10325   002F4C  EFAA  F017         	goto	u5101
 10326   002F50  EFAC  F017         	goto	u5100
 10327   002F54                     u5101:
 10328   002F54  EFBC  F017         	goto	l5789
 10329   002F58                     u5100:
 10330   002F58                     
 10331                           ; BSR set to: 0
 10332   002F58  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
 10333   002F5C                     	if	1	;There is more than 1 active tblptr byte
 10334   002F5C  0E0E               	movlw	high __smallconst
 10335   002F5E  6EF7               	movwf	tblptrh,c
 10336   002F60                     	endif
 10337   002F60                     	if	0	;tblptru may be non-zero
 10338   002F60                     	endif
 10339   002F60                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10340   002F60  0E00               	movlw	low (__smallconst shr (0+16))
 10341   002F62  6EF8               	movwf	tblptru,c
 10342   002F64                     	endif
 10343   002F64  0008               	tblrd		*
 10344   002F66  50F5               	movf	tablat,w,c
 10345   002F68  0A69               	xorlw	105
 10346   002F6A  A4D8               	btfss	status,2,c
 10347   002F6C  EFBA  F017         	goto	u5111
 10348   002F70  EFBC  F017         	goto	u5110
 10349   002F74                     u5111:
 10350   002F74  EFD7  F017         	goto	l5797
 10351   002F78                     u5110:
 10352   002F78                     l5789:
 10353                           
 10354                           ; BSR set to: 0
 10355                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
 10356   002F78  5025               	movf	vfpfcnvrt@ap^0,w,c
 10357   002F7A  6ED9               	movwf	fsr2l,c
 10358   002F7C  6ADA               	clrf	fsr2h,c
 10359   002F7E  0E02               	movlw	2
 10360   002F80  26DF               	addwf	indf2,f,c
 10361   002F82  5CDF               	subwf	indf2,w,c
 10362   002F84  6ED9               	movwf	fsr2l,c
 10363   002F86  6ADA               	clrf	fsr2h,c
 10364   002F88  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg
 10365   002F8C  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+1
 10366   002F90                     
 10367                           ; BSR set to: 0
 10368                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
 10369   002F90  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10370   002F92  6ED9               	movwf	fsr2l,c
 10371   002F94  6ADA               	clrf	fsr2h,c
 10372   002F96  282D               	incf	vfpfcnvrt@cp^0,w,c
 10373   002F98  6EDF               	movwf	indf2,c
 10374   002F9A                     
 10375                           ; BSR set to: 0
 10376                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
 10377   002F9A  C023  F018         	movff	vfpfcnvrt@fp,dtoa@fp
 10378   002F9E  C028  F019         	movff	vfpfcnvrt@convarg,dtoa@d
 10379   002FA2  C029  F01A         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
 10380   002FA6  ECF1  F017         	call	_dtoa	;wreg free
 10381   002FAA  EFF0  F017         	goto	l1557
 10382   002FAE                     l5797:
 10383                           
 10384                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
 10385   002FAE  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10386   002FB0  6ED9               	movwf	fsr2l,c
 10387   002FB2  6ADA               	clrf	fsr2h,c
 10388   002FB4  2ADF               	incf	indf2,f,c
 10389   002FB6  EFF0  F017         	goto	l1557
 10390   002FBA                     l5801:
 10391                           
 10392                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
 10393   002FBA  5024               	movf	vfpfcnvrt@fmt^0,w,c
 10394   002FBC  6ED9               	movwf	fsr2l,c
 10395   002FBE  6ADA               	clrf	fsr2h,c
 10396   002FC0  CFDF FFF6          	movff	indf2,tblptrl
 10397   002FC4                     	if	1	;There is more than 1 active tblptr byte
 10398   002FC4  0E0E               	movlw	high __smallconst
 10399   002FC6  6EF7               	movwf	tblptrh,c
 10400   002FC8                     	endif
 10401   002FC8                     	if	0	;tblptru may be non-zero
 10402   002FC8                     	endif
 10403   002FC8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10404   002FC8  0E00               	movlw	low (__smallconst shr (0+16))
 10405   002FCA  6EF8               	movwf	tblptru,c
 10406   002FCC                     	endif
 10407   002FCC  0008               	tblrd		*
 10408   002FCE  50F5               	movf	tablat,w,c
 10409   002FD0  6E02               	movwf	fputc@c^0,c
 10410   002FD2  6A03               	clrf	(fputc@c+1)^0,c
 10411   002FD4  C023  F004         	movff	vfpfcnvrt@fp,fputc@fp
 10412   002FD8  ECE1  F01E         	call	_fputc	;wreg free
 10413   002FDC  EFD7  F017         	goto	l5797
 10414   002FE0                     l1557:
 10415   002FE0  0012               	return		;funcret
 10416   002FE2                     __end_of_vfpfcnvrt:
 10417                           	callstack 0
 10418                           
 10419 ;; *************** function _read_prec_or_width *****************
 10420 ;; Defined at:
 10421 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10422 ;; Parameters:    Size  Location     Type
 10423 ;;  fmt             1    7[COMRAM] PTR PTR const unsigned c
 10424 ;;		 -> vfprintf@cfmt(1), 
 10425 ;;  ap              1    8[COMRAM] PTR PTR void [1]
 10426 ;;		 -> sprintf@ap(1), 
 10427 ;; Auto vars:     Size  Location     Type
 10428 ;;  c               1    9[COMRAM] unsigned char 
 10429 ;;  n               2   10[COMRAM] int 
 10430 ;; Return value:  Size  Location     Type
 10431 ;;                  2    7[COMRAM] int 
 10432 ;; Registers used:
 10433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10434 ;; Tracked objects:
 10435 ;;		On entry : 0/0
 10436 ;;		On exit  : 0/0
 10437 ;;		Unchanged: 0/0
 10438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10439 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10440 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10442 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10443 ;;Total ram usage:        5 bytes
 10444 ;; Hardware stack levels used: 1
 10445 ;; Hardware stack levels required when called: 2
 10446 ;; This function calls:
 10447 ;;		___wmul
 10448 ;; This function is called by:
 10449 ;;		_vfpfcnvrt
 10450 ;; This function uses a non-reentrant model
 10451 ;;
 10452                           
 10453                           	psect	text52
 10454   003C6A                     __ptext52:
 10455                           	callstack 0
 10456   003C6A                     _read_prec_or_width:
 10457                           	callstack 24
 10458   003C6A                     
 10459                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
 10460   003C6A  0E00               	movlw	0
 10461   003C6C  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10462   003C6E  0E00               	movlw	0
 10463   003C70  6E0B               	movwf	read_prec_or_width@n^0,c
 10464   003C72                     
 10465                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
 10466   003C72  5008               	movf	read_prec_or_width@fmt^0,w,c
 10467   003C74  6ED9               	movwf	fsr2l,c
 10468   003C76  6ADA               	clrf	fsr2h,c
 10469   003C78  CFDF FFF6          	movff	indf2,tblptrl
 10470   003C7C                     	if	1	;There is more than 1 active tblptr byte
 10471   003C7C  0E0E               	movlw	high __smallconst
 10472   003C7E  6EF7               	movwf	tblptrh,c
 10473   003C80                     	endif
 10474   003C80                     	if	0	;tblptru may be non-zero
 10475   003C80                     	endif
 10476   003C80                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10477   003C80  0E00               	movlw	low (__smallconst shr (0+16))
 10478   003C82  6EF8               	movwf	tblptru,c
 10479   003C84                     	endif
 10480   003C84  0008               	tblrd		*
 10481   003C86  50F5               	movf	tablat,w,c
 10482   003C88  0A2A               	xorlw	42
 10483   003C8A  A4D8               	btfss	status,2,c
 10484   003C8C  EF4A  F01E         	goto	u2831
 10485   003C90  EF4C  F01E         	goto	u2830
 10486   003C94                     u2831:
 10487   003C94  EF72  F01E         	goto	l3859
 10488   003C98                     u2830:
 10489   003C98                     
 10490                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
 10491   003C98  5008               	movf	read_prec_or_width@fmt^0,w,c
 10492   003C9A  6ED9               	movwf	fsr2l,c
 10493   003C9C  6ADA               	clrf	fsr2h,c
 10494   003C9E  2ADF               	incf	indf2,f,c
 10495   003CA0                     
 10496                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
 10497   003CA0  5009               	movf	read_prec_or_width@ap^0,w,c
 10498   003CA2  6ED9               	movwf	fsr2l,c
 10499   003CA4  6ADA               	clrf	fsr2h,c
 10500   003CA6  0E02               	movlw	2
 10501   003CA8  26DF               	addwf	indf2,f,c
 10502   003CAA  5CDF               	subwf	indf2,w,c
 10503   003CAC  6ED9               	movwf	fsr2l,c
 10504   003CAE  6ADA               	clrf	fsr2h,c
 10505   003CB0  CFDE F00B          	movff	postinc2,read_prec_or_width@n
 10506   003CB4  CFDE F00C          	movff	postinc2,read_prec_or_width@n+1
 10507                           
 10508                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
 10509   003CB8  EF87  F01E         	goto	l1538
 10510   003CBC                     l3855:
 10511                           
 10512                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
 10513   003CBC  C00B  F002         	movff	read_prec_or_width@n,___wmul@multiplier
 10514   003CC0  C00C  F003         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
 10515   003CC4  0E00               	movlw	0
 10516   003CC6  6E05               	movwf	(___wmul@multiplicand+1)^0,c
 10517   003CC8  0E0A               	movlw	10
 10518   003CCA  6E04               	movwf	___wmul@multiplicand^0,c
 10519   003CCC  EC7D  F025         	call	___wmul	;wreg free
 10520   003CD0  500A               	movf	read_prec_or_width@c^0,w,c
 10521   003CD2  2402               	addwf	?___wmul^0,w,c
 10522   003CD4  6E0B               	movwf	read_prec_or_width@n^0,c
 10523   003CD6  0E00               	movlw	0
 10524   003CD8  2003               	addwfc	(?___wmul+1)^0,w,c
 10525   003CDA  6E0C               	movwf	(read_prec_or_width@n+1)^0,c
 10526   003CDC                     
 10527                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
 10528   003CDC  5008               	movf	read_prec_or_width@fmt^0,w,c
 10529   003CDE  6ED9               	movwf	fsr2l,c
 10530   003CE0  6ADA               	clrf	fsr2h,c
 10531   003CE2  2ADF               	incf	indf2,f,c
 10532   003CE4                     l3859:
 10533                           
 10534                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
 10535   003CE4  5008               	movf	read_prec_or_width@fmt^0,w,c
 10536   003CE6  6ED9               	movwf	fsr2l,c
 10537   003CE8  6ADA               	clrf	fsr2h,c
 10538   003CEA  CFDF FFF6          	movff	indf2,tblptrl
 10539   003CEE                     	if	1	;There is more than 1 active tblptr byte
 10540   003CEE  0E0E               	movlw	high __smallconst
 10541   003CF0  6EF7               	movwf	tblptrh,c
 10542   003CF2                     	endif
 10543   003CF2                     	if	0	;tblptru may be non-zero
 10544   003CF2                     	endif
 10545   003CF2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10546   003CF2  0E00               	movlw	low (__smallconst shr (0+16))
 10547   003CF4  6EF8               	movwf	tblptru,c
 10548   003CF6                     	endif
 10549   003CF6  0008               	tblrd		*
 10550   003CF8  50F5               	movf	tablat,w,c
 10551   003CFA  0FD0               	addlw	208
 10552   003CFC  6E0A               	movwf	read_prec_or_width@c^0,c
 10553   003CFE  0E09               	movlw	9
 10554   003D00  640A               	cpfsgt	read_prec_or_width@c^0,c
 10555   003D02  EF85  F01E         	goto	u2841
 10556   003D06  EF87  F01E         	goto	u2840
 10557   003D0A                     u2841:
 10558   003D0A  EF5E  F01E         	goto	l3855
 10559   003D0E                     u2840:
 10560   003D0E                     l1538:
 10561                           
 10562                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
 10563   003D0E  C00B  F008         	movff	read_prec_or_width@n,?_read_prec_or_width
 10564   003D12  C00C  F009         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
 10565   003D16  0012               	return		;funcret
 10566   003D18                     __end_of_read_prec_or_width:
 10567                           	callstack 0
 10568                           
 10569 ;; *************** function ___wmul *****************
 10570 ;; Defined at:
 10571 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
 10572 ;; Parameters:    Size  Location     Type
 10573 ;;  multiplier      2    1[COMRAM] unsigned int 
 10574 ;;  multiplicand    2    3[COMRAM] unsigned int 
 10575 ;; Auto vars:     Size  Location     Type
 10576 ;;  product         2    5[COMRAM] unsigned int 
 10577 ;; Return value:  Size  Location     Type
 10578 ;;                  2    1[COMRAM] unsigned int 
 10579 ;; Registers used:
 10580 ;;		wreg, status,2, status,0, prodl, prodh
 10581 ;; Tracked objects:
 10582 ;;		On entry : 0/0
 10583 ;;		On exit  : 0/0
 10584 ;;		Unchanged: 0/0
 10585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10586 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10587 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10589 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10590 ;;Total ram usage:        6 bytes
 10591 ;; Hardware stack levels used: 1
 10592 ;; Hardware stack levels required when called: 1
 10593 ;; This function calls:
 10594 ;;		Nothing
 10595 ;; This function is called by:
 10596 ;;		_setMotorPWM
 10597 ;;		_right90
 10598 ;;		_left90
 10599 ;;		_turn180
 10600 ;;		_right135
 10601 ;;		_left135
 10602 ;;		_read_prec_or_width
 10603 ;;		_ADC2String
 10604 ;; This function uses a non-reentrant model
 10605 ;;
 10606                           
 10607                           	psect	text53
 10608   004AFA                     __ptext53:
 10609                           	callstack 0
 10610   004AFA                     ___wmul:
 10611                           	callstack 27
 10612   004AFA  5002               	movf	___wmul@multiplier^0,w,c
 10613   004AFC  0204               	mulwf	___wmul@multiplicand^0,c
 10614   004AFE  CFF3 F006          	movff	prodl,___wmul@product
 10615   004B02  CFF4 F007          	movff	prodh,___wmul@product+1
 10616   004B06  5002               	movf	___wmul@multiplier^0,w,c
 10617   004B08  0205               	mulwf	(___wmul@multiplicand+1)^0,c
 10618   004B0A  50F3               	movf	243,w,c
 10619   004B0C  2607               	addwf	(___wmul@product+1)^0,f,c
 10620   004B0E  5003               	movf	(___wmul@multiplier+1)^0,w,c
 10621   004B10  0204               	mulwf	___wmul@multiplicand^0,c
 10622   004B12  50F3               	movf	243,w,c
 10623   004B14  2607               	addwf	(___wmul@product+1)^0,f,c
 10624   004B16  C006  F002         	movff	___wmul@product,?___wmul
 10625   004B1A  C007  F003         	movff	___wmul@product+1,?___wmul+1
 10626   004B1E  0012               	return		;funcret
 10627   004B20                     __end_of___wmul:
 10628                           	callstack 0
 10629                           
 10630 ;; *************** function _dtoa *****************
 10631 ;; Defined at:
 10632 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10633 ;; Parameters:    Size  Location     Type
 10634 ;;  fp              1   23[COMRAM] PTR struct _IO_FILE
 10635 ;;		 -> sprintf@f(12), 
 10636 ;;  d               2   24[COMRAM] int 
 10637 ;; Auto vars:     Size  Location     Type
 10638 ;;  i               2   32[COMRAM] int 
 10639 ;;  w               2   29[COMRAM] int 
 10640 ;;  s               1   31[COMRAM] unsigned char 
 10641 ;;  p               1   28[COMRAM] _Bool 
 10642 ;; Return value:  Size  Location     Type
 10643 ;;                  1    wreg      void 
 10644 ;; Registers used:
 10645 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10646 ;; Tracked objects:
 10647 ;;		On entry : 0/0
 10648 ;;		On exit  : 0/0
 10649 ;;		Unchanged: 0/0
 10650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10651 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10652 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10654 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10655 ;;Total ram usage:       11 bytes
 10656 ;; Hardware stack levels used: 1
 10657 ;; Hardware stack levels required when called: 5
 10658 ;; This function calls:
 10659 ;;		___awdiv
 10660 ;;		___awmod
 10661 ;;		_abs
 10662 ;;		_pad
 10663 ;; This function is called by:
 10664 ;;		_vfpfcnvrt
 10665 ;; This function uses a non-reentrant model
 10666 ;;
 10667                           
 10668                           	psect	text54
 10669   002FE2                     __ptext54:
 10670                           	callstack 0
 10671   002FE2                     _dtoa:
 10672                           	callstack 21
 10673   002FE2                     
 10674                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
 10675   002FE2  0E01               	movlw	1
 10676   002FE4  6E1D               	movwf	dtoa@p^0,c
 10677   002FE6                     
 10678                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
 10679   002FE6  BE1A               	btfsc	(dtoa@d+1)^0,7,c
 10680   002FE8  EFF8  F017         	goto	u4971
 10681   002FEC  EFFB  F017         	goto	u4970
 10682   002FF0                     u4971:
 10683   002FF0  0E01               	movlw	1
 10684   002FF2  EFFC  F017         	goto	u4980
 10685   002FF6                     u4970:
 10686   002FF6  0E00               	movlw	0
 10687   002FF8                     u4980:
 10688   002FF8  6E20               	movwf	dtoa@s^0,c
 10689   002FFA                     
 10690                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
 10691   002FFA  C0C2  F01E         	movff	_width,dtoa@w
 10692   002FFE  C0C3  F01F         	movff	_width+1,dtoa@w+1
 10693   003002                     
 10694                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
 10695   003002  5020               	movf	dtoa@s^0,w,c
 10696   003004  B4D8               	btfsc	status,2,c
 10697   003006  EF07  F018         	goto	u4991
 10698   00300A  EF09  F018         	goto	u4990
 10699   00300E                     u4991:
 10700   00300E  EF20  F018         	goto	l1521
 10701   003012                     u4990:
 10702   003012                     
 10703                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
 10704   003012  061E               	decf	dtoa@w^0,f,c
 10705   003014  A0D8               	btfss	status,0,c
 10706   003016  061F               	decf	(dtoa@w+1)^0,f,c
 10707   003018                     
 10708                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
 10709   003018  5020               	movf	dtoa@s^0,w,c
 10710   00301A  A4D8               	btfss	status,2,c
 10711   00301C  EF12  F018         	goto	u5001
 10712   003020  EF14  F018         	goto	u5000
 10713   003024                     u5001:
 10714   003024  EF1A  F018         	goto	l5719
 10715   003028                     u5000:
 10716   003028  0E00               	movlw	0
 10717   00302A  6E1C               	movwf	(_dtoa$3143+1)^0,c
 10718   00302C  0E2B               	movlw	43
 10719   00302E  6E1B               	movwf	_dtoa$3143^0,c
 10720   003030  EF1E  F018         	goto	l5721
 10721   003034                     l5719:
 10722   003034  0E00               	movlw	0
 10723   003036  6E1C               	movwf	(_dtoa$3143+1)^0,c
 10724   003038  0E2D               	movlw	45
 10725   00303A  6E1B               	movwf	_dtoa$3143^0,c
 10726   00303C                     l5721:
 10727   00303C  C01B  F020         	movff	_dtoa$3143,dtoa@s
 10728   003040                     l1521:
 10729                           
 10730                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
 10731   003040  0E00               	movlw	0
 10732   003042  6E22               	movwf	(dtoa@i+1)^0,c
 10733   003044  0E1F               	movlw	31
 10734   003046  6E21               	movwf	dtoa@i^0,c
 10735   003048                     
 10736                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
 10737   003048  0E00               	movlw	0
 10738   00304A  0101               	movlb	1	; () banked
 10739   00304C  6FB5               	movwf	(_dbuf+31)& (0+255),b
 10740                           
 10741                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10742   00304E  EF58  F018         	goto	l5735
 10743   003052                     l5725:
 10744                           
 10745                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
 10746   003052  0621               	decf	dtoa@i^0,f,c
 10747   003054  A0D8               	btfss	status,0,c
 10748   003056  0622               	decf	(dtoa@i+1)^0,f,c
 10749   003058                     
 10750                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
 10751   003058  0E96               	movlw	low _dbuf
 10752   00305A  2421               	addwf	dtoa@i^0,w,c
 10753   00305C  6ED9               	movwf	fsr2l,c
 10754   00305E  0E01               	movlw	high _dbuf
 10755   003060  2022               	addwfc	(dtoa@i+1)^0,w,c
 10756   003062  6EDA               	movwf	fsr2h,c
 10757   003064  C019  F002         	movff	dtoa@d,___awmod@dividend
 10758   003068  C01A  F003         	movff	dtoa@d+1,___awmod@dividend+1
 10759   00306C  0E00               	movlw	0
 10760   00306E  6E05               	movwf	(___awmod@divisor+1)^0,c
 10761   003070  0E0A               	movlw	10
 10762   003072  6E04               	movwf	___awmod@divisor^0,c
 10763   003074  ECDD  F01D         	call	___awmod	;wreg free
 10764   003078  C002  F008         	movff	?___awmod,abs@a
 10765   00307C  C003  F009         	movff	?___awmod+1,abs@a+1
 10766   003080  ECD8  F024         	call	_abs	;wreg free
 10767   003084  5008               	movf	?_abs^0,w,c
 10768   003086  0F30               	addlw	48
 10769   003088  6EDF               	movwf	indf2,c
 10770   00308A                     
 10771                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
 10772   00308A  0E00               	movlw	0
 10773   00308C  6E1D               	movwf	dtoa@p^0,c
 10774   00308E                     
 10775                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
 10776   00308E  061E               	decf	dtoa@w^0,f,c
 10777   003090  A0D8               	btfss	status,0,c
 10778   003092  061F               	decf	(dtoa@w+1)^0,f,c
 10779   003094                     
 10780                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
 10781   003094  C019  F002         	movff	dtoa@d,___awdiv@dividend
 10782   003098  C01A  F003         	movff	dtoa@d+1,___awdiv@dividend+1
 10783   00309C  0E00               	movlw	0
 10784   00309E  6E05               	movwf	(___awdiv@divisor+1)^0,c
 10785   0030A0  0E0A               	movlw	10
 10786   0030A2  6E04               	movwf	___awdiv@divisor^0,c
 10787   0030A4  EC7B  F01D         	call	___awdiv	;wreg free
 10788   0030A8  C002  F019         	movff	?___awdiv,dtoa@d
 10789   0030AC  C003  F01A         	movff	?___awdiv+1,dtoa@d+1
 10790   0030B0                     l5735:
 10791                           
 10792                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
 10793   0030B0  BE22               	btfsc	(dtoa@i+1)^0,7,c
 10794   0030B2  EF63  F018         	goto	u5011
 10795   0030B6  5022               	movf	(dtoa@i+1)^0,w,c
 10796   0030B8  E108               	bnz	u5010
 10797   0030BA  0421               	decf	dtoa@i^0,w,c
 10798   0030BC  A0D8               	btfss	status,0,c
 10799   0030BE  EF63  F018         	goto	u5011
 10800   0030C2  EF65  F018         	goto	u5010
 10801   0030C6                     u5011:
 10802   0030C6  EF8B  F018         	goto	l5745
 10803   0030CA                     u5010:
 10804   0030CA  5019               	movf	dtoa@d^0,w,c
 10805   0030CC  101A               	iorwf	(dtoa@d+1)^0,w,c
 10806   0030CE  A4D8               	btfss	status,2,c
 10807   0030D0  EF6C  F018         	goto	u5021
 10808   0030D4  EF6E  F018         	goto	u5020
 10809   0030D8                     u5021:
 10810   0030D8  EF29  F018         	goto	l5725
 10811   0030DC                     u5020:
 10812   0030DC  501D               	movf	dtoa@p^0,w,c
 10813   0030DE  A4D8               	btfss	status,2,c
 10814   0030E0  EF74  F018         	goto	u5031
 10815   0030E4  EF76  F018         	goto	u5030
 10816   0030E8                     u5031:
 10817   0030E8  EF29  F018         	goto	l5725
 10818   0030EC                     u5030:
 10819   0030EC  BE1F               	btfsc	(dtoa@w+1)^0,7,c
 10820   0030EE  EF81  F018         	goto	u5041
 10821   0030F2  501F               	movf	(dtoa@w+1)^0,w,c
 10822   0030F4  E108               	bnz	u5040
 10823   0030F6  041E               	decf	dtoa@w^0,w,c
 10824   0030F8  A0D8               	btfss	status,0,c
 10825   0030FA  EF81  F018         	goto	u5041
 10826   0030FE  EF83  F018         	goto	u5040
 10827   003102                     u5041:
 10828   003102  EF8B  F018         	goto	l5745
 10829   003106                     u5040:
 10830   003106  0100               	movlb	0	; () banked
 10831   003108  B3C6               	btfsc	_flags& (0+255),1,b
 10832   00310A  EF89  F018         	goto	u5051
 10833   00310E  EF8B  F018         	goto	u5050
 10834   003112                     u5051:
 10835   003112  EF29  F018         	goto	l5725
 10836   003116                     u5050:
 10837   003116                     l5745:
 10838                           
 10839                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
 10840   003116  5020               	movf	dtoa@s^0,w,c
 10841   003118  B4D8               	btfsc	status,2,c
 10842   00311A  EF91  F018         	goto	u5061
 10843   00311E  EF93  F018         	goto	u5060
 10844   003122                     u5061:
 10845   003122  EF9E  F018         	goto	l5751
 10846   003126                     u5060:
 10847   003126                     
 10848                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
 10849   003126  0621               	decf	dtoa@i^0,f,c
 10850   003128  A0D8               	btfss	status,0,c
 10851   00312A  0622               	decf	(dtoa@i+1)^0,f,c
 10852   00312C                     
 10853                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
 10854   00312C  0E96               	movlw	low _dbuf
 10855   00312E  2421               	addwf	dtoa@i^0,w,c
 10856   003130  6ED9               	movwf	fsr2l,c
 10857   003132  0E01               	movlw	high _dbuf
 10858   003134  2022               	addwfc	(dtoa@i+1)^0,w,c
 10859   003136  6EDA               	movwf	fsr2h,c
 10860   003138  C020  FFDF         	movff	dtoa@s,indf2
 10861   00313C                     l5751:
 10862                           
 10863                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
 10864   00313C  C018  F010         	movff	dtoa@fp,pad@fp
 10865   003140  0E96               	movlw	low _dbuf
 10866   003142  2421               	addwf	dtoa@i^0,w,c
 10867   003144  6E11               	movwf	pad@buf^0,c
 10868   003146  0E01               	movlw	high _dbuf
 10869   003148  2022               	addwfc	(dtoa@i+1)^0,w,c
 10870   00314A  6E12               	movwf	(pad@buf+1)^0,c
 10871   00314C  C01E  F013         	movff	dtoa@w,pad@p
 10872   003150  C01F  F014         	movff	dtoa@w+1,pad@p+1
 10873   003154  EC85  F01F         	call	_pad	;wreg free
 10874   003158  0012               	return		;funcret
 10875   00315A                     __end_of_dtoa:
 10876                           	callstack 0
 10877                           
 10878 ;; *************** function _pad *****************
 10879 ;; Defined at:
 10880 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
 10881 ;; Parameters:    Size  Location     Type
 10882 ;;  fp              1   15[COMRAM] PTR struct _IO_FILE
 10883 ;;		 -> sprintf@f(12), 
 10884 ;;  buf             2   16[COMRAM] PTR unsigned char 
 10885 ;;		 -> dbuf(32), 
 10886 ;;  p               2   18[COMRAM] int 
 10887 ;; Auto vars:     Size  Location     Type
 10888 ;;  i               2   21[COMRAM] int 
 10889 ;; Return value:  Size  Location     Type
 10890 ;;                  1    wreg      void 
 10891 ;; Registers used:
 10892 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10893 ;; Tracked objects:
 10894 ;;		On entry : 0/0
 10895 ;;		On exit  : 0/0
 10896 ;;		Unchanged: 0/0
 10897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10898 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10899 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10900 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10901 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10902 ;;Total ram usage:        8 bytes
 10903 ;; Hardware stack levels used: 1
 10904 ;; Hardware stack levels required when called: 4
 10905 ;; This function calls:
 10906 ;;		_fputc
 10907 ;;		_fputs
 10908 ;; This function is called by:
 10909 ;;		_dtoa
 10910 ;; This function uses a non-reentrant model
 10911 ;;
 10912                           
 10913                           	psect	text55
 10914   003F0A                     __ptext55:
 10915                           	callstack 0
 10916   003F0A                     _pad:
 10917                           	callstack 21
 10918   003F0A                     
 10919                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
 10920   003F0A  0100               	movlb	0	; () banked
 10921   003F0C  A1C6               	btfss	_flags& (0+255),0,b
 10922   003F0E  EF8B  F01F         	goto	u4931
 10923   003F12  EF8D  F01F         	goto	u4930
 10924   003F16                     u4931:
 10925   003F16  EF95  F01F         	goto	l5693
 10926   003F1A                     u4930:
 10927   003F1A                     
 10928                           ; BSR set to: 0
 10929                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
 10930   003F1A  C011  F00A         	movff	pad@buf,fputs@s
 10931   003F1E  C012  F00B         	movff	pad@buf+1,fputs@s+1
 10932   003F22  C010  F00C         	movff	pad@fp,fputs@fp
 10933   003F26  EC80  F023         	call	_fputs	;wreg free
 10934   003F2A                     l5693:
 10935                           
 10936                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
 10937   003F2A  BE14               	btfsc	(pad@p+1)^0,7,c
 10938   003F2C  EF9C  F01F         	goto	u4940
 10939   003F30  EF9A  F01F         	goto	u4941
 10940   003F34                     u4941:
 10941   003F34  EFA0  F01F         	goto	l1513
 10942   003F38                     u4940:
 10943   003F38                     
 10944                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
 10945   003F38  0E00               	movlw	0
 10946   003F3A  6E14               	movwf	(pad@p+1)^0,c
 10947   003F3C  0E00               	movlw	0
 10948   003F3E  6E13               	movwf	pad@p^0,c
 10949   003F40                     l1513:
 10950                           
 10951                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
 10952   003F40  0E00               	movlw	0
 10953   003F42  6E17               	movwf	(pad@i+1)^0,c
 10954   003F44  0E00               	movlw	0
 10955   003F46  6E16               	movwf	pad@i^0,c
 10956                           
 10957                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10958   003F48  EFB0  F01F         	goto	l5701
 10959   003F4C                     l5697:
 10960                           
 10961                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
 10962   003F4C  0E00               	movlw	0
 10963   003F4E  6E03               	movwf	(fputc@c+1)^0,c
 10964   003F50  0E20               	movlw	32
 10965   003F52  6E02               	movwf	fputc@c^0,c
 10966   003F54  C010  F004         	movff	pad@fp,fputc@fp
 10967   003F58  ECE1  F01E         	call	_fputc	;wreg free
 10968   003F5C                     
 10969                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
 10970   003F5C  4A16               	infsnz	pad@i^0,f,c
 10971   003F5E  2A17               	incf	(pad@i+1)^0,f,c
 10972   003F60                     l5701:
 10973                           
 10974                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
 10975   003F60  5013               	movf	pad@p^0,w,c
 10976   003F62  5C16               	subwf	pad@i^0,w,c
 10977   003F64  5017               	movf	(pad@i+1)^0,w,c
 10978   003F66  0A80               	xorlw	128
 10979   003F68  6E15               	movwf	??_pad^0,c
 10980   003F6A  5014               	movf	(pad@p+1)^0,w,c
 10981   003F6C  0A80               	xorlw	128
 10982   003F6E  5815               	subwfb	??_pad^0,w,c
 10983   003F70  A0D8               	btfss	status,0,c
 10984   003F72  EFBD  F01F         	goto	u4951
 10985   003F76  EFBF  F01F         	goto	u4950
 10986   003F7A                     u4951:
 10987   003F7A  EFA6  F01F         	goto	l5697
 10988   003F7E                     u4950:
 10989   003F7E                     
 10990                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
 10991   003F7E  0100               	movlb	0	; () banked
 10992   003F80  B1C6               	btfsc	_flags& (0+255),0,b
 10993   003F82  EFC5  F01F         	goto	u4961
 10994   003F86  EFC7  F01F         	goto	u4960
 10995   003F8A                     u4961:
 10996   003F8A  EFCF  F01F         	goto	l1518
 10997   003F8E                     u4960:
 10998   003F8E                     
 10999                           ; BSR set to: 0
 11000                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
 11001   003F8E  C011  F00A         	movff	pad@buf,fputs@s
 11002   003F92  C012  F00B         	movff	pad@buf+1,fputs@s+1
 11003   003F96  C010  F00C         	movff	pad@fp,fputs@fp
 11004   003F9A  EC80  F023         	call	_fputs	;wreg free
 11005   003F9E                     l1518:
 11006   003F9E  0012               	return		;funcret
 11007   003FA0                     __end_of_pad:
 11008                           	callstack 0
 11009                           
 11010 ;; *************** function _fputs *****************
 11011 ;; Defined at:
 11012 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
 11013 ;; Parameters:    Size  Location     Type
 11014 ;;  s               2    9[COMRAM] PTR const unsigned char 
 11015 ;;		 -> dbuf(32), 
 11016 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
 11017 ;;		 -> sprintf@f(12), 
 11018 ;; Auto vars:     Size  Location     Type
 11019 ;;  i               2   13[COMRAM] int 
 11020 ;;  c               1   12[COMRAM] unsigned char 
 11021 ;; Return value:  Size  Location     Type
 11022 ;;                  2    9[COMRAM] int 
 11023 ;; Registers used:
 11024 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11025 ;; Tracked objects:
 11026 ;;		On entry : 0/0
 11027 ;;		On exit  : 0/0
 11028 ;;		Unchanged: 0/0
 11029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11030 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11031 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11033 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11034 ;;Total ram usage:        6 bytes
 11035 ;; Hardware stack levels used: 1
 11036 ;; Hardware stack levels required when called: 3
 11037 ;; This function calls:
 11038 ;;		_fputc
 11039 ;; This function is called by:
 11040 ;;		_pad
 11041 ;; This function uses a non-reentrant model
 11042 ;;
 11043                           
 11044                           	psect	text56
 11045   004700                     __ptext56:
 11046                           	callstack 0
 11047   004700                     _fputs:
 11048                           	callstack 21
 11049   004700  0E00               	movlw	0
 11050   004702  6E0F               	movwf	(fputs@i+1)^0,c
 11051   004704  0E00               	movlw	0
 11052   004706  6E0E               	movwf	fputs@i^0,c
 11053   004708  EF8F  F023         	goto	l5687
 11054   00470C                     l5683:
 11055   00470C  C00D  F002         	movff	fputs@c,fputc@c
 11056   004710  6A03               	clrf	(fputc@c+1)^0,c
 11057   004712  C00C  F004         	movff	fputs@fp,fputc@fp
 11058   004716  ECE1  F01E         	call	_fputc	;wreg free
 11059   00471A  4A0E               	infsnz	fputs@i^0,f,c
 11060   00471C  2A0F               	incf	(fputs@i+1)^0,f,c
 11061   00471E                     l5687:
 11062   00471E  500E               	movf	fputs@i^0,w,c
 11063   004720  240A               	addwf	fputs@s^0,w,c
 11064   004722  6ED9               	movwf	fsr2l,c
 11065   004724  500F               	movf	(fputs@i+1)^0,w,c
 11066   004726  200B               	addwfc	(fputs@s+1)^0,w,c
 11067   004728  6EDA               	movwf	fsr2h,c
 11068   00472A  50DF               	movf	indf2,w,c
 11069   00472C  6E0D               	movwf	fputs@c^0,c
 11070   00472E  500D               	movf	fputs@c^0,w,c
 11071   004730  A4D8               	btfss	status,2,c
 11072   004732  EF9D  F023         	goto	u4921
 11073   004736  EF9F  F023         	goto	u4920
 11074   00473A                     u4921:
 11075   00473A  EF86  F023         	goto	l5683
 11076   00473E                     u4920:
 11077   00473E  0012               	return		;funcret
 11078   004740                     __end_of_fputs:
 11079                           	callstack 0
 11080                           
 11081 ;; *************** function _fputc *****************
 11082 ;; Defined at:
 11083 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
 11084 ;; Parameters:    Size  Location     Type
 11085 ;;  c               2    1[COMRAM] int 
 11086 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
 11087 ;;		 -> sprintf@f(12), 
 11088 ;; Auto vars:     Size  Location     Type
 11089 ;;		None
 11090 ;; Return value:  Size  Location     Type
 11091 ;;                  2    1[COMRAM] int 
 11092 ;; Registers used:
 11093 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11094 ;; Tracked objects:
 11095 ;;		On entry : 0/0
 11096 ;;		On exit  : 0/0
 11097 ;;		Unchanged: 0/0
 11098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11099 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11101 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11102 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11103 ;;Total ram usage:        8 bytes
 11104 ;; Hardware stack levels used: 1
 11105 ;; Hardware stack levels required when called: 2
 11106 ;; This function calls:
 11107 ;;		_putch
 11108 ;; This function is called by:
 11109 ;;		_pad
 11110 ;;		_vfpfcnvrt
 11111 ;;		_fputs
 11112 ;; This function uses a non-reentrant model
 11113 ;;
 11114                           
 11115                           	psect	text57
 11116   003DC2                     __ptext57:
 11117                           	callstack 0
 11118   003DC2                     _fputc:
 11119                           	callstack 24
 11120   003DC2  5004               	movf	fputc@fp^0,w,c
 11121   003DC4  B4D8               	btfsc	status,2,c
 11122   003DC6  EFE7  F01E         	goto	u2481
 11123   003DCA  EFE9  F01E         	goto	u2480
 11124   003DCE                     u2481:
 11125   003DCE  EFF1  F01E         	goto	l3651
 11126   003DD2                     u2480:
 11127   003DD2  5004               	movf	fputc@fp^0,w,c
 11128   003DD4  A4D8               	btfss	status,2,c
 11129   003DD6  EFEF  F01E         	goto	u2491
 11130   003DDA  EFF1  F01E         	goto	u2490
 11131   003DDE                     u2491:
 11132   003DDE  EFF6  F01E         	goto	l3653
 11133   003DE2                     u2490:
 11134   003DE2                     l3651:
 11135   003DE2  5002               	movf	fputc@c^0,w,c
 11136   003DE4  ECEC  F025         	call	_putch
 11137   003DE8  EF35  F01F         	goto	l1582
 11138   003DEC                     l3653:
 11139   003DEC  5004               	movf	fputc@fp^0,w,c
 11140   003DEE  6ED9               	movwf	fsr2l,c
 11141   003DF0  6ADA               	clrf	fsr2h,c
 11142   003DF2  0E0A               	movlw	10
 11143   003DF4  26D9               	addwf	fsr2l,f,c
 11144   003DF6  50DE               	movf	postinc2,w,c
 11145   003DF8  10DE               	iorwf	postinc2,w,c
 11146   003DFA  B4D8               	btfsc	status,2,c
 11147   003DFC  EF02  F01F         	goto	u2501
 11148   003E00  EF04  F01F         	goto	u2500
 11149   003E04                     u2501:
 11150   003E04  EF1D  F01F         	goto	l3657
 11151   003E08                     u2500:
 11152   003E08  5004               	movf	fputc@fp^0,w,c
 11153   003E0A  6ED9               	movwf	fsr2l,c
 11154   003E0C  6ADA               	clrf	fsr2h,c
 11155   003E0E  0E0A               	movlw	10
 11156   003E10  26D9               	addwf	fsr2l,f,c
 11157   003E12  5004               	movf	fputc@fp^0,w,c
 11158   003E14  6EE1               	movwf	fsr1l,c
 11159   003E16  6AE2               	clrf	fsr1h,c
 11160   003E18  0E03               	movlw	3
 11161   003E1A  26E1               	addwf	fsr1l,f,c
 11162   003E1C  50DE               	movf	postinc2,w,c
 11163   003E1E  5CE6               	subwf	postinc1,w,c
 11164   003E20  50E6               	movf	postinc1,w,c
 11165   003E22  0A80               	xorlw	128
 11166   003E24  6E09               	movwf	(??_fputc+4)^0,c
 11167   003E26  50DE               	movf	postinc2,w,c
 11168   003E28  0A80               	xorlw	128
 11169   003E2A  5809               	subwfb	(??_fputc+4)^0,w,c
 11170   003E2C  B0D8               	btfsc	status,0,c
 11171   003E2E  EF1B  F01F         	goto	u2511
 11172   003E32  EF1D  F01F         	goto	u2510
 11173   003E36                     u2511:
 11174   003E36  EF35  F01F         	goto	l1582
 11175   003E3A                     u2510:
 11176   003E3A                     l3657:
 11177   003E3A  5004               	movf	fputc@fp^0,w,c
 11178   003E3C  6ED9               	movwf	fsr2l,c
 11179   003E3E  6ADA               	clrf	fsr2h,c
 11180   003E40  0E03               	movlw	3
 11181   003E42  26D9               	addwf	fsr2l,f,c
 11182   003E44  50DF               	movf	indf2,w,c
 11183   003E46  6E05               	movwf	??_fputc^0,c
 11184   003E48  5004               	movf	fputc@fp^0,w,c
 11185   003E4A  6ED9               	movwf	fsr2l,c
 11186   003E4C  6ADA               	clrf	fsr2h,c
 11187   003E4E  50DF               	movf	indf2,w,c
 11188   003E50  2405               	addwf	??_fputc^0,w,c
 11189   003E52  6ED9               	movwf	fsr2l,c
 11190   003E54  6ADA               	clrf	fsr2h,c
 11191   003E56  C002  FFDF         	movff	fputc@c,indf2
 11192   003E5A  5004               	movf	fputc@fp^0,w,c
 11193   003E5C  6ED9               	movwf	fsr2l,c
 11194   003E5E  6ADA               	clrf	fsr2h,c
 11195   003E60  0E03               	movlw	3
 11196   003E62  26D9               	addwf	fsr2l,f,c
 11197   003E64  2ADE               	incf	postinc2,f,c
 11198   003E66  0E00               	movlw	0
 11199   003E68  22DD               	addwfc	postdec2,f,c
 11200   003E6A                     l1582:
 11201   003E6A  0012               	return		;funcret
 11202   003E6C                     __end_of_fputc:
 11203                           	callstack 0
 11204                           
 11205 ;; *************** function _putch *****************
 11206 ;; Defined at:
 11207 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
 11208 ;; Parameters:    Size  Location     Type
 11209 ;;  c               1    wreg     unsigned char 
 11210 ;; Auto vars:     Size  Location     Type
 11211 ;;  c               1    0[COMRAM] unsigned char 
 11212 ;; Return value:  Size  Location     Type
 11213 ;;                  1    wreg      void 
 11214 ;; Registers used:
 11215 ;;		wreg
 11216 ;; Tracked objects:
 11217 ;;		On entry : 0/0
 11218 ;;		On exit  : 0/0
 11219 ;;		Unchanged: 0/0
 11220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11225 ;;Total ram usage:        0 bytes
 11226 ;; Hardware stack levels used: 1
 11227 ;; Hardware stack levels required when called: 1
 11228 ;; This function calls:
 11229 ;;		Nothing
 11230 ;; This function is called by:
 11231 ;;		_fputc
 11232 ;; This function uses a non-reentrant model
 11233 ;;
 11234                           
 11235                           	psect	text58
 11236   004BD8                     __ptext58:
 11237                           	callstack 0
 11238   004BD8                     _putch:
 11239                           	callstack 24
 11240   004BD8  0012               	return		;funcret
 11241   004BDA                     __end_of_putch:
 11242                           	callstack 0
 11243                           
 11244 ;; *************** function _abs *****************
 11245 ;; Defined at:
 11246 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
 11247 ;; Parameters:    Size  Location     Type
 11248 ;;  a               2    7[COMRAM] int 
 11249 ;; Auto vars:     Size  Location     Type
 11250 ;;		None
 11251 ;; Return value:  Size  Location     Type
 11252 ;;                  2    7[COMRAM] int 
 11253 ;; Registers used:
 11254 ;;		wreg, status,2, status,0
 11255 ;; Tracked objects:
 11256 ;;		On entry : 0/0
 11257 ;;		On exit  : 0/0
 11258 ;;		Unchanged: 0/0
 11259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11260 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11262 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11263 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11264 ;;Total ram usage:        4 bytes
 11265 ;; Hardware stack levels used: 1
 11266 ;; Hardware stack levels required when called: 1
 11267 ;; This function calls:
 11268 ;;		Nothing
 11269 ;; This function is called by:
 11270 ;;		_dtoa
 11271 ;; This function uses a non-reentrant model
 11272 ;;
 11273                           
 11274                           	psect	text59
 11275   0049B0                     __ptext59:
 11276                           	callstack 0
 11277   0049B0                     _abs:
 11278                           	callstack 24
 11279   0049B0  BE09               	btfsc	(abs@a+1)^0,7,c
 11280   0049B2  EFDD  F024         	goto	u2691
 11281   0049B6  EFDF  F024         	goto	u2690
 11282   0049BA                     u2691:
 11283   0049BA  EFE5  F024         	goto	l1567
 11284   0049BE                     u2690:
 11285   0049BE  C008  F008         	movff	abs@a,?_abs
 11286   0049C2  C009  F009         	movff	abs@a+1,?_abs+1
 11287   0049C6  EFF1  F024         	goto	l1570
 11288   0049CA                     l1567:
 11289   0049CA  C008  F00A         	movff	abs@a,??_abs
 11290   0049CE  C009  F00B         	movff	abs@a+1,??_abs+1
 11291   0049D2  1E0A               	comf	??_abs^0,f,c
 11292   0049D4  1E0B               	comf	(??_abs+1)^0,f,c
 11293   0049D6  4A0A               	infsnz	??_abs^0,f,c
 11294   0049D8  2A0B               	incf	(??_abs+1)^0,f,c
 11295   0049DA  C00A  F008         	movff	??_abs,?_abs
 11296   0049DE  C00B  F009         	movff	??_abs+1,?_abs+1
 11297   0049E2                     l1570:
 11298   0049E2  0012               	return		;funcret
 11299   0049E4                     __end_of_abs:
 11300                           	callstack 0
 11301                           
 11302 ;; *************** function ___awmod *****************
 11303 ;; Defined at:
 11304 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
 11305 ;; Parameters:    Size  Location     Type
 11306 ;;  dividend        2    1[COMRAM] int 
 11307 ;;  divisor         2    3[COMRAM] int 
 11308 ;; Auto vars:     Size  Location     Type
 11309 ;;  sign            1    6[COMRAM] unsigned char 
 11310 ;;  counter         1    5[COMRAM] unsigned char 
 11311 ;; Return value:  Size  Location     Type
 11312 ;;                  2    1[COMRAM] int 
 11313 ;; Registers used:
 11314 ;;		wreg, status,2, status,0
 11315 ;; Tracked objects:
 11316 ;;		On entry : 0/0
 11317 ;;		On exit  : 0/0
 11318 ;;		Unchanged: 0/0
 11319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11320 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11321 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11323 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11324 ;;Total ram usage:        6 bytes
 11325 ;; Hardware stack levels used: 1
 11326 ;; Hardware stack levels required when called: 1
 11327 ;; This function calls:
 11328 ;;		Nothing
 11329 ;; This function is called by:
 11330 ;;		_dtoa
 11331 ;; This function uses a non-reentrant model
 11332 ;;
 11333                           
 11334                           	psect	text60
 11335   003BBA                     __ptext60:
 11336                           	callstack 0
 11337   003BBA                     ___awmod:
 11338                           	callstack 24
 11339   003BBA  0E00               	movlw	0
 11340   003BBC  6E07               	movwf	___awmod@sign^0,c
 11341   003BBE  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
 11342   003BC0  EFE6  F01D         	goto	u2590
 11343   003BC4  EFE4  F01D         	goto	u2591
 11344   003BC8                     u2591:
 11345   003BC8  EFEC  F01D         	goto	l3727
 11346   003BCC                     u2590:
 11347   003BCC  6C02               	negf	___awmod@dividend^0,c
 11348   003BCE  1E03               	comf	(___awmod@dividend+1)^0,f,c
 11349   003BD0  B0D8               	btfsc	status,0,c
 11350   003BD2  2A03               	incf	(___awmod@dividend+1)^0,f,c
 11351   003BD4  0E01               	movlw	1
 11352   003BD6  6E07               	movwf	___awmod@sign^0,c
 11353   003BD8                     l3727:
 11354   003BD8  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
 11355   003BDA  EFF3  F01D         	goto	u2600
 11356   003BDE  EFF1  F01D         	goto	u2601
 11357   003BE2                     u2601:
 11358   003BE2  EFF7  F01D         	goto	l3731
 11359   003BE6                     u2600:
 11360   003BE6  6C04               	negf	___awmod@divisor^0,c
 11361   003BE8  1E05               	comf	(___awmod@divisor+1)^0,f,c
 11362   003BEA  B0D8               	btfsc	status,0,c
 11363   003BEC  2A05               	incf	(___awmod@divisor+1)^0,f,c
 11364   003BEE                     l3731:
 11365   003BEE  5004               	movf	___awmod@divisor^0,w,c
 11366   003BF0  1005               	iorwf	(___awmod@divisor+1)^0,w,c
 11367   003BF2  B4D8               	btfsc	status,2,c
 11368   003BF4  EFFE  F01D         	goto	u2611
 11369   003BF8  EF00  F01E         	goto	u2610
 11370   003BFC                     u2611:
 11371   003BFC  EF24  F01E         	goto	l3747
 11372   003C00                     u2610:
 11373   003C00  0E01               	movlw	1
 11374   003C02  6E06               	movwf	___awmod@counter^0,c
 11375   003C04  EF08  F01E         	goto	l3737
 11376   003C08                     l3735:
 11377   003C08  90D8               	bcf	status,0,c
 11378   003C0A  3604               	rlcf	___awmod@divisor^0,f,c
 11379   003C0C  3605               	rlcf	(___awmod@divisor+1)^0,f,c
 11380   003C0E  2A06               	incf	___awmod@counter^0,f,c
 11381   003C10                     l3737:
 11382   003C10  AE05               	btfss	(___awmod@divisor+1)^0,7,c
 11383   003C12  EF0D  F01E         	goto	u2621
 11384   003C16  EF0F  F01E         	goto	u2620
 11385   003C1A                     u2621:
 11386   003C1A  EF04  F01E         	goto	l3735
 11387   003C1E                     u2620:
 11388   003C1E                     l3739:
 11389   003C1E  5004               	movf	___awmod@divisor^0,w,c
 11390   003C20  5C02               	subwf	___awmod@dividend^0,w,c
 11391   003C22  5005               	movf	(___awmod@divisor+1)^0,w,c
 11392   003C24  5803               	subwfb	(___awmod@dividend+1)^0,w,c
 11393   003C26  A0D8               	btfss	status,0,c
 11394   003C28  EF18  F01E         	goto	u2631
 11395   003C2C  EF1A  F01E         	goto	u2630
 11396   003C30                     u2631:
 11397   003C30  EF1E  F01E         	goto	l3743
 11398   003C34                     u2630:
 11399   003C34  5004               	movf	___awmod@divisor^0,w,c
 11400   003C36  5E02               	subwf	___awmod@dividend^0,f,c
 11401   003C38  5005               	movf	(___awmod@divisor+1)^0,w,c
 11402   003C3A  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
 11403   003C3C                     l3743:
 11404   003C3C  90D8               	bcf	status,0,c
 11405   003C3E  3205               	rrcf	(___awmod@divisor+1)^0,f,c
 11406   003C40  3204               	rrcf	___awmod@divisor^0,f,c
 11407   003C42  2E06               	decfsz	___awmod@counter^0,f,c
 11408   003C44  EF0F  F01E         	goto	l3739
 11409   003C48                     l3747:
 11410   003C48  5007               	movf	___awmod@sign^0,w,c
 11411   003C4A  B4D8               	btfsc	status,2,c
 11412   003C4C  EF2A  F01E         	goto	u2641
 11413   003C50  EF2C  F01E         	goto	u2640
 11414   003C54                     u2641:
 11415   003C54  EF30  F01E         	goto	l3751
 11416   003C58                     u2640:
 11417   003C58  6C02               	negf	___awmod@dividend^0,c
 11418   003C5A  1E03               	comf	(___awmod@dividend+1)^0,f,c
 11419   003C5C  B0D8               	btfsc	status,0,c
 11420   003C5E  2A03               	incf	(___awmod@dividend+1)^0,f,c
 11421   003C60                     l3751:
 11422   003C60  C002  F002         	movff	___awmod@dividend,?___awmod
 11423   003C64  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
 11424   003C68  0012               	return		;funcret
 11425   003C6A                     __end_of___awmod:
 11426                           	callstack 0
 11427                           
 11428 ;; *************** function ___awdiv *****************
 11429 ;; Defined at:
 11430 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
 11431 ;; Parameters:    Size  Location     Type
 11432 ;;  dividend        2    1[COMRAM] int 
 11433 ;;  divisor         2    3[COMRAM] int 
 11434 ;; Auto vars:     Size  Location     Type
 11435 ;;  quotient        2    7[COMRAM] int 
 11436 ;;  sign            1    6[COMRAM] unsigned char 
 11437 ;;  counter         1    5[COMRAM] unsigned char 
 11438 ;; Return value:  Size  Location     Type
 11439 ;;                  2    1[COMRAM] int 
 11440 ;; Registers used:
 11441 ;;		wreg, status,2, status,0
 11442 ;; Tracked objects:
 11443 ;;		On entry : 0/0
 11444 ;;		On exit  : 0/0
 11445 ;;		Unchanged: 0/0
 11446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11447 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11448 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11450 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11451 ;;Total ram usage:        8 bytes
 11452 ;; Hardware stack levels used: 1
 11453 ;; Hardware stack levels required when called: 1
 11454 ;; This function calls:
 11455 ;;		Nothing
 11456 ;; This function is called by:
 11457 ;;		_dtoa
 11458 ;; This function uses a non-reentrant model
 11459 ;;
 11460                           
 11461                           	psect	text61
 11462   003AF6                     __ptext61:
 11463                           	callstack 0
 11464   003AF6                     ___awdiv:
 11465                           	callstack 24
 11466   003AF6  0E00               	movlw	0
 11467   003AF8  6E07               	movwf	___awdiv@sign^0,c
 11468   003AFA  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
 11469   003AFC  EF84  F01D         	goto	u2530
 11470   003B00  EF82  F01D         	goto	u2531
 11471   003B04                     u2531:
 11472   003B04  EF8A  F01D         	goto	l3683
 11473   003B08                     u2530:
 11474   003B08  6C04               	negf	___awdiv@divisor^0,c
 11475   003B0A  1E05               	comf	(___awdiv@divisor+1)^0,f,c
 11476   003B0C  B0D8               	btfsc	status,0,c
 11477   003B0E  2A05               	incf	(___awdiv@divisor+1)^0,f,c
 11478   003B10  0E01               	movlw	1
 11479   003B12  6E07               	movwf	___awdiv@sign^0,c
 11480   003B14                     l3683:
 11481   003B14  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
 11482   003B16  EF91  F01D         	goto	u2540
 11483   003B1A  EF8F  F01D         	goto	u2541
 11484   003B1E                     u2541:
 11485   003B1E  EF97  F01D         	goto	l3689
 11486   003B22                     u2540:
 11487   003B22  6C02               	negf	___awdiv@dividend^0,c
 11488   003B24  1E03               	comf	(___awdiv@dividend+1)^0,f,c
 11489   003B26  B0D8               	btfsc	status,0,c
 11490   003B28  2A03               	incf	(___awdiv@dividend+1)^0,f,c
 11491   003B2A  0E01               	movlw	1
 11492   003B2C  1A07               	xorwf	___awdiv@sign^0,f,c
 11493   003B2E                     l3689:
 11494   003B2E  0E00               	movlw	0
 11495   003B30  6E09               	movwf	(___awdiv@quotient+1)^0,c
 11496   003B32  0E00               	movlw	0
 11497   003B34  6E08               	movwf	___awdiv@quotient^0,c
 11498   003B36  5004               	movf	___awdiv@divisor^0,w,c
 11499   003B38  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
 11500   003B3A  B4D8               	btfsc	status,2,c
 11501   003B3C  EFA2  F01D         	goto	u2551
 11502   003B40  EFA4  F01D         	goto	u2550
 11503   003B44                     u2551:
 11504   003B44  EFCC  F01D         	goto	l3711
 11505   003B48                     u2550:
 11506   003B48  0E01               	movlw	1
 11507   003B4A  6E06               	movwf	___awdiv@counter^0,c
 11508   003B4C  EFAC  F01D         	goto	l3697
 11509   003B50                     l3695:
 11510   003B50  90D8               	bcf	status,0,c
 11511   003B52  3604               	rlcf	___awdiv@divisor^0,f,c
 11512   003B54  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
 11513   003B56  2A06               	incf	___awdiv@counter^0,f,c
 11514   003B58                     l3697:
 11515   003B58  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
 11516   003B5A  EFB1  F01D         	goto	u2561
 11517   003B5E  EFB3  F01D         	goto	u2560
 11518   003B62                     u2561:
 11519   003B62  EFA8  F01D         	goto	l3695
 11520   003B66                     u2560:
 11521   003B66                     l3699:
 11522   003B66  90D8               	bcf	status,0,c
 11523   003B68  3608               	rlcf	___awdiv@quotient^0,f,c
 11524   003B6A  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
 11525   003B6C  5004               	movf	___awdiv@divisor^0,w,c
 11526   003B6E  5C02               	subwf	___awdiv@dividend^0,w,c
 11527   003B70  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11528   003B72  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
 11529   003B74  A0D8               	btfss	status,0,c
 11530   003B76  EFBF  F01D         	goto	u2571
 11531   003B7A  EFC1  F01D         	goto	u2570
 11532   003B7E                     u2571:
 11533   003B7E  EFC6  F01D         	goto	l3707
 11534   003B82                     u2570:
 11535   003B82  5004               	movf	___awdiv@divisor^0,w,c
 11536   003B84  5E02               	subwf	___awdiv@dividend^0,f,c
 11537   003B86  5005               	movf	(___awdiv@divisor+1)^0,w,c
 11538   003B88  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
 11539   003B8A  8008               	bsf	___awdiv@quotient^0,0,c
 11540   003B8C                     l3707:
 11541   003B8C  90D8               	bcf	status,0,c
 11542   003B8E  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
 11543   003B90  3204               	rrcf	___awdiv@divisor^0,f,c
 11544   003B92  2E06               	decfsz	___awdiv@counter^0,f,c
 11545   003B94  EFB3  F01D         	goto	l3699
 11546   003B98                     l3711:
 11547   003B98  5007               	movf	___awdiv@sign^0,w,c
 11548   003B9A  B4D8               	btfsc	status,2,c
 11549   003B9C  EFD2  F01D         	goto	u2581
 11550   003BA0  EFD4  F01D         	goto	u2580
 11551   003BA4                     u2581:
 11552   003BA4  EFD8  F01D         	goto	l3715
 11553   003BA8                     u2580:
 11554   003BA8  6C08               	negf	___awdiv@quotient^0,c
 11555   003BAA  1E09               	comf	(___awdiv@quotient+1)^0,f,c
 11556   003BAC  B0D8               	btfsc	status,0,c
 11557   003BAE  2A09               	incf	(___awdiv@quotient+1)^0,f,c
 11558   003BB0                     l3715:
 11559   003BB0  C008  F002         	movff	___awdiv@quotient,?___awdiv
 11560   003BB4  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
 11561   003BB8  0012               	return		;funcret
 11562   003BBA                     __end_of___awdiv:
 11563                           	callstack 0
 11564                           
 11565 ;; *************** function _sendStringSerial4 *****************
 11566 ;; Defined at:
 11567 ;;		line 41 in file "serial.c"
 11568 ;; Parameters:    Size  Location     Type
 11569 ;;  string          1    2[COMRAM] PTR unsigned char 
 11570 ;;		 -> calibration_colors@cal_state(20), send2USART@hue_char(50), sendAllReadings@buffer(10), 
 11571 ;; Auto vars:     Size  Location     Type
 11572 ;;		None
 11573 ;; Return value:  Size  Location     Type
 11574 ;;                  1    wreg      void 
 11575 ;; Registers used:
 11576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11577 ;; Tracked objects:
 11578 ;;		On entry : 0/0
 11579 ;;		On exit  : 0/0
 11580 ;;		Unchanged: 0/0
 11581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11582 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11585 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11586 ;;Total ram usage:        1 bytes
 11587 ;; Hardware stack levels used: 1
 11588 ;; Hardware stack levels required when called: 2
 11589 ;; This function calls:
 11590 ;;		_sendCharSerial4
 11591 ;; This function is called by:
 11592 ;;		_send2USART
 11593 ;;		_calibration_colors
 11594 ;;		_sendAllReadings
 11595 ;; This function uses a non-reentrant model
 11596 ;;
 11597                           
 11598                           	psect	text62
 11599   004A16                     __ptext62:
 11600                           	callstack 0
 11601   004A16                     _sendStringSerial4:
 11602                           	callstack 27
 11603   004A16                     
 11604                           ;serial.c: 44:     while(*string != 0){
 11605   004A16  EF18  F025         	goto	l4589
 11606   004A1A                     l4583:
 11607                           
 11608                           ;serial.c: 46:   sendCharSerial4(*string++);
 11609   004A1A  5003               	movf	sendStringSerial4@string^0,w,c
 11610   004A1C  6ED9               	movwf	fsr2l,c
 11611   004A1E  6ADA               	clrf	fsr2h,c
 11612   004A20  50DF               	movf	indf2,w,c
 11613   004A22  ECCB  F025         	call	_sendCharSerial4
 11614   004A26  2A03               	incf	sendStringSerial4@string^0,f,c
 11615   004A28                     
 11616                           ;serial.c: 47:         _delay((unsigned long)((20)*(64000000/4000000.0)));
 11617   004A28  0E6A               	movlw	106
 11618   004A2A                     u5657:
 11619   004A2A  2EE8               	decfsz	wreg,f,c
 11620   004A2C  D7FE               	bra	u5657
 11621   004A2E  D000               	nop2	
 11622   004A30                     l4589:
 11623                           
 11624                           ;serial.c: 44:     while(*string != 0){
 11625   004A30  5003               	movf	sendStringSerial4@string^0,w,c
 11626   004A32  6ED9               	movwf	fsr2l,c
 11627   004A34  6ADA               	clrf	fsr2h,c
 11628   004A36  50DF               	movf	indf2,w,c
 11629   004A38  A4D8               	btfss	status,2,c
 11630   004A3A  EF21  F025         	goto	u3821
 11631   004A3E  EF23  F025         	goto	u3820
 11632   004A42                     u3821:
 11633   004A42  EF0D  F025         	goto	l4583
 11634   004A46                     u3820:
 11635   004A46  0012               	return		;funcret
 11636   004A48                     __end_of_sendStringSerial4:
 11637                           	callstack 0
 11638                           
 11639 ;; *************** function _sendCharSerial4 *****************
 11640 ;; Defined at:
 11641 ;;		line 35 in file "serial.c"
 11642 ;; Parameters:    Size  Location     Type
 11643 ;;  charToSend      1    wreg     unsigned char 
 11644 ;; Auto vars:     Size  Location     Type
 11645 ;;  charToSend      1    1[COMRAM] unsigned char 
 11646 ;; Return value:  Size  Location     Type
 11647 ;;                  1    wreg      void 
 11648 ;; Registers used:
 11649 ;;		wreg
 11650 ;; Tracked objects:
 11651 ;;		On entry : 0/0
 11652 ;;		On exit  : 0/0
 11653 ;;		Unchanged: 0/0
 11654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11656 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11658 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11659 ;;Total ram usage:        1 bytes
 11660 ;; Hardware stack levels used: 1
 11661 ;; Hardware stack levels required when called: 1
 11662 ;; This function calls:
 11663 ;;		Nothing
 11664 ;; This function is called by:
 11665 ;;		_sendStringSerial4
 11666 ;; This function uses a non-reentrant model
 11667 ;;
 11668                           
 11669                           	psect	text63
 11670   004B96                     __ptext63:
 11671                           	callstack 0
 11672   004B96                     _sendCharSerial4:
 11673                           	callstack 27
 11674                           
 11675                           ;incstack = 0
 11676                           ;sendCharSerial4@charToSend stored from wreg
 11677   004B96  6E02               	movwf	sendCharSerial4@charToSend^0,c
 11678   004B98                     l525:
 11679   004B98  010E               	movlb	14	; () banked
 11680   004B9A  A537               	btfss	55,2,b	;volatile
 11681   004B9C  EFD2  F025         	goto	u3021
 11682   004BA0  EFD4  F025         	goto	u3020
 11683   004BA4                     u3021:
 11684   004BA4  EFCC  F025         	goto	l525
 11685   004BA8                     u3020:
 11686   004BA8                     
 11687                           ; BSR set to: 14
 11688                           ;serial.c: 37:     TX4REG = charToSend;
 11689   004BA8  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
 11690   004BAC                     
 11691                           ; BSR set to: 14
 11692   004BAC  0012               	return		;funcret
 11693   004BAE                     __end_of_sendCharSerial4:
 11694                           	callstack 0
 11695                           
 11696 ;; *************** function _color_read_Red *****************
 11697 ;; Defined at:
 11698 ;;		line 33 in file "color.c"
 11699 ;; Parameters:    Size  Location     Type
 11700 ;;		None
 11701 ;; Auto vars:     Size  Location     Type
 11702 ;;  tmp             2   10[COMRAM] unsigned int 
 11703 ;; Return value:  Size  Location     Type
 11704 ;;                  2    5[COMRAM] unsigned int 
 11705 ;; Registers used:
 11706 ;;		wreg, status,2, status,0, cstack
 11707 ;; Tracked objects:
 11708 ;;		On entry : 0/0
 11709 ;;		On exit  : 0/0
 11710 ;;		Unchanged: 0/0
 11711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11712 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11713 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11714 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11715 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11716 ;;Total ram usage:        7 bytes
 11717 ;; Hardware stack levels used: 1
 11718 ;; Hardware stack levels required when called: 3
 11719 ;; This function calls:
 11720 ;;		_I2C_2_Master_Read
 11721 ;;		_I2C_2_Master_RepStart
 11722 ;;		_I2C_2_Master_Start
 11723 ;;		_I2C_2_Master_Stop
 11724 ;;		_I2C_2_Master_Write
 11725 ;; This function is called by:
 11726 ;;		_reading_hue
 11727 ;;		_calibration_colors
 11728 ;; This function uses a non-reentrant model
 11729 ;;
 11730                           
 11731                           	psect	text64
 11732   004368                     __ptext64:
 11733                           	callstack 0
 11734   004368                     _color_read_Red:
 11735                           	callstack 26
 11736   004368                     
 11737                           ;color.c: 35:  unsigned int tmp;;color.c: 36:  I2C_2_Master_Start();
 11738   004368  ECE2  F025         	call	_I2C_2_Master_Start	;wreg free
 11739                           
 11740                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
 11741   00436C  0E52               	movlw	82
 11742   00436E  ECD7  F025         	call	_I2C_2_Master_Write
 11743                           
 11744                           ;color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
 11745   004372  0EB6               	movlw	182
 11746   004374  ECD7  F025         	call	_I2C_2_Master_Write
 11747                           
 11748                           ;color.c: 39:  I2C_2_Master_RepStart();
 11749   004378  ECE7  F025         	call	_I2C_2_Master_RepStart	;wreg free
 11750                           
 11751                           ;color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
 11752   00437C  0E53               	movlw	83
 11753   00437E  ECD7  F025         	call	_I2C_2_Master_Write
 11754                           
 11755                           ;color.c: 41:  tmp=I2C_2_Master_Read(1);
 11756   004382  0E01               	movlw	1
 11757   004384  EC5F  F023         	call	_I2C_2_Master_Read
 11758   004388  6E08               	movwf	??_color_read_Red^0,c
 11759   00438A  5008               	movf	??_color_read_Red^0,w,c
 11760   00438C  6E0B               	movwf	color_read_Red@tmp^0,c
 11761   00438E  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
 11762                           
 11763                           ;color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11764   004390  0E00               	movlw	0
 11765   004392  EC5F  F023         	call	_I2C_2_Master_Read
 11766   004396  6E08               	movwf	??_color_read_Red^0,c
 11767   004398  5008               	movf	??_color_read_Red^0,w,c
 11768   00439A  6E0A               	movwf	(??_color_read_Red+2)^0,c
 11769   00439C  6A09               	clrf	(??_color_read_Red+1)^0,c
 11770   00439E  500B               	movf	color_read_Red@tmp^0,w,c
 11771   0043A0  1009               	iorwf	(??_color_read_Red+1)^0,w,c
 11772   0043A2  6E0B               	movwf	color_read_Red@tmp^0,c
 11773   0043A4  500C               	movf	(color_read_Red@tmp+1)^0,w,c
 11774   0043A6  100A               	iorwf	(??_color_read_Red+2)^0,w,c
 11775   0043A8  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
 11776                           
 11777                           ;color.c: 43:  I2C_2_Master_Stop();
 11778   0043AA  ECDD  F025         	call	_I2C_2_Master_Stop	;wreg free
 11779   0043AE                     
 11780                           ;color.c: 44:  return tmp;
 11781   0043AE  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
 11782   0043B2  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 11783   0043B6  0012               	return		;funcret
 11784   0043B8                     __end_of_color_read_Red:
 11785                           	callstack 0
 11786                           
 11787 ;; *************** function _color_read_Green *****************
 11788 ;; Defined at:
 11789 ;;		line 47 in file "color.c"
 11790 ;; Parameters:    Size  Location     Type
 11791 ;;		None
 11792 ;; Auto vars:     Size  Location     Type
 11793 ;;  tmp             2   10[COMRAM] unsigned int 
 11794 ;; Return value:  Size  Location     Type
 11795 ;;                  2    5[COMRAM] unsigned int 
 11796 ;; Registers used:
 11797 ;;		wreg, status,2, status,0, cstack
 11798 ;; Tracked objects:
 11799 ;;		On entry : 0/0
 11800 ;;		On exit  : 0/0
 11801 ;;		Unchanged: 0/0
 11802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11803 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11804 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11805 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11806 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11807 ;;Total ram usage:        7 bytes
 11808 ;; Hardware stack levels used: 1
 11809 ;; Hardware stack levels required when called: 3
 11810 ;; This function calls:
 11811 ;;		_I2C_2_Master_Read
 11812 ;;		_I2C_2_Master_RepStart
 11813 ;;		_I2C_2_Master_Start
 11814 ;;		_I2C_2_Master_Stop
 11815 ;;		_I2C_2_Master_Write
 11816 ;; This function is called by:
 11817 ;;		_reading_hue
 11818 ;;		_calibration_colors
 11819 ;; This function uses a non-reentrant model
 11820 ;;
 11821                           
 11822                           	psect	text65
 11823   0043B8                     __ptext65:
 11824                           	callstack 0
 11825   0043B8                     _color_read_Green:
 11826                           	callstack 26
 11827   0043B8                     
 11828                           ;color.c: 49:  unsigned int tmp;;color.c: 50:  I2C_2_Master_Start();
 11829   0043B8  ECE2  F025         	call	_I2C_2_Master_Start	;wreg free
 11830                           
 11831                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
 11832   0043BC  0E52               	movlw	82
 11833   0043BE  ECD7  F025         	call	_I2C_2_Master_Write
 11834                           
 11835                           ;color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
 11836   0043C2  0EB8               	movlw	184
 11837   0043C4  ECD7  F025         	call	_I2C_2_Master_Write
 11838                           
 11839                           ;color.c: 53:  I2C_2_Master_RepStart();
 11840   0043C8  ECE7  F025         	call	_I2C_2_Master_RepStart	;wreg free
 11841                           
 11842                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
 11843   0043CC  0E53               	movlw	83
 11844   0043CE  ECD7  F025         	call	_I2C_2_Master_Write
 11845                           
 11846                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
 11847   0043D2  0E01               	movlw	1
 11848   0043D4  EC5F  F023         	call	_I2C_2_Master_Read
 11849   0043D8  6E08               	movwf	??_color_read_Green^0,c
 11850   0043DA  5008               	movf	??_color_read_Green^0,w,c
 11851   0043DC  6E0B               	movwf	color_read_Green@tmp^0,c
 11852   0043DE  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
 11853                           
 11854                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11855   0043E0  0E00               	movlw	0
 11856   0043E2  EC5F  F023         	call	_I2C_2_Master_Read
 11857   0043E6  6E08               	movwf	??_color_read_Green^0,c
 11858   0043E8  5008               	movf	??_color_read_Green^0,w,c
 11859   0043EA  6E0A               	movwf	(??_color_read_Green+2)^0,c
 11860   0043EC  6A09               	clrf	(??_color_read_Green+1)^0,c
 11861   0043EE  500B               	movf	color_read_Green@tmp^0,w,c
 11862   0043F0  1009               	iorwf	(??_color_read_Green+1)^0,w,c
 11863   0043F2  6E0B               	movwf	color_read_Green@tmp^0,c
 11864   0043F4  500C               	movf	(color_read_Green@tmp+1)^0,w,c
 11865   0043F6  100A               	iorwf	(??_color_read_Green+2)^0,w,c
 11866   0043F8  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
 11867                           
 11868                           ;color.c: 57:  I2C_2_Master_Stop();
 11869   0043FA  ECDD  F025         	call	_I2C_2_Master_Stop	;wreg free
 11870   0043FE                     
 11871                           ;color.c: 58:  return tmp;
 11872   0043FE  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
 11873   004402  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 11874   004406  0012               	return		;funcret
 11875   004408                     __end_of_color_read_Green:
 11876                           	callstack 0
 11877                           
 11878 ;; *************** function _color_read_Clear *****************
 11879 ;; Defined at:
 11880 ;;		line 76 in file "color.c"
 11881 ;; Parameters:    Size  Location     Type
 11882 ;;		None
 11883 ;; Auto vars:     Size  Location     Type
 11884 ;;  tmp             2   10[COMRAM] unsigned int 
 11885 ;; Return value:  Size  Location     Type
 11886 ;;                  2    5[COMRAM] unsigned int 
 11887 ;; Registers used:
 11888 ;;		wreg, status,2, status,0, cstack
 11889 ;; Tracked objects:
 11890 ;;		On entry : 0/0
 11891 ;;		On exit  : 0/0
 11892 ;;		Unchanged: 0/0
 11893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11894 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11895 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11896 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11897 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11898 ;;Total ram usage:        7 bytes
 11899 ;; Hardware stack levels used: 1
 11900 ;; Hardware stack levels required when called: 3
 11901 ;; This function calls:
 11902 ;;		_I2C_2_Master_Read
 11903 ;;		_I2C_2_Master_RepStart
 11904 ;;		_I2C_2_Master_Start
 11905 ;;		_I2C_2_Master_Stop
 11906 ;;		_I2C_2_Master_Write
 11907 ;; This function is called by:
 11908 ;;		_reading_hue
 11909 ;;		_main
 11910 ;;		_calibration_colors
 11911 ;; This function uses a non-reentrant model
 11912 ;;
 11913                           
 11914                           	psect	text66
 11915   004408                     __ptext66:
 11916                           	callstack 0
 11917   004408                     _color_read_Clear:
 11918                           	callstack 26
 11919   004408                     
 11920                           ;color.c: 78:  unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
 11921   004408  ECE2  F025         	call	_I2C_2_Master_Start	;wreg free
 11922                           
 11923                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 11924   00440C  0E52               	movlw	82
 11925   00440E  ECD7  F025         	call	_I2C_2_Master_Write
 11926                           
 11927                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x14);
 11928   004412  0EB4               	movlw	180
 11929   004414  ECD7  F025         	call	_I2C_2_Master_Write
 11930                           
 11931                           ;color.c: 82:  I2C_2_Master_RepStart();
 11932   004418  ECE7  F025         	call	_I2C_2_Master_RepStart	;wreg free
 11933                           
 11934                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 11935   00441C  0E53               	movlw	83
 11936   00441E  ECD7  F025         	call	_I2C_2_Master_Write
 11937                           
 11938                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
 11939   004422  0E01               	movlw	1
 11940   004424  EC5F  F023         	call	_I2C_2_Master_Read
 11941   004428  6E08               	movwf	??_color_read_Clear^0,c
 11942   00442A  5008               	movf	??_color_read_Clear^0,w,c
 11943   00442C  6E0B               	movwf	color_read_Clear@tmp^0,c
 11944   00442E  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
 11945                           
 11946                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 11947   004430  0E00               	movlw	0
 11948   004432  EC5F  F023         	call	_I2C_2_Master_Read
 11949   004436  6E08               	movwf	??_color_read_Clear^0,c
 11950   004438  5008               	movf	??_color_read_Clear^0,w,c
 11951   00443A  6E0A               	movwf	(??_color_read_Clear+2)^0,c
 11952   00443C  6A09               	clrf	(??_color_read_Clear+1)^0,c
 11953   00443E  500B               	movf	color_read_Clear@tmp^0,w,c
 11954   004440  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
 11955   004442  6E0B               	movwf	color_read_Clear@tmp^0,c
 11956   004444  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
 11957   004446  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
 11958   004448  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
 11959                           
 11960                           ;color.c: 86:  I2C_2_Master_Stop();
 11961   00444A  ECDD  F025         	call	_I2C_2_Master_Stop	;wreg free
 11962   00444E                     
 11963                           ;color.c: 87:  return tmp;
 11964   00444E  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
 11965   004452  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 11966   004456  0012               	return		;funcret
 11967   004458                     __end_of_color_read_Clear:
 11968                           	callstack 0
 11969                           
 11970 ;; *************** function _color_read_Blue *****************
 11971 ;; Defined at:
 11972 ;;		line 61 in file "color.c"
 11973 ;; Parameters:    Size  Location     Type
 11974 ;;		None
 11975 ;; Auto vars:     Size  Location     Type
 11976 ;;  tmp             2   10[COMRAM] unsigned int 
 11977 ;; Return value:  Size  Location     Type
 11978 ;;                  2    5[COMRAM] unsigned int 
 11979 ;; Registers used:
 11980 ;;		wreg, status,2, status,0, cstack
 11981 ;; Tracked objects:
 11982 ;;		On entry : 0/0
 11983 ;;		On exit  : 0/0
 11984 ;;		Unchanged: 0/0
 11985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11986 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11987 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11988 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11989 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11990 ;;Total ram usage:        7 bytes
 11991 ;; Hardware stack levels used: 1
 11992 ;; Hardware stack levels required when called: 3
 11993 ;; This function calls:
 11994 ;;		_I2C_2_Master_Read
 11995 ;;		_I2C_2_Master_RepStart
 11996 ;;		_I2C_2_Master_Start
 11997 ;;		_I2C_2_Master_Stop
 11998 ;;		_I2C_2_Master_Write
 11999 ;; This function is called by:
 12000 ;;		_reading_hue
 12001 ;;		_calibration_colors
 12002 ;; This function uses a non-reentrant model
 12003 ;;
 12004                           
 12005                           	psect	text67
 12006   004458                     __ptext67:
 12007                           	callstack 0
 12008   004458                     _color_read_Blue:
 12009                           	callstack 26
 12010   004458                     
 12011                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
 12012   004458  ECE2  F025         	call	_I2C_2_Master_Start	;wreg free
 12013                           
 12014                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
 12015   00445C  0E52               	movlw	82
 12016   00445E  ECD7  F025         	call	_I2C_2_Master_Write
 12017                           
 12018                           ;color.c: 66:  I2C_2_Master_Write(0xA0 | 0x1A);
 12019   004462  0EBA               	movlw	186
 12020   004464  ECD7  F025         	call	_I2C_2_Master_Write
 12021                           
 12022                           ;color.c: 67:  I2C_2_Master_RepStart();
 12023   004468  ECE7  F025         	call	_I2C_2_Master_RepStart	;wreg free
 12024                           
 12025                           ;color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
 12026   00446C  0E53               	movlw	83
 12027   00446E  ECD7  F025         	call	_I2C_2_Master_Write
 12028                           
 12029                           ;color.c: 69:  tmp=I2C_2_Master_Read(1);
 12030   004472  0E01               	movlw	1
 12031   004474  EC5F  F023         	call	_I2C_2_Master_Read
 12032   004478  6E08               	movwf	??_color_read_Blue^0,c
 12033   00447A  5008               	movf	??_color_read_Blue^0,w,c
 12034   00447C  6E0B               	movwf	color_read_Blue@tmp^0,c
 12035   00447E  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
 12036                           
 12037                           ;color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12038   004480  0E00               	movlw	0
 12039   004482  EC5F  F023         	call	_I2C_2_Master_Read
 12040   004486  6E08               	movwf	??_color_read_Blue^0,c
 12041   004488  5008               	movf	??_color_read_Blue^0,w,c
 12042   00448A  6E0A               	movwf	(??_color_read_Blue+2)^0,c
 12043   00448C  6A09               	clrf	(??_color_read_Blue+1)^0,c
 12044   00448E  500B               	movf	color_read_Blue@tmp^0,w,c
 12045   004490  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
 12046   004492  6E0B               	movwf	color_read_Blue@tmp^0,c
 12047   004494  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
 12048   004496  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
 12049   004498  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
 12050                           
 12051                           ;color.c: 71:  I2C_2_Master_Stop();
 12052   00449A  ECDD  F025         	call	_I2C_2_Master_Stop	;wreg free
 12053   00449E                     
 12054                           ;color.c: 72:  return tmp;
 12055   00449E  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
 12056   0044A2  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 12057   0044A6  0012               	return		;funcret
 12058   0044A8                     __end_of_color_read_Blue:
 12059                           	callstack 0
 12060                           
 12061 ;; *************** function _I2C_2_Master_Write *****************
 12062 ;; Defined at:
 12063 ;;		line 45 in file "i2c.c"
 12064 ;; Parameters:    Size  Location     Type
 12065 ;;  data_byte       1    wreg     unsigned char 
 12066 ;; Auto vars:     Size  Location     Type
 12067 ;;  data_byte       1    2[COMRAM] unsigned char 
 12068 ;; Return value:  Size  Location     Type
 12069 ;;                  1    wreg      void 
 12070 ;; Registers used:
 12071 ;;		wreg, status,2, status,0, cstack
 12072 ;; Tracked objects:
 12073 ;;		On entry : 0/0
 12074 ;;		On exit  : 0/0
 12075 ;;		Unchanged: 0/0
 12076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12078 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12080 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12081 ;;Total ram usage:        1 bytes
 12082 ;; Hardware stack levels used: 1
 12083 ;; Hardware stack levels required when called: 2
 12084 ;; This function calls:
 12085 ;;		_I2C_2_Master_Idle
 12086 ;; This function is called by:
 12087 ;;		_color_writetoaddr
 12088 ;;		_color_read_Red
 12089 ;;		_color_read_Green
 12090 ;;		_color_read_Blue
 12091 ;;		_color_read_Clear
 12092 ;; This function uses a non-reentrant model
 12093 ;;
 12094                           
 12095                           	psect	text68
 12096   004BAE                     __ptext68:
 12097                           	callstack 0
 12098   004BAE                     _I2C_2_Master_Write:
 12099                           	callstack 26
 12100                           
 12101                           ;incstack = 0
 12102                           ;I2C_2_Master_Write@data_byte stored from wreg
 12103   004BAE  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
 12104   004BB0                     
 12105                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 12106   004BB0  EC69  F025         	call	_I2C_2_Master_Idle	;wreg free
 12107   004BB4                     
 12108                           ;i2c.c: 48:   SSP2BUF = data_byte;
 12109   004BB4  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 12110   004BB8  0012               	return		;funcret
 12111   004BBA                     __end_of_I2C_2_Master_Write:
 12112                           	callstack 0
 12113                           
 12114 ;; *************** function _I2C_2_Master_Stop *****************
 12115 ;; Defined at:
 12116 ;;		line 39 in file "i2c.c"
 12117 ;; Parameters:    Size  Location     Type
 12118 ;;		None
 12119 ;; Auto vars:     Size  Location     Type
 12120 ;;		None
 12121 ;; Return value:  Size  Location     Type
 12122 ;;                  1    wreg      void 
 12123 ;; Registers used:
 12124 ;;		wreg, status,2, status,0, cstack
 12125 ;; Tracked objects:
 12126 ;;		On entry : 0/0
 12127 ;;		On exit  : 0/0
 12128 ;;		Unchanged: 0/0
 12129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12134 ;;Total ram usage:        0 bytes
 12135 ;; Hardware stack levels used: 1
 12136 ;; Hardware stack levels required when called: 2
 12137 ;; This function calls:
 12138 ;;		_I2C_2_Master_Idle
 12139 ;; This function is called by:
 12140 ;;		_color_writetoaddr
 12141 ;;		_color_read_Red
 12142 ;;		_color_read_Green
 12143 ;;		_color_read_Blue
 12144 ;;		_color_read_Clear
 12145 ;; This function uses a non-reentrant model
 12146 ;;
 12147                           
 12148                           	psect	text69
 12149   004BBA                     __ptext69:
 12150                           	callstack 0
 12151   004BBA                     _I2C_2_Master_Stop:
 12152                           	callstack 26
 12153   004BBA                     
 12154                           ;i2c.c: 41:   I2C_2_Master_Idle();
 12155   004BBA  EC69  F025         	call	_I2C_2_Master_Idle	;wreg free
 12156   004BBE                     
 12157                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 12158   004BBE  010E               	movlb	14	; () banked
 12159   004BC0  85DA               	bsf	218,2,b	;volatile
 12160   004BC2                     
 12161                           ; BSR set to: 14
 12162   004BC2  0012               	return		;funcret
 12163   004BC4                     __end_of_I2C_2_Master_Stop:
 12164                           	callstack 0
 12165                           
 12166 ;; *************** function _I2C_2_Master_Start *****************
 12167 ;; Defined at:
 12168 ;;		line 27 in file "i2c.c"
 12169 ;; Parameters:    Size  Location     Type
 12170 ;;		None
 12171 ;; Auto vars:     Size  Location     Type
 12172 ;;		None
 12173 ;; Return value:  Size  Location     Type
 12174 ;;                  1    wreg      void 
 12175 ;; Registers used:
 12176 ;;		wreg, status,2, status,0, cstack
 12177 ;; Tracked objects:
 12178 ;;		On entry : 0/0
 12179 ;;		On exit  : 0/0
 12180 ;;		Unchanged: 0/0
 12181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12186 ;;Total ram usage:        0 bytes
 12187 ;; Hardware stack levels used: 1
 12188 ;; Hardware stack levels required when called: 2
 12189 ;; This function calls:
 12190 ;;		_I2C_2_Master_Idle
 12191 ;; This function is called by:
 12192 ;;		_color_writetoaddr
 12193 ;;		_color_read_Red
 12194 ;;		_color_read_Green
 12195 ;;		_color_read_Blue
 12196 ;;		_color_read_Clear
 12197 ;; This function uses a non-reentrant model
 12198 ;;
 12199                           
 12200                           	psect	text70
 12201   004BC4                     __ptext70:
 12202                           	callstack 0
 12203   004BC4                     _I2C_2_Master_Start:
 12204                           	callstack 26
 12205   004BC4                     
 12206                           ;i2c.c: 29:   I2C_2_Master_Idle();
 12207   004BC4  EC69  F025         	call	_I2C_2_Master_Idle	;wreg free
 12208   004BC8                     
 12209                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 12210   004BC8  010E               	movlb	14	; () banked
 12211   004BCA  81DA               	bsf	218,0,b	;volatile
 12212   004BCC                     
 12213                           ; BSR set to: 14
 12214   004BCC  0012               	return		;funcret
 12215   004BCE                     __end_of_I2C_2_Master_Start:
 12216                           	callstack 0
 12217                           
 12218 ;; *************** function _I2C_2_Master_RepStart *****************
 12219 ;; Defined at:
 12220 ;;		line 33 in file "i2c.c"
 12221 ;; Parameters:    Size  Location     Type
 12222 ;;		None
 12223 ;; Auto vars:     Size  Location     Type
 12224 ;;		None
 12225 ;; Return value:  Size  Location     Type
 12226 ;;                  1    wreg      void 
 12227 ;; Registers used:
 12228 ;;		wreg, status,2, status,0, cstack
 12229 ;; Tracked objects:
 12230 ;;		On entry : 0/0
 12231 ;;		On exit  : 0/0
 12232 ;;		Unchanged: 0/0
 12233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12238 ;;Total ram usage:        0 bytes
 12239 ;; Hardware stack levels used: 1
 12240 ;; Hardware stack levels required when called: 2
 12241 ;; This function calls:
 12242 ;;		_I2C_2_Master_Idle
 12243 ;; This function is called by:
 12244 ;;		_color_read_Red
 12245 ;;		_color_read_Green
 12246 ;;		_color_read_Blue
 12247 ;;		_color_read_Clear
 12248 ;; This function uses a non-reentrant model
 12249 ;;
 12250                           
 12251                           	psect	text71
 12252   004BCE                     __ptext71:
 12253                           	callstack 0
 12254   004BCE                     _I2C_2_Master_RepStart:
 12255                           	callstack 26
 12256   004BCE                     
 12257                           ;i2c.c: 35:   I2C_2_Master_Idle();
 12258   004BCE  EC69  F025         	call	_I2C_2_Master_Idle	;wreg free
 12259   004BD2                     
 12260                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 12261   004BD2  010E               	movlb	14	; () banked
 12262   004BD4  83DA               	bsf	218,1,b	;volatile
 12263   004BD6                     
 12264                           ; BSR set to: 14
 12265   004BD6  0012               	return		;funcret
 12266   004BD8                     __end_of_I2C_2_Master_RepStart:
 12267                           	callstack 0
 12268                           
 12269 ;; *************** function _I2C_2_Master_Read *****************
 12270 ;; Defined at:
 12271 ;;		line 51 in file "i2c.c"
 12272 ;; Parameters:    Size  Location     Type
 12273 ;;  ack             1    wreg     unsigned char 
 12274 ;; Auto vars:     Size  Location     Type
 12275 ;;  ack             1    3[COMRAM] unsigned char 
 12276 ;;  tmp             1    4[COMRAM] unsigned char 
 12277 ;; Return value:  Size  Location     Type
 12278 ;;                  1    wreg      unsigned char 
 12279 ;; Registers used:
 12280 ;;		wreg, status,2, status,0, cstack
 12281 ;; Tracked objects:
 12282 ;;		On entry : 0/0
 12283 ;;		On exit  : 0/0
 12284 ;;		Unchanged: 0/0
 12285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12287 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12288 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12289 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12290 ;;Total ram usage:        3 bytes
 12291 ;; Hardware stack levels used: 1
 12292 ;; Hardware stack levels required when called: 2
 12293 ;; This function calls:
 12294 ;;		_I2C_2_Master_Idle
 12295 ;; This function is called by:
 12296 ;;		_color_read_Red
 12297 ;;		_color_read_Green
 12298 ;;		_color_read_Blue
 12299 ;;		_color_read_Clear
 12300 ;; This function uses a non-reentrant model
 12301 ;;
 12302                           
 12303                           	psect	text72
 12304   0046BE                     __ptext72:
 12305                           	callstack 0
 12306   0046BE                     _I2C_2_Master_Read:
 12307                           	callstack 26
 12308                           
 12309                           ; BSR set to: 14
 12310                           ;incstack = 0
 12311                           ;I2C_2_Master_Read@ack stored from wreg
 12312   0046BE  6E04               	movwf	I2C_2_Master_Read@ack^0,c
 12313   0046C0                     
 12314                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 12315   0046C0  EC69  F025         	call	_I2C_2_Master_Idle	;wreg free
 12316   0046C4                     
 12317                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 12318   0046C4  010E               	movlb	14	; () banked
 12319   0046C6  87DA               	bsf	218,3,b	;volatile
 12320                           
 12321                           ;i2c.c: 56:   I2C_2_Master_Idle();
 12322   0046C8  EC69  F025         	call	_I2C_2_Master_Idle	;wreg free
 12323   0046CC                     
 12324                           ;i2c.c: 57:   tmp = SSP2BUF;
 12325   0046CC  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 12326                           
 12327                           ;i2c.c: 58:   I2C_2_Master_Idle();
 12328   0046D0  EC69  F025         	call	_I2C_2_Master_Idle	;wreg free
 12329   0046D4                     
 12330                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 12331   0046D4  5004               	movf	I2C_2_Master_Read@ack^0,w,c
 12332   0046D6  B4D8               	btfsc	status,2,c
 12333   0046D8  EF70  F023         	goto	u3791
 12334   0046DC  EF74  F023         	goto	u3790
 12335   0046E0                     u3791:
 12336   0046E0  6A03               	clrf	??_I2C_2_Master_Read^0,c
 12337   0046E2  2A03               	incf	??_I2C_2_Master_Read^0,f,c
 12338   0046E4  EF75  F023         	goto	u3808
 12339   0046E8                     u3790:
 12340   0046E8  6A03               	clrf	??_I2C_2_Master_Read^0,c
 12341   0046EA                     u3808:
 12342   0046EA  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
 12343   0046EC  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
 12344   0046EE  010E               	movlb	14	; () banked
 12345   0046F0  51DA               	movf	218,w,b	;volatile
 12346   0046F2  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 12347   0046F4  0BDF               	andlw	-33
 12348   0046F6  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
 12349   0046F8  6FDA               	movwf	218,b	;volatile
 12350   0046FA                     
 12351                           ; BSR set to: 14
 12352                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 12353   0046FA  89DA               	bsf	218,4,b	;volatile
 12354   0046FC                     
 12355                           ; BSR set to: 14
 12356                           ;i2c.c: 61:   return tmp;
 12357   0046FC  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
 12358   0046FE                     
 12359                           ; BSR set to: 14
 12360   0046FE  0012               	return		;funcret
 12361   004700                     __end_of_I2C_2_Master_Read:
 12362                           	callstack 0
 12363                           
 12364 ;; *************** function _I2C_2_Master_Idle *****************
 12365 ;; Defined at:
 12366 ;;		line 22 in file "i2c.c"
 12367 ;; Parameters:    Size  Location     Type
 12368 ;;		None
 12369 ;; Auto vars:     Size  Location     Type
 12370 ;;		None
 12371 ;; Return value:  Size  Location     Type
 12372 ;;                  1    wreg      void 
 12373 ;; Registers used:
 12374 ;;		wreg, status,2, status,0
 12375 ;; Tracked objects:
 12376 ;;		On entry : 0/0
 12377 ;;		On exit  : 0/0
 12378 ;;		Unchanged: 0/0
 12379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12382 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12383 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12384 ;;Total ram usage:        1 bytes
 12385 ;; Hardware stack levels used: 1
 12386 ;; Hardware stack levels required when called: 1
 12387 ;; This function calls:
 12388 ;;		Nothing
 12389 ;; This function is called by:
 12390 ;;		_I2C_2_Master_Start
 12391 ;;		_I2C_2_Master_RepStart
 12392 ;;		_I2C_2_Master_Stop
 12393 ;;		_I2C_2_Master_Write
 12394 ;;		_I2C_2_Master_Read
 12395 ;; This function uses a non-reentrant model
 12396 ;;
 12397                           
 12398                           	psect	text73
 12399   004AD2                     __ptext73:
 12400                           	callstack 0
 12401   004AD2                     _I2C_2_Master_Idle:
 12402                           	callstack 26
 12403   004AD2                     l174:
 12404   004AD2  010E               	movlb	14	; () banked
 12405   004AD4  B5D8               	btfsc	216,2,b	;volatile
 12406   004AD6  EF6F  F025         	goto	u2921
 12407   004ADA  EF71  F025         	goto	u2920
 12408   004ADE                     u2921:
 12409   004ADE  EF69  F025         	goto	l174
 12410   004AE2                     u2920:
 12411   004AE2                     
 12412                           ; BSR set to: 14
 12413   004AE2  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
 12414   004AE6  0E1F               	movlw	31
 12415   004AE8  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
 12416   004AEA  A4D8               	btfss	status,2,c
 12417   004AEC  EF7A  F025         	goto	u2931
 12418   004AF0  EF7C  F025         	goto	u2930
 12419   004AF4                     u2931:
 12420   004AF4  EF69  F025         	goto	l174
 12421   004AF8                     u2930:
 12422   004AF8                     
 12423                           ; BSR set to: 14
 12424   004AF8  0012               	return		;funcret
 12425   004AFA                     __end_of_I2C_2_Master_Idle:
 12426                           	callstack 0
 12427                           
 12428 ;; *************** function _Timer0_init *****************
 12429 ;; Defined at:
 12430 ;;		line 8 in file "timers.c"
 12431 ;; Parameters:    Size  Location     Type
 12432 ;;		None
 12433 ;; Auto vars:     Size  Location     Type
 12434 ;;		None
 12435 ;; Return value:  Size  Location     Type
 12436 ;;                  1    wreg      void 
 12437 ;; Registers used:
 12438 ;;		wreg, status,2
 12439 ;; Tracked objects:
 12440 ;;		On entry : 0/0
 12441 ;;		On exit  : 0/0
 12442 ;;		Unchanged: 0/0
 12443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12448 ;;Total ram usage:        0 bytes
 12449 ;; Hardware stack levels used: 1
 12450 ;; Hardware stack levels required when called: 1
 12451 ;; This function calls:
 12452 ;;		Nothing
 12453 ;; This function is called by:
 12454 ;;		_main
 12455 ;; This function uses a non-reentrant model
 12456 ;;
 12457                           
 12458                           	psect	text74
 12459   004A78                     __ptext74:
 12460                           	callstack 0
 12461   004A78                     _Timer0_init:
 12462                           	callstack 29
 12463   004A78                     
 12464                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
 12465   004A78  50D6               	movf	214,w,c	;volatile
 12466   004A7A  0B1F               	andlw	-225
 12467   004A7C  0940               	iorlw	64
 12468   004A7E  6ED6               	movwf	214,c	;volatile
 12469   004A80                     
 12470                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
 12471   004A80  88D6               	bsf	214,4,c	;volatile
 12472                           
 12473                           ;timers.c: 12:     T0CON1bits.T0CKPS=0b1101;
 12474   004A82  50D6               	movf	214,w,c	;volatile
 12475   004A84  0BF0               	andlw	-16
 12476   004A86  090D               	iorlw	13
 12477   004A88  6ED6               	movwf	214,c	;volatile
 12478   004A8A                     
 12479                           ;timers.c: 13:     T0CON0bits.T016BIT=1;
 12480   004A8A  88D5               	bsf	213,4,c	;volatile
 12481   004A8C                     
 12482                           ;timers.c: 15:     PIE0bits.TMR0IE = 1;
 12483   004A8C  010E               	movlb	14	; () banked
 12484   004A8E  8B29               	bsf	41,5,b	;volatile
 12485   004A90                     
 12486                           ; BSR set to: 14
 12487                           ;timers.c: 16:     PIR0bits.TMR0IF = 0;
 12488   004A90  9B33               	bcf	51,5,b	;volatile
 12489   004A92                     
 12490                           ; BSR set to: 14
 12491                           ;timers.c: 17:     IPR0bits.TMR0IP = 0;
 12492   004A92  9B1F               	bcf	31,5,b	;volatile
 12493   004A94                     
 12494                           ; BSR set to: 14
 12495                           ;timers.c: 18:     INTCONbits.IPEN = 1;
 12496   004A94  8AF2               	bsf	242,5,c	;volatile
 12497   004A96                     
 12498                           ; BSR set to: 14
 12499                           ;timers.c: 19:     INTCONbits.PEIE = 1;
 12500   004A96  8CF2               	bsf	242,6,c	;volatile
 12501   004A98                     
 12502                           ; BSR set to: 14
 12503                           ;timers.c: 20:     INTCONbits.GIE = 1;
 12504   004A98  8EF2               	bsf	242,7,c	;volatile
 12505   004A9A                     
 12506                           ; BSR set to: 14
 12507                           ;timers.c: 22:     TRISGbits.TRISG1 = 1;
 12508   004A9A  8287               	bsf	135,1,c	;volatile
 12509   004A9C                     
 12510                           ; BSR set to: 14
 12511                           ;timers.c: 23:     LATGbits.LATG1 = 0;
 12512   004A9C  927F               	bcf	127,1,c	;volatile
 12513                           
 12514                           ;timers.c: 25:     TMR0L = 0;
 12515   004A9E  0E00               	movlw	0
 12516   004AA0  6ED3               	movwf	211,c	;volatile
 12517                           
 12518                           ;timers.c: 26:     TMR0H = 0;
 12519   004AA2  0E00               	movlw	0
 12520   004AA4  6ED4               	movwf	212,c	;volatile
 12521   004AA6                     
 12522                           ; BSR set to: 14
 12523   004AA6  0012               	return		;funcret
 12524   004AA8                     __end_of_Timer0_init:
 12525                           	callstack 0
 12526                           
 12527 ;; *************** function _ADC_init *****************
 12528 ;; Defined at:
 12529 ;;		line 9 in file "ADC.c"
 12530 ;; Parameters:    Size  Location     Type
 12531 ;;		None
 12532 ;; Auto vars:     Size  Location     Type
 12533 ;;		None
 12534 ;; Return value:  Size  Location     Type
 12535 ;;                  1    wreg      void 
 12536 ;; Registers used:
 12537 ;;		wreg, status,2
 12538 ;; Tracked objects:
 12539 ;;		On entry : 0/0
 12540 ;;		On exit  : 0/0
 12541 ;;		Unchanged: 0/0
 12542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12547 ;;Total ram usage:        0 bytes
 12548 ;; Hardware stack levels used: 1
 12549 ;; Hardware stack levels required when called: 1
 12550 ;; This function calls:
 12551 ;;		Nothing
 12552 ;; This function is called by:
 12553 ;;		_main
 12554 ;; This function uses a non-reentrant model
 12555 ;;
 12556                           
 12557                           	psect	text75
 12558   004B7C                     __ptext75:
 12559                           	callstack 0
 12560   004B7C                     _ADC_init:
 12561                           	callstack 29
 12562   004B7C                     
 12563                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
 12564   004B7C  8C86               	bsf	134,6,c	;volatile
 12565                           
 12566                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
 12567   004B7E  010E               	movlb	14	; () banked
 12568   004B80  8DB4               	bsf	180,6,b	;volatile
 12569                           
 12570                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
 12571   004B82  010F               	movlb	15	; () banked
 12572   004B84  9958               	bcf	88,4,b	;volatile
 12573   004B86                     
 12574                           ; BSR set to: 15
 12575                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
 12576   004B86  0EFC               	movlw	-4
 12577   004B88  1758               	andwf	88,f,b	;volatile
 12578                           
 12579                           ;ADC.c: 17:     ADPCH=0b101110;
 12580   004B8A  0E2E               	movlw	46
 12581   004B8C  6F5F               	movwf	95,b	;volatile
 12582   004B8E                     
 12583                           ; BSR set to: 15
 12584                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
 12585   004B8E  9460               	bcf	96,2,c	;volatile
 12586   004B90                     
 12587                           ; BSR set to: 15
 12588                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
 12589   004B90  8860               	bsf	96,4,c	;volatile
 12590   004B92                     
 12591                           ; BSR set to: 15
 12592                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
 12593   004B92  8E60               	bsf	96,7,c	;volatile
 12594   004B94                     
 12595                           ; BSR set to: 15
 12596   004B94  0012               	return		;funcret
 12597   004B96                     __end_of_ADC_init:
 12598                           	callstack 0
 12599                           
 12600 ;; *************** function _LowISR *****************
 12601 ;; Defined at:
 12602 ;;		line 45 in file "timers.c"
 12603 ;; Parameters:    Size  Location     Type
 12604 ;;		None
 12605 ;; Auto vars:     Size  Location     Type
 12606 ;;		None
 12607 ;; Return value:  Size  Location     Type
 12608 ;;                  1    wreg      void 
 12609 ;; Registers used:
 12610 ;;		None
 12611 ;; Tracked objects:
 12612 ;;		On entry : 0/0
 12613 ;;		On exit  : 0/0
 12614 ;;		Unchanged: 0/0
 12615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12618 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12619 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12620 ;;Total ram usage:        1 bytes
 12621 ;; Hardware stack levels used: 1
 12622 ;; This function calls:
 12623 ;;		Nothing
 12624 ;; This function is called by:
 12625 ;;		Interrupt level 1
 12626 ;; This function uses a non-reentrant model
 12627 ;;
 12628                           
 12629                           	psect	intcodelo
 12630   000018                     __pintcodelo:
 12631                           	callstack 0
 12632   000018                     _LowISR:
 12633                           	callstack 20
 12634                           
 12635                           ; BSR set to: 15
 12636                           ;incstack = 0
 12637   000018  805D               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
 12638   00001A  CFE0 F001          	movff	bsr,??_LowISR
 12639   00001E                     
 12640                           ;timers.c: 48:     if (PIR0bits.TMR0IF == 1) {
 12641   00001E  010E               	movlb	14	; () banked
 12642   000020  AB33               	btfss	51,5,b	;volatile
 12643   000022  EF15  F000         	goto	i1u240_21
 12644   000026  EF17  F000         	goto	i1u240_20
 12645   00002A                     i1u240_21:
 12646   00002A  EF19  F000         	goto	i1l625
 12647   00002E                     i1u240_20:
 12648   00002E                     
 12649                           ; BSR set to: 14
 12650                           ;timers.c: 49:         LATGbits.LATG1 = 1;
 12651   00002E  827F               	bsf	127,1,c	;volatile
 12652                           
 12653                           ;timers.c: 51:         PIR0bits.TMR0IF = 0;
 12654   000030  9B33               	bcf	51,5,b	;volatile
 12655   000032                     i1l625:
 12656                           
 12657                           ; BSR set to: 14
 12658   000032  C001  FFE0         	movff	??_LowISR,bsr
 12659   000036  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
 12660   000038  0010               	retfie	
 12661   00003A                     __end_of_LowISR:
 12662                           	callstack 0
 12663                           
 12664                           	psect	rparam
 12665   000000                     
 12666                           	psect	temp
 12667   00005D                     btemp:
 12668                           	callstack 0
 12669   00005D                     	ds	1
 12670   000000                     int$flags	set	btemp
 12671   000000                     wtemp8	set	btemp+1
 12672   000000                     ttemp5	set	btemp+1
 12673   000000                     ttemp6	set	btemp+4
 12674   000000                     ttemp7	set	btemp+8
 12675                           
 12676                           	psect	config
 12677                           
 12678                           ;Config register CONFIG1L @ 0x300000
 12679                           ;	External Oscillator mode Selection bits
 12680                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 12681                           ;	Power-up default value for COSC bits
 12682                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 12683   300000                     	org	3145728
 12684   300000  AA                 	db	170
 12685                           
 12686                           ;Config register CONFIG1H @ 0x300001
 12687                           ;	unspecified, using default values
 12688                           ;	Clock Out Enable bit
 12689                           ;	CLKOUTEN = 0x1, unprogrammed default
 12690                           ;	Clock Switch Enable bit
 12691                           ;	CSWEN = 0x1, unprogrammed default
 12692                           ;	Fail-Safe Clock Monitor Enable bit
 12693                           ;	FCMEN = 0x1, unprogrammed default
 12694   300001                     	org	3145729
 12695   300001  FF                 	db	255
 12696                           
 12697                           ;Config register CONFIG3L @ 0x300004
 12698                           ;	WDT Period Select bits
 12699                           ;	WDTCPS = 0x1F, unprogrammed default
 12700                           ;	WDT operating mode
 12701                           ;	WDTE = OFF, WDT Disabled
 12702   300004                     	org	3145732
 12703   300004  9F                 	db	159
 12704                           
 12705                           ;Config register CONFIG3H @ 0x300005
 12706                           ;	unspecified, using default values
 12707                           ;	WDT Window Select bits
 12708                           ;	WDTCWS = 0x7, unprogrammed default
 12709                           ;	WDT input clock selector
 12710                           ;	WDTCCS = 0x7, unprogrammed default
 12711   300005                     	org	3145733
 12712   300005  FF                 	db	255
 12713                           tosu	equ	0xFFF
 12714                           tosh	equ	0xFFE
 12715                           tosl	equ	0xFFD
 12716                           stkptr	equ	0xFFC
 12717                           pclatu	equ	0xFFB
 12718                           pclath	equ	0xFFA
 12719                           pcl	equ	0xFF9
 12720                           tblptru	equ	0xFF8
 12721                           tblptrh	equ	0xFF7
 12722                           tblptrl	equ	0xFF6
 12723                           tablat	equ	0xFF5
 12724                           prodh	equ	0xFF4
 12725                           prodl	equ	0xFF3
 12726                           indf0	equ	0xFEF
 12727                           postinc0	equ	0xFEE
 12728                           postdec0	equ	0xFED
 12729                           preinc0	equ	0xFEC
 12730                           plusw0	equ	0xFEB
 12731                           fsr0h	equ	0xFEA
 12732                           fsr0l	equ	0xFE9
 12733                           wreg	equ	0xFE8
 12734                           indf1	equ	0xFE7
 12735                           postinc1	equ	0xFE6
 12736                           postdec1	equ	0xFE5
 12737                           preinc1	equ	0xFE4
 12738                           plusw1	equ	0xFE3
 12739                           fsr1h	equ	0xFE2
 12740                           fsr1l	equ	0xFE1
 12741                           bsr	equ	0xFE0
 12742                           indf2	equ	0xFDF
 12743                           postinc2	equ	0xFDE
 12744                           postdec2	equ	0xFDD
 12745                           preinc2	equ	0xFDC
 12746                           plusw2	equ	0xFDB
 12747                           fsr2h	equ	0xFDA
 12748                           fsr2l	equ	0xFD9
 12749                           status	equ	0xFD8

Data Sizes:
    Strings     196
    Constant    0
    Data        1
    BSS         430
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     90      92
    BANK0           160     98     145
    BANK1           256      0     182
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    backHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    backOneAndHalf@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    backOneAndHalf@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    calibration_colors@cCal	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    convert_rgb2hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    convert_rgb2hue@cMax	PTR struct colors size(1) Largest target is 10
		 -> colorCalibration(BANK0[10]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    fullSpeedBack@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    fullSpeedBack@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    fullSpeedBack@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    left135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    left90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    left90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    moveBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveGreen@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveGreen@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveLightBlue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveLightBlue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    movePink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    movePink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveRed@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveRed@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveWhite@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveWhite@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    moveYellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    moveYellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    reading_hue@cCurr	PTR struct colors size(1) Largest target is 10
		 -> colorCurrent(BANK0[10]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseStraight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseStraight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverseTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverseTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    right90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    right90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    S24DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    S24DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    S3064$buffer	PTR unsigned char  size(2) Largest target is 0

    S3064$source	PTR const unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_colors@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[21]), STR_11(CODE[29]), STR_13(CODE[25]), STR_2(CODE[12]), 
		 -> STR_3(CODE[24]), STR_5(CODE[29]), STR_7(CODE[27]), STR_9(CODE[27]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> calibration_colors@cal_state(BANK0[20]), send2USART@hue_char(BANK0[50]), sendAllReadings@buffer(COMRAM[10]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turn180@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turn180@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(ABS[1]), CCPR4H(BITBIGSFRlllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(ABS[1]), CCPR3H(BITBIGSFRlllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[21]), STR_11(CODE[29]), STR_13(CODE[25]), STR_2(CODE[12]), 
		 -> STR_3(CODE[24]), STR_5(CODE[29]), STR_7(CODE[27]), STR_9(CODE[27]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[21]), STR_11(CODE[29]), STR_13(CODE[25]), STR_2(CODE[12]), 
		 -> STR_3(CODE[24]), STR_5(CODE[29]), STR_7(CODE[27]), STR_9(CODE[27]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 29
		 -> STR_1(CODE[21]), STR_11(CODE[29]), STR_13(CODE[25]), STR_2(CODE[12]), 
		 -> STR_3(CODE[24]), STR_5(CODE[29]), STR_7(CODE[27]), STR_9(CODE[27]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _returnHome->_reverseStraight
    _reverseTurn->_left135
    _reverseTurn->_left90
    _reverseTurn->_right135
    _reverseTurn->_right90
    _reverseTurn->_turn180
    _reverseStraight->_fullSpeedAhead
    _fullSpeedAhead->___fltol
    _moveWhite->_turn180
    _reading_hue->_convert_rgb2hue
    _convert_rgb2hue->___fltol
    ___fltol->___fldiv
    ___flsub->___fladd
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _get16bitTMR0val->___aldiv
    ___aldiv->___lmul
    _decision->_moveBlue
    _decision->_moveGreen
    _decision->_moveLightBlue
    _decision->_moveOrange
    _decision->_movePink
    _decision->_moveRed
    _decision->_moveYellow
    _moveYellow->_right90
    _moveRed->_right90
    _right90->_turnRight
    _movePink->_left90
    _backOneAndHalf->_fullSpeedBack
    _moveOrange->_right135
    _right135->_turnRight
    _turnRight->_setMotorPWM
    _moveLightBlue->_left135
    _left135->_turnLeft
    _moveGreen->_left90
    _left90->_turnLeft
    _moveBlue->_turn180
    _turn180->_turnLeft
    _turnLeft->_setMotorPWM
    _backHalf->_fullSpeedBack
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibration_colors->_send2USART
    _send2USART->___fltol
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _reading_hue->_convert_rgb2hue
    _calibration_colors->_send2USART

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0  368243
                                             76 BANK0     22    22      0
                           _ADC_init
                        _Timer0_init
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                 _calibration_colors
                   _color_click_init
                   _color_read_Clear
                           _decision
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                        _reading_hue
                         _returnHome
                         _send2USART
                               _stop
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          15     9      6  117720
                                              0 BANK0     15     9      6
                          _moveWhite
                    _reverseStraight
                        _reverseTurn
 ---------------------------------------------------------------------------------
 (2) _reverseTurn                                         11     2      9   76697
                                             30 COMRAM    11     2      9
                           _backHalf
                            _left135
                             _left90
                           _right135
                            _right90
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _reverseStraight                                     10     4      6   15263
                                             80 COMRAM    10     4      6
                      _customDelayMs
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     3      2    8918
                                             75 COMRAM     5     3      2
                            ___flmul
                            ___fltol
                           ___xxtofl
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveWhite                                            6     2      4   24827
                                             30 COMRAM     6     2      4
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (1) _reading_hue                                         56    54      2   18020
                                             79 COMRAM     6     4      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _convert_rgb2hue
 ---------------------------------------------------------------------------------
 (2) _convert_rgb2hue                                    104   102      2   17381
                                             75 COMRAM     4     2      2
                                              0 BANK0     76    76      0
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4    1246
                                              1 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     837
                                             65 COMRAM    10     6      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    3649
                                             17 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2870
                                              1 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    2352
                                             15 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1094
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     950
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2767
                                             40 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                     12    10      2    2315
                                             27 COMRAM    12    10      2
                            ___aldiv
                             ___lmul
                          _logAction
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     370
                                              1 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                             13 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _decision                                             8     2      6  173107
                                             36 COMRAM     6     0      6
                          _logAction
                           _moveBlue
                          _moveGreen
                      _moveLightBlue
                         _moveOrange
                           _movePink
                            _moveRed
                         _moveYellow
 ---------------------------------------------------------------------------------
 (2) _moveYellow                                           6     2      4   23459
                                             30 COMRAM     6     2      4
                     _backOneAndHalf
                            _right90
 ---------------------------------------------------------------------------------
 (2) _moveRed                                              6     2      4   25131
                                             30 COMRAM     6     2      4
                           _backHalf
                            _right90
 ---------------------------------------------------------------------------------
 (3) _right90                                              8     4      4   13049
                                             24 COMRAM     6     2      4
                             ___wmul
                      _customDelayMs
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _movePink                                             6     2      4   23383
                                             30 COMRAM     6     2      4
                     _backOneAndHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _backOneAndHalf                                       4     2      2   10072
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _moveOrange                                           6     2      4   24447
                                             30 COMRAM     6     2      4
                           _backHalf
                           _right135
 ---------------------------------------------------------------------------------
 (3) _right135                                             8     4      4   12365
                                             24 COMRAM     6     2      4
                             ___wmul
                      _customDelayMs
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                            5     3      2    4179
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveLightBlue                                        6     2      4   24599
                                             30 COMRAM     6     2      4
                           _backHalf
                            _left135
 ---------------------------------------------------------------------------------
 (3) _left135                                              8     4      4   12517
                                             24 COMRAM     6     2      4
                             ___wmul
                      _customDelayMs
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveGreen                                            6     2      4   25055
                                             30 COMRAM     6     2      4
                           _backHalf
                             _left90
 ---------------------------------------------------------------------------------
 (3) _left90                                               8     4      4   12973
                                             24 COMRAM     6     2      4
                             ___wmul
                      _customDelayMs
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _moveBlue                                             6     2      4   24827
                                             30 COMRAM     6     2      4
                           _backHalf
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              8     4      4   12745
                                             24 COMRAM     6     2      4
                             ___wmul
                      _customDelayMs
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                             5     3      2    4331
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _customDelayMs                                        5     3      2     502
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _backHalf                                             4     2      2   11744
                                             24 COMRAM     4     2      2
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    5501
                                             19 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _fullSpeedBack                                        5     3      2    4179
                                             19 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    3653
                                             14 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _logAction                                            9     3      6    1326
                                              1 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_colors                                  23    22      1   22900
                                             77 COMRAM     3     2      1
                                             50 BANK0     20    20      0
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                         _send2USART
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _send2USART                                          52    50      2   11232
                                             75 COMRAM     2     0      2
                                              0 BANK0     50    50      0
                            ___fltol (ARG)
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6    9906
                                             49 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    8154
                                             45 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12     9      3    7666
                                             34 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2    1903
                                              7 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1571
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                11     8      3    4210
                                             23 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5    2391
                                             15 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                6     3      3    1182
                                              9 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     682
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     448
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     452
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    1     0      1     675
                                              2 COMRAM     1     0      1
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      22
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _Timer0_init
   ___fldiv
     ___flmul (ARG)
       ___xxtofl (ARG)
     ___flsub (ARG)
       ___fladd
   ___flmul
   ___fltol
     ___fldiv (ARG)
     ___flmul (ARG)
     ___xxtofl (ARG)
   ___xxtofl
   _calibration_colors
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _send2USART
       ___fltol (ARG)
       _sendStringSerial4 (ARG)
         _sendCharSerial4
       _sprintf (ARG)
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___awdiv
               ___awmod
               _abs
                 ___awmod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
             _fputc
             _read_prec_or_width
               ___wmul
     _sendStringSerial4
     _sprintf
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decision
     _logAction
     _moveBlue
       _backHalf
         _fullSpeedBack
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _turn180
         ___wmul
         _customDelayMs
         _stop
         _turnLeft
           _setMotorPWM
     _moveGreen
       _backHalf
       _left90
         ___wmul
         _customDelayMs
         _stop
         _turnLeft
     _moveLightBlue
       _backHalf
       _left135
         ___wmul
         _customDelayMs
         _stop
         _turnLeft
     _moveOrange
       _backHalf
       _right135
         ___wmul
         _customDelayMs
         _stop
         _turnRight
           _setMotorPWM
     _movePink
       _backOneAndHalf
         _fullSpeedBack
         _stop
       _left90
     _moveRed
       _backHalf
       _right90
         ___wmul
         _customDelayMs
         _stop
         _turnRight
     _moveYellow
       _backOneAndHalf
       _right90
   _fullSpeedAhead
     ___flmul
     ___fltol
     ___xxtofl
     _setMotorPWM
   _get16bitTMR0val
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _logAction
   _initDCmotorsPWM
   _initUSART4
   _reading_hue
     _color_read_Blue
     _color_read_Clear
     _color_read_Green
     _color_read_Red
     _convert_rgb2hue
       ___fladd
       ___fldiv
       ___fleq
       ___flge
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
   _returnHome
     _moveWhite
       _backHalf
       _turn180
     _reverseStraight
       _customDelayMs
       _fullSpeedAhead
       _stop
     _reverseTurn
       _backHalf
       _left135
       _left90
       _right135
       _right90
       _turn180
   _send2USART
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      69        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      B6       7       71.1%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     62      91       5       90.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5A      5C       1       97.9%
BITBIGSFRlllhll     37      0       0      49        0.0%
BITBIGSFRlllhhl     31      0       0      47        0.0%
BITBIGSFRllllll     2A      0       0      60        0.0%
BITBIGSFRllllll     26      0       0      67        0.0%
BITBIGSFRlllllh     20      0       0      52        0.0%
BITBIGSFRllllll     1E      0       0      54        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhllhh     17      0       0      38        0.0%
BITBIGSFRlllhhh     14      0       0      44        0.0%
BITBIGSFRhhhlhl     13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      55        0.0%
BITBIGSFRhhhllh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      53        0.0%
BITBIGSFRllllll      9      0       0      64        0.0%
BITBIGSFRlllhll      8      0       0      50        0.0%
BITBIGSFRllllll      6      0       0      66        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRlllhhh      6      0       0      46        0.0%
BITBIGSFRllllll      5      0       0      62        0.0%
BITBIGSFRllllll      5      0       0      58        0.0%
BITBIGSFRhhllhl      5      0       0      39        0.0%
BITBIGSFRllllll      3      0       0      61        0.0%
BITBIGSFRllllll      3      0       0      63        0.0%
BITBIGSFRlllhhh      3      0       0      45        0.0%
BITBIGSFRllllll      3      0       0      57        0.0%
BITBIGSFRlllhlh      2      0       0      48        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRllllll      1      0       0      56        0.0%
BITBIGSFRllhh        1      0       0      42        0.0%
BITBIGSFRhlh         1      0       0      40        0.0%
BITBIGSFRhhhlll      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      65        0.0%
BITBIGSFRllllh       1      0       0      51        0.0%
BITBIGSFRllhl        1      0       0      43        0.0%
BITBIGSFRlh          1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     26B      68        0.0%
DATA                 0      0     26B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Mar 15 05:58:06 2024

               logAction@newTime 0002               logAction@newAction 000A                   _color_read_Red 4368  
                   ___fldiv@aexp 0041                     ___fldiv@bexp 0040               fullSpeedBack@power 0017  
                   ___fldiv@sign 0039                  _color_read_Blue 4458                               l73 497A  
                             l82 4406                               l91 3A2A                               l76 4B3E  
                             l85 44A6                               l79 43B6                               l88 4456  
                             l99 11A8                     ___awdiv@sign 0007                               bsr 0FE0  
            ___wmul@multiplicand 0004                  moveLightBlue@mL 001F                  moveLightBlue@mR 0020  
             convert_rgb2hue@max 0098               convert_rgb2hue@hue 009C               convert_rgb2hue@min 0090  
               _color_read_Clear 4408                 _color_read_Green 43B8                              l101 11B8  
                            l111 12AA                              l103 1212                              l121 15C2  
                            l113 12BA                              l105 1222                              l115 1314  
                            l125 163A                              l117 1324                              l126 1656  
                            l400 40BC                              l144 2A5E                              l314 4B94  
                            l410 413A                              l138 2A56               logAction@path_step 0006  
                            l171 4AD0                              l180 4BCC                              l420 422E  
                            l405 41B8                              l174 4AD2                              l183 4BD6  
                            l423 4572                              l415 3AF4                              l192 46FE  
                            l432 45B4                              l177 4AF8                              l441 4A14  
                            l186 4BC2                              l450 490E                              l426 4638  
                            l290 18E6                              l435 45F6                              l444 47EC  
                            l516 4B5C                              l700 32C6                              l189 4BB8  
                            l525 4B98                              l429 467A                              l453 47B2  
                            l534 4A46                              l438 4A76                              l462 489A  
                            l710 32C8                              l447 48D4                              l616 4AA6  
                            l528 4BAC                              l392 341C                              l456 4826  
                            l296 1AB2                              l385 402E                              l465 4778  
                            l459 4860                              l619 3F08                              l812 4946  
                            l815 4B1E                              l673 4366                              l809 4930  
                            l826 42FC                              l579 4B7A                              l771 2A94  
                            l827 430C                              l683 353E                              l780 2BB0  
                            l772 2AE2                              l781 2C0A                              l774 2AF0  
                            l783 2C18                              l775 2B42                              l784 2C7E  
                            l777 2B50                              l769 2A86                              l697 3940  
                            l689 353E                              l778 2BA2                              l787 2CA4  
                            l894 364A                              _abs 49B0                              _pad 3F0A  
            convert_rgb2hue@cMax 004C                     ___awmod@sign 0007              convert_rgb2hue@diff 0094  
                            wreg 0FE8                     ___flmul@aexp 0021                     ___flmul@bexp 0022  
                   ___flmul@sign 001C                     ___flmul@temp 0027                     ___flmul@prod 0023  
                    main@ambient 00AE                     ___fltol@exp1 004B                             l1112 3750  
                           ?_abs 0008                             l1046 3BB8                             l1080 380E  
                           l1313 42A2                             l1306 429A                             l1410 26C0  
                           l1402 25C6                             l1074 3DC0                             l1059 3C68  
                           l1411 26AE                             l1085 3854                             l1343 1D0E  
                           l1408 2648                             l1360 1E28                             l1352 1FDE  
                           l1344 1CFC                             l1513 3F40                             l1521 3040  
                           l4001 4120                             l1433 2408                             l1345 1CC2  
                           l1370 1EE6                             l4003 4124                             l1516 3F7E  
                           l1436 229A                             l4021 420E                             l4013 41DA  
                           l4005 41BA                             l1429 20A4                             l4101 1C48  
                           l1518 3F9E                             l1534 3158                             l1542 3D16  
                           l1446 23CA                             l1438 2312                             l1470 2CFC  
                           l4031 4B98                             l4023 4212                             l4015 41EE  
                           l4007 41D2                             l1439 2300                             l4111 1C5C  
                           l4103 1C4C                             l4033 4BA8                             l4017 41F6  
                           l4025 4910                             l4201 1EDE                             l1369 1EF8  
                           l4121 1CBA                             l4105 1C50                             l4113 1C60  
                           l4041 1B3C                             l1385 44EC                             l1473 2E58  
                           l1570 49E2                             l1538 3D0E                             l1563 46BC  
                           l4019 41FE                             l4027 491C                             l4211 1F5C  
                           l4131 1CF0                             l4123 1CD0                             l4115 1C64  
                           l4107 1C54                             l4043 1B4C                             l4051 1B76  
                           l4035 1B20                             l5011 388C                             l1484 2DF0  
                           l1557 2FE0                             l1493 49AE                             l4029 492C  
                           l1397 27A2                             l4301 2186                             l4221 1FA2  
                           l4205 1F08                             l4213 1F5E                             l4141 1D40  
                           l4133 1CFA                             l4125 1CDC                             l4117 1C8E  
                           l4109 1C58                             l4061 1BA6                             l4053 1B86  
                           l4045 1B5C                             l4037 1B2C                             l1477 2D94  
                           l5101 3974                             l5013 38AE                             l5021 3906  
                           l5005 3856                             l1582 3E6A                             l1590 473E  
                           l1567 49CA                             l5031 42B4                             l1399 2602  
                           l4311 21F4                             l4303 21A0                             l4231 1FCC  
                           l4223 1FB0                             l4215 1F6E                             l4207 1F14  
                           l4151 1D7C                             l4143 1D50                             l4135 1D1C  
                           l4127 1CE0                             l4119 1CAA                             l4071 1BE6  
                           l4063 1BB4                             l4055 1B8C                             l4047 1B6C  
                           l4039 1B3A                             l5111 39AA                             l5103 3976  
                           l5023 3912                             l5015 38D0                             l5007 385E  
                           l1593 4BD8                             l5041 3544                             l5033 42C2  
                           l4321 228A                             l4313 221E                             l4305 21B0  
                           l4241 1FFA                             l4233 1FCE                             l4225 1FB6  
                           l4217 1F7E                             l4209 1F22                             l4161 1DC2  
                           l4153 1D8A                             l4145 1D5E                             l4137 1D2C  
                           l4129 1CEE                             l4081 1C20                             l4073 1BE8  
                           l4065 1BB6                             l4057 1B9E                             l4049 1B6E  
                           l4401 3710                             l5121 39DE                             l5113 39AC  
                           l5105 3978                             l5025 391E                             l5017 38DC  
                           l5009 3880                             l6001 16F6                             l5211 2A52  
                           l5203 29F4                             l5131 27A4                             l5051 3584  
                           l5043 3552                             l5035 42D2                             l4331 22CA  
                           l4323 2298                             l4315 2254                             l4307 21CC  
                           l4251 2032                             l4243 1FFC                             l4227 1FB8  
                           l4219 1F9E                             l4171 1E3E                             l4163 1DF6  
                           l4155 1D8C                             l4147 1D6C                             l4091 1C34  
                           l4083 1C24                             l4067 1BC6                             l4075 1BF0  
                           l4059 1BA0                             l4403 3720                             l4411 2CA8  
                           l5123 39F8                             l5115 39C4                             l5107 39A6  
                           l5027 392A                             l5019 38FE                             l6011 171E  
                           l6003 16F8                             l5221 4B86                             l3701 3B6C  
                           l5205 2A0A                             l5141 2802                             l5133 27BA  
                           l5061 35C2                             l5053 3588                             l5045 3562  
                           l5037 42DC                             l5029 42A4                             l4341 233C  
                           l4333 22F8                             l4325 22AA                             l4317 2262  
                           l4309 21D8                             l4261 205E                             l4253 2042  
                           l4245 200C                             l4237 1FE0                             l4229 1FBE  
                           l4181 1E7A                             l4173 1E4E                             l4165 1DF8  
                           l4157 1D96                             l4149 1D78                             l4093 1C38  
                           l4085 1C28                             l4077 1C00                             l4069 1BD6  
                           l4405 3730                             l4413 2CB8                             l5125 3A0E  
                           l5117 39DA                             l5109 39A8                             l6021 1732  
                           l6013 1720                             l6005 1700                             l5223 4B8E  
                           l3703 3B82                             l3711 3B98                             l5207 2A20  
                           l5151 2868                             l5215 2A56                             l5143 280A  
                           l5135 27D0                             l5071 360A                             l5063 35D0  
                           l5055 3598                             l5047 3566                             l5039 3540  
                           l5231 4B4A                             l4351 23B2                             l4343 2366  
                           l4327 22B8                             l4319 2280                             l4271 20B4  
                           l4263 206E                             l4255 2048                             l4247 201C  
                           l4239 1FEC                             l4191 1EA6                             l4183 1E7C  
                           l4167 1E08                             l4159 1D9C                             l4095 1C3C  
                           l4087 1C2C                             l4079 1C12                             l4407 3740  
                           l4431 2D7E                             l4423 2D36                             l4415 2CC6  
                           l5127 3A22                             l5119 39DC                             l4511 3ABC  
                           l6031 1806                             l6023 173E                             l6015 1722  
                           l6007 170A                             l5225 4B90                             l5241 4A78  
                           l3713 3BA8                             l3705 3B8A                             l3721 3BBE  
                           l4521 4532                             l5209 2A34                             l5161 28AC  
                           l5145 2820                             l5137 27E4                             l5073 3614  
                           l5065 35DA                             l5057 35AE                             l5049 3574  
                           l5233 4B4C                             l4353 23CE                             l4361 23F4  
                           l4337 2322                             l4345 236A                             l4329 22BC  
                           l4281 20EE                             l4273 20C4                             l4265 207E  
                           l4257 204E                             l4249 202C                             l4185 1E8A  
                           l4177 1E62                             l4193 1EA8                             l4169 1E18  
                           l4097 1C40                             l4089 1C30                             l4441 2DFE  
                           l4433 2D8A                             l4425 2D3E                             l4417 2D0C  
                           l4513 3AC4                             l4505 3A50                             l6041 18E8  
                           l6033 1816                             l6025 1760                             l6017 1724  
                           l6009 1712                             l5227 4B92                             l5219 4B7C  
                           l5251 4A92                             l5243 4A80                             l3715 3BB0  
                           l3707 3B8C                             l3731 3BEE                             l3723 3BCC  
                           l3651 3DE2                             l5091 4970                             l5083 4948  
                           l4531 45F8                             l4523 454E                             l5171 28FA  
                           l5163 28CA                             l5147 2836                             l5155 286C  
                           l5139 2802                             l5067 35F8                             l5059 35B6  
                           l5075 361A                             l5235 4B56                             l4611 2436  
                           l4603 240A                             l4363 23F8                             l4355 23DE  
                           l4347 2384                             l4339 232E                             l4291 2140  
                           l4283 2104                             l4267 208E                             l4259 205C  
                           l4187 1E92                             l4179 1E6C                             l4195 1EB6  
                           l4099 1C44                             l4451 2E46                             l4443 2E00  
                           l4435 2DC6                             l4427 2D4A                             l4419 2D22  
                           l4515 3AD4                             l4507 3A5A                             l6051 1946  
                           l6043 18F4                             l6035 1866                             l6027 1780  
                           l6019 1730                             l5261 4A9C                             l5253 4A94  
                           l5245 4A8A                             l3709 3B92                             l3741 3C34  
                           l3733 3C00                             l3725 3BD4                             l3653 3DEC  
                           l5085 494C                             l4541 463A                             l4533 4614  
                           l4525 455A                             l5181 2946                             l5173 290E  
                           l5157 2882                             l5149 284A                             l5077 362A  
                           l5069 3608                             l5237 4B58                             l5229 4B40  
                           l4701 266A                             l4621 2470                             l4613 2446  
                           l4605 2416                             l4357 23EC                             l4349 2398  
                           l4293 214E                             l4285 2110                             l4277 20D8  
                           l4269 2094                             l4197 1EBA                             l4189 1E96  
                           l4381 36B6                             l4373 3676                             l4453 2E48  
                           l4445 2E04                             l4437 2DD2                             l4429 2D7C  
                           l5093 3942                             l4517 3AD8                             l4509 3AB4  
                           l6061 19C0                             l6053 1952                             l6045 1908  
                           l6029 17A2                             ?_pad 0010                             l5255 4A96  
                           l5247 4A8C                             l4471 4BB0                             l3751 3C60  
                           l3743 3C3C                             l3735 3C08                             l3727 3BD8  
                           l3719 3BBA                             l3655 3E08                             l3647 3DC2  
                           l3671 4B16                             l5087 4956                             l4543 4656  
                           l4535 4620                             l4551 4574                             l4527 4566  
                           l4519 4532                             l5183 295C                             l5191 2992  
                           l5175 292C                             l5159 2898                             l5167 28CE  
                           l5079 363A                             l5271 3FFE                             l5263 3FA0  
                           l5239 4B5A                             l4711 26DC                             l4703 2678  
                           l4631 249C                             l4623 2476                             l4615 2456  
                           l4607 2424                             l4359 23EE                             l4295 215A  
                           l4287 2128                             l4279 20E4                             l4199 1EC8  
                           l4391 36E6                             l4383 36C4                             l4375 36A0  
                           l4367 364C                             l4447 2E28                             l4439 2DE0  
                           l5095 3948                             l6071 1A6E                             l6063 1A24  
                           l6055 196C                             l6047 1920                             l6039 18CE  
                           l5257 4A98                             l5249 4A90                             l4481 4BD2  
                           l4473 4BB4                             l4801 43AE                             l3681 3B10  
                           l3745 3C42                             l3737 3C10                             l3729 3BE6  
                           l3657 3E3A                             l3649 3DD2                             l6129 2EE2  
                           l5089 4966                             l4545 4662                             l4537 462C  
                           l4529 45F8                             l4561 45B6                             l4553 4590  
                           l5193 29A8                             l5185 2970                             l5169 28E4  
                           l5361 3EFC                             l5281 4020                             l5273 4008  
                           l5265 3FB0                             l4721 2748                             l4713 26EA  
                           l4705 26A6                             l4641 24D6                             l4633 24AC  
                           l4625 247C                             l4617 2458                             l4609 2426  
                           l4297 216A                             l4289 2134                             l4393 36F0  
                           l4377 36A2                             l4369 3662                             l4449 2E38  
                           l5097 3960                             l6081 1AD4                             l6073 1A86  
                           l6065 1A3C                             l6057 197C                             l6049 192C  
                           l5259 4A9A                             l4491 46FA                             l4483 46C0  
                           l4467 4BC4                             l4475 4BBA                             l4811 4458  
                           l3691 3B36                             l3683 3B14                             l3675 3AF6  
                           l3739 3C1E                             l3747 3C48                             l3771 49B0  
                           l3851 3C98                             l4571 4A54                             l4547 466E  
                           l4539 463A                             l4563 45D2                             l4555 459C  
                           l5195 29BE                             l5187 298E                             l5179 2930  
                           l5363 3F00                             l5355 3E6C                             l5283 4022  
                           l5275 400A                             l5267 3FD6                             l4731 2796  
                           l4723 2762                             l4715 2714                             l4643 24EC  
                           l4635 24BC                             l4627 248A                             l4619 2460  
                           l4299 2176                             l4379 36B2                             l5099 3972  
                           l6083 1AF2                             l6075 1A9C                             l6067 1A48  
                           l6059 199E                             l3933 4AD2                             l4493 46FC  
                           l4485 46C4                             l4469 4BC8                             l4477 4BBE  
                           l4813 449E                             l4805 43B8                             l4581 4A16  
                           l3693 3B48                             l3685 3B22                             l3677 3AFA  
                           l3749 3C58                             l3773 49BE                             l5701 3F60  
                           l3669 4AFA                             l3853 3CA0                             l4901 4326  
                           l3781 4252                             l3861 32CA                             l3941 404A  
                           l4573 4A6A                             l4565 45DE                             l4557 45A8  
                           l4549 4574                             l5197 29D2                             l5357 3E84  
                           l5285 402C                             l5277 4014                             l5269 3FDA  
                           l4733 2798                             l4725 277E                             l4709 26D0  
                           l4717 2718                             l4661 2540                             l4645 24FC  
                           l4653 251C                             l4637 24BE                             l4629 248C  
                           l4741 44A8                             l4389 36DC                             l6085 1AF4  
                           l6077 1AC0                             l6069 1A62                             l3935 4AE2  
                           l4487 46CC                             l4479 4BCE                             l4807 43FE  
                           l4583 4A1A                             l3695 3B50                             l3687 3B2A  
                           l3679 3B08                             l5703 3F8E                             l5711 3002  
                           l3855 3CBC                             l3847 3C6A                             l3791 428C  
                           l3783 425A                             l3775 4230                             l3871 3386  
                           l3863 32E4                             l3951 4080                             l3943 4052  
                           l4911 48E2                             l4903 489C                             l4567 45EA  
                           l4559 45B6                             l4575 49E4                             l5199 29F0  
                           l5359 3EDE                             l5279 4016                             l4727 2782  
                           l4719 2732                             l4671 2592                             l4663 255A  
                           l4655 252C                             l4647 2504                             l4639 24C6  
                           l4751 3D56                             l4743 44B8                             l4399 3704  
                           l4831 0F6C                             l4823 0EC6                             l6079 1AC8  
                           l4489 46D4                             l4817 4408                             l4585 4A26  
                           l3697 3B58                             l3689 3B2E                             l5721 303C  
                           l5713 3012                             l5705 2FE2                             l3857 3CDC  
                           l3849 3C72                             l5801 2FBA                             l3793 428E  
                           l3785 4268                             l3777 4238                             l3873 33A0  
                           l3865 3332                             l3945 4068                             l3953 4090  
                           l3937 4030                             l4569 4A48                             l3961 415E  
                           l4913 48FA                             l4905 48A8                             l4577 49F0  
                           l4921 477A                             l4729 2790                             l4681 25EE  
                           l4673 25A2                             l4665 256A                             l4657 252C  
                           l4649 2508                             l4753 3D84                             l4841 1070  
                           l4833 0FA0                             l4825 0ED8                             l4497 3A2C  
                           l4819 444E                             l4587 4A28                             l3699 3B66  
                           l5731 308E                             l5723 3048                             l5715 3018  
                           l5707 2FE6                             l3859 3CE4                             l5811 467C  
                           l3795 4294                             l3787 426E                             l3779 424A  
                           l3875 33E0                             l3867 3344                             l3955 40A6  
                           l3947 4070                             l3939 4034                             l3971 417E  
                           l3963 4166                             l4907 48C0                             l4915 4862  
                           l4931 484C                             l4579 4A08                             l4923 4786  
                           l4691 262E                             l4683 25F0                             l4675 25B6  
                           l4667 257A                             l4755 3D94                             l4747 3D18  
                           l4771 37CE                             l4763 3752                             l4851 1162  
                           l4843 1094                             l4835 0FD4                             l4827 0F08  
                           l4499 3A48                             l4589 4A30                             l5741 30EC  
                           l5733 3094                             l5725 3052                             l5717 3028  
                           l5709 2FFA                             l5813 4684                             l5821 497C  
                           l5901 2C72                             l3789 4284                             l3869 3348  
                           l3949 4078                             l3973 4186                             l3957 413C  
                           l4909 48D6                             l4917 486E                             l3981 40BE  
                           l4933 47EE                             l4925 479E                             l4693 2638  
                           l4685 2600                             l4677 25C4                             l4669 258A  
                           l4757 3DB8                             l4749 3D46                             l4781 3852  
                           l4773 37DC                             l4765 3780                             l4861 1264  
                           l4853 1194                             l4845 10C8                             l4837 1008  
                           l4829 0F38                             l5751 313C                             l5743 3106  
                           l5727 3058                             l5735 30B0                             l5719 3034  
                           l5815 4694                             l5823 4984                             l5903 2C8C  
                           l4791 4ABA                             l3975 418E                             l3959 4156  
                           l4919 4886                             l3983 40D8                             l4927 4828  
                           l4935 47FA                             l4695 2646                             l4687 2612  
                           l4679 25D0                             l4759 3DBE                             l4775 37EE  
                           l4767 3790                             l4871 139A                             l4863 1296  
                           l4855 11CC                             l4847 10FC                             l4839 103C  
                           l4943 4740                             l4951 342E                             l5911 3188  
                           l5681 4700                             l5737 30CA                             l5745 3116  
                           l5729 308A                             l5761 2E96                             l5817 46B4  
                           l5825 498C                             l5833 4B5E                             l5841 2A7E  
                           l4793 4ABC                             l4785 4AA8                             l3977 419E  
                           l3969 416E                             l3993 40F0                             l3985 40E0  
                           l4929 4834                             l4937 4812                             l4689 2628  
                           l4697 2658                             l4777 37FC                             l4769 37BE  
                           l4881 1500                             l4873 13B0                             l4865 12CE  
                           l4857 11FE                             l4849 1130                             l4945 474C  
                           l4953 3442                             l5921 321C                             l5913 3194  
                           l5905 315A                             l5683 470C                             l5691 3F1A  
                           l5747 3126                             l5739 30DC                             l5763 2E9A  
                           l5755 2E5A                             l5827 4994                             l5835 4B72  
                           l5851 2ADA                             l5843 2A96                             l4795 4ABE  
                           l4787 4AB2                             l3979 41A2                             l3995 4100  
                           l3987 40E8                             l4699 2666                             l4779 384C  
                           l4883 1532                             l4875 13E2                             l4867 1300  
                           l4859 1232                             l4947 4764                             l4955 345A  
                           l5923 324C                             l5915 31A4                             l5907 3160  
                           l5685 471A                             l5693 3F2A                             l5749 312C  
                           l5781 2F24                             l5773 2EBA                             l5765 2EA2  
                           l5757 2E80                             l5829 49A4                             l5861 2B3A  
                           l5853 2AF2                             l5845 2AAE                             l5837 2A60  
                           l4789 4AB8                             l4797 4B22                             l3997 4108  
                           l4893 47B4                             l4877 143E                             l4885 15C2  
                           l4869 1334                             l4981 34E8                             l4973 34BE  
                           l4965 3494                             l4957 346A                             l4949 341E  
                           l5933 32BC                             l5925 325C                             l5917 31C2  
                           l5909 3174                             l5941 1664                             l4799 4368  
                           l5687 471E                             l5695 3F38                             l5791 2F90  
                           l5783 2F2E                             l5767 2EA6                             l5775 2EF0  
                           l5759 2E88                             l5871 2B9A                             l5863 2B52  
                           l5855 2B0A                             l5847 2AC0                             l5839 2A66  
                           l3999 4110                             l4895 47C0                             l4887 15F6  
                           l4879 1470                             l4991 3510                             l4975 34D0  
                           l4967 34A6                             l4959 347C                             l5927 327C  
                           l5919 31E0                             l5951 167E                             l5943 1668  
                           l5935 1658                             l5697 3F4C                             l5689 3F0A  
                           l5793 2F9A                             l5785 2F38                             l5777 2F00  
                           l5769 2EB2                             l5881 2BE8                             l5873 2BB6  
                           l5865 2B6A                             l5857 2B20                             l5849 2AC2  
                           l4897 47D8                             l4889 1606                             l5929 32A4  
                           l5961 169E                             l5953 1682                             l5945 1668  
                           l5937 165C                             l5699 3F5C                             l5787 2F58  
                           l5779 2F14                             l5891 2C4C                             l5883 2BEA  
                           l5875 2BCE                             l5867 2B80                             l5859 2B22  
                           l4899 4310                             l5971 16BE                             l5963 16A2  
                           l5955 168A                             l5947 1674                             l5939 1660  
                           l5797 2FAE                             l5789 2F78                             l5893 2C4E  
                           l5885 2C02                             l5877 2BE4                             l5869 2B82  
                           l4997 3528                             l4989 34FE                             l5981 16C8  
                           l5973 16C0                             l5965 16A6                             l5957 1692  
                           l5949 167A                             l5895 2C50                             l5887 2C1E  
                           l5879 2BE6                             l5991 16D4                             l5983 16CA  
                           l5975 16C2                             l5967 16AE                             l5959 169A  
                           l5897 2C52                             l5889 2C36                             l5993 16D6  
                           l5985 16CC                             l5977 16C4                             l5969 16B6  
                           l5899 2C6A                             l5995 16D8                             l5987 16D0  
                           l5979 16C6                             l5997 16DA                             l5989 16D2  
                           l5999 16DC                             STR_1 0EA2                             STR_2 0EB7  
                           STR_3 0E8A                             STR_4 0EC3                             STR_5 0E01  
                           STR_6 0EC3                             STR_7 0E3B                             STR_8 0EC3  
                           STR_9 0E56                             u3000 422E                             u3001 422A  
                           u3010 4946                             u3011 4942                             u3020 4BA8  
                           u3100 1C12                             u3021 4BA4                             u3101 1C0E  
                           u3110 1C20                             u3030 1B3A                             u3111 1C1C  
                           u3031 1B36                             u4000 26BC                             u3200 1D5E  
                           u3120 1C8E                             u3040 1B4C                     _BAUD4CONbits 0EE9  
                           u4001 26B8                             u3201 1D5A                             u3121 1C8A  
                           u3041 1B48                             u4010 26D0                             u3210 1D6C  
                           u3130 1CA6                             u3050 1B5C                             u4011 26CC  
                           u3211 1D68                             u3131 1CA0                             u3051 1B58  
                           u2500 3E08                             u4020 26EA                             u4100 37BE  
                           u3300 1EB6                             u3220 1D8A                             u3140 1CA8  
                           u3060 1B9E                             u2501 3E04                             u4021 26E6  
                           u4101 37BA                             u3301 1EB2                             u3221 1D86  
                           u3061 1B9A                             u2510 3E3A                             u4030 2732  
                           u4110 37DC                             u3310 1EC8                             u3230 1DC2  
                           u3150 1CD0                             u3070 1BB4                             u2511 3E36  
                           u4031 272E                             u4111 37D8                             u3311 1EC4  
                           u3231 1DBE                             u3151 1CCC                             u3071 1BB0  
                           u2600 3BE6                             u5000 3028                             u4040 2762  
                           u4120 37FC                             u3400 1FB0                             u3320 1EDE  
                           u3240 1E08                             u3160 1CEE                             u3080 1BC6  
                           u4200 139A                             u2601 3BE2                             u5001 3024  
                           u4041 275E                             u4121 37F8                             u3401 1FAC  
                           u3321 1EDA                             u3241 1E04                             u3161 1CEA  
                           u3081 1BC2                             u4201 1396                             u2530 3B08  
                           u2610 3C00                             u5010 30CA                             u4050 2790  
                           u4130 384C                             u3410 1FCC                             u3330 1EF4  
                           u3250 1E3E                             u3170 1D0E                             u3090 1BD6  
                           u4210 13E2                             _T2PR 0FBC                             u2531 3B04  
                           u2611 3BFC                             u5011 30C6                             u4051 278C  
                           u4131 3848                             u3411 1FC8                             u3331 1EF0  
                           u3251 1E3A                             u3171 1D0A                             u3091 1BD2  
                           u4211 13DE                             u2540 3B22                             u2620 3C1E  
                           u5020 30DC                             u5100 2F58                             u2700 424A  
                           u4060 3D46                             u3500 223E                             u3420 1FFA  
                           u3340 1F08                             u3260 1E4E                             u3180 1D1C  
                           u4220 1470                             u4140 1162                             u4300 34FA  
                           u2541 3B1E                             u2621 3C1A                             u5021 30D8  
                           u5101 2F54                             u2701 4246                             u4061 3D42  
                           u3421 1FF6                             u3341 1F04                             u3261 1E4A  
                           u3181 1D18                             u4221 146C                             u4141 115E  
                           u4301 34F6                             u2550 3B48                             u2630 3C34  
                           u5030 30EC                             u5110 2F78                             u2710 4268  
                           u4070 3D84                             u3510 2298                             u3430 200C  
                           u3350 1F22                             u3270 1E7A                             u3190 1D2C  
                           u4230 1532                             u4150 1194                             u4310 3510  
                           u2551 3B44                             u2631 3C30                             u5031 30E8  
                           u5111 2F74                             u2711 4264                             u4071 3D80  
                           u3511 2294                             u3431 2008                             u3351 1F1E  
                           u3271 1E76                             u3191 1D28                             u4231 152E  
                           u4151 1190                             u4311 350C                             u2560 3B66  
                           u2640 3C58                             u2480 3DD2                             u5040 3106  
                           u5120 46B4                             u2720 4284                             u4400 3574  
                           u4080 3DB8                             u3600 23EC                             u3520 22B8  
                           u3440 201C                             u3360 1F5C                             u3280 1E8A  
                           u4240 1606                             u4160 11FE                             u4320 353A  
                           u5200 31C2                             u2561 3B62                             u2641 3C54  
                           u2481 3DCE                             u5041 3102                             u5121 46B0  
                           u2721 4280                             u4401 3570                             u4081 3DB4  
                           u3601 23E8                             u3521 22B4                             u3505 2234  
                           u3441 2018                             u3361 1F58                             u3281 1E86  
                           u4241 1602                             u4161 11FA                             u4321 3536  
                           u5201 31BE                             u2570 3B82                             u2490 3DE2  
                           u5050 3116                             u5130 2A94                             u4250 4326  
                           u4410 35AE                             u4090 3780                             u3530 22CA  
                           u3450 205C                             u3370 1F6E                             u3290 1EA6  
                           u3610 3662                             u4170 1264                             u4330 3880  
                           u5210 31E0                             u2571 3B7E                             u2491 3DDE  
                           u5051 3112                             u5131 2A90                             u4251 4322  
                           u4411 35AA                             u4091 377C                             u3531 22C6  
                           u3451 2058                             u3371 1F6A                             u3291 1EA2  
                           u3611 365E                             u4171 1260                             u4331 387C  
                           u5211 31DC                             u2580 3BA8                             u5060 3126  
                           u5140 2AF0                             u4500 2898                             u4420 35D0  
                           u3540 22F8                             u3460 206E                             u3380 1F7E  
                           u3620 3696                             u3700 2D22                             u4180 1296  
                           u4340 38AE                             u4260 342E                             u5220 325C  
                           u2581 3BA4                             u5061 3122                             u5141 2AEC  
                           u4501 2894                             u4421 35CC                             u3541 22F4  
                           u3461 206A                             u3381 1F7A                             u3701 2D1E  
                           u4181 1292                             u4341 38AA                             u4261 342A  
                           u5221 3258                             u2590 3BCC                             u2830 3C98  
                           u5070 2E80                             u5150 2B50                             u4510 28E4  
                           u4430 35F8                             u3550 230E                             u3470 207E  
                           u3390 1F9E                             u3630 36C4                             u3710 2D78  
                           u4190 1300                             u4350 38D0                             u4270 347C  
                           u5230 32B8                             u2591 3BC8                             u2831 3C94  
                           u5071 2E7C                             u5151 2B4C                             u4511 28E0  
                           u4431 35F4                             u3551 230A                             u3471 207A  
                           u3391 1F9A                             u3631 36C0                             u3711 2D74  
                           u4191 12FC                             u4351 38CC                             u4271 3478  
                           u5231 32B4                             u2920 4AE2                             u2840 3D0E  
                           u5080 2F00                             u5160 2BB0                             u4520 28FA  
                           u4440 362A                             u3560 2322                             u3480 20B4  
                           u3640 36D8                             u3720 2DC2                             u4360 38FE  
                           u4280 34A6                             u5240 18E6                             u2921 4ADE  
                           u2841 3D0A                             u5081 2EFC                             u5161 2BAC  
                           u4521 28F6                             u4441 3626                             u3561 231E  
                           u3481 20B0                             u3641 36D4                             u3625 368C  
                           u3721 2DBE                             u4361 38FA                             u4281 34A2  
                           u5241 18E2                             u2930 4AF8                             u2690 49BE  
                           u5090 2F24                             u5170 2C18                             u2850 32E4  
                           u4530 2946                             u4450 27BA                             u4370 42C2  
                           u3570 233C                             u3490 20C4                             u3650 3700  
                           u3730 2DE0                             u3810 3AF4                             u4290 34D0  
                           u5250 1A3C                             u2931 4AF4                             u2691 49BA  
                           u5091 2F20                             u5171 2C14                             u2851 32E0  
                           u4531 2942                             u4451 27B6                             u4371 42BE  
                           u3571 2338                             u3491 20C0                             u3651 36FC  
                           u3731 2DDC                             u3811 3AF0                             u4291 34CC  
                           u5251 1A38                             u3820 4A46                             u5180 2C8C  
                           u2860 33A0                             u2940 404A                             u4540 295C  
                           u4460 27D0                             u4380 42FC                             u3900 252C  
                           u3580 2384                             u3660 3720                             u3740 2DF0  
                           u5260 1A86                             u3821 4A42                             u5181 2C88  
                           u2861 339C                             u2941 4046                             u4541 2958  
                           u4461 27CC                             u4381 42F8                             u3901 2528  
                           u3581 2380                             u3661 371C                             u3741 2DEC  
                           u5261 1A82                             u5317 16E8                             u2950 4068  
                           u4550 29A8                             u4470 2820                             u4390 3552  
                           u3910 25A2                             u3830 2424                             u3590 23B2  
                           u3670 3730                             u3750 2DFE                             u5190 3188  
                           u5270 1A9C                             u2951 4064                             u4551 29A4  
                           u4471 281C                             u4391 354E                             u3911 259E  
                           u3831 2420                             u3591 23AE                             u3671 372C  
                           u3751 2DFA                             u5407 3952                             u5191 3184  
                           u5271 1A98                             u5327 1914                             u3808 46EA  
                           u2960 40A6                             u4560 29BE                             u4480 2836  
                           u3920 25C4                             u3840 2436                             u3760 2E38  
                           u3680 2CB8                             u5280 1AB2                             u2961 40A2  
                           u4561 29BA                             u4481 2832                             u3921 25C0  
                           u3841 2432                             u3761 2E34                             u3681 2CB4  
                           u5417 3982                             u5281 1AAE                             u5337 1938  
                           u2970 40BC                             u4570 2A0A                             u4490 2882  
                           u3930 25EE                             u3850 2446                             u3770 2E46  
                           u3690 2CC6                             u5290 1AC0                             u2971 40B8  
                           u5507 4878                             u4571 2A06                             u4491 287E  
                           u3931 25EA                             u3851 2442                             u3771 2E42  
                           u3691 2CC2                             u5427 39B6                             u5291 1ABC  
                           u5347 195E                             u2980 41B8                             u4580 2A20  
                           u3940 2612                             u3860 248A                             u2981 41B4  
                           u5517 48B2                             u4581 2A1C                             u3941 260E  
                           u3861 2486                             u5437 39EA                             u5357 1A54  
                           u3790 46E8                             u2990 413A                             u3950 2628  
                           u3870 249C                             u3791 46E0                             u5607 2AFC  
                           u5527 48EC                             u2991 4136                             u5447 4790  
                           u3951 2624                             u3871 2498                             u5367 344C  
                           u4920 473E                             u3960 2646                             u3880 24AC  
                           u4921 473A                             u5617 2B5C                             u5537 4194  
                           u5457 47CA                             u3961 2642                             u3881 24A8  
                           u5377 3934                             u4930 3F1A                             u3970 2666  
                           u3890 24EC                             u4931 3F16                             u5627 2BC0  
                           u5547 4922                             u5467 4804                             u3971 2662  
                           u3891 24E8                             u5387 3ACA                             u4940 3F38  
                           u3980 2678                             u4941 3F34                             u5637 2C28  
                           u5557 4A5E                             u5477 49FA                             u3981 2674  
                           u5397 4756                             u4950 3F7E                             u3990 26A6  
                           u4951 3F7A                             u5647 2C96                             u5567 4086  
                           u5487 483E                             u3991 26A2                             u4960 3F8E  
                           u5657 4A2A                             u4961 3F8A                             u5577 4204  
                           u5497 4116                             u4970 2FF6                             u4971 2FF0  
                           u5587 495C                             u4980 2FF8                             u5597 2AA0  
                           u4990 3012                             u4991 300E                             abs@a 0008  
                           _dbuf 0196                             _main 1658                             _dtoa 2FE2  
           convert_rgb2hue@cCurr 004D                             _prec 00C4                             _time 0200  
                           pad@i 0016                             pad@p 0013                             fsr1h 0FE2  
                           fsr2h 0FDA                             indf2 0FDF                             fsr1l 0FE1  
                           fsr2l 0FD9                             btemp 005D                             _stop 4030  
            fullSpeedAhead@power 004F                             prodh 0FF4                             prodl 0FF3  
                           start 003A                 __end_of_ADC_init 4B96                  ___fldiv@new_exp 003A  
         __end_of_color_read_Red 43B8                     ___param_bank 0000                   movePink@factor 0021  
                 reading_hue@hue 0054                            ??_abs 000A                            ??_pad 0015  
                  ___fltol@sign1 004A                  __end_of___aldiv 364C                  __end_of___fladd 1FE0  
                          ?_main 0001                            ?_dtoa 0018                            _ADPCH 0F5F  
                __end_of___fldiv 27A4                  __end_of___awdiv 3BBA                            STR_10 0EC3  
                          STR_11 0E1E                            STR_12 0EC3                            STR_13 0E71  
                          STR_14 0EC3                  __end_of___awmod 3C6A                  __end_of___flmul 240A  
                __end_of___flsub 44EE                  __end_of___fltol 3752                            ?_stop 0014  
                ___awdiv@divisor 0004                  __end_of___lwdiv 42A4                            i1l625 0032  
                ___awdiv@counter 0006                ??_convert_rgb2hue 004E                     vfpfcnvrt@fmt 0024  
                          _TMR0H 0FD4                            _TMR0L 0FD3              ___lmul@multiplicand 0006  
                __end_of_left135 45F8          __end_of_sendCharSerial4 4BAE       __end_of_I2C_2_Master_Start 4BCE  
     __end_of_I2C_2_Master_Write 4BBA                            _flags 00C6              read_prec_or_width@c 000A  
            read_prec_or_width@n 000B                            _fputc 3DC2                            _fputs 4700  
                          pad@fp 0010                            _width 00C2                            _putch 4BD8  
                          dtoa@d 0019                            dtoa@i 0021                            dtoa@p 001D  
                __end_of_right90 4574                            dtoa@s 0020                            dtoa@w 001E  
                   ?_reading_hue 0050                  __end_of_moveRed 47EE                            tablat 0FF5  
                __end_of_turn180 467C                            ttemp5 005E                            ttemp6 0061  
                          ttemp7 0065                            status 0FD8                            wtemp8 005E  
                __end_of_sprintf 49B0            convert_rgb2hue@redmax 0064          __end_of_color_read_Blue 44A8  
          _I2C_2_Master_RepStart 4BCE   turn180@delay_after_calibration 001D                  ?_color_read_Red 0006  
                __initialization 44EE                     __end_of_main 1B20                     __end_of_dtoa 315A  
                   __end_of_stop 40BE            __end_of_moveLightBlue 489C                    main@clear_max 00B6  
                _get16bitTMR0val 3E6C                           ??_main 00AC                           ??_dtoa 001B  
                         ??_stop 0016                    __activetblptr 0003       __end_of_read_prec_or_width 3D18  
                _reverseStraight 3856                     ?_setMotorPWM 000F                           ?_fputc 0002  
                         ?_fputs 000A                           _ADRESH 0F64                           _CCPR1H 0FAA  
                         _CCPR2H 0FA6                           _CCPR3H 0F25                           _CCPR4H 0F21  
               ___awdiv@dividend 0002                 __end_of_backHalf 4A78                           ?_putch 0001  
                         _RC0PPS 0E62                           _RC4REG 0EE3                           _RE2PPS 0E74  
                         _RD5PPS 0E6F                           _RC7PPS 0E69                           _RE4PPS 0E76  
                         _RD6PPS 0E70                           i1l3591 002E                           i1l3589 001E  
                         _RG6PPS 0E88                    vfpfcnvrt@done 002C         __end_of_color_click_init 497C  
                         _RX4PPS 0E15                           _TX4REG 0EE4                 __end_of___xxtofl 2E5A  
    convert_rgb2hue@greencurrent 0068                 __end_of_decision 2A60                           _LowISR 0018  
                  ??_Timer0_init 0002                    main@path_step 00BA                     _CCPTMRS0bits 0FAD  
                   vfprintf@cfmt 0031                           ___flge 3752                           ___fleq 3D18  
                         ___lmul 42A4                        ??___aldiv 0016                        ??___fladd 000A  
                         ___wmul 4AFA                        ??___fldiv 0031                 backOneAndHalf@mL 0019  
                      ??___awdiv 0006                 backOneAndHalf@mR 001A                        ??___awmod 0006  
                      ??___flmul 0018                           _action 013C                        ??___flsub 001A  
                      ??___fltol 0046                        ??___lwdiv 000C                           _left90 45F8  
           read_prec_or_width@ap 0009                     ?_reverseTurn 001F                           clear_0 4506  
                         clear_1 4512                           clear_2 451E                 ___awdiv@quotient 0008  
                ___awmod@divisor 0004                           _motorL 00E7                           _motorR 00DE  
                         isa$std 0001                  ___awmod@counter 0006                        ??_left135 001D  
             send2USART@hue_char 0060                           pad@buf 0011                 __end_of_right135 45B6  
                         dtoa@fp 0018                 __end_of_moveBlue 4910                 __end_of_movePink 4828  
                         fputc@c 0002                           fputs@c 000D                           fputs@i 000E  
                         fputs@s 000A                        ??_right90 001D                     __mediumconst 0000  
                      ??_moveRed 0023                           tblptrh 0FF7                           tblptrl 0FF6  
                         tblptru 0FF8                        ?_ADC_init 0001                 ?_sendCharSerial4 0001  
         convert_rgb2hue@bluemax 0074                           putch@c 0001                 __end_of_vfprintf 46BE  
                      ??_turn180 001D                           stop@mL 0014                           stop@mR 0015  
              ??_initDCmotorsPWM 0004                        ??_sprintf 0038              moveLightBlue@factor 0021  
               __end_of_turnLeft 41BA         get16bitTMR0val@path_step 001C                       ___flge@ff1 0002  
                     ___flge@ff2 0006                     ___xxtofl@arg 000C                     ___xxtofl@exp 000B  
                   ___xxtofl@val 0002                       ___fleq@ff1 0002                       ___fleq@ff2 0006  
                fullSpeedBack@mL 0014                  fullSpeedBack@mR 0015                       __accesstop 0060  
        __end_of__initialization 4528               _calibration_colors 2A60         __end_of_color_read_Clear 4458  
       __end_of_color_read_Green 4408   left135@delay_after_calibration 001D           ?_I2C_2_Master_RepStart 0001  
                 _backOneAndHalf 49E4                    ___rparam_used 0001                       ___fltol@f1 0042  
               ?_color_read_Blue 0006              ?_calibration_colors 004E                   __pcstackCOMRAM 0001  
        __end_of_get16bitTMR0val 3F0A                    _fullSpeedBack 41BA                     __pidataBANK0 4BDA  
                  __end_of_fputc 3E6C                    __end_of_fputs 4740                    __end_of_putch 4BDA  
                  turn180@factor 001B          __end_of_reverseStraight 3942              __end_of_Timer0_init 4AA8  
               reading_hue@cCurr 0050                    right90@factor 001B             ??_calibration_colors 004F  
                     ??_ADC_init 0002                   main@clear_norm 00C0                       backHalf@mL 0019  
                     backHalf@mR 001A                          ??_fputc 0005                          ??_fputs 000D  
                        ??_putch 0002                       __pbssBANK0 00C2                       __pbssBANK1 0100  
                     __pbssBANK2 0200               reverseTurn@time_ms 0022           __end_of_backOneAndHalf 4A16  
         get16bitTMR0val@time_ms 0022           calibration_colors@cCal 004E                          ?_LowISR 0001  
              _color_writetoaddr 4B20                     _T2CLKCONbits 0FBF                   ?_fullSpeedBack 0014  
                _convert_rgb2hue 0EC6                          ?___flge 0002                          ?___fleq 0002  
             ?_color_writetoaddr 0004                          ?___lmul 0002                    _customDelayMs 4910  
                        ?___wmul 0002                          ?_left90 0019            reverseTurn@actionStep 0021  
                 ___lmul@product 000A                        ?_backHalf 0019              ??_color_writetoaddr 0005  
                      ?___xxtofl 0002              _convert_rgb2hue$370 008C              _convert_rgb2hue$367 0080  
            _convert_rgb2hue$368 0084              _convert_rgb2hue$369 0088                        ?_decision 0025  
                        _SP4BRGH 0EE6                          _SP4BRGL 0EE5                          _SSP2ADD 0ED6  
                        _SSP2BUF 0ED5                      moveGreen@mL 001F                      moveGreen@mR 0020  
                ?_backOneAndHalf 0019           color_writetoaddr@value 0004                 ??_color_read_Red 0008  
      __end_of_color_writetoaddr 4B40                        _ADREFbits 0F58                        ?_right135 0019  
             _I2C_2_Master_Start 4BC4                       _initUSART4 4B40               _I2C_2_Master_Write 4BAE  
                      ?_moveBlue 001F                main@clear_current 00BC                          __Hparam 0000  
                      ?_movePink 001F                          __Lparam 0000                color_read_Red@tmp 000B  
                moveWhite@factor 0021                      moveWhite@mL 001F                      moveWhite@mR 0020  
      customDelayMs@milliseconds 0002                      _Timer0_init 4A78                   ?_customDelayMs 0002  
        sendStringSerial4@string 0003                 ?_get16bitTMR0val 001C                          ___aldiv 3540  
                        ___fladd 1B20                          ___fldiv 240A                          ___awdiv 3AF6  
                        ___awmod 3BBA                          ___flmul 1FE0                          ___flsub 44A8  
                        ___fltol 364C              ?_I2C_2_Master_Start 0001                          ___lwdiv 4230  
            ?_I2C_2_Master_Write 0001                        ?_vfprintf 002E                     __psmallconst 0E00  
                        __pcinit 44EE                       ??_backHalf 001B                __end_of_logAction 4368  
                        __ramtop 0E00                 ?_reverseStraight 0051                       _send2USART 4B5E  
                      ?_turnLeft 0014                          _left135 45B6                          __ptext0 1658  
                        __ptext1 315A                          __ptext2 341E                          __ptext3 3856  
                        __ptext4 3A2C                          __ptext5 4740                          __ptext6 3942  
                        __ptext7 0EC6                          __ptext8 2CA6                          __ptext9 364C  
                      _T2CONbits 0FBD   right90@delay_after_calibration 001D            read_prec_or_width@fmt 0008  
                     ??___xxtofl 0006                 ___awmod@dividend 0002                       ??_decision 002B  
         reverseStraight@delayMs 0059                 ___aldiv@dividend 000E                          _right90 4532  
                      _T2HLTbits 0FBE                          _moveRed 47B4                    _RxBufWriteCnt 00C9  
                        _turn180 463A                          _sprintf 497C                          main@hue 00B4  
           ??_I2C_2_Master_Start 0003             ??_I2C_2_Master_Write 0003             end_of_initialization 4528  
              __end_of_moveGreen 48D6           reverseStraight@time_ms 0053                __end_of_moveWhite 477A  
                        fputc@fp 0004          __end_of_convert_rgb2hue 1658                          fputs@fp 000C  
              ?_color_click_init 0001               _read_prec_or_width 3C6A                       _moveOrange 4828  
               moveOrange@factor 0021                       ??_right135 001D                       _moveYellow 477A  
                ??_fullSpeedBack 0016                       ??_moveBlue 0023               ??_color_click_init 0006  
        convert_rgb2hue@clearmax 007C                       ??_movePink 0023                 _colorCalibration 00D4  
            returnHome@path_step 0062                __end_of_vfpfcnvrt 2FE2                 ___aldiv@quotient 0018  
                        postdec2 0FDD              ?_read_prec_or_width 0008                   right135@factor 001B  
                        postinc0 0FEE                          postinc1 0FE6                          postinc2 0FDE  
               vfpfcnvrt@convarg 0028                       ??_vfprintf 0031          convert_rgb2hue@greenmax 006C  
                   _colorCurrent 00CA                       _returnHome 315A                  _initDCmotorsPWM 3FA0  
                     ??_turnLeft 0016                        _PORTFbits 0F8E               setMotorPWM@negDuty 0013  
                  moveRed@factor 0021                __end_of_turnRight 413C                      ___fladd@grs 0011  
                  ___xxtofl@sign 000A                      returnHome@i 006D                        _TRISAbits 0F81  
             setMotorPWM@posDuty 0012                        _TRISCbits 0F83                        _TRISDbits 0F84  
                      _TRISEbits 0F85                        _TRISFbits 0F86                        _TRISGbits 0F87  
                      _TRISHbits 0F88                 convert_rgb2hue@b 00A8             ??_read_prec_or_width 000A  
               convert_rgb2hue@g 00A4                      ___fldiv@grs 003C                 convert_rgb2hue@r 00A0  
                    ___fldiv@rem 0035                 fullSpeedAhead@mL 004C                 fullSpeedAhead@mR 004D  
       color_writetoaddr@address 0005          ??_I2C_2_Master_RepStart 0003                      ___flmul@grs 001D  
                     main@factor 00B2    left90@delay_after_calibration 001D                      _CCP1CONbits 0FAB  
              ?_color_read_Clear 0006                     _EUSART4RXbuf 0182                     _EUSART4TXbuf 0100  
                    _CCP2CONbits 0FA7                ?_color_read_Green 0006       convert_rgb2hue@bluecurrent 0070  
                    _CCP3CONbits 0F26                      ?_initUSART4 0001                      _CCP4CONbits 0F22  
      sendCharSerial4@charToSend 0002                  ??_customDelayMs 0004               ??_color_read_Clear 0008  
             ??_color_read_Green 0008                   __end_of_LowISR 003A        convert_rgb2hue@redcurrent 0060  
                 __end_of___flge 3856                   __end_of___fleq 3DC2                   _fullSpeedAhead 3A2C  
                 __end_of___lmul 430E                      vfpfcnvrt@ap 0025                      vfpfcnvrt@cp 002D  
                    vfpfcnvrt@fp 0023                   __end_of___wmul 4B20                   __end_of_left90 463A  
                    ?_send2USART 004C              color_read_Clear@tmp 000B              start_initialization 44EE  
                    __end_of_abs 49E4                      __end_of_pad 3FA0                    _TxBufWriteCnt 005C  
               ?_convert_rgb2hue 004C                      ?_moveOrange 001F                      ?_moveYellow 001F  
            color_read_Green@tmp 000B                         ??_LowISR 0001          __end_of_initDCmotorsPWM 4030  
                    vfprintf@fmt 002F           __end_of_fullSpeedAhead 3AF6                         ??___flge 000A  
                       ??___fleq 000A                         ??___lmul 000A                         ??___wmul 0006  
                       ??_left90 001D                      __pdataBANK0 00F0                      ?_returnHome 0060  
                  _moveLightBlue 4862                        ___fladd@a 0006                        ___fladd@b 0002  
                      ___fldiv@a 002D                        ___fldiv@b 0029                        ___flmul@a 0014  
                      ___flmul@b 0010                      __pbssCOMRAM 005B                        ___flsub@a 0016  
                      ___flsub@b 0012                    __pcstackBANK0 0060                 ??_backOneAndHalf 001B  
              reverseStraight@mL 0051                reverseStraight@mR 0052            returnHome@action_turn 006C  
                  ??_reading_hue 0052                reverseTurn@factor 0026                       right135@mL 0019  
                     right135@mR 001A                 ___lwdiv@dividend 0008                        _dtoa$3143 001B  
                   ?_Timer0_init 0001                  ?_fullSpeedAhead 004C                         ?___aldiv 000E  
                       ?___fladd 0002                         ?___fldiv 0029                         ?___awdiv 0002  
                       ?___awmod 0002                         ?___flmul 0010                         ?___flsub 0012  
                       ?___fltol 0042                         ?___lwdiv 0008                       moveBlue@mL 001F  
                     moveBlue@mR 0020                   ?_moveLightBlue 001F                      __pintcodelo 0018  
                       ?_left135 0019                     _readingIndex 00C7             I2C_2_Master_Read@ack 0004  
           I2C_2_Master_Read@tmp 0005                      __smallconst 0E00                       movePink@mL 001F  
                     movePink@mR 0020                _I2C_2_Master_Idle 4AD2                        _logAction 430E  
              _I2C_2_Master_Init 4AA8                _I2C_2_Master_Read 46BE                         ?_right90 0019  
              _I2C_2_Master_Stop 4BBA                         ?_moveRed 001F                     _RxBufReadCnt 00C8  
                       _ADC_init 4B7C               ?_I2C_2_Master_Idle 0001               ?_I2C_2_Master_Init 0001  
             ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 0010                         ?_turn180 0019  
             ?_I2C_2_Master_Stop 0001                 ___lwdiv@quotient 000C         initDCmotorsPWM@PWMperiod 0002  
                       ?_sprintf 0032                  ___aldiv@divisor 0012                _sendStringSerial4 4A16  
            ??_I2C_2_Master_Idle 0002                  ___aldiv@counter 0016              ??_I2C_2_Master_Init 0002  
            ??_I2C_2_Master_Read 0003                   ___wmul@product 0006                         _LATAbits 0F79  
            ??_I2C_2_Master_Stop 0003                         _LATCbits 0F7B                         _LATEbits 0F7D  
                       _LATGbits 0F7F                         _LATHbits 0F80                         _IPR0bits 0E1F  
                       _PIE0bits 0E29               ?_sendStringSerial4 0003                        _moveGreen 489C  
                       _PIE4bits 0E2D              __end_of_reading_hue 3A2C                         i1u240_20 002E  
                       i1u240_21 002A                        _moveWhite 4740                      turnRight@mL 0014  
                    turnRight@mR 0015                         _PIR0bits 0E33                   decision@factor 0029  
                       _PIR4bits 0E37                 ?_initDCmotorsPWM 0002                        left135@mL 0019  
                      left135@mR 001A                ??_sendCharSerial4 0002                         _SSP2CON2 0EDA  
            ??_sendStringSerial4 0004                         _SSP2STAT 0ED8                    ??_reverseTurn 0028  
                      _vfpfcnvrt 2E5A                       _ADCON0bits 0F60        __end_of_I2C_2_Master_Idle 4AFA  
      __end_of_I2C_2_Master_Init 4AD2        __end_of_I2C_2_Master_Read 4700                ___wmul@multiplier 0002  
      __end_of_I2C_2_Master_Stop 4BC4                     setMotorPWM@m 000F      I2C_2_Master_Write@data_byte 0003  
                    _ldrReadings 016E                       ?_logAction 0002                        main@white 00B0  
              ??_color_read_Blue 0008                     _TxBufReadCnt 005B                        _turnRight 40BE  
              ___lmul@multiplier 0002        __end_of_sendStringSerial4 4A48                     moveOrange@mL 001F  
                   moveOrange@mR 0020    __end_of_I2C_2_Master_RepStart 4BD8               color_read_Blue@tmp 000B  
            __end_of_setMotorPWM 341E                     ??_initUSART4 0002                       ?_moveGreen 001F  
                     ?_moveWhite 001F                         __Hrparam 0000                    left135@factor 001B  
                     vfprintf@ap 0030                         __Lrparam 0000                       vfprintf@fp 002E  
          __end_of_fullSpeedBack 4230                  ??_moveLightBlue 0023                     moveYellow@mL 001F  
                   moveYellow@mR 0020                       ?_vfpfcnvrt 0023                         _backHalf 4A48  
                   ??_send2USART 004E                       _ANSELDbits 0EA7                       _ANSELFbits 0EB4  
                       _dataFlag 00F0                       sprintf@fmt 0033                         ___xxtofl 2CA6  
                     _T0CON0bits 0FD5                       _T0CON1bits 0FD6      calibration_colors@cal_state 0092  
                       _decision 27A4              __end_of_reverseTurn 3540                        right90@mL 0019  
                      right90@mR 001A                  ___lwdiv@divisor 000A               __end_of_initUSART4 4B5E  
                ___lwdiv@counter 000E                       ?_turnRight 0014                         __ptext10 44A8  
                       __ptext11 1B20                         __ptext20 3540                         __ptext12 1FE0  
                       __ptext21 27A4                         __ptext13 3752                         __ptext30 4862  
                       __ptext22 477A                         __ptext14 3D18                         __ptext31 45B6  
                       __ptext23 47B4                         __ptext15 240A                         __ptext40 41BA  
                       __ptext32 489C                         __ptext24 4532                         __ptext16 4B40  
                       __ptext41 32CA                         __ptext33 45F8                         __ptext25 47EE  
                       __ptext17 3FA0                         __ptext50 467C                         __ptext42 4230  
                       __ptext34 48D6                         __ptext26 49E4                         __ptext18 3E6C  
                       __ptext51 2E5A                         __ptext43 430E                         __ptext35 463A  
                       __ptext27 4828                         __ptext19 42A4                         __ptext60 3BBA  
                       __ptext52 3C6A                         __ptext44 4948                         __ptext36 413C  
                       __ptext28 4574                         __ptext61 3AF6                         __ptext53 4AFA  
                       __ptext45 4B20                         __ptext37 4910                         __ptext29 40BE  
                       __ptext70 4BC4                         __ptext62 4A16                         __ptext54 2FE2  
                       __ptext46 4AA8                         __ptext38 4A48                         __ptext71 4BCE  
                       __ptext63 4B96                         __ptext55 3F0A                         __ptext47 2A60  
                       __ptext39 4030                         __ptext72 46BE                         __ptext64 4368  
                       __ptext56 4700                         __ptext48 4B5E                         __ptext73 4AD2  
                       __ptext65 43B8                         __ptext57 3DC2                         __ptext49 497C  
                       __ptext74 4A78                         __ptext66 4408                         __ptext58 4BD8  
                       __ptext75 4B7C                         __ptext67 4458                         __ptext59 49B0  
                       __ptext68 4BAE                         __ptext69 4BBA                      decision@hue 0025  
                      moveRed@mL 001F                        moveRed@mR 0020                     _SSP2CON1bits 0ED9  
                   _SSP2CON2bits 0EDA                      _reading_hue 3942                    reverseTurn@mL 001F  
                  reverseTurn@mR 0020                     ??_moveOrange 0023                       turnLeft@mL 0014  
                     turnLeft@mR 0015                     ??_moveYellow 0023               __end_of_send2USART 4B7C  
                       _right135 4574                         _moveBlue 48D6                         _movePink 47EE  
                     turnRight@i 0017            __end_of_customDelayMs 4948                         isa$xinst 0000  
                       left90@mL 0019                         left90@mR 001A                       _RC4STAbits 0EE7  
              returnHome@time_ms 0068                         int$flags 005D                         _vfprintf 467C  
                 moveBlue@factor 0021                     ??_returnHome 0066                         _turnLeft 413C  
right135@delay_after_calibration 001D                        turn180@mL 0019                        turn180@mR 001A  
                    ??_logAction 0008                       _INTCONbits 0FF2                   customDelayMs@i 0005  
             __end_of_moveOrange 4862               __end_of_moveYellow 47B4                      _setMotorPWM 32CA  
              ??_get16bitTMR0val 001E                         intlevel1 0000                        sprintf@ap 0038  
              decision@path_step 0027                ??_reverseStraight 0057                 ??_fullSpeedAhead 004E  
  get16bitTMR0val@combined_value 0026               __end_of_returnHome 32CA                      ??_moveGreen 0023  
               returnHome@factor 0064                        turnLeft@i 0017                      ??_moveWhite 0023  
               moveYellow@factor 0021      convert_rgb2hue@clearcurrent 0078                    send2USART@hue 004C  
                    ??_vfpfcnvrt 0026                      _reverseTurn 341E                  moveGreen@factor 0021  
               _color_click_init 4948                         sprintf@f 0039                         sprintf@s 0032  
                   left90@factor 001B       __end_of_calibration_colors 2CA6                       _SSP2DATPPS 0E1D  
                     _SSP2CLKPPS 0E1C                     ___aldiv@sign 0017                      ??_turnRight 0016  
                  ___fladd@signs 000E                       _TX4STAbits 0EE8                  _sendCharSerial4 4B96  
                   ___fladd@aexp 000F                     ___fladd@bexp 0010                     returnHome@mL 0060  
                   returnHome@mR 0061  
